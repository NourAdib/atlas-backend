var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/$npmConfigName1672082558971.html",[0,0.259,1,3.737]],["body/classes/$npmConfigName1672082558971.html",[0,0.325,1,6.883,2,0.91,3,0.087,4,0.087,5,0.068,6,7.507,7,1.445,8,1.802,9,2.058,10,0.216,11,0.734,12,1.1,13,1.024,14,2.199,15,1.528,16,1.837,17,1.734,18,0.317,19,0.007,20,0.445,21,1.085,22,1.106,23,0.377,24,1.473,25,1.872,26,2.372,27,2.651,28,0.982,29,0.962,30,1.003,31,1.658,32,1.872,33,1.473,34,0.096,35,0.823,36,0.077,37,1.327,38,1.909,39,1.638,40,1.046,41,1.623,42,4.188,43,2.176,44,1.531,45,1.623,46,1.561,47,0.006,48,0.006]],["title/classes/$npmConfigName1672082713679.html",[0,0.259,49,3.737]],["body/classes/$npmConfigName1672082713679.html",[0,0.304,2,0.85,3,0.081,4,0.081,5,0.063,7,1.35,8,1.724,9,1.993,10,0.202,11,0.702,12,1.077,13,0.98,14,2.16,15,1.501,16,1.758,17,1.66,18,0.306,19,0.007,20,0.416,21,1.014,22,1.034,23,0.365,24,1.376,25,1.792,26,2.343,28,0.94,29,0.921,30,0.96,31,1.616,32,1.792,33,1.376,34,0.09,35,0.769,36,0.072,37,1.591,38,2.288,39,1.963,40,1.253,41,1.975,42,4.008,43,3.118,44,2.194,45,1.975,46,1.899,47,0.005,48,0.005,49,6.709,50,7.317,51,3.475,52,4.333,53,4.271]],["title/classes/$npmConfigName1672133224744.html",[0,0.259,54,3.737]],["body/classes/$npmConfigName1672133224744.html",[0,0.29,2,0.812,3,0.077,4,0.077,5,0.061,7,1.288,8,1.672,9,1.948,10,0.193,11,0.681,12,1.061,13,0.951,14,2.132,15,1.482,16,1.705,17,1.609,18,0.319,19,0.007,20,0.397,21,1.435,22,0.986,23,0.356,24,1.313,25,1.738,26,2.322,28,0.912,29,0.893,30,0.931,31,1.587,32,1.738,33,1.313,34,0.086,35,0.733,36,0.069,37,1.47,38,1.771,39,1.813,41,1.447,43,3.272,44,2.436,45,1.447,47,0.005,48,0.005,54,6.588,55,7.185,56,3.316,57,2.655,58,1.848,59,2.655,60,3.887,61,4.357,62,2.835,63,2.753,64,1.549,65,3.307,66,3.477,67,2.835,68,4.173,69,3.05,70,2.574,71,6.023,72,2.835,73,3.324,74,2.835,75,2.363,76,6.023,77,3.127,78,2.363,79,2.574,80,2.031,81,3.044,82,2.655]],["title/classes/$npmConfigName1672166137042.html",[0,0.259,83,3.737]],["body/classes/$npmConfigName1672166137042.html",[0,0.322,2,0.901,3,0.086,4,0.086,5,0.067,7,1.43,8,1.789,9,2.048,10,0.214,11,0.729,12,1.097,13,1.017,14,2.193,15,1.524,16,1.824,17,1.722,18,0.315,19,0.007,20,0.44,21,1.37,22,1.095,23,0.375,24,1.457,25,1.86,26,2.368,27,2.623,28,0.976,29,0.955,30,0.996,31,1.652,32,1.86,33,1.457,34,0.095,35,0.814,36,0.077,37,1.318,38,1.896,39,1.627,43,2.746,44,1.933,47,0.006,48,0.006,52,4.496,58,1.658,67,4.658,83,6.856,84,7.478]],["title/classes/$npmConfigName1672251740346.html",[0,0.259,85,3.737]],["body/classes/$npmConfigName1672251740346.html",[0,0.274,2,0.768,3,0.073,4,0.073,5,0.057,7,1.218,8,1.611,9,1.894,10,0.182,11,0.656,12,1.042,13,0.916,14,2.098,15,1.458,16,1.642,17,1.551,18,0.291,19,0.007,20,0.375,21,1.396,22,0.933,23,0.347,24,1.242,25,1.674,26,2.296,28,0.879,29,0.86,30,0.897,31,1.552,32,1.674,33,1.242,34,0.081,35,0.694,36,0.065,37,1.606,38,2.223,39,1.982,41,2.087,43,2.797,44,2.355,45,2.087,46,1.316,47,0.005,48,0.005,57,2.511,58,1.807,59,2.511,60,3.745,61,4.237,62,2.682,63,3,64,1.493,65,3.605,66,3.289,69,2.885,70,2.435,72,2.682,73,3.612,74,2.682,75,3.013,77,3.648,78,3.013,79,2.435,80,2.59,81,3.551,82,2.511,85,6.442,86,7.027,87,3.289,88,4.377,89,4.048,90,6.565,91,5.804,92,6.536,93,4.849]],["title/classes/$npmConfigName1672388811259.html",[0,0.259,94,3.737]],["body/classes/$npmConfigName1672388811259.html",[0,0.243,2,0.679,3,0.065,4,0.065,5,0.051,7,1.078,8,1.482,9,1.777,10,0.161,11,0.603,12,0.998,13,0.842,14,2.021,15,1.405,16,1.51,17,1.426,18,0.273,19,0.007,20,0.332,21,0.81,22,0.826,23,0.325,24,1.099,25,1.54,26,2.236,28,0.808,29,0.791,30,0.825,31,1.474,32,1.54,33,1.099,34,0.072,35,0.614,36,0.058,37,1.681,38,2.356,39,2.074,40,1.075,41,2.315,43,2.843,44,2.355,45,2.315,46,1.632,47,0.005,48,0.005,57,3.113,58,1.717,63,3.05,64,1.717,65,3.998,72,3.324,73,3.867,74,3.324,75,3.464,77,3.96,78,3.464,79,3.018,80,2.978,81,3.855,82,3.113,94,6.118,95,6.673,96,4.292,97,5.373,98,3.018,99,4.562,100,6.673,101,5.373,102,6.676,103,5.337,104,5.337,105,3.811,106,5.337,107,5.337,108,3.811]],["title/classes/$npmConfigName1672399737695.html",[0,0.259,109,3.737]],["body/classes/$npmConfigName1672399737695.html",[0,0.276,2,0.772,3,0.074,4,0.074,5,0.058,7,1.225,8,1.617,9,1.899,10,0.183,11,0.659,12,1.044,13,0.919,14,2.101,15,1.461,16,1.648,17,1.556,18,0.292,19,0.007,20,0.377,21,1.238,22,0.938,23,0.347,24,1.249,25,1.68,26,2.298,28,0.882,29,0.863,30,0.9,31,1.555,32,1.68,33,1.249,34,0.082,35,0.697,36,0.066,37,1.647,38,2.368,39,2.032,41,2.239,43,2.482,44,2.112,45,2.239,46,1.781,47,0.005,48,0.005,52,4.063,58,1.811,63,2.662,65,3.199,73,3.467,75,3.024,77,3.656,78,3.024,80,2.599,81,3.559,97,6.094,98,3.983,102,6.036,104,5.825,105,4.329,109,6.457,110,7.042,111,4.875,112,6.584,113,3.306,114,3.7,115,5.825,116,3.485]],["title/classes/$npmConfigName1672417201262.html",[0,0.259,117,3.737]],["body/classes/$npmConfigName1672417201262.html",[0,0.286,2,0.802,3,0.076,4,0.076,5,0.06,7,1.273,8,1.66,9,1.937,10,0.19,11,0.676,12,1.057,13,0.944,14,2.125,15,1.477,16,1.692,17,1.597,18,0.298,19,0.007,20,0.392,21,0.957,22,0.975,23,0.354,24,1.298,25,1.725,26,2.316,28,0.905,29,0.886,30,0.924,31,1.58,32,1.725,33,1.298,34,0.085,35,0.725,36,0.068,37,1.622,38,2.333,39,2.002,40,1.153,41,2.274,44,1.792,45,2.274,46,1.828,47,0.005,48,0.005,63,2.732,65,3.283,73,3.522,75,3.103,77,3.713,78,3.103,79,2.545,80,2.668,81,3.615,87,3.437,101,5.759,102,6.155,107,5.978,108,4.5,117,6.558,118,7.153,119,6.713,120,5.978]],["title/classes/$npmConfigName1672417384470.html",[0,0.259,121,3.737]],["body/classes/$npmConfigName1672417384470.html",[0,0.321,2,0.899,3,0.086,4,0.086,5,0.067,7,1.427,8,1.787,9,2.046,10,0.213,11,0.728,12,1.096,13,1.016,14,2.192,15,1.523,16,1.822,17,1.72,18,0.315,19,0.007,20,0.439,21,1.368,22,1.092,23,0.374,24,1.454,25,1.857,26,2.367,27,2.617,28,0.974,29,0.954,30,0.995,31,1.65,32,1.857,33,1.454,34,0.095,35,0.812,36,0.076,37,1.317,38,1.893,39,1.625,43,2.743,44,1.93,47,0.006,48,0.006,52,4.49,98,4.226,101,5.183,113,3.851,114,4.309,121,6.85,122,7.472]],["title/classes/$npmConfigName1672576067204.html",[0,0.259,123,3.737]],["body/classes/$npmConfigName1672576067204.html",[0,0.301,2,0.842,3,0.08,4,0.08,5,0.063,7,1.336,8,1.713,9,1.983,10,0.2,11,0.698,12,1.074,13,0.974,14,2.154,15,1.497,16,1.746,17,1.649,18,0.305,19,0.007,20,0.412,21,1.312,22,1.023,23,0.363,24,1.362,25,1.78,26,2.338,28,0.934,29,0.915,30,0.954,31,1.61,32,1.78,33,1.362,34,0.089,35,0.761,36,0.072,37,1.491,38,1.815,39,1.84,41,1.501,43,2.012,44,2.268,45,1.501,47,0.005,48,0.005,56,3.44,57,2.754,63,2.158,64,1.587,65,3.389,72,2.941,73,3.385,74,2.941,75,2.451,77,3.204,78,2.451,79,2.671,80,2.107,81,3.119,82,2.754,98,2.671,123,6.683,124,7.289,125,6.683,126,4.036,127,4.722,128,5.658,129,4.722,130,6.171,131,6.171]],["title/classes/$npmConfigName1672585305519.html",[0,0.259,132,3.737]],["body/classes/$npmConfigName1672585305519.html",[0,0.325,2,0.91,3,0.087,4,0.087,5,0.068,7,1.445,8,1.802,9,2.058,10,0.216,11,0.734,12,1.1,13,1.024,14,2.199,15,1.528,16,1.837,17,1.734,18,0.317,19,0.007,20,0.445,21,1.085,22,1.106,23,0.377,24,1.473,25,1.872,26,2.372,27,2.651,28,0.982,29,0.962,30,1.003,31,1.658,32,1.872,33,1.473,34,0.096,35,0.823,36,0.077,37,1.327,38,1.909,39,1.638,41,1.623,44,1.531,45,1.623,46,1.561,47,0.006,48,0.006,58,1.669,132,6.883,133,7.507,134,4.527,135,4.111]],["title/classes/$npmConfigName1672600378154.html",[0,0.259,136,3.737]],["body/classes/$npmConfigName1672600378154.html",[0,0.325,2,0.91,3,0.087,4,0.087,5,0.068,7,1.445,8,1.802,9,2.058,10,0.216,11,0.734,12,1.1,13,1.024,14,2.199,15,1.528,16,1.837,17,1.734,18,0.317,19,0.007,20,0.445,21,1.085,22,1.106,23,0.377,24,1.473,25,1.872,26,2.372,27,2.651,28,0.982,29,0.962,30,1.003,31,1.658,32,1.872,33,1.473,34,0.096,35,0.823,36,0.077,37,1.327,38,1.909,39,1.638,40,1.046,41,1.623,43,2.176,44,1.531,45,1.623,46,1.561,47,0.006,48,0.006,136,6.883,137,7.507,138,5.547]],["title/classes/$npmConfigName1672678196724.html",[0,0.259,139,3.737]],["body/classes/$npmConfigName1672678196724.html",[0,0.312,2,0.873,3,0.083,4,0.083,5,0.065,7,1.386,8,1.754,9,2.018,10,0.207,11,0.714,12,1.086,13,0.997,14,2.175,15,1.512,16,1.788,17,1.688,18,0.31,19,0.007,20,0.427,21,1.343,22,1.061,23,0.369,24,1.413,25,1.823,26,2.354,28,0.956,29,0.936,30,0.977,31,1.633,32,1.823,33,1.413,34,0.092,35,0.789,36,0.074,37,1.512,38,2.174,39,1.865,40,1.018,41,1.557,43,2.692,44,2.097,45,1.557,46,1.497,47,0.005,48,0.005,52,4.407,56,3.567,58,1.625,134,4.407,135,3.942,138,6.317,139,6.776,140,7.391,141,3.416]],["title/classes/$npmConfigName1672744437528.html",[0,0.259,142,3.737]],["body/classes/$npmConfigName1672744437528.html",[0,0.32,2,0.897,3,0.085,4,0.085,5,0.067,7,1.424,8,1.785,9,2.044,10,0.213,11,0.727,12,1.095,13,1.015,14,2.19,15,1.522,16,1.819,17,1.718,18,0.314,19,0.007,20,0.438,21,1.367,22,1.09,23,0.374,24,1.451,25,1.855,26,2.366,27,2.611,28,0.973,29,0.953,30,0.994,31,1.649,32,1.855,33,1.451,34,0.095,35,0.811,36,0.076,37,1.315,38,1.891,39,1.622,40,1.036,41,1.599,43,2.143,44,1.508,45,1.599,46,1.538,47,0.006,48,0.006,142,6.845,143,7.466,144,5.495,145,5.031,146,5.031,147,5.031,148,5.031,149,5.031,150,5.031]],["title/classes/$npmConfigName1672760070076.html",[0,0.259,151,3.737]],["body/classes/$npmConfigName1672760070076.html",[0,0.306,2,0.857,3,0.082,4,0.082,5,0.064,7,1.361,8,1.733,9,2,10,0.203,11,0.706,12,1.08,13,0.986,14,2.164,15,1.504,16,1.767,17,1.668,18,0.308,19,0.007,20,0.419,21,1.56,22,1.042,23,0.366,24,1.387,25,1.801,26,2.346,28,0.945,29,0.925,30,0.965,31,1.621,32,1.801,33,1.387,34,0.091,35,0.775,36,0.073,37,1.501,38,2.159,39,1.852,40,1.183,41,1.529,43,2.66,44,2.079,45,1.529,46,1.47,47,0.005,48,0.005,52,4.355,56,3.503,144,6.274,145,4.808,146,4.808,147,4.808,148,4.808,149,4.808,150,4.808,151,6.729,152,7.34,153,5.725,154,3.354,155,3.354]],["title/classes/$npmConfigName1672832148243.html",[0,0.259,156,3.737]],["body/classes/$npmConfigName1672832148243.html",[0,0.293,2,0.821,3,0.078,4,0.078,5,0.061,7,1.303,8,1.685,9,1.959,10,0.195,11,0.686,12,1.065,13,0.958,14,2.139,15,1.486,16,1.718,17,1.622,18,0.301,19,0.007,20,0.401,21,1.534,22,0.998,23,0.358,24,1.328,25,1.751,26,2.327,28,0.919,29,0.9,30,0.938,31,1.594,32,1.751,33,1.328,34,0.087,35,0.742,36,0.07,37,1.631,38,2.345,39,2.012,41,2.295,43,2.586,44,2.164,45,2.295,46,2.207,47,0.005,48,0.005,58,2.051,67,4.496,87,3.517,154,3.212,155,3.212,156,6.618,157,7.218,158,4.234,159,4.421,160,3.354]],["title/classes/$npmConfigName1672833410692.html",[0,0.259,161,3.737]],["body/classes/$npmConfigName1672833410692.html",[0,0.322,2,0.901,3,0.086,4,0.086,5,0.067,7,1.43,8,1.789,9,2.048,10,0.214,11,0.729,12,1.097,13,1.017,14,2.193,15,1.524,16,1.824,17,1.722,18,0.315,19,0.007,20,0.44,21,1.37,22,1.095,23,0.375,24,1.457,25,1.86,26,2.368,27,2.623,28,0.976,29,0.955,30,0.996,31,1.652,32,1.86,33,1.457,34,0.095,35,0.814,36,0.077,37,1.318,38,1.896,39,1.627,44,1.933,47,0.006,48,0.006,52,4.496,58,1.658,134,5.216,135,5.19,161,6.856,162,7.478,163,2.487]],["title/classes/$npmConfigName1673022319464.html",[0,0.259,164,3.737]],["body/classes/$npmConfigName1673022319464.html",[0,0.29,2,0.812,3,0.077,4,0.077,5,0.061,7,1.288,8,1.672,9,1.948,10,0.193,11,0.681,12,1.061,13,0.951,14,2.132,15,1.482,16,1.705,17,1.609,18,0.3,19,0.007,20,0.397,21,0.967,22,0.986,23,0.356,24,1.313,25,1.738,26,2.322,28,0.912,29,0.893,30,0.931,31,1.587,32,1.738,33,1.313,34,0.086,35,0.733,36,0.069,37,1.571,38,2.113,39,1.938,41,1.915,43,1.939,44,2.154,45,1.915,47,0.005,48,0.005,51,3.316,57,2.655,63,2.753,64,1.549,65,3.707,72,2.835,73,3.68,74,2.835,75,3.127,77,3.73,78,3.127,79,2.574,80,2.688,81,3.631,82,2.655,116,3.664,164,6.588,165,7.185,166,4.783,167,2.655,168,6.023,169,3.887,170,6.023,171,6.023]],["title/classes/$npmConfigName1673025398979.html",[0,0.259,172,3.737]],["body/classes/$npmConfigName1673025398979.html",[0,0.311,2,0.871,3,0.083,4,0.083,5,0.065,7,1.383,8,1.752,9,2.016,10,0.207,11,0.713,12,1.086,13,0.996,14,2.174,15,1.511,16,1.786,17,1.686,18,0.31,19,0.007,20,0.426,21,1.485,22,1.059,23,0.369,24,1.41,25,1.82,26,2.353,28,0.955,29,0.935,30,0.975,31,1.631,32,1.82,33,1.41,34,0.092,35,0.787,36,0.074,37,1.511,38,2.172,39,1.864,41,2.006,44,1.892,45,2.006,46,1.929,47,0.005,48,0.005,56,3.56,59,3.68,60,4.072,61,4.51,62,3.93,63,2.233,166,4.6,172,6.771,173,7.385]],["title/classes/$npmConfigName1673027114310.html",[0,0.259,174,3.737]],["body/classes/$npmConfigName1673027114310.html",[0,0.277,2,0.776,3,0.074,4,0.074,5,0.058,7,1.232,8,1.623,9,1.904,10,0.184,11,0.661,12,1.045,13,0.923,14,2.105,15,1.463,16,1.654,17,1.562,18,0.293,19,0.007,20,0.379,21,0.925,22,0.943,23,0.348,24,1.256,25,1.687,26,2.301,28,0.885,29,0.866,30,0.904,31,1.559,32,1.687,33,1.256,34,0.082,35,0.701,36,0.066,37,1.61,38,2.316,39,1.987,41,2.244,45,2.244,47,0.005,48,0.005,63,3.225,73,3.877,75,3.664,77,4.087,78,3.664,80,3.15,81,3.832,87,3.325,97,5.683,112,5.846,115,7.058,116,5.683,166,4.396,169,3.773,171,7.058,174,6.471,175,7.058,176,2.806]],["title/classes/$npmConfigName1673177373733.html",[0,0.259,177,3.737]],["body/classes/$npmConfigName1673177373733.html",[0,0.271,2,0.759,3,0.072,4,0.072,5,0.057,7,1.205,8,1.6,9,1.884,10,0.18,11,0.651,12,1.038,13,0.909,14,2.091,15,1.454,16,1.63,17,1.54,18,0.29,19,0.007,20,0.371,21,1.637,22,0.923,23,0.345,24,1.229,25,1.662,26,2.291,28,0.872,29,0.854,30,0.891,31,1.545,32,1.662,33,1.229,34,0.08,35,0.686,36,0.064,37,1.669,38,2.4,39,2.06,41,2.395,44,2.259,45,2.395,46,2.303,47,0.005,48,0.005,59,4.394,60,4.862,61,5.124,62,4.692,63,2.984,97,5.633,101,5.633,125,6.414,177,6.414,178,6.996,179,3.905]],["title/classes/$npmConfigName1673337064308.html",[0,0.259,180,3.737]],["body/classes/$npmConfigName1673337064308.html",[0,0.322,2,0.901,3,0.086,4,0.086,5,0.067,7,1.43,8,1.789,9,2.048,10,0.214,11,0.729,12,1.097,13,1.017,14,2.193,15,1.524,16,1.824,17,1.722,18,0.315,19,0.007,20,0.44,21,1.37,22,1.095,23,0.375,24,1.457,25,1.86,26,2.368,27,2.623,28,0.976,29,0.955,30,0.996,31,1.652,32,1.86,33,1.457,34,0.095,35,0.814,36,0.077,37,1.318,38,1.896,39,1.627,40,1.039,43,2.746,44,1.933,47,0.006,48,0.006,52,4.496,180,6.856,181,7.478,182,6.856]],["title/classes/$npmConfigName1673770456243.html",[0,0.259,183,3.737]],["body/classes/$npmConfigName1673770456243.html",[0,0.279,2,0.78,3,0.074,4,0.074,5,0.058,7,1.238,8,1.629,9,1.91,10,0.185,11,0.663,12,1.047,13,0.926,14,2.108,15,1.465,16,1.661,17,1.568,18,0.294,19,0.007,20,0.381,21,1.504,22,0.948,23,0.349,24,1.262,25,1.693,26,2.303,28,0.888,29,0.87,30,0.907,31,1.562,32,1.693,33,1.262,34,0.082,35,0.705,36,0.066,37,1.553,38,2.08,39,1.916,41,1.866,43,2.821,44,2.364,45,1.866,47,0.005,48,0.005,51,3.188,57,2.552,59,2.552,60,3.787,61,4.272,62,2.726,63,3.025,64,1.509,65,3.635,72,2.726,73,3.632,74,2.726,75,3.046,77,3.672,78,3.046,79,2.475,80,2.619,81,3.346,82,2.552,98,2.475,113,3.343,114,3.74,116,3.523,167,2.552,176,2.101,183,6.485,184,7.073,185,4.73,186,3.188,187,6.609,188,5.868,189,6.609,190,5.868]],["title/classes/$npmConfigName1673847605869.html",[0,0.259,191,3.737]],["body/classes/$npmConfigName1673847605869.html",[0,0.285,2,0.798,3,0.076,4,0.076,5,0.06,7,1.266,8,1.653,9,1.931,10,0.189,11,0.673,12,1.055,13,0.94,14,2.122,15,1.475,16,1.685,17,1.591,18,0.297,19,0.007,20,0.39,21,1.423,22,0.97,23,0.353,24,1.291,25,1.718,26,2.314,28,0.902,29,0.883,30,0.921,31,1.576,32,1.718,33,1.291,34,0.084,35,0.721,36,0.068,37,1.563,38,2.099,39,1.929,41,1.894,44,2.228,45,1.894,47,0.005,48,0.005,51,3.26,57,2.61,59,2.61,60,3.844,61,4.32,62,2.787,63,3.059,64,1.532,65,3.676,72,2.787,73,3.659,74,2.787,75,3.092,77,3.705,78,3.092,79,3.368,80,2.658,81,3.607,82,2.61,191,6.543,192,7.137,193,4.603,194,5.956,195,5.956,196,5.956,197,5.956]],["title/classes/$npmConfigName1673974513613.html",[0,0.259,198,3.737]],["body/classes/$npmConfigName1673974513613.html",[0,0.245,2,0.687,3,0.065,4,0.065,5,0.051,7,1.091,8,1.493,9,1.788,10,0.163,11,0.608,12,1.002,13,0.849,14,2.029,15,1.41,16,1.522,17,1.437,18,0.275,19,0.007,20,0.336,21,1.553,22,0.835,23,0.327,24,1.112,25,1.552,26,2.242,28,0.814,29,0.797,30,0.832,31,1.481,32,1.552,33,1.112,34,0.073,35,0.621,36,0.058,37,1.642,38,2.25,39,2.026,41,2.132,43,1.642,44,2.385,45,2.132,47,0.005,48,0.005,57,3.137,59,3.137,60,4.328,61,4.716,62,3.35,63,3.339,64,1.725,65,4.012,72,3.35,73,3.876,74,3.35,75,3.481,77,3.971,78,3.481,79,3.793,80,2.993,81,3.866,82,3.137,98,2.18,113,2.944,179,3.533,198,6.148,199,6.706,200,4.716,201,5.379,202,5.379,203,7.307,204,5.379,205,5.379,206,5.379,207,5.379,208,5.379,209,5.379]],["title/classes/$npmConfigName1674121256550.html",[0,0.259,210,3.737]],["body/classes/$npmConfigName1674121256550.html",[0,0.324,2,0.907,3,0.086,4,0.086,5,0.068,7,1.439,8,1.797,9,2.054,10,0.215,11,0.732,12,1.099,13,1.022,14,2.197,15,1.527,16,1.832,17,1.729,18,0.316,19,0.007,20,0.443,21,1.376,22,1.102,23,0.376,24,1.467,25,1.867,26,2.37,27,2.639,28,0.98,29,0.959,30,1.001,31,1.656,32,1.867,33,1.467,34,0.096,35,0.819,36,0.077,37,1.324,38,1.903,39,1.633,40,1.043,41,1.616,43,2.166,44,1.524,45,1.616,46,1.554,47,0.006,48,0.006,210,6.872,211,7.495,212,5.532]],["title/classes/$npmConfigName1674198387677.html",[0,0.259,213,3.737]],["body/classes/$npmConfigName1674198387677.html",[0,0.324,2,0.908,3,0.087,4,0.087,5,0.068,7,1.442,8,1.799,9,2.056,10,0.216,11,0.733,12,1.1,13,1.023,14,2.198,15,1.527,16,1.834,17,1.732,18,0.316,19,0.007,20,0.444,21,1.378,22,1.104,23,0.376,24,1.47,25,1.87,26,2.371,27,2.645,28,0.981,29,0.961,30,1.002,31,1.657,32,1.87,33,1.47,34,0.096,35,0.821,36,0.077,37,1.326,38,1.906,39,1.636,40,1.044,41,1.62,43,2.171,44,1.528,45,1.62,46,1.558,47,0.006,48,0.006,213,6.877,214,7.501,215,5.539]],["title/classes/$npmConfigName1674453163372.html",[0,0.259,216,3.737]],["body/classes/$npmConfigName1674453163372.html",[0,0.324,2,0.907,3,0.086,4,0.086,5,0.068,7,1.439,8,1.797,9,2.054,10,0.215,11,0.732,12,1.099,13,1.022,14,2.197,15,1.527,16,1.832,17,1.729,18,0.316,19,0.007,20,0.443,21,1.376,22,1.102,23,0.376,24,1.467,25,1.867,26,2.37,27,2.639,28,0.98,29,0.959,30,1.001,31,1.656,32,1.867,33,1.467,34,0.096,35,0.819,36,0.077,37,1.324,38,1.903,39,1.633,40,1.043,41,1.616,44,1.524,45,1.616,46,1.554,47,0.006,48,0.006,135,4.093,163,2.503,216,6.872,217,7.495,218,5.532]],["title/classes/$npmConfigName1674486373359.html",[0,0.259,219,3.737]],["body/classes/$npmConfigName1674486373359.html",[0,0.288,2,0.807,3,0.077,4,0.077,5,0.06,7,1.281,8,1.666,9,1.942,10,0.191,11,0.678,12,1.059,13,0.947,14,2.128,15,1.479,16,1.698,17,1.603,18,0.299,19,0.007,20,0.394,21,1.431,22,0.981,23,0.355,24,1.305,25,1.731,26,2.319,28,0.908,29,0.889,30,0.928,31,1.584,32,1.731,33,1.305,34,0.085,35,0.729,36,0.069,37,1.568,38,2.108,39,1.935,41,1.908,44,2.237,45,1.908,47,0.005,48,0.005,51,3.297,57,2.639,59,2.639,60,3.872,61,4.345,62,2.819,63,3.077,64,1.543,65,3.697,72,2.819,73,3.673,74,2.819,75,3.115,77,3.722,78,3.115,79,2.56,80,2.678,81,3.402,82,2.639,116,3.644,176,2.172,219,6.573,220,7.169,221,6.758,222,6.001,223,6.758,224,6.001]],["title/classes/$npmConfigName1674487677914.html",[0,0.259,225,3.737]],["body/classes/$npmConfigName1674487677914.html",[0,0.324,2,0.907,3,0.086,4,0.086,5,0.068,7,1.439,8,1.797,9,2.054,10,0.215,11,0.732,12,1.099,13,1.022,14,2.197,15,1.527,16,1.832,17,1.729,18,0.316,19,0.007,20,0.443,21,1.376,22,1.102,23,0.376,24,1.467,25,1.867,26,2.37,27,2.639,28,0.98,29,0.959,30,1.001,31,1.656,32,1.867,33,1.467,34,0.096,35,0.819,36,0.077,37,1.324,38,1.903,39,1.633,41,1.616,44,1.524,45,1.616,46,1.554,47,0.006,48,0.006,58,1.665,163,2.503,225,6.872,226,7.495,227,6.472,228,4.093]],["title/classes/$npmConfigName1674493007150.html",[0,0.259,229,3.737]],["body/classes/$npmConfigName1674493007150.html",[0,0.13,2,0.364,3,0.035,4,0.035,5,0.027,7,0.578,8,0.923,9,1.212,10,0.086,11,0.376,12,0.756,13,0.525,14,1.585,15,1.102,16,0.941,17,0.888,18,0.186,19,0.006,20,0.178,21,0.434,22,0.443,23,0.222,24,0.59,25,0.959,26,1.871,28,0.503,29,0.493,30,0.514,31,1.069,32,0.959,33,0.59,34,0.039,35,0.329,36,0.031,37,1.724,38,2.479,39,2.128,41,2.546,45,2.546,47,0.003,48,0.003,58,1.245,63,3.659,71,3.324,73,4.151,75,4.156,76,4.841,77,4.377,78,4.156,79,4.528,80,3.573,81,4.187,88,3.015,89,2.319,91,4.841,97,3.897,100,4.841,101,5.049,103,4.841,106,4.841,119,3.324,120,4.841,125,4.438,130,3.324,131,4.841,166,3.015,168,3.324,170,4.841,176,3.492,185,3.015,188,3.324,190,4.841,193,3.777,194,3.324,195,3.324,196,4.841,197,4.841,200,4.047,201,3.324,202,3.324,203,6.271,204,3.324,205,3.324,206,4.841,207,4.841,208,4.841,209,4.841,222,3.324,224,4.841,229,4.438,230,4.841,231,2.301]],["title/classes/$npmConfigName1674544597118.html",[0,0.259,232,3.737]],["body/classes/$npmConfigName1674544597118.html",[0,0.302,2,0.845,3,0.081,4,0.081,5,0.063,7,1.342,8,1.718,9,1.987,10,0.201,11,0.699,12,1.075,13,0.977,14,2.156,15,1.499,16,1.751,17,1.653,18,0.306,19,0.007,20,0.413,21,1.552,22,1.027,23,0.364,24,1.368,25,1.785,26,2.34,28,0.937,29,0.917,30,0.956,31,1.613,32,1.785,33,1.368,34,0.089,35,0.764,36,0.072,37,1.589,38,2.284,39,1.96,40,1.251,41,2.19,43,2.636,44,2.065,45,2.19,46,2.106,47,0.005,48,0.005,51,3.454,135,3.817,163,2.334,232,6.693,233,7.3,234,5.673,235,5.673,236,4.146,237,4.741]],["title/classes/$npmConfigName1675177507147.html",[0,0.259,238,3.737]],["body/classes/$npmConfigName1675177507147.html",[0,0.302,2,0.845,3,0.081,4,0.081,5,0.063,7,1.342,8,1.718,9,1.987,10,0.201,11,0.699,12,1.075,13,0.977,14,2.156,15,1.499,16,1.751,17,1.653,18,0.306,19,0.007,20,0.413,21,1.552,22,1.027,23,0.364,24,1.368,25,1.785,26,2.34,28,0.937,29,0.917,30,0.956,31,1.613,32,1.785,33,1.368,34,0.089,35,0.764,36,0.072,37,1.589,38,2.284,39,1.96,40,1.251,41,2.19,43,2.02,44,2.065,45,2.19,46,2.106,47,0.005,48,0.005,51,3.454,163,3.046,228,4.982,238,6.693,239,7.3,240,6.187,241,6.187,242,5.673]],["title/classes/$npmConfigName1676616826310.html",[0,0.259,243,3.737]],["body/classes/$npmConfigName1676616826310.html",[0,0.286,2,0.801,3,0.076,4,0.076,5,0.06,7,1.271,8,1.658,9,1.935,10,0.19,11,0.675,12,1.057,13,0.942,14,2.124,15,1.476,16,1.69,17,1.595,18,0.298,19,0.007,20,0.391,21,1.582,22,0.973,23,0.354,24,1.296,25,1.722,26,2.316,28,0.904,29,0.885,30,0.923,31,1.579,32,1.722,33,1.296,34,0.085,35,0.724,36,0.068,37,1.462,38,1.756,39,1.804,41,1.428,43,2.858,44,2.451,45,1.428,47,0.005,48,0.005,56,3.272,57,2.62,59,2.62,60,3.853,61,4.328,62,2.798,63,2.729,64,1.536,65,3.278,67,2.798,69,3.01,70,2.54,72,2.798,73,3.302,74,2.798,75,2.332,77,3.099,78,2.332,79,2.54,80,2.004,81,2.27,82,2.62,89,4.165,154,3.133,155,3.133,158,3.133,159,3.272,160,3.272,176,2.156,228,4.807,243,6.553,244,7.147,245,3.925,246,2.466,247,2.466,248,6.724]],["title/classes/$npmConfigName1676624523857.html",[0,0.259,249,3.737]],["body/classes/$npmConfigName1676624523857.html",[0,0.294,2,0.824,3,0.079,4,0.079,5,0.062,7,1.308,8,1.689,9,1.962,10,0.196,11,0.688,12,1.067,13,0.96,14,2.141,15,1.488,16,1.722,17,1.626,18,0.302,19,0.007,20,0.403,21,1.446,22,1.002,23,0.359,24,1.333,25,1.755,26,2.329,28,0.921,29,0.902,30,0.941,31,1.597,32,1.755,33,1.333,34,0.087,35,0.745,36,0.07,37,1.632,38,2.347,39,2.014,41,2.298,44,2.167,45,2.298,46,2.21,47,0.005,48,0.005,87,3.53,228,4.899,245,4.381,246,3.969,247,3.969,249,6.628,250,7.229,251,6.085,252,6.085]],["title/classes/$npmConfigName1676644288779.html",[0,0.259,253,3.737]],["body/classes/$npmConfigName1676644288779.html",[0,0.325,2,0.91,3,0.087,4,0.087,5,0.068,7,1.445,8,1.802,9,2.058,10,0.216,11,0.734,12,1.1,13,1.024,14,2.199,15,1.528,16,1.837,17,1.734,18,0.317,19,0.007,20,0.445,21,1.085,22,1.106,23,0.377,24,1.473,25,1.872,26,2.372,27,2.651,28,0.982,29,0.962,30,1.003,31,1.658,32,1.872,33,1.473,34,0.096,35,0.823,36,0.077,37,1.327,38,1.909,39,1.638,41,1.623,44,1.531,45,1.623,46,1.561,47,0.006,48,0.006,245,3.564,253,6.883,254,7.507,255,5.95,256,5.75]],["title/classes/$npmConfigName1676990992500.html",[0,0.259,257,3.737]],["body/classes/$npmConfigName1676990992500.html",[0,0.325,2,0.91,3,0.087,4,0.087,5,0.068,7,1.445,8,1.802,9,2.058,10,0.216,11,0.734,12,1.1,13,1.024,14,2.199,15,1.528,16,1.837,17,1.734,18,0.317,19,0.007,20,0.445,21,1.085,22,1.106,23,0.377,24,1.473,25,1.872,26,2.372,27,2.651,28,0.982,29,0.962,30,1.003,31,1.658,32,1.872,33,1.473,34,0.096,35,0.823,36,0.077,37,1.327,38,1.909,39,1.638,41,1.623,44,1.531,45,1.623,46,1.561,47,0.006,48,0.006,245,3.564,255,5.95,257,6.883,258,7.507,259,5.106]],["title/classes/$npmConfigName1676993098020.html",[0,0.259,260,3.737]],["body/classes/$npmConfigName1676993098020.html",[0,0.325,2,0.91,3,0.087,4,0.087,5,0.068,7,1.445,8,1.802,9,2.058,10,0.216,11,0.734,12,1.1,13,1.024,14,2.199,15,1.528,16,1.837,17,1.734,18,0.317,19,0.007,20,0.445,21,1.085,22,1.106,23,0.377,24,1.473,25,1.872,26,2.372,27,2.651,28,0.982,29,0.962,30,1.003,31,1.658,32,1.872,33,1.473,34,0.096,35,0.823,36,0.077,37,1.327,38,1.909,39,1.638,41,1.623,44,1.531,45,1.623,46,1.561,47,0.006,48,0.006,245,3.564,255,5.95,259,5.106,260,6.883,261,7.507]],["title/classes/$npmConfigName1678774445242.html",[0,0.259,262,3.737]],["body/classes/$npmConfigName1678774445242.html",[0,0.196,2,0.55,3,0.052,4,0.052,5,0.041,7,0.872,8,1.271,9,1.576,10,0.273,11,0.518,12,0.962,13,0.723,14,1.88,15,1.307,16,1.296,17,1.224,18,0.242,19,0.007,20,0.269,21,1.703,22,0.668,23,0.288,24,0.889,25,1.321,26,2.123,28,0.693,29,0.679,30,0.708,31,1.336,32,1.321,33,0.889,34,0.058,35,0.497,36,0.047,37,1.664,38,2.202,39,2.033,41,2.055,43,2.987,44,2.525,45,2.055,47,0.004,48,0.004,57,3.527,59,3.187,60,4.37,61,4.749,62,3.403,63,3.292,64,1.742,65,3.955,67,2.852,70,1.744,72,3.767,73,3.862,74,3.767,75,3.355,77,3.887,78,3.355,79,3.09,80,2.884,81,3.266,82,3.95,89,4.219,128,2.826,154,3.195,155,3.195,158,3.195,159,3.336,160,3.336,167,2.671,176,3.102,228,2.482,246,3,247,3,251,6.772,252,6.772,262,5.545,263,6.048,264,3.472,265,6.209,266,6.209,267,6.048,268,6.048,269,2.515,270,0.749,271,2.826,272,1.645,273,8.112,274,5.158,275,5.158,276,5.158,277,5.158,278,5.158,279,5.158,280,5.158,281,5.158]],["title/classes/$npmConfigName1678779028547.html",[0,0.259,282,3.737]],["body/classes/$npmConfigName1678779028547.html",[0,0.276,2,0.773,3,0.074,4,0.074,5,0.058,7,1.227,8,1.619,9,1.901,10,0.183,11,0.659,12,1.044,13,0.921,14,2.102,15,1.461,16,1.65,17,1.558,18,0.292,19,0.007,20,0.378,21,1.563,22,0.94,23,0.348,24,1.251,25,1.682,26,2.299,28,0.883,29,0.864,30,0.902,31,1.557,32,1.682,33,1.251,34,0.082,35,0.699,36,0.066,37,1.674,38,2.407,39,2.066,41,2.408,43,2.485,44,2.271,45,2.408,46,2.315,47,0.005,48,0.005,67,4.39,154,4.068,155,4.068,158,4.916,159,5.134,160,4.249,179,3.976,265,6.944,268,7.573,282,6.461,283,7.047]],["title/classes/$npmConfigName1678779204584.html",[0,0.259,284,3.737]],["body/classes/$npmConfigName1678779204584.html",[0,0.309,2,0.866,3,0.083,4,0.083,5,0.065,7,1.374,8,1.745,9,2.01,10,0.205,11,0.711,12,1.084,13,0.992,14,2.17,15,1.508,16,1.779,17,1.679,18,0.309,19,0.007,20,0.423,21,1.032,22,1.052,23,0.368,24,1.401,25,1.813,26,2.351,28,0.951,29,0.931,30,0.972,31,1.627,32,1.813,33,1.401,34,0.092,35,0.783,36,0.074,37,1.507,38,2.167,39,1.86,41,1.998,44,1.456,45,1.998,46,1.485,47,0.005,48,0.005,56,3.538,63,2.22,65,2.667,73,3.094,75,2.521,77,3.263,78,2.521,79,2.747,80,2.167,81,3.176,267,6.968,269,4.046,284,6.755,285,7.368,286,7.078]],["title/classes/$npmConfigName1678780013678.html",[0,0.259,287,3.737]],["body/classes/$npmConfigName1678780013678.html",[0,0.293,2,0.819,3,0.078,4,0.078,5,0.061,7,1.3,8,1.683,9,1.957,10,0.317,11,0.685,12,1.065,13,0.957,14,2.138,15,1.486,16,1.715,17,1.62,18,0.301,19,0.007,20,0.4,21,0.977,22,0.996,23,0.358,24,1.326,25,1.749,26,2.326,28,0.918,29,0.898,30,0.937,31,1.593,32,1.749,33,1.326,34,0.087,35,0.74,36,0.07,37,1.63,38,2.264,39,1.943,41,2.157,44,1.378,45,2.157,46,1.405,47,0.005,48,0.005,57,2.68,63,2.1,65,2.523,73,2.985,75,2.385,77,3.147,78,2.385,80,2.051,81,3.063,82,2.68,87,3.51,269,4.376,287,6.613,288,7.212,289,7.497,290,6.061,291,6.061,292,6.827,293,6.827,294,5.175]],["title/classes/$npmConfigName1678780110507.html",[0,0.259,295,3.737]],["body/classes/$npmConfigName1678780110507.html",[0,0.327,2,0.916,3,0.087,4,0.087,5,0.068,7,1.454,8,1.809,9,2.064,10,0.303,11,0.737,12,1.103,13,1.029,14,2.203,15,1.531,16,1.844,17,1.741,18,0.317,19,0.007,20,0.448,21,1.092,22,1.114,23,0.378,24,1.482,25,1.88,26,2.375,27,2.668,28,0.986,29,0.966,30,1.007,31,1.662,32,1.88,33,1.482,34,0.097,35,0.828,36,0.078,37,1.333,47,0.006,48,0.006,57,2.997,82,2.997,269,3.578,289,5.139,290,5.139,291,6.516,295,6.899,296,7.525]],["title/classes/$npmConfigName1678975542609.html",[0,0.259,297,3.737]],["body/classes/$npmConfigName1678975542609.html",[0,0.325,2,0.91,3,0.087,4,0.087,5,0.068,7,1.445,8,1.802,9,2.058,10,0.216,11,0.734,12,1.1,13,1.024,14,2.199,15,1.528,16,1.837,17,1.734,18,0.317,19,0.007,20,0.445,21,1.085,22,1.106,23,0.377,24,1.473,25,1.872,26,2.372,27,2.651,28,0.982,29,0.962,30,1.003,31,1.658,32,1.872,33,1.473,34,0.096,35,0.823,36,0.077,37,1.327,38,1.909,39,1.638,41,1.623,44,1.531,45,1.623,46,1.561,47,0.006,48,0.006,128,4.681,265,5.95,272,3.463,297,6.883,298,7.507]],["title/controllers/AnalyticsController.html",[299,1.819,300,3.483]],["body/controllers/AnalyticsController.html",[0,0.244,3,0.065,4,0.065,5,0.051,10,0.162,12,0.761,13,0.846,18,0.238,19,0.008,23,0.283,28,0.812,29,0.795,30,0.829,34,0.148,36,0.058,40,0.864,42,2.475,47,0.005,48,0.005,53,2.106,58,1.965,64,1.721,169,5.075,236,2.57,270,1.302,299,1.711,300,4.582,301,1.598,302,3.835,303,2.389,304,7.042,305,5.361,306,5.361,307,4.319,308,4.95,309,4.495,310,1.379,311,4.168,312,4.319,313,4.319,314,7.537,315,6.692,316,5.361,317,6.692,318,6.135,319,4.544,320,3.655,321,4.195,322,3.592,323,4.319,324,4.319,325,4.319,326,4.915,327,2.169,328,3.12,329,2.389,330,1.005,331,2.169,332,2.475,333,2.389,334,4.721,335,3.835,336,2.31,337,3.278,338,3.278,339,3.516,340,3.835,341,4.582,342,4.319,343,3.592,344,3.088,345,2.794,346,2.475,347,4.319,348,2.169,349,4.319,350,2.929,351,4.319,352,4.582,353,6.037,354,4.319,355,6.037,356,2.555,357,6.037,358,3.127,359,3.339,360,3.339,361,3.229,362,4.319,363,4.319,364,4.319,365,4.319]],["title/modules/AnalyticsModule.html",[366,1.556,367,3.281]],["body/modules/AnalyticsModule.html",[0,0.359,3,0.096,4,0.096,5,0.075,19,0.007,34,0.153,36,0.085,40,1.112,47,0.006,48,0.006,58,1.45,300,6.377,301,2.875,330,1.478,334,6.201,335,5.636,366,2.636,367,6.536,368,2.848,369,3.488,370,5.636,371,5.636,372,3.683,373,3.008,374,3.008,375,6.347,376,3.79,377,3.095,378,2.296,379,3.287,380,1.757,381,6.347,382,3.095,383,5.167]],["title/injectables/AnalyticsService.html",[334,3.113,384,1.199]],["body/injectables/AnalyticsService.html",[0,0.202,3,0.054,4,0.054,5,0.042,10,0.134,12,0.788,13,0.738,15,1.32,18,0.246,19,0.008,20,0.596,23,0.293,28,0.841,29,0.823,30,0.948,31,1.354,34,0.133,35,0.511,36,0.048,37,0.956,40,1.232,47,0.004,48,0.004,53,1.74,58,2.081,59,3.575,64,1.759,88,2.911,134,4.276,163,2.301,169,4.865,270,1.136,304,7.412,305,4.674,306,4.674,309,3.467,318,2.905,321,3.366,326,4.285,328,2.553,330,0.831,334,3.57,346,2.045,356,1.785,378,1.291,379,1.848,380,0.988,384,1.375,385,1.484,386,3.169,387,2.301,388,3.169,389,4.26,390,3.874,391,3.569,392,3.763,393,5.264,394,3.569,395,3.405,396,5.264,397,3.569,398,2.123,399,1.908,400,4.746,401,3.569,402,2.905,403,3.169,404,2.551,405,2.494,406,1.974,407,4.088,408,4.285,409,3.405,410,3.763,411,3.995,412,3.763,413,3.57,414,3.049,415,3.483,416,4.674,417,4.285,418,6.84,419,5.264,420,6.129,421,5.264,422,6.129,423,4.674,424,6.84,425,4.674,426,3.132,427,2.911,428,6.129,429,4.674,430,5.264,431,5.264,432,5.264,433,5.264,434,5.264,435,5.264,436,5.264,437,5.264,438,5.264,439,5.264,440,5.264,441,3.169,442,3.569,443,2.905,444,2.045,445,2.708,446,3.569]],["title/modules/AppModule.html",[366,1.556,447,3.483]],["body/modules/AppModule.html",[0,0.194,3,0.052,4,0.052,5,0.041,12,0.433,18,0.135,19,0.008,22,0.66,34,0.159,36,0.046,39,0.769,40,0.732,47,0.004,48,0.004,58,1.168,88,2.828,166,2.828,185,2.828,193,2.735,200,2.93,245,2.493,269,2.493,301,1.269,330,0.799,366,1.734,367,5.429,368,1.54,369,2.295,372,2.423,373,1.626,374,1.626,376,2.493,377,1.673,378,1.242,382,2.98,426,3.042,427,2.828,447,7.224,448,3.047,449,3.047,450,3.047,451,5.429,452,5.429,453,5.429,454,5.429,455,5.429,456,5.429,457,5.429,458,5.151,459,5.429,460,5.429,461,5.429,462,5.429,463,5.151,464,5.429,465,5.151,466,3.432,467,3.432,468,6.112,469,5.896,470,3.047,471,3.432,472,3.432,473,3.432,474,3.432,475,3.432,476,3.432,477,3.432,478,3.432,479,2.93,480,3.432,481,3.308,482,3.308,483,5.114,484,3.432,485,3.042,486,2.328,487,3.432,488,3.432,489,3.432,490,3.432,491,3.047,492,3.308,493,3.047,494,2.605,495,3.432,496,3.432,497,3.432,498,3.432,499,3.432,500,2.605,501,3.432,502,3.432,503,2.794,504,3.432,505,3.432,506,3.432,507,3.047,508,3.167,509,3.047,510,3.167,511,3.047,512,3.432,513,3.432,514,3.432,515,3.432,516,2.794,517,2.794,518,5.114,519,2.605,520,3.432,521,3.167,522,5.114,523,3.047,524,3.047,525,3.432,526,3.047,527,3.432,528,2.605,529,3.432,530,2.126,531,3.432,532,3.432,533,1.298,534,3.432,535,3.432,536,1.724,537,3.047,538,6.743,539,3.432,540,3.432,541,3.432,542,3.047,543,2.794,544,3.432,545,3.047,546,3.432,547,3.432,548,3.047,549,3.432,550,3.047]],["title/injectables/AppService.html",[384,1.199,464,3.281]],["body/injectables/AppService.html",[0,0.39,3,0.104,4,0.104,5,0.082,10,0.259,13,1.146,19,0.007,20,0.633,23,0.323,30,0.947,34,0.115,36,0.093,47,0.006,48,0.006,330,1.606,356,2.34,384,2.135,385,2.869,464,5.845,551,6.128,552,9.007,553,6.901,554,6.901,555,6.901]],["title/entities/Appeal.html",[185,2.538,556,1.432]],["body/entities/Appeal.html",[0,0.283,3,0.076,4,0.076,5,0.059,10,0.188,11,0.671,18,0.339,19,0.008,20,0.665,21,1.261,22,0.964,23,0.403,34,0.144,35,0.717,36,0.067,40,1.275,46,2.333,47,0.005,48,0.005,58,2.035,64,1.717,98,3.776,141,3.104,167,3.894,176,3.418,185,4.851,186,5.558,310,1.963,379,2.595,380,1.387,413,3.399,533,1.896,556,2.085,557,4.45,558,7.518,559,7.518,560,3.258,561,6.682,562,4.027,563,5.011,564,5.933,565,5.011,566,3.166,567,5.011,568,5.011,569,5.375,570,3.104,571,5.011,572,5.011,573,2.921,574,2.375,575,3.666,576,2.375,577,3.399,578,4.532,579,2.982,580,3.803,581,2.136,582,3.829,583,3.829]],["title/classes/AppealDto.html",[0,0.259,584,3.281]],["body/classes/AppealDto.html",[0,0.455,2,1.063,3,0.101,4,0.101,5,0.079,10,0.252,11,0.807,18,0.317,19,0.007,20,0.691,23,0.377,34,0.112,36,0.09,47,0.006,48,0.006,167,4.458,169,4.933,310,1.836,584,5.748,585,5.959,586,4.206,587,6.712,588,6.712,589,2.724]],["title/controllers/AppealsController.html",[299,1.819,590,3.483]],["body/controllers/AppealsController.html",[0,0.16,3,0.043,4,0.043,5,0.033,10,0.106,12,0.888,13,0.618,18,0.277,19,0.008,23,0.33,28,0.946,29,0.927,30,0.966,34,0.131,36,0.038,40,0.631,42,1.621,47,0.003,48,0.003,53,1.379,58,1.785,169,4.479,185,3.894,270,1.519,299,1.121,301,1.046,303,1.565,308,5.125,309,4.653,310,1.608,311,4.323,319,4.89,320,4.122,321,4.42,322,4.189,327,1.421,328,3.271,329,1.565,330,0.659,331,1.421,332,1.621,333,1.565,336,1.513,343,3.646,344,2.023,345,1.83,346,1.621,348,1.421,350,3.68,356,2.805,358,3.646,359,3.894,360,3.894,361,3.765,395,2.855,413,5.421,536,2.216,584,4.381,590,3.349,591,2.512,592,3.918,593,3.918,594,4.817,595,3.918,596,3.918,597,3.593,598,2.829,599,2.829,600,4.413,601,2.829,602,3.918,603,2.829,604,4.142,605,2.829,606,2.829,607,2.829,608,2.36,609,1.98,610,2.829,611,2.512,612,4.413,613,2.829,614,2.829,615,2.147,616,2.829,617,2.829,618,2.829,619,2.829,620,3.918,621,2.512,622,2.829,623,2.829,624,4.062,625,2.512,626,3.964,627,1.513,628,1.465,629,3.68,630,2.512,631,2.512,632,2.829,633,2.829,634,2.512,635,7.041,636,2.829,637,6.645,638,6.645,639,2.512,640,4.413,641,2.829,642,4.817,643,2.512,644,2.512,645,2.829,646,2.512,647,3.918,648,2.512,649,2.303,650,2.147,651,2.829,652,2.829,653,2.829,654,2.512,655,2.829,656,2.829]],["title/modules/AppealsModule.html",[366,1.556,451,3.281]],["body/modules/AppealsModule.html",[0,0.348,3,0.093,4,0.093,5,0.073,19,0.007,34,0.156,36,0.083,40,1.092,47,0.006,48,0.006,58,1.743,185,3.406,301,2.822,330,1.434,366,2.587,368,2.764,369,3.424,372,3.616,373,2.918,374,2.918,376,3.72,377,3.003,378,2.228,379,3.189,380,1.705,382,3.003,451,6.489,479,4.372,481,3.984,590,6.292,629,6.156,630,5.468,657,5.468,658,5.468,659,6.159,660,6.159,661,5.468,662,4.674,663,6.159]],["title/injectables/AppealsService.html",[384,1.199,629,3.113]],["body/injectables/AppealsService.html",[0,0.13,3,0.035,4,0.035,5,0.027,10,0.086,12,0.854,13,0.524,15,1.448,16,0.578,18,0.267,19,0.008,20,0.565,23,0.317,28,0.911,29,0.891,30,1.075,31,1.536,34,0.131,35,0.329,36,0.031,37,1.23,40,1.209,47,0.003,48,0.003,58,2.009,64,1.754,134,1.424,169,4.3,185,4.91,186,2.42,270,1.386,318,1.872,328,2.776,330,0.535,356,2.544,378,0.832,379,1.191,380,0.637,384,0.977,385,0.956,387,1.636,389,4.26,390,2.929,392,3.381,395,2.42,398,1.368,399,1.23,404,1.644,405,2.582,406,1.272,407,3.823,408,4.436,409,3.879,410,4.287,411,1.745,413,5.933,414,3.745,415,3.694,416,6.269,423,2.042,427,1.272,429,2.042,443,3.045,444,2.71,445,2.839,479,1.318,481,1.487,533,1.789,536,3.228,564,4.199,569,4.287,577,1.56,578,1.56,579,1.368,584,3.895,592,3.322,593,3.322,594,4.199,595,3.322,596,3.322,604,4.032,608,2.914,609,3.515,624,3.045,627,2.001,628,1.191,629,2.537,631,2.042,643,3.322,646,3.322,648,2.042,654,3.322,661,2.042,662,1.745,664,2.042,665,3.741,666,2.299,667,4.199,668,2.299,669,3.741,670,2.299,671,3.045,672,7.061,673,3.741,674,2.299,675,2.537,676,3.741,677,2.299,678,2.299,679,5.449,680,3.741,681,2.299,682,2.299,683,3.045,684,4.565,685,1.487,686,1.368,687,1.56,688,2.299,689,2.042,690,2.299,691,2.299,692,3.436,693,4.729,694,6.774,695,1.487,696,4.729,697,1.368,698,2.299,699,3.322,700,4.199,701,1.644,702,2.299,703,2.042,704,2.299,705,2.042,706,2.042,707,2.299,708,2.299,709,2.299,710,2.299,711,2.042,712,2.299,713,2.299,714,2.299,715,2.299,716,3.981,717,1.919,718,3.208,719,2.839,720,1.644,721,1.487,722,2.299,723,2.299,724,3.741,725,3.741,726,3.741,727,2.299,728,3.741,729,2.299,730,2.299,731,1.56,732,2.299,733,2.042,734,2.299,735,1.745,736,1.745,737,2.299,738,1.872,739,1.745,740,2.299,741,1.745,742,2.299,743,1.745,744,2.299,745,2.299,746,2.299]],["title/controllers/AuthController.html",[299,1.819,747,3.483]],["body/controllers/AuthController.html",[0,0.156,3,0.042,4,0.042,5,0.082,10,0.104,12,0.828,13,0.606,15,0.914,17,1.026,18,0.238,19,0.008,23,0.308,28,0.882,29,0.864,30,1.035,34,0.138,36,0.037,37,0.501,40,1.298,42,1.58,47,0.003,48,0.003,53,1.344,58,1.499,64,1.591,144,3.282,218,3.282,270,1.151,299,1.092,301,1.02,303,1.525,308,4.76,309,4.359,310,1.499,311,2.392,315,3.84,319,4.473,320,3.93,321,3.868,322,2.573,327,1.384,328,2.694,329,1.525,330,0.642,331,1.384,333,2.392,336,2.312,343,2.573,345,1.783,346,1.58,348,1.384,350,1.87,356,2.787,358,2.239,359,2.392,360,4.666,361,2.312,380,0.763,387,1.205,405,1.306,407,2.712,414,1.344,415,1.205,516,3.52,517,3.52,550,2.448,624,4.172,695,2.797,747,3.282,748,2.448,749,2.757,750,3.84,751,4.738,752,4.324,753,4.324,754,5.336,755,2.757,756,4.738,757,4.324,758,2.757,759,2.757,760,4.324,761,2.757,762,2.757,763,2.757,764,2.757,765,8.437,766,3.84,767,3.282,768,2.797,769,4.324,770,5.365,771,4.05,772,2.933,773,3.52,774,3.282,775,3.282,776,1.971,777,3.282,778,3.091,779,2.757,780,5.885,781,2.757,782,2.757,783,2.678,784,4.324,785,6.043,786,4.586,787,6.043,788,6.043,789,4.32,790,2.757,791,2.757,792,2.757,793,3.282,794,3.52,795,4.324,796,3.84,797,2.448,798,2.448,799,3.84,800,2.448,801,2.244,802,3.815,803,2.448,804,3.451,805,2.244,806,2.757,807,2.757,808,2.757,809,2.757,810,2.757,811,2.757,812,2.757,813,2.757,814,2.757,815,4.324,816,4.324,817,5.365,818,3.84,819,3.84,820,4.324,821,3.84,822,2.757,823,2.757,824,5.67,825,5.67,826,4.314,827,2.757,828,2.757,829,2.757,830,4.324,831,2.757,832,4.324,833,4.324,834,4.324,835,3.091,836,2.757,837,2.757,838,2.757,839,2.757,840,2.757,841,2.757,842,2.757,843,2.757,844,2.757,845,2.757,846,2.757,847,2.244]],["title/modules/AuthModule.html",[366,1.556,452,3.281]],["body/modules/AuthModule.html",[0,0.309,3,0.082,4,0.082,5,0.065,19,0.008,34,0.157,36,0.073,40,0.781,47,0.005,48,0.005,301,2.615,330,1.271,366,2.397,368,2.45,369,3.172,372,3.35,373,2.587,374,2.587,376,3.446,377,2.661,380,1.511,382,3.446,452,6.734,463,5.968,465,5.968,747,5.95,804,6.063,805,4.444,848,4.847,849,4.847,850,5.459,851,4.847,852,6.291,853,5.459,854,5.365,855,7.069,856,4.444,857,5.459,858,4.444,859,7.069,860,3.702,861,5.459,862,5.459,863,5.459,864,4.143,865,4.847,866,5.459,867,5.459,868,5.459,869,3.702]],["title/injectables/AuthService.html",[384,1.199,804,2.969]],["body/injectables/AuthService.html",[0,0.169,3,0.045,4,0.045,5,0.035,10,0.113,12,0.909,13,0.647,15,1.52,18,0.284,19,0.008,20,0.615,23,0.352,28,0.969,29,0.949,30,1.115,31,0.905,34,0.133,35,0.429,36,0.04,37,1.022,40,1.296,44,1.498,47,0.004,48,0.004,53,2.249,58,0.684,163,2.763,167,1.552,193,1.602,236,2.745,270,0.995,309,2.825,328,2.081,330,0.697,356,2.696,378,1.084,380,0.829,384,1.205,385,1.246,387,2.017,389,3.379,398,1.783,399,1.602,403,2.66,405,2.994,406,1.657,407,3.569,414,2.249,415,2.46,441,2.66,444,1.717,530,5.03,609,2.07,624,2.186,692,3.224,721,1.938,731,2.032,750,4.096,751,5.611,756,2.66,766,4.096,770,5.611,773,3.756,774,3.501,775,3.501,776,4.878,777,4.796,778,4.518,789,2.142,802,4.518,803,2.66,804,2.984,826,4.926,856,2.439,858,2.439,870,2.66,871,4.614,872,4.614,873,4.614,874,2.996,875,7.509,876,7.509,877,4.58,878,2.996,879,4.614,880,4.614,881,2.996,882,2.996,883,4.614,884,2.996,885,4.614,886,2.996,887,5.626,888,4.614,889,4.614,890,2.996,891,2.996,892,4.614,893,6.319,894,2.996,895,3.501,896,4.096,897,4.096,898,4.614,899,4.096,900,2.142,901,2.66,902,3.501,903,2.996,904,2.032,905,2.996,906,2.996,907,2.996,908,2.996,909,4.614,910,2.996,911,2.996,912,4.022,913,2.439,914,2.996,915,2.996,916,2.996,917,2.996,918,2.996,919,2.996,920,2.996,921,2.996,922,4.096,923,2.996,924,2.996,925,2.996,926,2.996,927,2.996,928,2.66,929,2.66,930,4.096,931,4.096,932,4.096,933,2.66,934,2.66,935,4.995,936,2.66,937,6.4,938,4.096,939,4.096,940,5.611,941,4.096,942,4.096,943,4.096,944,2.66,945,2.66,946,4.995,947,5.611,948,2.66,949,2.66,950,2.66,951,2.66,952,2.66,953,2.66,954,2.66,955,2.66,956,2.66,957,2.66,958,2.66,959,2.66,960,2.439,961,2.66,962,2.66,963,2.66,964,2.274,965,2.66,966,2.66,967,2.66,968,2.66,969,2.66,970,2.66,971,2.66,972,2.66,973,2.66,974,2.439,975,2.996,976,2.66,977,2.439,978,2.66,979,2.996,980,2.66,981,2.996,982,2.996,983,2.66,984,2.996,985,2.996,986,2.032,987,2.996,988,2.996,989,2.996,990,2.996,991,2.996,992,2.996,993,2.996]],["title/classes/BaseEntity.html",[0,0.259,573,2.007]],["body/classes/BaseEntity.html",[0,0.497,2,1.019,3,0.097,4,0.097,5,0.076,10,0.242,11,0.787,18,0.309,19,0.007,20,0.681,23,0.367,34,0.108,35,0.921,36,0.087,47,0.006,48,0.006,59,4.379,62,4.677,270,1.692,310,1.791,533,2.436,556,2.638,573,3.428,994,5.717,995,8.456,996,8.456,997,6.439,998,8.456,999,6.439,1000,6.439]],["title/entities/Block.html",[193,2.454,556,1.432]],["body/entities/Block.html",[0,0.324,3,0.086,4,0.086,5,0.068,10,0.215,11,0.732,18,0.316,19,0.007,20,0.564,23,0.376,34,0.134,35,0.819,36,0.077,40,1.366,47,0.006,48,0.006,64,1.831,176,3.598,193,4.514,310,1.831,380,1.585,533,2.166,556,2.274,560,3.554,562,4.239,566,3.454,573,3.187,574,2.713,575,3.91,576,2.713,581,2.44,582,4.177,583,4.177,1001,5.084,1002,8.019,1003,7.12,1004,7.289,1005,5.726,1006,7.289,1007,5.726,1008,5.726,1009,7.289,1010,5.934]],["title/controllers/BlockController.html",[299,1.819,1011,3.483]],["body/controllers/BlockController.html",[0,0.261,3,0.07,4,0.07,5,0.055,10,0.173,12,0.797,13,0.886,18,0.249,19,0.008,20,0.649,23,0.296,28,0.85,29,0.832,30,0.868,34,0.13,36,0.062,40,1.269,47,0.005,48,0.005,58,1.054,64,2.086,193,4.343,270,1.364,299,1.829,301,1.707,303,2.553,308,5.011,309,4.55,310,1.444,311,3.496,319,4.639,320,3.744,321,4.264,322,3.761,327,2.318,328,3.177,329,2.553,330,1.074,331,2.318,332,2.645,333,2.553,336,2.468,348,2.318,352,4.797,356,2.629,358,3.274,359,3.496,360,3.987,361,3.38,649,5.146,1011,4.797,1012,4.098,1013,5.613,1014,5.613,1015,4.616,1016,4.616,1017,7.754,1018,4.616,1019,4.616,1020,4.616,1021,4.616,1022,6.885,1023,4.89,1024,4.098,1025,4.616,1026,4.616,1027,4.616,1028,6.321,1029,4.098,1030,4.616,1031,4.616,1032,4.616,1033,4.616,1034,4.098,1035,3.758,1036,3.131,1037,4.098]],["title/modules/BlockModule.html",[366,1.556,453,3.281]],["body/modules/BlockModule.html",[0,0.359,3,0.096,4,0.096,5,0.075,19,0.007,34,0.153,36,0.085,40,1.112,47,0.006,48,0.006,193,3.394,301,2.875,330,1.478,366,2.636,368,2.848,369,3.488,372,3.683,373,3.008,374,3.008,376,3.79,377,3.095,378,2.296,380,1.757,382,3.095,453,6.536,1011,6.377,1023,6.201,1024,5.636,1038,5.636,1039,5.636,1040,6.347,1041,6.347,1042,5.636,1043,6.347]],["title/injectables/BlockService.html",[384,1.199,1023,3.113]],["body/injectables/BlockService.html",[0,0.22,3,0.059,4,0.059,5,0.046,10,0.146,12,0.83,13,0.787,15,1.361,18,0.259,19,0.008,20,0.615,23,0.308,28,0.884,29,0.866,30,0.988,31,1.412,34,0.128,35,0.558,36,0.052,37,1.443,40,1.35,47,0.004,48,0.004,64,2.073,193,4.379,270,1.211,328,2.663,330,0.908,356,1.904,378,1.411,380,1.079,384,1.466,385,1.621,387,2.455,389,4.379,390,4.076,398,2.32,399,2.085,405,2.661,406,2.157,407,3.423,409,3.632,414,4.086,415,3.732,426,2.32,427,2.157,444,4.125,445,4.262,692,4.125,695,2.522,720,4.014,721,5.14,1003,5.843,1010,5.86,1013,4.986,1014,4.986,1022,3.463,1023,3.809,1029,4.986,1034,4.986,1037,4.986,1042,3.463,1044,3.463,1045,3.9,1046,3.9,1047,5.615,1048,3.9,1049,5.86,1050,5.615,1051,3.9,1052,5.615,1053,5.615,1054,2.96,1055,3.9,1056,6.58,1057,5.615,1058,5.615,1059,4.571,1060,5.615,1061,3.9,1062,5.615,1063,3.9,1064,3.9,1065,3.9,1066,3.9,1067,5.615,1068,5.615,1069,5.615,1070,6.58,1071,6.58,1072,3.9,1073,3.9,1074,3.9]],["title/entities/Comment.html",[166,2.538,556,1.432]],["body/entities/Comment.html",[0,0.312,3,0.083,4,0.083,5,0.065,10,0.207,11,0.714,18,0.328,19,0.008,20,0.644,23,0.39,34,0.139,35,0.789,36,0.074,40,1.301,46,2.139,47,0.005,48,0.005,58,2.131,64,1.799,166,4.604,167,4.08,176,3.548,310,1.901,380,1.527,412,5.087,533,2.086,556,2.22,560,3.469,562,4.18,566,3.372,573,3.111,574,2.613,575,3.841,576,2.613,581,2.35,582,4.077,583,4.077,1075,4.897,1076,6.995,1077,7.116,1078,5.515,1079,5.515,1080,7.116,1081,5.515,1082,5.515,1083,4.489,1084,4.897]],["title/classes/CreateClueDto.html",[0,0.259,1085,3.483]],["body/classes/CreateClueDto.html",[0,0.441,2,1.01,3,0.096,4,0.096,5,0.075,10,0.24,11,0.783,18,0.332,19,0.007,20,0.603,23,0.395,34,0.107,36,0.086,47,0.006,48,0.006,167,4.361,246,4.105,247,4.105,310,1.923,586,4.147,589,2.588,717,3.559,1085,5.917,1086,6.657,1087,5.663,1088,4.326,1089,6.378,1090,4.326,1091,6.378,1092,6.378,1093,5.288,1094,5.288]],["title/classes/CreateCommentDto.html",[0,0.259,1095,3.737]],["body/classes/CreateCommentDto.html",[0,0.461,2,1.087,3,0.104,4,0.104,5,0.081,10,0.258,11,0.818,18,0.27,19,0.007,20,0.631,23,0.322,34,0.115,36,0.092,47,0.006,48,0.006,167,4.502,310,1.568,586,3.757,589,2.786,1095,6.635,1096,7.237,1097,5.211,1098,6.866,1099,6.866,1100,6.096,1101,6.096]],["title/classes/CreateEventDto.html",[0,0.259,1102,3.281]],["body/classes/CreateEventDto.html",[0,0.379,2,0.796,3,0.076,4,0.076,5,0.059,10,0.189,11,0.672,12,0.95,18,0.356,19,0.007,20,0.622,23,0.423,34,0.134,36,0.068,47,0.005,48,0.005,70,4.32,246,3.672,247,3.672,270,1.625,271,6.132,272,3.963,310,2.062,586,4.239,589,2.041,717,3.491,793,5.084,1085,5.717,1086,6.922,1088,3.412,1090,3.412,1093,4.544,1094,4.544,1102,4.789,1103,4.466,1104,5.385,1105,5.717,1106,5.03,1107,5.03,1108,5.03,1109,5.03,1110,5.03,1111,5.717,1112,5.03,1113,5.03,1114,5.03,1115,5.03,1116,5.03,1117,5.03,1118,3.817,1119,5.03,1120,5.948,1121,5.948,1122,3.254,1123,5.948,1124,5.084,1125,4.466,1126,4.095,1127,2.993,1128,5.03,1129,5.03,1130,4.466,1131,5.03,1132,3.817]],["title/classes/CreateGoalDto.html",[0,0.259,1111,3.483]],["body/classes/CreateGoalDto.html",[0,0.441,2,1.01,3,0.096,4,0.096,5,0.075,10,0.24,11,0.783,18,0.332,19,0.007,20,0.603,23,0.395,34,0.107,36,0.086,47,0.006,48,0.006,167,4.361,246,4.105,247,4.105,310,1.923,586,4.147,589,2.588,717,3.559,1086,6.657,1088,4.326,1090,4.326,1093,5.288,1094,5.288,1111,5.917,1133,5.663,1134,6.378,1135,6.378,1136,6.378]],["title/classes/CreateMemoryDto.html",[0,0.259,1137,3.281]],["body/classes/CreateMemoryDto.html",[0,0.422,2,0.941,3,0.09,4,0.09,5,0.07,10,0.223,11,0.749,18,0.337,19,0.007,20,0.577,23,0.401,34,0.125,36,0.08,47,0.006,48,0.006,58,1.704,69,4.853,70,4.517,246,3.977,247,3.977,270,1.282,310,1.954,586,4.146,589,2.411,717,3.472,783,4.621,1088,4.029,1090,4.029,1093,5.06,1094,5.06,1097,4.509,1118,4.509,1122,3.843,1127,3.535,1132,4.509,1137,5.334,1138,7.826,1139,4.621,1140,5.941,1141,5.275,1142,5.275,1143,5.941]],["title/classes/CreatePostDto.html",[0,0.259,1144,3.737]],["body/classes/CreatePostDto.html",[0,0.41,2,0.901,3,0.086,4,0.086,5,0.067,10,0.214,11,0.729,18,0.364,19,0.007,20,0.721,23,0.417,34,0.121,36,0.077,47,0.006,48,0.006,58,1.658,66,5.423,67,4.422,68,6.509,69,4.757,70,4.468,270,1.227,310,1.987,586,4.294,589,2.309,783,4.496,1097,4.318,1118,4.318,1122,3.68,1127,3.385,1132,4.318,1139,4.496,1141,5.052,1142,5.052,1144,5.91,1145,8.028,1146,5.69,1147,5.69,1148,5.69,1149,5.69]],["title/classes/CreateScrapBookDto.html",[0,0.259,1150,3.737]],["body/classes/CreateScrapBookDto.html",[0,0.422,2,0.943,3,0.09,4,0.09,5,0.07,10,0.224,11,0.75,18,0.337,19,0.007,20,0.663,23,0.401,29,0.784,34,0.137,36,0.08,47,0.006,48,0.006,58,1.865,66,5.538,69,4.858,70,4.52,88,4.132,270,1.284,310,1.865,586,4.149,589,2.416,697,4.858,783,4.628,1118,4.519,1122,3.851,1127,3.543,1132,4.519,1139,4.628,1150,6.082,1151,7.831,1152,5.287,1153,5.954,1154,5.954,1155,5.954,1156,5.954,1157,5.287,1158,5.954]],["title/injectables/EncryptionService.html",[384,1.199,900,3.281]],["body/injectables/EncryptionService.html",[0,0.293,3,0.078,4,0.078,5,0.061,10,0.194,12,0.861,13,0.957,15,1.486,18,0.269,19,0.007,20,0.703,23,0.32,28,0.918,29,0.898,30,1.115,31,1.593,34,0.114,36,0.07,37,1.24,47,0.005,48,0.005,270,1.648,328,2.826,330,1.205,356,2.314,384,1.783,385,2.152,407,2.322,426,4.062,427,3.776,530,5.903,537,6.061,818,7.212,819,6.061,900,4.88,1159,4.595,1160,5.181,1161,6.827,1162,6.827,1163,6.827,1164,6.827,1165,6.827,1166,8.443,1167,5.175,1168,6.827,1169,8.123,1170,8.443,1171,6.827,1172,6.827,1173,5.175,1174,6.827,1175,6.827,1176,5.175,1177,4.595,1178,6.827,1179,3.928,1180,5.175,1181,5.175]],["title/entities/Event.html",[269,2.238,556,1.432]],["body/entities/Event.html",[0,0.241,3,0.064,4,0.064,5,0.05,10,0.16,11,0.6,12,0.871,18,0.36,19,0.008,20,0.633,21,1.414,23,0.422,34,0.137,35,0.609,36,0.057,40,1.277,46,2.465,47,0.005,48,0.005,64,1.577,70,4.108,163,3.274,246,3.368,247,3.368,269,2.914,270,1.49,271,5.623,272,3.738,310,2.058,380,1.179,508,5.066,510,4.639,533,1.611,556,1.865,560,2.076,566,2.832,573,2.613,574,2.017,575,2.914,576,2.017,581,1.815,717,3.319,1104,4.938,1105,5.987,1127,2.533,1182,3.78,1183,5.242,1184,6.133,1185,3.231,1186,5.977,1187,4.258,1188,5.977,1189,4.258,1190,4.258,1191,4.258,1192,3.78,1193,4.258,1194,4.258,1195,4.258,1196,4.054,1197,5.684,1198,5.684,1199,5.684,1200,5.684,1201,5.354,1202,4.258,1203,4.258,1204,4.258,1205,4.258,1206,3.78,1207,4.258,1208,4.258,1209,4.258,1210,5.977,1211,5.977,1212,5.307,1213,4.536,1214,5.307,1215,4.258,1216,4.258,1217,4.258,1218,4.258]],["title/entities/EventClue.html",[508,2.843,556,1.432]],["body/entities/EventClue.html",[0,0.279,3,0.074,4,0.074,5,0.058,10,0.185,11,0.663,18,0.354,19,0.008,20,0.616,21,1.504,23,0.409,34,0.133,35,0.705,36,0.066,40,1.224,46,2.371,47,0.005,48,0.005,64,1.703,163,3.483,167,3.861,176,3.395,246,3.635,247,3.635,269,4.385,272,3.937,310,1.995,380,1.364,508,4.093,533,1.865,556,2.062,560,3.222,562,4.001,566,3.131,573,2.889,574,2.335,575,3.635,576,2.335,581,2.101,717,3.233,1183,5.658,1196,4.482,1197,6.046,1198,6.046,1199,6.046,1200,6.046,1201,5.695,1219,4.376,1220,6.609,1221,4.929,1222,4.929,1223,6.609,1224,4.929,1225,4.929,1226,4.929,1227,4.929,1228,4.929,1229,4.376]],["title/controllers/EventController.html",[299,1.819,1230,3.483]],["body/controllers/EventController.html",[0,0.122,3,0.032,4,0.032,5,0.025,10,0.081,12,0.899,13,0.497,18,0.281,19,0.008,20,0.552,23,0.334,28,0.958,29,0.938,30,0.978,34,0.123,36,0.029,40,0.749,42,1.233,47,0.003,48,0.003,53,1.049,58,0.492,64,1.677,80,0.853,266,6.471,269,4.063,270,1.538,299,0.853,301,0.796,303,1.19,308,5.137,309,4.664,310,1.628,311,4.06,316,3.147,319,4.883,320,4.031,321,4.437,322,4.241,327,1.081,328,3.28,329,1.19,330,0.501,331,1.081,332,1.233,333,1.19,336,1.151,343,2.108,344,1.539,345,1.392,346,1.233,348,1.081,350,1.46,352,3.428,356,2.825,358,3.692,359,3.942,360,4.06,361,3.812,536,3.128,604,4.01,608,4.109,609,2.795,615,1.633,624,4.144,626,3.387,627,1.151,628,1.115,650,1.633,793,2.69,835,4.708,1035,1.752,1036,1.46,1102,3.744,1104,3.744,1230,2.69,1231,1.911,1232,3.147,1233,3.147,1234,3.147,1235,3.147,1236,3.147,1237,3.147,1238,3.147,1239,3.147,1240,3.147,1241,2.152,1242,2.152,1243,2.152,1244,2.152,1245,1.911,1246,2.152,1247,2.69,1248,2.152,1249,2.152,1250,2.152,1251,2.152,1252,5.53,1253,4.727,1254,6.262,1255,2.152,1256,1.911,1257,2.152,1258,2.152,1259,2.152,1260,2.152,1261,4.65,1262,2.152,1263,4.997,1264,3.147,1265,2.152,1266,2.152,1267,2.152,1268,2.152,1269,2.152,1270,2.152,1271,2.152,1272,3.544,1273,2.152,1274,3.544,1275,1.911,1276,1.911,1277,1.752,1278,1.392,1279,2.152,1280,3.064,1281,1.911,1282,2.152,1283,1.911,1284,2.152,1285,7.129,1286,2.152,1287,4.517,1288,4.517,1289,2.152,1290,2.152,1291,2.152,1292,3.147,1293,2.152,1294,2.152,1295,5.237,1296,5.237,1297,2.152,1298,2.152,1299,2.152,1300,2.152,1301,2.152,1302,2.152,1303,2.152,1304,2.152,1305,2.152,1306,2.152,1307,2.152,1308,1.911,1309,1.911,1310,2.152,1311,2.152,1312,1.911,1313,2.152,1314,2.152,1315,1.911]],["title/entities/EventGoal.html",[510,2.843,556,1.432]],["body/entities/EventGoal.html",[0,0.285,3,0.076,4,0.076,5,0.06,10,0.189,11,0.673,18,0.351,19,0.007,20,0.622,21,1.517,23,0.403,34,0.135,35,0.721,36,0.068,40,1.231,46,2.272,47,0.005,48,0.005,64,1.722,163,3.514,167,3.904,176,3.426,246,3.676,247,3.676,269,4.404,310,1.966,380,1.395,510,4.155,533,1.907,556,2.093,560,2.457,562,4.037,566,3.178,573,2.932,574,2.388,575,3.27,576,2.388,581,2.148,717,3.262,1183,5.722,1192,4.475,1196,4.549,1197,6.1,1198,6.1,1199,6.1,1200,6.1,1201,5.746,1214,5.956,1229,4.475,1316,4.475,1317,6.707,1318,5.039,1319,6.707,1320,5.039,1321,5.039,1322,5.039,1323,5.039,1324,5.039]],["title/modules/EventModule.html",[366,1.556,454,3.281]],["body/modules/EventModule.html",[0,0.349,3,0.093,4,0.093,5,0.073,19,0.007,34,0.156,36,0.083,40,1.093,47,0.006,48,0.006,269,3.01,301,2.826,330,1.437,366,2.591,368,2.77,369,3.429,372,3.621,373,2.925,374,2.925,376,3.726,377,3.01,378,2.233,380,1.709,382,3.01,454,6.492,508,4.733,510,4.733,1230,6.299,1280,6.159,1281,5.481,1325,5.481,1326,5.481,1327,6.173,1328,5.481,1329,5.481,1330,5.481,1331,6.173,1332,6.173]],["title/injectables/EventService.html",[384,1.199,1280,3.113]],["body/injectables/EventService.html",[0,0.096,3,0.026,4,0.026,5,0.02,10,0.064,12,0.875,13,0.407,15,1.427,18,0.273,19,0.008,20,0.481,23,0.325,28,0.932,29,0.913,30,1.082,31,1.526,34,0.116,35,0.243,36,0.023,37,1.179,40,1.355,47,0.003,48,0.002,64,1.8,80,1.152,126,3.42,163,0.743,246,3.281,247,3.281,266,5.647,269,4.418,270,1.452,272,1.804,320,2.077,327,0.853,328,2.879,330,0.396,356,2.414,378,0.615,380,0.47,384,0.759,385,0.707,387,1.271,389,3.894,390,2.358,399,0.909,405,2.135,406,0.94,407,3.829,409,2.463,414,2.469,415,3.304,444,2.902,508,1.053,510,2.358,533,1.44,536,2.772,604,3.81,608,3.894,609,2.477,624,3.373,627,1.554,628,0.88,684,4.173,685,1.099,686,1.011,687,1.153,692,1.665,695,1.099,716,3.419,717,2.955,718,2.582,731,3.435,735,2.89,736,2.89,739,2.89,741,2.89,743,2.89,783,2.791,964,5.264,1054,1.29,1102,4.445,1104,4.959,1105,4.476,1183,4.719,1184,5.521,1232,2.581,1233,2.581,1234,2.581,1235,2.581,1236,2.581,1237,2.581,1238,2.581,1239,2.581,1240,2.581,1247,2.206,1253,4.719,1254,6.112,1261,5.237,1275,1.509,1276,1.509,1278,1.88,1280,1.971,1308,2.581,1328,1.509,1329,1.509,1330,1.509,1333,1.509,1334,2.581,1335,1.699,1336,3.808,1337,3.808,1338,1.699,1339,2.906,1340,2.906,1341,1.699,1342,2.366,1343,2.366,1344,2.906,1345,1.699,1346,2.906,1347,2.206,1348,1.699,1349,2.366,1350,2.906,1351,2.581,1352,4.901,1353,1.699,1354,5.898,1355,3.808,1356,4.001,1357,1.699,1358,1.699,1359,1.699,1360,2.906,1361,1.699,1362,3.669,1363,2.906,1364,1.699,1365,4.506,1366,4.506,1367,2.906,1368,1.699,1369,2.906,1370,1.699,1371,2.906,1372,1.699,1373,2.906,1374,2.906,1375,1.383,1376,1.383,1377,1.509,1378,1.699,1379,1.699,1380,1.699,1381,1.699,1382,1.699,1383,1.699,1384,1.699,1385,1.699,1386,1.699,1387,1.699,1388,1.699,1389,1.699,1390,1.699,1391,1.699,1392,1.699,1393,1.699,1394,1.699,1395,1.699,1396,1.699,1397,1.699,1398,1.699,1399,1.699,1400,1.699,1401,1.699,1402,1.699,1403,1.699,1404,2.906,1405,1.699,1406,1.699,1407,2.906,1408,1.699,1409,1.699,1410,1.699,1411,3.808,1412,4.001,1413,4.001,1414,4.001,1415,4.001,1416,2.581,1417,2.581,1418,2.581,1419,4.506,1420,5.064,1421,4.506,1422,4.506,1423,4.506,1424,2.581,1425,2.581,1426,4.001,1427,2.581,1428,2.581,1429,3.808,1430,3.1,1431,3.381,1432,2.906,1433,3.808,1434,2.581,1435,1.699,1436,1.699,1437,1.699,1438,3.381,1439,1.699,1440,1.699,1441,2.581,1442,1.699,1443,1.699,1444,1.699,1445,1.699,1446,1.699,1447,1.699,1448,1.699,1449,3.1,1450,1.699,1451,3.808,1452,3.1,1453,3.808,1454,3.808,1455,3.808,1456,3.1,1457,3.1,1458,1.699,1459,1.509,1460,1.699,1461,3.381,1462,1.509,1463,1.509,1464,1.509,1465,2.581,1466,1.509,1467,3.381,1468,3.381,1469,3.381,1470,3.381,1471,1.509]],["title/controllers/FeedController.html",[299,1.819,1472,3.483]],["body/controllers/FeedController.html",[0,0.31,3,0.083,4,0.083,5,0.065,10,0.206,12,0.691,13,0.993,18,0.216,19,0.008,23,0.257,28,0.737,29,0.721,30,0.752,34,0.144,36,0.074,47,0.005,48,0.005,270,1.182,299,2.172,301,2.027,303,3.031,308,4.872,309,4.424,310,1.252,311,3.031,319,4.344,320,3.621,321,4.049,322,3.261,327,2.752,328,2.905,329,3.031,330,1.276,331,2.752,332,3.141,333,3.031,336,2.931,348,2.752,356,2.403,358,2.838,359,3.031,360,3.031,361,2.931,536,3.559,604,4.232,608,3.79,609,3.18,626,4.585,627,2.931,628,2.838,1472,5.379,1473,4.867,1474,6.974,1475,6.293,1476,5.481,1477,5.481,1478,5.481,1479,5.328,1480,4.867,1481,5.481,1482,5.481,1483,5.481,1484,5.481,1485,4.867,1486,4.867]],["title/modules/FeedModule.html",[366,1.556,455,3.281]],["body/modules/FeedModule.html",[0,0.359,3,0.096,4,0.096,5,0.075,19,0.007,34,0.153,36,0.085,40,1.112,47,0.006,48,0.006,58,1.45,301,2.875,330,1.478,366,2.636,368,2.848,369,3.488,372,3.683,373,3.008,374,3.008,376,3.79,377,3.095,378,2.296,379,3.287,380,1.757,382,3.095,383,5.167,455,6.536,1472,6.377,1479,6.201,1480,5.636,1487,5.636,1488,5.636,1489,6.347,1490,6.347]],["title/injectables/FeedService.html",[384,1.199,1479,3.113]],["body/injectables/FeedService.html",[0,0.249,3,0.067,4,0.067,5,0.052,10,0.166,12,0.772,13,0.859,14,1.087,15,1.206,18,0.241,19,0.008,23,0.287,28,0.824,29,0.806,30,0.841,31,1.202,34,0.147,35,0.631,36,0.059,37,1.113,40,1.183,47,0.005,48,0.005,58,1.399,64,1.008,70,3.077,270,1.322,328,2.266,330,1.027,356,1.496,378,1.596,379,2.284,380,1.221,384,1.6,385,1.834,387,2.679,388,3.917,389,4.537,390,4.36,392,4.38,398,2.625,399,2.359,404,3.154,405,2.903,406,2.44,407,3.712,409,3.963,410,3.154,412,3.154,414,2.151,415,3.494,444,2.528,533,1.669,536,3.077,604,4.049,608,3.276,609,2.749,627,3.276,628,2.284,684,4.579,685,2.853,686,2.625,687,2.992,692,2.528,697,5.048,705,3.917,706,3.917,716,3.795,717,1.79,718,2.992,719,4.65,720,3.154,721,2.853,1127,2.625,1362,4.988,1474,7.533,1475,5.44,1479,4.156,1491,3.917,1492,4.411,1493,6.127,1494,4.411,1495,4.411,1496,2.528,1497,4.156,1498,4.411,1499,4.411,1500,4.411,1501,4.411,1502,4.411,1503,4.411,1504,4.411,1505,4.411,1506,4.411,1507,3.348,1508,4.411,1509,4.411,1510,4.411,1511,4.411,1512,4.411,1513,4.411,1514,4.411,1515,6.127,1516,4.411,1517,5.44,1518,2.625,1519,5.44,1520,4.411]],["title/injectables/FirebaseStorageService.html",[384,1.199,1521,3.113]],["body/injectables/FirebaseStorageService.html",[0,0.116,3,0.031,4,0.031,5,0.067,10,0.077,11,0.342,12,0.934,13,0.477,15,1.521,18,0.284,19,0.008,20,0.724,21,0.387,22,0.395,23,0.347,28,0.971,29,0.95,30,1.06,34,0.085,36,0.028,37,1.498,40,1.084,47,0.003,48,0.003,58,1.162,63,1.382,64,1.917,67,3.873,80,2.015,81,2.893,89,5.556,158,5.108,169,4.137,270,1.511,272,3.318,317,3.879,321,2.48,328,2.671,330,0.478,356,2.186,358,2.262,384,0.89,385,0.853,407,3.933,414,2.13,415,2.223,517,3.556,768,2.826,776,4.609,821,5.403,977,1.671,986,6.043,1160,3.315,1201,3.123,1521,2.311,1522,6.166,1523,1.822,1524,3.315,1525,6.166,1526,6.411,1527,3.407,1528,3.407,1529,3.407,1530,3.407,1531,3.407,1532,3.407,1533,3.407,1534,3.407,1535,3.407,1536,3.407,1537,3.407,1538,2.052,1539,3.025,1540,6.748,1541,7.198,1542,3.407,1543,3.407,1544,6.218,1545,2.052,1546,3.407,1547,2.052,1548,3.407,1549,2.052,1550,3.407,1551,2.052,1552,3.407,1553,2.052,1554,3.407,1555,5.086,1556,2.052,1557,4.954,1558,3.407,1559,7.003,1560,3.407,1561,2.052,1562,6.447,1563,3.407,1564,2.052,1565,3.407,1566,2.052,1567,3.407,1568,3.407,1569,5.086,1570,3.407,1571,2.052,1572,5.992,1573,5.086,1574,1.557,1575,1.822,1576,6.748,1577,5.086,1578,1.822,1579,6.748,1580,2.052,1581,2.052,1582,2.052,1583,2.052,1584,3.025,1585,2.052,1586,5.086,1587,6.447,1588,5.725,1589,6.447,1590,6.447,1591,7.848,1592,5.086,1593,2.052,1594,2.052,1595,6.085,1596,3.407,1597,7.003,1598,7.003,1599,3.879,1600,2.052,1601,3.407,1602,2.052,1603,3.879,1604,4.368,1605,4.368,1606,4.368,1607,3.407,1608,2.052]],["title/entities/Follow.html",[200,2.63,556,1.432]],["body/entities/Follow.html",[0,0.329,3,0.088,4,0.088,5,0.069,10,0.219,11,0.74,18,0.318,19,0.007,20,0.57,23,0.379,34,0.135,35,0.833,36,0.078,40,1.359,47,0.006,48,0.006,64,1.846,176,3.621,200,4.223,310,1.846,380,1.612,533,2.204,556,2.299,560,3.593,562,4.266,566,3.492,573,3.222,574,2.76,575,3.941,576,2.76,581,2.483,1497,3.951,1609,5.172,1610,6.447,1611,7.177,1612,7.369,1613,5.825,1614,7.369,1615,5.825,1616,5.825,1617,5.172,1618,5.172]],["title/controllers/FollowController.html",[299,1.819,1619,3.483]],["body/controllers/FollowController.html",[0,0.13,3,0.035,4,0.035,5,0.027,10,0.087,12,0.891,13,0.525,15,1.507,18,0.278,19,0.008,20,0.606,23,0.331,28,0.95,29,0.93,30,0.97,34,0.108,36,0.031,40,1.186,47,0.003,48,0.003,58,0.526,64,1.893,80,0.913,200,4.92,270,1.524,299,0.913,301,0.852,303,1.274,308,5.126,309,4.655,310,1.614,311,3.907,319,4.865,320,4.183,321,4.425,327,1.157,328,3.27,329,1.274,330,0.536,331,1.157,332,1.32,333,1.274,336,1.232,348,1.157,352,2.843,356,2.81,358,3.659,359,3.907,360,4.153,361,3.778,536,3.548,604,4.195,608,3.778,609,3.17,625,2.045,626,3.882,627,1.232,628,1.193,639,2.045,644,2.045,649,4.44,671,3.05,683,3.05,1035,3.05,1036,2.541,1496,2.147,1497,2.541,1619,2.843,1620,2.045,1621,3.326,1622,4.204,1623,4.204,1624,4.204,1625,4.204,1626,3.326,1627,3.326,1628,3.326,1629,2.303,1630,7.065,1631,2.303,1632,5.454,1633,2.303,1634,2.303,1635,2.303,1636,2.303,1637,3.05,1638,2.303,1639,2.303,1640,2.303,1641,2.303,1642,3.746,1643,5.752,1644,4.843,1645,2.303,1646,2.303,1647,4.14,1648,2.303,1649,2.303,1650,2.303,1651,2.303,1652,2.303,1653,2.303,1654,3.746,1655,2.303,1656,3.05,1657,2.303,1658,2.303,1659,2.303,1660,3.326,1661,1.875,1662,3.211,1663,2.045,1664,2.303,1665,2.303,1666,2.303,1667,7.065,1668,2.045,1669,5.711,1670,6.432,1671,2.303,1672,3.746,1673,2.303,1674,2.303,1675,2.303,1676,1.875,1677,2.303,1678,2.303,1679,2.045,1680,2.303,1681,2.303,1682,2.303,1683,2.303,1684,2.303,1685,3.746,1686,2.303,1687,2.303]],["title/modules/FollowModule.html",[366,1.556,456,3.281]],["body/modules/FollowModule.html",[0,0.353,3,0.094,4,0.094,5,0.074,19,0.007,34,0.154,36,0.084,40,0.893,47,0.006,48,0.006,200,4.41,301,2.847,330,1.454,366,2.609,368,2.802,369,3.453,372,3.647,373,2.959,374,2.959,376,3.752,377,3.045,378,2.259,380,1.729,382,3.045,456,6.511,492,4.978,494,4.739,869,4.235,1619,6.331,1662,6.177,1663,5.544,1688,5.544,1689,5.544,1690,6.244,1691,5.544,1692,5.544,1693,6.244]],["title/entities/FollowRequest.html",[492,2.969,556,1.432]],["body/entities/FollowRequest.html",[0,0.306,3,0.082,4,0.082,5,0.064,10,0.203,11,0.706,18,0.326,19,0.008,20,0.544,21,1.327,22,1.042,23,0.387,34,0.138,35,0.775,36,0.073,40,1.346,46,1.909,47,0.005,48,0.005,64,1.784,98,3.922,141,3.354,176,3.523,310,1.888,380,1.499,492,4.549,533,2.049,556,2.194,560,3.428,562,4.151,566,3.332,570,3.354,573,3.074,574,2.566,575,3.808,576,2.566,579,3.222,581,2.308,1497,3.673,1610,4.109,1617,4.808,1618,4.808,1694,7.607,1695,4.808,1696,6.934,1697,6.934,1698,5.415,1699,7.032,1700,5.415,1701,7.032,1702,5.415,1703,6.357,1704,6.934,1705,5.415,1706,4.808]],["title/injectables/FollowService.html",[384,1.199,1662,3.113]],["body/injectables/FollowService.html",[0,0.1,3,0.027,4,0.027,5,0.021,10,0.066,12,0.832,13,0.421,15,1.437,18,0.26,19,0.008,20,0.558,23,0.309,28,0.887,29,0.868,30,1.065,31,1.521,34,0.114,35,0.253,36,0.024,37,1.461,40,1.327,47,0.002,48,0.002,64,1.998,98,1.508,200,5.204,270,1.365,320,3.939,328,2.869,330,0.411,356,2.316,378,0.639,380,0.489,384,0.784,385,0.734,387,1.312,389,3.652,398,1.05,399,0.944,405,1.856,406,0.976,407,3.855,409,4.092,414,4.091,415,3.853,426,1.05,427,0.976,444,3.228,445,4.275,492,4.267,494,1.34,533,1.748,536,3.177,579,1.05,602,1.567,604,4.047,608,3.383,609,2.839,620,1.567,627,1.605,628,0.914,671,2.444,683,2.444,684,4.505,685,1.142,686,1.05,687,1.197,692,3.914,695,2.989,716,3.918,717,1.875,718,3.134,719,4.801,721,4.092,797,1.567,877,2.444,1049,1.437,1054,1.34,1059,2.444,1362,3.761,1496,2.648,1497,4.771,1518,2.749,1610,3.931,1611,1.567,1621,2.665,1622,2.665,1623,2.665,1624,3.478,1625,3.478,1626,2.665,1627,2.665,1628,5.335,1637,4.892,1643,6.117,1644,2.665,1647,3.507,1660,2.665,1662,2.036,1668,2.665,1676,2.444,1679,2.665,1691,1.567,1692,1.567,1696,2.665,1697,2.665,1703,1.437,1704,1.567,1706,1.567,1707,1.567,1708,1.567,1709,3.917,1710,3.917,1711,1.765,1712,3.002,1713,7.034,1714,1.765,1715,3.002,1716,1.765,1717,3.002,1718,1.765,1719,1.765,1720,1.765,1721,1.765,1722,1.765,1723,3.002,1724,1.765,1725,1.765,1726,1.765,1727,1.34,1728,1.765,1729,1.765,1730,3.002,1731,3.002,1732,5.617,1733,3.917,1734,2.665,1735,3.002,1736,1.765,1737,5.633,1738,1.765,1739,1.765,1740,1.765,1741,1.765,1742,3.917,1743,5.179,1744,1.765,1745,3.917,1746,4.103,1747,2.665,1748,1.765,1749,3.002,1750,4.621,1751,3.002,1752,3.002,1753,2.036,1754,3.917,1755,4.621,1756,2.665,1757,3.917,1758,3.002,1759,2.665,1760,2.665,1761,1.765,1762,3.002,1763,1.765,1764,3.002,1765,1.765,1766,1.765,1767,1.765,1768,1.765,1769,3.002,1770,1.765,1771,1.567,1772,1.765,1773,1.765,1774,1.765,1775,1.765,1776,1.765,1777,3.002,1778,3.002,1779,3.002,1780,1.765,1781,3.917,1782,3.002,1783,1.765,1784,1.765,1785,3.002,1786,3.002,1787,1.765,1788,1.765,1789,1.765]],["title/classes/GetProximityEventsDto.html",[0,0.259,1263,3.483]],["body/classes/GetProximityEventsDto.html",[0,0.441,2,1.012,3,0.096,4,0.096,5,0.076,10,0.24,11,0.784,18,0.308,19,0.007,23,0.366,34,0.107,36,0.086,47,0.006,48,0.006,58,1.783,246,4.11,247,4.11,270,1.379,310,1.783,586,3.885,589,2.594,717,3.562,783,4.836,1088,4.336,1090,4.336,1093,5.295,1094,5.295,1139,4.836,1263,5.925,1278,5.452,1790,7.484,1791,5.676,1792,6.393,1793,6.393]],["title/classes/GetProximityMemoryDto.html",[0,0.259,1794,3.281]],["body/classes/GetProximityMemoryDto.html",[0,0.441,2,1.012,3,0.096,4,0.096,5,0.076,10,0.24,11,0.784,18,0.308,19,0.007,23,0.366,34,0.107,36,0.086,47,0.006,48,0.006,58,1.783,246,4.11,247,4.11,270,1.379,310,1.783,586,3.885,589,2.594,717,3.562,783,4.836,1088,4.336,1090,4.336,1093,5.295,1094,5.295,1139,4.836,1278,5.452,1794,5.582,1795,7.484,1796,5.676,1797,6.393,1798,6.393]],["title/injectables/JwtAuthGuard.html",[331,2.305,384,1.199]],["body/injectables/JwtAuthGuard.html",[0,0.401,3,0.107,4,0.107,5,0.084,19,0.007,34,0.139,36,0.095,47,0.006,48,0.006,330,1.653,331,4.175,384,2.171,385,2.953,581,3.027,860,4.817,1799,6.306,1800,5.781,1801,6.306,1802,7.102]],["title/injectables/JwtStrategy.html",[384,1.199,852,3.281]],["body/injectables/JwtStrategy.html",[0,0.336,3,0.09,4,0.09,5,0.07,10,0.223,12,0.749,13,1.046,15,1.397,18,0.234,19,0.007,23,0.35,28,0.799,29,0.782,30,0.815,34,0.143,36,0.08,47,0.006,48,0.006,53,2.897,64,1.357,236,3.535,330,1.383,356,2.014,384,1.948,385,2.47,387,3.566,427,3.286,516,4.836,581,2.532,775,4.509,776,4.247,777,4.509,778,6.116,826,3.68,852,5.334,860,4.029,864,4.509,865,5.275,895,5.662,913,4.836,1803,5.275,1804,5.941,1805,7.461,1806,5.941,1807,5.941,1808,6.074,1809,5.275,1810,5.275,1811,5.275,1812,5.941,1813,5.941,1814,5.941,1815,5.941,1816,5.941,1817,5.941,1818,4.836,1819,5.941,1820,4.836,1821,5.941,1822,5.941,1823,5.941,1824,5.941,1825,5.941,1826,5.941,1827,5.941,1828,5.941,1829,5.941]],["title/entities/Like.html",[556,1.796]],["body/entities/Like.html",[0,0.324,3,0.087,4,0.087,5,0.068,10,0.216,11,0.733,18,0.316,19,0.008,20,0.565,23,0.376,34,0.141,35,0.821,36,0.077,40,1.312,47,0.006,48,0.006,58,2.036,64,1.833,176,3.601,310,1.833,380,1.588,533,2.171,556,2.277,560,3.559,562,4.243,566,3.459,573,3.191,574,2.719,575,3.914,576,2.719,581,2.446,582,3.288,583,3.288,1083,4.671,1507,4.355,1830,7.501,1831,5.095,1832,8.027,1833,8.027,1834,5.738,1835,7.299,1836,5.738,1837,7.299,1838,5.738,1839,5.738]],["title/injectables/LocalAuthGuard.html",[384,1.199,771,3.483]],["body/injectables/LocalAuthGuard.html",[0,0.401,3,0.107,4,0.107,5,0.084,19,0.007,34,0.139,36,0.095,47,0.006,48,0.006,330,1.653,384,2.171,385,2.953,581,3.027,771,6.31,860,4.817,1800,5.781,1801,6.306,1840,6.306,1841,7.102]],["title/injectables/LocalStrategy.html",[384,1.199,465,3.113]],["body/injectables/LocalStrategy.html",[0,0.295,3,0.079,4,0.079,5,0.062,10,0.196,12,0.866,13,0.963,15,1.315,18,0.271,19,0.007,20,0.673,23,0.322,28,0.923,29,0.904,30,0.943,31,1.347,34,0.136,36,0.07,37,0.949,40,1.34,47,0.005,48,0.005,270,1.482,328,2.541,330,1.216,348,2.624,356,1.772,384,1.794,385,2.173,387,2.284,407,2.345,414,2.548,415,2.284,465,4.66,530,5.731,581,2.227,692,3.937,773,5.593,774,5.825,775,5.825,804,5.624,805,4.254,826,5.246,860,3.544,895,5.214,896,6.1,897,6.1,899,6.1,1808,6.249,1809,4.64,1810,4.64,1811,4.64,1842,4.64,1843,5.225,1844,5.225,1845,6.87,1846,5.225,1847,6.1,1848,6.87,1849,8.153,1850,5.225,1851,5.225]],["title/entities/Memory.html",[245,2.238,556,1.432]],["body/entities/Memory.html",[0,0.255,3,0.068,4,0.068,5,0.053,10,0.169,11,0.624,18,0.361,19,0.008,20,0.673,21,1.666,22,1.197,23,0.414,34,0.128,35,0.645,36,0.061,40,1.291,46,2.425,47,0.005,48,0.005,64,1.626,67,3.938,69,4.236,70,4.182,154,3.852,155,3.852,158,4.41,159,4.606,160,4.023,163,3.356,176,2.651,245,3.472,246,3.472,247,3.472,272,2.947,310,2.016,380,1.248,533,1.705,556,1.94,560,2.198,562,3.123,566,2.947,570,2.792,573,2.719,574,2.136,575,3.032,576,2.136,581,1.921,582,2.583,583,2.583,717,3.115,1084,4.002,1127,2.682,1196,5.207,1197,5.826,1198,5.826,1199,5.826,1200,5.826,1201,5.488,1852,4.002,1853,4.507,1854,4.507,1855,4.507,1856,4.507,1857,4.507,1858,4.507,1859,4.507,1860,6.219,1861,4.507,1862,4.507,1863,3.421]],["title/controllers/MemoryController.html",[299,1.819,1864,3.483]],["body/controllers/MemoryController.html",[0,0.167,3,0.044,4,0.044,5,0.094,10,0.111,12,0.854,13,0.638,18,0.267,19,0.008,20,0.554,23,0.317,28,0.91,29,0.891,30,0.983,34,0.129,36,0.04,40,0.896,47,0.004,48,0.004,58,0.673,64,1.974,80,1.168,245,4.126,270,1.461,299,1.168,301,1.09,303,1.63,308,5.076,309,4.609,310,1.547,311,3.746,319,4.78,320,4.126,321,4.313,322,3.727,327,1.48,328,3.249,329,1.63,330,0.686,331,1.48,332,1.689,333,1.63,336,2.436,348,1.48,356,2.79,358,3.507,359,3.746,360,3.96,361,3.622,536,3.146,604,4.049,608,3.829,609,2.811,615,2.237,624,4.095,626,3.602,627,1.576,628,1.526,650,2.237,798,2.617,799,4.044,800,2.617,801,2.399,817,2.617,835,4.478,1137,4.478,1245,2.617,1247,3.457,1253,3.457,1256,2.617,1264,2.617,1277,2.399,1278,1.906,1283,2.617,1292,2.617,1309,2.617,1312,2.617,1342,3.708,1541,2.399,1557,3.708,1794,4.478,1863,5.852,1864,3.457,1865,2.617,1866,5.568,1867,4.044,1868,4.044,1869,4.944,1870,4.044,1871,2.947,1872,2.947,1873,2.947,1874,2.947,1875,2.947,1876,4.044,1877,2.947,1878,2.947,1879,2.947,1880,4.044,1881,5.562,1882,2.947,1883,2.947,1884,2.617,1885,2.617,1886,2.617,1887,3.776,1888,2.617,1889,2.947,1890,2.947,1891,2.617,1892,6.772,1893,2.947,1894,5.562,1895,6.264,1896,2.947,1897,2.947,1898,2.947,1899,2.947,1900,2.947,1901,2.947,1902,2.947,1903,2.947]],["title/modules/MemoryModule.html",[366,1.556,457,3.281]],["body/modules/MemoryModule.html",[0,0.364,3,0.097,4,0.097,5,0.076,19,0.007,34,0.151,36,0.087,47,0.006,48,0.006,245,3.139,301,2.9,330,1.499,366,2.659,368,2.889,369,3.519,372,3.716,373,3.051,374,3.051,376,3.823,377,3.139,378,2.329,382,3.139,457,6.559,1864,6.417,1887,6.222,1888,5.717,1904,5.717,1905,5.717,1906,6.439,1907,5.717,1908,6.439,1909,6.439]],["title/injectables/MemoryService.html",[384,1.199,1887,3.113]],["body/injectables/MemoryService.html",[0,0.135,3,0.036,4,0.036,5,0.028,10,0.09,12,0.868,13,0.54,15,1.398,18,0.271,19,0.008,20,0.473,23,0.322,28,0.925,29,0.906,30,1.043,31,1.451,34,0.13,35,0.342,36,0.032,37,1.343,40,1.311,47,0.004,48,0.003,64,1.927,67,1.32,158,3.005,159,1.544,245,4.456,246,2.716,247,2.716,270,1.411,320,3.014,327,1.199,328,2.873,330,0.556,356,2.508,378,0.864,380,0.661,384,1.007,385,0.993,387,1.686,389,2.979,399,1.277,405,1.131,407,3.928,414,1.88,415,3.321,417,1.943,444,2.78,533,1.459,536,2.797,604,3.889,608,3.83,609,2.5,624,3.098,627,2.062,628,1.236,684,4.238,685,1.544,686,1.42,687,1.619,692,1.368,716,3.45,717,3.212,718,2.616,731,3.778,735,2.927,736,2.927,738,1.943,739,2.927,741,2.927,743,2.927,964,5.435,986,2.616,1054,1.812,1137,3.982,1179,1.812,1247,1.812,1253,5.895,1277,1.943,1278,1.544,1315,2.12,1334,3.424,1342,3.139,1347,1.812,1351,3.424,1352,5.806,1356,4.946,1375,1.943,1376,1.943,1377,2.12,1412,4.308,1413,4.308,1414,4.308,1415,4.308,1416,2.12,1417,2.12,1418,2.12,1424,2.12,1425,2.12,1426,2.12,1427,2.12,1428,2.12,1434,2.12,1449,3.139,1452,1.943,1456,3.139,1457,3.139,1459,4.308,1461,4.308,1462,2.12,1463,2.12,1464,2.12,1466,2.12,1467,4.308,1468,4.308,1469,4.308,1470,4.308,1471,2.12,1521,1.619,1526,2.12,1541,5.323,1544,4.308,1557,3.139,1794,3.982,1863,5.435,1867,3.424,1868,3.424,1869,4.308,1870,3.424,1876,3.424,1880,3.424,1881,4.946,1884,2.12,1885,2.12,1886,2.12,1887,2.616,1894,2.12,1907,2.12,1910,2.12,1911,3.856,1912,2.387,1913,2.387,1914,3.424,1915,3.856,1916,2.387,1917,2.387,1918,2.387,1919,2.387,1920,3.856,1921,2.387,1922,2.387,1923,2.387,1924,3.856,1925,2.387,1926,1.812,1927,1.943,1928,2.12,1929,2.387,1930,3.856,1931,3.856,1932,2.387,1933,2.387,1934,2.387,1935,2.387,1936,2.387,1937,2.387,1938,2.387,1939,2.387,1940,2.387,1941,2.387,1942,2.387,1943,4.851,1944,5.57,1945,2.387,1946,1.812,1947,2.387,1948,2.12,1949,1.943,1950,2.387,1951,4.851,1952,3.856,1953,2.387,1954,2.387,1955,2.387,1956,2.387,1957,2.387,1958,2.387,1959,3.856,1960,3.856,1961,2.387,1962,3.856,1963,2.387,1964,2.12,1965,2.387,1966,2.387,1967,2.387,1968,2.387,1969,2.387,1970,2.387,1971,2.387,1972,2.387]],["title/controllers/NotificationController.html",[299,1.819,1973,3.483]],["body/controllers/NotificationController.html",[0,0.249,3,0.067,4,0.067,5,0.052,10,0.166,12,0.772,13,0.859,17,1.454,18,0.241,19,0.008,20,0.545,23,0.287,28,0.824,29,0.806,30,0.841,34,0.145,36,0.059,40,0.877,42,2.528,47,0.005,48,0.005,53,2.151,58,1.008,212,6.065,270,1.322,299,1.748,301,1.632,303,2.44,308,4.97,309,4.513,310,1.399,311,3.893,319,4.575,320,3.91,321,4.217,322,3.645,327,2.215,328,3.138,329,2.44,330,1.027,331,2.215,332,2.528,333,2.44,336,2.359,343,3.645,344,3.154,345,2.853,346,2.528,348,2.215,350,2.992,356,2.579,358,3.173,359,3.389,360,4.207,361,3.276,624,4.099,778,5.033,786,4.65,794,4.988,1036,4.156,1496,3.511,1647,3.348,1973,4.65,1974,3.917,1975,6.753,1976,5.44,1977,5.44,1978,4.411,1979,5.438,1980,4.411,1981,4.411,1982,4.411,1983,4.411,1984,4.411,1985,4.988,1986,6.127,1987,6.25,1988,3.917,1989,3.917,1990,4.553,1991,3.917,1992,4.411,1993,4.411,1994,4.411,1995,4.411,1996,5.44,1997,4.411,1998,3.917,1999,4.411,2000,4.411,2001,4.411]],["title/modules/NotificationModule.html",[366,1.556,458,3.113]],["body/modules/NotificationModule.html",[0,0.355,3,0.095,4,0.095,5,0.074,19,0.007,34,0.15,36,0.084,40,0.898,47,0.006,48,0.006,301,2.855,330,1.46,366,2.617,368,2.815,369,3.463,372,3.657,373,2.973,374,2.973,376,3.763,377,3.059,378,2.269,380,1.737,382,3.059,458,6.265,854,5.857,869,4.255,1973,6.344,1990,6.178,1991,5.57,2002,5.57,2003,5.57,2004,5.57,2005,6.273,2006,6.273]],["title/injectables/NotificationService.html",[384,1.199,1990,2.969]],["body/injectables/NotificationService.html",[0,0.141,3,0.038,4,0.038,5,0.03,10,0.094,12,0.884,13,0.561,15,1.431,17,0.95,18,0.276,19,0.008,20,0.698,23,0.329,28,0.942,29,0.923,30,1.1,31,1.572,34,0.126,35,0.358,36,0.034,37,1.323,40,1.126,47,0.003,48,0.003,53,3.051,64,0.914,89,3.544,163,2.188,212,6.179,215,5.529,270,0.863,328,2.593,330,0.582,346,1.433,356,2.831,378,0.905,380,0.692,384,1.045,385,1.04,387,1.75,389,3.059,398,1.488,399,1.337,405,1.185,406,1.383,407,3.703,414,3.051,415,2.736,582,2.294,624,4.258,778,5.208,877,3.258,912,5.73,913,5.708,1347,6.083,1496,3.586,1518,2.978,1572,3.554,1575,2.22,1647,5.067,1656,6.274,1708,2.22,1727,1.898,1732,2.22,1891,2.22,1926,1.898,1975,7.872,1976,3.554,1977,3.554,1979,5.51,1987,5.08,1988,2.22,1989,2.22,1990,2.589,1998,3.554,2007,2.22,2008,4.003,2009,4.003,2010,4.003,2011,3.554,2012,2.5,2013,4.003,2014,2.5,2015,4.003,2016,2.5,2017,7.627,2018,4.003,2019,2.5,2020,3.554,2021,4.003,2022,2.5,2023,3.554,2024,4.003,2025,2.5,2026,4.003,2027,2.5,2028,4.003,2029,2.036,2030,2.036,2031,3.258,2032,2.036,2033,2.22,2034,2.22,2035,2.5,2036,5.721,2037,2.5,2038,4.003,2039,2.5,2040,2.5,2041,5.005,2042,5.721,2043,2.5,2044,2.5,2045,2.5,2046,2.5,2047,2.5,2048,2.5,2049,5.005,2050,5.005,2051,4.003,2052,4.003,2053,4.444,2054,6.677,2055,5.721,2056,5.721,2057,6.677,2058,5.005,2059,5.005,2060,5.005,2061,5.721,2062,5.005,2063,5.005,2064,4.003,2065,2.5,2066,4.003,2067,2.5,2068,2.5]],["title/classes/PageDto.html",[0,0.259,686,2.731]],["body/classes/PageDto.html",[0,0.423,2,0.947,3,0.09,4,0.09,5,0.071,10,0.225,11,0.752,12,0.754,18,0.322,19,0.007,23,0.383,28,0.804,29,0.787,34,0.125,36,0.08,47,0.006,48,0.006,270,1.616,310,1.366,321,2.916,387,2.615,589,2.427,609,2.684,684,5.163,685,3.869,686,5.102,904,6.111,1120,7.264,1343,7.443,2069,5.31,2070,6.939,2071,7.492,2072,8.831,2073,7.492,2074,5.981,2075,5.981,2076,5.31,2077,5.981,2078,5.981]],["title/classes/PageMetaDto.html",[0,0.259,684,2.63]],["body/classes/PageMetaDto.html",[0,0.436,2,0.835,3,0.08,4,0.08,5,0.062,10,0.198,11,0.694,12,0.665,18,0.35,19,0.007,23,0.416,28,0.709,29,0.694,34,0.088,36,0.071,47,0.005,48,0.005,270,1.138,387,3.023,604,2.432,609,3.673,684,4.69,716,5.263,717,3.657,904,6.476,1349,5.629,1517,4.685,1518,3.139,1519,4.685,2070,4.005,2076,6.139,2079,6.84,2080,4.685,2081,4.473,2082,6.139,2083,7.712,2084,7.712,2085,7.712,2086,6.848,2087,5.277,2088,6.212,2089,6.914,2090,5.294,2091,5.277,2092,5.277,2093,5.277,2094,5.277,2095,5.277,2096,5.277,2097,6.848,2098,6.139,2099,5.277,2100,5.277,2101,5.277,2102,5.277,2103,5.277]],["title/interfaces/PageMetaDtoParameters.html",[2088,3.483,2104,3.483]],["body/interfaces/PageMetaDtoParameters.html",[3,0.099,4,0.099,5,0.078,10,0.247,11,0.796,18,0.313,19,0.007,28,0.882,34,0.11,36,0.088,47,0.006,48,0.006,270,1.712,604,4.336,609,3.826,628,3.4,716,5.487,717,3.46,768,4.246,2070,6.472,2079,4.982,2088,6.723,2104,4.982,2105,6.564,2106,5.829,2107,6.564]],["title/classes/PageOptionsDto.html",[0,0.259,604,2.116]],["body/classes/PageOptionsDto.html",[0,0.378,2,0.795,3,0.076,4,0.076,5,0.059,10,0.189,11,0.672,18,0.296,19,0.008,21,1.515,22,1.448,23,0.376,29,1.131,30,0.689,34,0.112,36,0.068,47,0.006,48,0.005,270,1.893,310,1.719,356,1.702,536,2.521,589,2.037,604,3.699,609,3.858,717,3.663,768,3.248,904,6.122,1122,3.248,1123,6.682,1124,6.091,1125,4.458,1126,4.087,1130,5.941,1139,3.11,1179,5.711,1518,4.775,1946,3.81,2079,6.344,2086,6.682,2097,4.458,2098,4.458,2108,4.458,2109,7.793,2110,6.691,2111,8.026,2112,6.691,2113,5.021,2114,5.021,2115,5.021,2116,5.021,2117,5.021,2118,5.021,2119,5.021,2120,5.021,2121,5.021,2122,5.021,2123,5.021,2124,5.021,2125,5.021,2126,4.458,2127,5.021,2128,5.021,2129,5.021]],["title/controllers/PaymentController.html",[299,1.819,2130,3.483]],["body/controllers/PaymentController.html",[0,0.165,3,0.044,4,0.044,5,0.034,10,0.109,12,0.849,13,0.632,15,1.477,18,0.265,19,0.008,20,0.551,23,0.316,28,0.905,29,0.886,30,0.924,34,0.113,36,0.039,40,0.891,47,0.003,48,0.003,58,0.665,64,1.422,163,2.721,167,1.508,193,1.557,270,1.453,299,1.154,301,1.077,303,1.61,308,5.069,309,4.603,310,1.538,311,2.496,319,4.811,320,3.89,321,4.356,327,1.462,328,3.081,329,1.61,330,0.678,331,1.462,332,1.669,333,1.61,336,1.557,348,1.462,356,2.732,358,3.488,359,3.725,360,4.361,361,3.602,609,3.022,624,1.38,626,1.884,835,2.082,904,1.975,912,3.226,928,2.585,929,2.585,930,4.007,931,4.007,932,4.007,933,2.585,934,2.585,935,4.906,936,2.585,937,6.326,938,4.007,939,4.007,940,5.527,941,4.007,942,4.007,943,4.007,944,2.585,945,2.585,946,4.906,947,5.527,948,2.585,949,2.585,950,2.585,951,2.585,952,2.585,953,2.585,954,2.585,955,2.585,956,2.585,957,2.585,958,2.585,959,2.585,960,2.37,961,2.585,962,2.585,963,2.585,964,2.21,965,2.585,966,2.585,967,2.585,968,2.585,969,2.585,970,2.585,971,2.585,972,2.585,973,2.585,974,5.483,977,2.37,978,2.585,980,2.585,986,1.975,1036,4.222,1661,2.37,1669,4.007,1985,3.674,2130,3.425,2131,2.585,2132,4.906,2133,4.007,2134,4.906,2135,4.906,2136,5.527,2137,5.527,2138,2.912,2139,6.224,2140,4.513,2141,5.527,2142,2.912,2143,3.226,2144,2.912,2145,6.82,2146,4.513,2147,2.912,2148,6.224,2149,4.513,2150,5.067,2151,2.912,2152,4.513,2153,2.912,2154,2.912,2155,2.912,2156,2.912,2157,5.067,2158,5.527,2159,2.912,2160,2.912,2161,2.912,2162,3.748,2163,2.585,2164,2.912,2165,2.912,2166,2.912,2167,6.735,2168,2.912,2169,2.912,2170,2.912,2171,2.912,2172,4.513,2173,2.585,2174,2.912,2175,2.912,2176,2.585,2177,2.585,2178,2.912,2179,2.912,2180,2.585,2181,2.912]],["title/modules/PaymentModule.html",[366,1.556,459,3.281]],["body/modules/PaymentModule.html",[0,0.351,3,0.094,4,0.094,5,0.073,19,0.007,34,0.152,36,0.084,40,0.889,47,0.006,48,0.006,301,2.838,330,1.447,366,2.602,368,2.789,369,3.444,372,3.636,373,2.945,374,2.945,376,3.741,377,3.03,378,2.248,380,1.721,382,3.741,458,6.17,459,6.658,869,4.216,2130,6.318,2162,6.17,2163,5.519,2182,5.519,2183,5.519,2184,6.215,2185,6.215,2186,6.215,2187,6.215]],["title/injectables/PaymentService.html",[384,1.199,2162,3.113]],["body/injectables/PaymentService.html",[0,0.136,3,0.036,4,0.036,5,0.028,10,0.091,11,0.39,12,0.871,13,0.545,15,1.402,18,0.283,19,0.008,20,0.603,21,1.057,22,0.94,23,0.348,28,0.883,29,0.864,30,1.019,31,1.355,34,0.12,35,0.345,36,0.032,37,1.521,40,1.247,47,0.003,48,0.003,63,1.982,64,1.403,126,2.95,163,1.054,234,1.963,235,5.852,236,3.908,269,2.381,270,1.326,320,1.792,328,2.273,330,0.561,337,1.83,338,1.83,356,2.342,358,2.529,361,1.289,378,0.872,380,0.667,384,1.015,385,1.002,387,1.699,389,2.996,390,2.408,398,1.434,399,1.289,405,3.691,406,1.333,407,3.794,414,2.731,415,3.02,426,3.333,427,2.15,444,2.227,624,3.112,692,2.227,695,1.559,719,4.252,720,4.393,721,1.559,731,2.636,776,1.723,789,2.779,826,1.493,835,3.491,904,1.635,912,4.393,960,1.963,976,2.141,986,4.167,1252,5.456,1254,2.95,1347,4.663,1518,1.434,1599,2.141,1727,1.83,1946,2.95,1949,3.164,1990,4.469,1996,4.336,2011,3.451,2132,4.336,2133,3.451,2134,3.451,2135,3.451,2136,5.832,2137,5.832,2143,4.939,2145,4.336,2150,5.852,2157,6.461,2158,6.59,2162,2.636,2173,2.141,2176,2.141,2177,3.451,2180,3.451,2188,2.141,2189,4.884,2190,2.141,2191,3.887,2192,3.887,2193,2.411,2194,3.887,2195,3.887,2196,2.95,2197,3.451,2198,4.884,2199,2.411,2200,6.144,2201,2.411,2202,3.887,2203,2.411,2204,3.887,2205,2.411,2206,3.887,2207,3.887,2208,2.411,2209,3.451,2210,3.451,2211,3.451,2212,3.451,2213,3.164,2214,2.411,2215,3.164,2216,3.887,2217,3.887,2218,3.887,2219,2.411,2220,3.451,2221,2.411,2222,2.141,2223,3.887,2224,4.884,2225,5.832,2226,2.411,2227,4.884,2228,4.974,2229,4.884,2230,2.411,2231,2.411,2232,2.411,2233,2.411,2234,2.411,2235,2.411,2236,2.411,2237,5.602,2238,5.602,2239,2.411,2240,2.141,2241,2.411,2242,3.887,2243,2.411,2244,2.411,2245,2.411,2246,2.411,2247,2.411,2248,2.411,2249,2.411,2250,2.411,2251,2.411,2252,2.411,2253,2.411,2254,2.411,2255,2.141,2256,2.411,2257,2.411,2258,3.887,2259,3.887,2260,3.164,2261,3.887,2262,3.887,2263,2.411,2264,2.411,2265,2.411,2266,2.411,2267,2.411,2268,2.411,2269,3.887,2270,4.884,2271,2.411,2272,2.411,2273,4.884,2274,2.411,2275,4.884,2276,2.411,2277,3.887,2278,2.411,2279,2.411,2280,2.411,2281,2.411,2282,2.411,2283,4.884,2284,2.411,2285,2.411,2286,2.411,2287,2.411,2288,3.887,2289,2.411,2290,2.411,2291,2.411,2292,2.411,2293,2.411,2294,2.411,2295,2.411,2296,2.411,2297,3.887,2298,2.411,2299,2.411,2300,2.411,2301,2.411,2302,2.411,2303,2.411,2304,2.411,2305,2.411]],["title/entities/Post.html",[58,1.048,556,1.432]],["body/entities/Post.html",[0,0.404,3,0.05,4,0.05,5,0.039,10,0.125,11,0.5,18,0.362,19,0.008,20,0.678,21,1.545,22,1.281,23,0.42,34,0.14,35,0.475,36,0.045,39,1.492,40,1.241,46,2.416,47,0.004,48,0.004,58,1.777,64,1.368,66,4.062,67,3.312,68,4.876,69,3.564,70,3.766,88,4.684,134,3.71,154,3.088,155,3.088,158,3.71,159,3.874,160,3.225,163,2.912,166,4.147,176,2.125,185,4.147,227,5.318,270,0.716,272,2.362,310,2.046,380,0.918,410,4.282,411,4.545,412,4.282,413,4.517,427,3.683,479,4.297,481,2.146,500,2.518,521,4.125,533,1.255,556,2.078,560,2.431,562,2.504,566,2.362,570,3.71,573,2.18,574,1.572,575,2.92,576,1.572,581,1.414,582,2.857,583,4.091,662,2.518,697,2.966,701,2.372,717,2.023,1127,1.974,1185,5.054,1196,3.381,1213,5.418,1496,1.901,1507,5.054,1521,2.25,1926,2.518,1927,2.701,2081,3.225,2090,3.225,2306,2.946,2307,3.381,2308,3.381,2309,3.381,2310,3.381,2311,3.784,2312,4.986,2313,3.318,2314,3.318,2315,4.986,2316,3.318,2317,3.318,2318,3.318,2319,3.318,2320,3.318,2321,3.318,2322,4.986,2323,3.318,2324,3.318,2325,3.318,2326,4.986,2327,3.318,2328,4.986,2329,3.318,2330,4.986,2331,3.318,2332,3.318,2333,3.318,2334,3.318,2335,3.318,2336,3.318,2337,3.318,2338,2.946,2339,2.518,2340,3.318]],["title/classes/PostAnalyticResposneDto.html",[0,0.259,400,3.483]],["body/classes/PostAnalyticResposneDto.html",[0,0.38,2,0.801,3,0.076,4,0.076,5,0.06,10,0.19,11,0.675,18,0.356,19,0.007,20,0.52,23,0.424,34,0.085,36,0.068,47,0.005,48,0.005,59,3.912,90,6.707,134,4.678,272,3.186,310,2.065,400,5.103,402,7.432,418,6.707,420,6.707,422,6.707,424,6.707,428,6.707,586,4.167,589,2.053,717,3.705,1121,5.971,1124,5.103,1126,4.118,2090,5.207,2341,8.106,2342,4.118,2343,7.553,2344,8.38,2345,5.058,2346,5.058,2347,5.058,2348,5.058,2349,5.058,2350,6.724,2351,5.058,2352,5.058,2353,5.058,2354,5.058,2355,4.491,2356,5.058,2357,7.553,2358,8.616,2359,5.971,2360,8.38]],["title/modules/PostModule.html",[366,1.556,460,3.281]],["body/modules/PostModule.html",[0,0.337,3,0.09,4,0.09,5,0.07,19,0.007,34,0.156,36,0.08,40,1.069,47,0.006,48,0.006,58,1.36,88,4.132,166,4.132,301,2.764,330,1.386,366,2.533,368,2.672,369,3.353,372,3.54,373,2.821,374,2.821,376,3.643,377,2.903,378,2.154,380,1.648,382,2.903,383,4.847,460,6.53,500,4.519,854,5.67,1157,5.287,2361,5.287,2362,5.287,2363,5.287,2364,7.722,2365,5.954,2366,7.25,2367,5.954,2368,5.954,2369,5.954,2370,5.954,2371,4.847]],["title/entities/PostReport.html",[479,2.63,556,1.432]],["body/entities/PostReport.html",[0,0.464,3,0.072,4,0.072,5,0.056,10,0.179,11,0.647,18,0.323,19,0.008,20,0.608,21,1.217,22,0.915,23,0.385,34,0.142,35,0.68,36,0.064,39,1.759,40,1.313,46,2.131,47,0.005,48,0.005,58,2.011,64,1.672,98,3.676,99,5.556,141,2.945,176,3.346,186,4.735,270,1.026,310,1.874,379,2.462,380,1.316,479,3.696,521,4.862,533,1.799,556,2.449,560,3.145,562,3.942,566,3.056,569,5.233,570,2.945,573,2.82,574,2.253,575,3.569,576,2.253,577,3.225,578,4.375,579,2.829,580,3.608,581,2.026,582,3.696,583,3.696,675,4.965,703,5.727,2081,4.172,2307,4.375,2308,4.375,2309,4.375,2310,4.375,2311,4.895,2339,3.608,2372,7.514,2373,3.87,2374,5.959,2375,6.5,2376,4.754,2377,4.754,2378,6.45,2379,4.754,2380,4.754,2381,4.754,2382,4.611]],["title/classes/ReCaptchaResponseDto.html",[0,0.259,902,3.483]],["body/classes/ReCaptchaResponseDto.html",[0,0.38,2,1.065,3,0.101,4,0.101,5,0.08,10,0.253,11,0.808,18,0.339,19,0.007,20,0.691,23,0.404,36,0.09,47,0.006,48,0.006,902,6.112,974,7.016,2090,5.209,2342,5.478,2383,7.931,2384,8.618,2385,8.618,2386,6.729,2387,6.729,2388,6.729]],["title/controllers/ReportController.html",[299,1.819,2389,3.483]],["body/controllers/ReportController.html",[0,0.12,3,0.032,4,0.032,5,0.025,10,0.08,12,0.896,13,0.493,18,0.28,19,0.008,23,0.333,28,1.107,29,0.935,30,0.975,34,0.122,36,0.029,40,1.116,42,1.222,47,0.003,48,0.003,53,1.039,58,1.86,64,1.565,89,2.779,169,2.571,270,1.532,299,0.845,301,0.789,303,1.179,308,5.132,309,4.66,310,1.622,311,4.385,319,4.917,320,4.098,321,4.432,322,4.226,327,1.071,328,3.313,329,1.179,330,0.496,331,1.071,332,1.222,333,1.179,336,1.14,343,3.689,344,1.524,345,1.379,346,1.222,348,1.071,350,3.907,356,2.819,358,3.679,359,3.929,360,4.148,361,3.799,395,3.368,536,2.615,597,2.862,604,4.098,608,2.784,609,2.336,611,1.893,615,1.618,621,1.893,624,3.698,626,3.726,627,1.14,628,1.104,634,1.893,642,1.893,647,1.893,650,1.618,675,3.907,697,2.67,701,4.9,847,3.653,1036,2.385,1485,3.122,1486,3.122,1496,2.571,1661,1.735,2382,3.722,2389,2.668,2390,1.893,2391,3.984,2392,3.984,2393,3.984,2394,3.122,2395,3.122,2396,3.984,2397,3.122,2398,3.122,2399,2.132,2400,6.085,2401,3.516,2402,2.132,2403,2.132,2404,3.951,2405,2.132,2406,2.132,2407,2.132,2408,2.132,2409,7.929,2410,5.206,2411,2.132,2412,2.132,2413,3.516,2414,2.132,2415,2.132,2416,2.132,2417,2.132,2418,2.132,2419,2.132,2420,2.132,2421,4.977,2422,3.516,2423,2.132,2424,2.132,2425,2.132,2426,2.132,2427,2.132,2428,2.132,2429,2.132,2430,3.516,2431,4.487,2432,2.132,2433,3.043,2434,1.893,2435,2.132,2436,3.516,2437,7.103,2438,2.132,2439,3.516,2440,3.516,2441,2.132,2442,2.132,2443,2.132,2444,4.487,2445,4.487,2446,2.132,2447,3.516,2448,2.132,2449,2.132,2450,3.516,2451,1.893,2452,2.132,2453,1.893,2454,2.132,2455,2.132,2456,2.132,2457,2.132,2458,3.516,2459,2.132,2460,1.893,2461,2.132,2462,1.893]],["title/classes/ReportDto.html",[0,0.259,2421,3.483]],["body/classes/ReportDto.html",[0,0.439,2,1.003,3,0.096,4,0.096,5,0.075,10,0.238,11,0.779,18,0.306,19,0.007,20,0.601,23,0.364,34,0.13,36,0.085,40,1.111,47,0.006,48,0.006,58,1.773,64,1.917,99,6.371,186,5.43,270,1.366,310,1.773,578,4.295,580,4.806,586,4.033,589,2.57,783,4.808,1122,4.096,1139,4.808,2382,5.549,2421,5.891,2463,5.623,2464,7.762,2465,6.333,2466,6.333,2467,6.333,2468,6.333]],["title/modules/ReportModule.html",[366,1.556,461,3.281]],["body/modules/ReportModule.html",[0,0.342,3,0.091,4,0.091,5,0.071,19,0.007,34,0.156,36,0.081,40,1.079,47,0.006,48,0.006,58,1.723,301,2.791,330,1.408,366,2.558,368,2.714,369,3.386,372,3.575,373,2.866,374,2.866,376,3.678,377,2.949,378,2.188,379,3.132,380,1.674,382,2.949,461,6.46,479,4.323,481,4.88,482,3.912,485,4.489,486,4.102,2371,4.923,2389,6.241,2433,6.128,2434,5.37,2469,5.37,2470,5.37,2471,6.048,2472,6.699,2473,6.048,2474,6.048]],["title/injectables/ReportService.html",[384,1.199,2433,3.113]],["body/injectables/ReportService.html",[0,0.093,3,0.025,4,0.025,5,0.02,10,0.062,12,0.839,13,0.398,15,1.446,18,0.262,19,0.008,20,0.625,23,0.312,28,0.895,29,0.876,30,1.074,31,1.535,34,0.118,35,0.237,36,0.022,37,1.383,40,1.253,47,0.002,48,0.002,58,1.959,63,1.796,64,2.021,89,2.31,98,2.222,113,1.925,134,1.758,169,2.535,218,1.255,270,1.325,309,1.426,320,2.04,327,0.83,328,2.773,330,0.385,356,2.712,378,0.598,379,0.856,380,0.458,384,0.741,385,0.687,387,1.241,389,4.073,390,2.31,392,2.667,398,0.984,399,0.884,404,1.182,405,2.36,406,0.914,407,3.867,408,3.037,409,2.862,410,3.163,414,3.767,415,3.669,417,2.311,426,1.689,427,1.57,443,1.346,444,2.535,479,2.535,481,1.836,482,2.862,485,1.689,486,1.121,533,1.674,536,3.083,569,3.163,577,1.121,578,1.121,579,0.984,597,2.311,604,3.934,608,3.283,609,2.755,624,3.341,627,1.518,628,0.856,667,3.312,675,5.166,684,4.427,685,1.07,686,0.984,687,1.121,689,1.468,692,3.677,695,2.862,697,2.633,699,2.521,700,2.521,701,5.041,716,3.803,717,1.796,718,3.001,720,2.029,721,1.836,731,3.688,733,2.521,735,3.358,736,3.358,738,3.602,739,3.358,741,3.358,743,3.358,789,3.163,912,3.163,1059,1.346,1375,1.346,1430,2.311,1431,1.468,1438,3.929,1441,2.521,1449,3.602,1456,3.602,1457,3.602,1496,2.535,1518,0.984,1727,1.255,1946,2.154,1948,2.521,1949,2.311,1964,5.166,2255,2.521,2260,2.311,2371,1.346,2374,3.602,2375,1.468,2382,5.445,2391,2.521,2392,2.521,2393,2.521,2394,2.521,2395,2.521,2396,2.521,2397,2.521,2398,2.521,2400,5.91,2404,2.154,2433,1.925,2451,2.521,2453,2.521,2460,2.521,2462,2.521,2472,2.521,2475,1.468,2476,1.653,2477,3.312,2478,1.653,2479,2.839,2480,1.653,2481,5.91,2482,1.653,2483,2.839,2484,1.653,2485,1.653,2486,1.653,2487,2.839,2488,1.653,2489,2.839,2490,1.653,2491,4.425,2492,2.839,2493,1.653,2494,2.839,2495,1.653,2496,3.73,2497,1.653,2498,1.468,2499,2.839,2500,2.839,2501,3.312,2502,2.839,2503,3.73,2504,4.425,2505,2.839,2506,1.653,2507,2.839,2508,1.468,2509,1.653,2510,1.653,2511,2.839,2512,1.653,2513,2.839,2514,1.653,2515,1.653,2516,1.653,2517,1.653,2518,3.73,2519,1.653,2520,1.653,2521,2.839,2522,2.839,2523,1.653,2524,3.73,2525,2.839,2526,1.653,2527,1.468,2528,1.653,2529,1.653,2530,1.653,2531,1.653,2532,1.653,2533,1.653,2534,1.653,2535,1.653,2536,1.653,2537,2.839,2538,2.839,2539,2.839,2540,1.653,2541,1.653,2542,1.653,2543,1.653,2544,1.653,2545,2.839,2546,2.839,2547,2.839,2548,1.653,2549,1.653,2550,1.653,2551,1.653,2552,1.653,2553,1.653,2554,2.839,2555,1.653,2556,1.653,2557,1.653,2558,1.653,2559,1.653,2560,2.839,2561,1.653,2562,1.653,2563,1.653,2564,1.653,2565,1.653,2566,2.839,2567,2.839,2568,1.653,2569,1.653,2570,1.653,2571,1.653,2572,1.653,2573,1.653,2574,1.653,2575,1.653,2576,1.653,2577,1.653,2578,1.653,2579,1.653,2580,1.653,2581,1.653]],["title/guards/RolesGuard.html",[343,2.731,767,3.483]],["body/guards/RolesGuard.html",[0,0.335,3,0.089,4,0.089,5,0.07,8,1.461,10,0.223,12,0.939,13,1.044,18,0.294,19,0.008,23,0.349,28,1.001,29,0.98,30,0.814,34,0.143,36,0.08,40,0.848,47,0.006,48,0.006,53,2.89,330,1.38,343,4.433,345,3.834,346,3.397,348,2.977,356,2.526,384,1.946,387,2.592,407,3.343,426,3.527,2090,4.819,2582,4.826,2583,5.263,2584,7.59,2585,5.263,2586,7.983,2587,5.928,2588,6.615,2589,7.59,2590,5.928,2591,5.263,2592,4.826,2593,4.826,2594,7.451,2595,5.928,2596,5.263,2597,5.263,2598,5.263,2599,5.928,2600,5.928]],["title/entities/Scrapbook.html",[88,2.538,556,1.432]],["body/entities/Scrapbook.html",[0,0.469,3,0.074,4,0.074,5,0.058,10,0.185,11,0.663,18,0.337,19,0.008,20,0.661,23,0.401,34,0.139,35,0.704,36,0.066,39,1.784,40,1.342,46,2.37,47,0.005,48,0.005,58,1.952,64,1.701,66,5.052,69,4.432,70,4.293,88,4.592,176,2.813,270,1.061,310,1.952,380,1.362,425,5.861,521,4.931,533,1.861,556,2.484,560,2.399,562,3.315,566,3.128,573,2.886,574,2.331,575,3.218,576,2.331,581,2.097,582,2.819,583,3.782,697,4.736,1083,4.005,1127,2.927,1185,3.734,1213,5.009,2081,4.27,2307,4.477,2308,4.477,2309,4.477,2310,4.477,2311,5.009,2339,3.734,2601,4.368,2602,4.92,2603,4.92,2604,4.92,2605,4.92,2606,6.6,2607,4.92,2608,4.92]],["title/classes/SendNotificationDto.html",[0,0.259,1979,3.281]],["body/classes/SendNotificationDto.html",[0,0.428,2,0.962,3,0.092,4,0.092,5,0.072,10,0.228,11,0.76,18,0.34,19,0.007,20,0.7,23,0.404,34,0.127,36,0.082,47,0.006,48,0.006,310,1.97,586,4.089,589,2.465,624,3.904,1122,3.93,1124,5.742,1979,5.409,2017,7.316,2030,6.708,2031,4.946,2032,4.946,2033,5.394,2355,5.394,2359,6.718,2609,7.878,2610,5.394,2611,8.24,2612,8.24,2613,6.075,2614,7.566,2615,6.075,2616,6.075,2617,6.075]],["title/classes/SignUpUserDto.html",[0,0.259,780,3.483]],["body/classes/SignUpUserDto.html",[0,0.364,2,0.75,3,0.071,4,0.071,5,0.056,10,0.178,11,0.646,17,1.527,18,0.351,19,0.007,20,0.731,23,0.418,34,0.079,36,0.064,40,1.209,47,0.005,48,0.005,182,5.949,270,1.022,272,3.049,310,2.01,320,2.966,414,3.137,528,5.546,530,4.526,542,5.713,586,4.301,589,1.922,624,3.049,768,4.162,772,4.364,780,4.884,786,4.884,789,4.6,794,5.238,824,5.949,825,5.949,826,4.526,895,4.884,1139,3.986,1343,6.882,1656,5.238,1753,4.364,1847,5.713,2196,4.884,2618,8.008,2619,4.207,2620,6.435,2621,6.435,2622,6.435,2623,6.435,2624,5.713,2625,6.435,2626,6.488,2627,5.949,2628,5.949,2629,4.738,2630,4.738,2631,4.738,2632,6.488,2633,4.738,2634,4.738,2635,4.738,2636,4.738,2637,5.713,2638,4.738,2639,4.738,2640,4.207]],["title/injectables/StripeService.html",[384,1.199,2641,3.737]],["body/injectables/StripeService.html",[0,0.329,3,0.088,4,0.088,5,0.069,10,0.218,11,0.739,12,0.733,13,1.031,15,1.383,18,0.229,19,0.007,20,0.625,21,1.097,22,1.118,23,0.345,28,0.781,29,0.765,30,0.798,31,1.443,34,0.135,36,0.078,37,1.056,47,0.006,48,0.006,64,1.681,80,2.916,270,1.254,328,2.15,330,1.353,384,1.922,385,2.417,405,3.826,415,3.217,2143,6.633,2209,6.534,2210,6.534,2211,6.534,2212,6.534,2213,5.991,2220,6.534,2222,5.161,2225,7.537,2641,5.991,2642,5.161,2643,7.359,2644,7.359,2645,5.813,2646,7.359,2647,5.813,2648,7.359,2649,5.813]],["title/guards/SubscriptionsGuard.html",[341,3.483,767,3.483]],["body/guards/SubscriptionsGuard.html",[0,0.334,3,0.089,4,0.089,5,0.07,8,1.455,10,0.222,12,0.937,13,1.041,18,0.293,19,0.008,23,0.348,28,0.999,29,0.978,30,0.81,34,0.143,36,0.079,40,0.844,47,0.006,48,0.006,236,3.511,330,1.374,337,4.479,338,4.479,340,5.24,341,5.639,348,2.964,356,2.519,384,1.94,387,2.58,407,3.334,426,3.511,2090,4.806,2582,4.805,2584,7.578,2585,5.24,2586,7.974,2588,6.597,2589,7.578,2591,5.24,2592,4.805,2596,5.24,2597,5.24,2598,5.24,2650,5.24,2651,5.902,2652,5.902,2653,6.049,2654,7.43,2655,5.902,2656,5.902,2657,5.902]],["title/modules/TasksModule.html",[366,1.556,462,3.281]],["body/modules/TasksModule.html",[0,0.355,3,0.095,4,0.095,5,0.074,19,0.007,34,0.155,36,0.085,40,0.9,47,0.006,48,0.006,58,1.765,245,3.768,330,1.464,366,2.62,368,2.822,369,3.468,372,3.662,373,2.98,374,2.98,376,3.768,377,3.066,378,2.275,379,3.256,380,1.741,382,3.066,462,6.522,485,4.599,486,4.265,869,4.265,2658,5.583,2659,5.583,2660,6.522,2661,6.288,2662,6.288,2663,5.119,2664,5.119]],["title/injectables/TasksService.html",[384,1.199,2660,3.281]],["body/injectables/TasksService.html",[0,0.234,3,0.062,4,0.062,5,0.049,10,0.156,12,0.522,13,0.821,15,1.483,18,0.163,19,0.008,23,0.366,28,0.556,29,0.545,30,1.015,34,0.147,35,0.592,36,0.056,37,0.752,40,0.592,47,0.005,48,0.005,58,1.338,153,3.37,163,3.234,245,2.857,270,0.893,310,1.689,330,0.964,378,1.498,379,2.144,380,1.146,384,1.53,385,1.721,387,2.562,389,4.833,390,3.63,392,4.863,399,2.214,404,2.959,405,3.505,406,2.289,407,1.858,415,1.81,485,2.463,486,2.808,503,3.37,543,6.022,579,2.463,697,3.487,768,3.79,986,5.017,1160,4.447,1376,3.37,1430,3.37,1496,4.238,1518,2.463,1521,2.808,1539,3.676,1603,3.676,1818,3.37,1914,6.04,1926,3.142,1927,3.37,1928,3.676,2190,3.676,2196,4.447,2197,6.568,2260,3.37,2404,3.142,2477,6.04,2481,3.676,2498,3.676,2501,3.676,2660,4.189,2663,3.37,2664,3.37,2665,3.676,2666,5.86,2667,5.86,2668,5.86,2669,5.86,2670,5.86,2671,5.86,2672,5.86,2673,5.86,2674,5.86,2675,5.86,2676,6.802,2677,6.802,2678,6.802,2679,7.397,2680,4.14,2681,7.806,2682,4.14,2683,7.806,2684,7.806,2685,7.806,2686,7.806,2687,4.14,2688,8.513,2689,7.397,2690,7.806,2691,4.14,2692,4.14,2693,7.397,2694,4.14,2695,4.14,2696,3.37,2697,3.676,2698,4.14,2699,3.676,2700,4.14,2701,4.14]],["title/classes/UpdateUserBioDto.html",[0,0.259,2702,3.737]],["body/classes/UpdateUserBioDto.html",[0,0.45,2,1.044,3,0.1,4,0.1,5,0.078,10,0.248,11,0.799,18,0.26,19,0.007,20,0.616,23,0.309,34,0.11,36,0.089,47,0.006,48,0.006,242,6.957,270,1.423,272,3.771,310,1.507,586,3.668,589,2.677,772,5.397,1100,5.857,1101,5.857,1753,5.397,2702,6.478,2703,7.066,2704,4.474,2705,6.039,2706,6.478,2707,6.597,2708,5.857,2709,7.958]],["title/classes/UpdateUserDateOfBirthDto.html",[0,0.259,2710,3.737]],["body/classes/UpdateUserDateOfBirthDto.html",[0,0.452,2,1.055,3,0.1,4,0.1,5,0.079,10,0.25,11,0.804,18,0.262,19,0.007,23,0.312,34,0.111,36,0.09,47,0.006,48,0.006,270,1.437,272,4.218,310,1.522,586,3.956,589,2.703,772,5.429,1753,5.429,2627,6.986,2704,4.518,2705,6.075,2706,6.517,2710,6.517,2711,7.108,2712,5.423]],["title/classes/UpdateUserEmailDto.html",[0,0.259,2713,3.737]],["body/classes/UpdateUserEmailDto.html",[0,0.452,2,1.055,3,0.1,4,0.1,5,0.079,10,0.25,11,0.804,18,0.262,19,0.007,20,0.619,23,0.312,34,0.111,36,0.09,47,0.006,48,0.006,270,1.437,310,1.522,589,2.703,772,5.429,826,5.64,1753,5.429,2632,7.62,2704,4.518,2705,6.075,2712,5.423,2713,6.517,2714,7.108,2715,8.005]],["title/classes/UpdateUserPasswordDto.html",[0,0.259,2716,3.737]],["body/classes/UpdateUserPasswordDto.html",[0,0.441,2,1.012,3,0.096,4,0.096,5,0.076,10,0.24,11,0.784,18,0.332,19,0.007,20,0.709,23,0.395,34,0.107,36,0.086,47,0.006,48,0.006,310,1.925,530,5.221,586,4.15,589,2.594,2626,7.484,2704,4.336,2708,5.676,2716,6.356,2717,7.795,2718,8.429,2719,7.807,2720,6.393,2721,6.393,2722,6.393,2723,7.807]],["title/classes/UpdateUserPhoneNumberDto.html",[0,0.259,2724,3.737]],["body/classes/UpdateUserPhoneNumberDto.html",[0,0.452,2,1.055,3,0.1,4,0.1,5,0.079,10,0.25,11,0.804,18,0.262,19,0.007,20,0.619,23,0.312,34,0.111,36,0.09,47,0.006,48,0.006,270,1.437,272,3.793,310,1.522,589,2.703,772,5.429,1753,5.429,2628,6.986,2637,7.108,2640,5.915,2704,4.518,2705,6.075,2706,6.517,2712,5.423,2724,6.517,2725,7.108]],["title/entities/User.html",[40,0.657,556,1.432]],["body/entities/User.html",[0,0.297,3,0.027,4,0.027,5,0.021,10,0.068,11,0.308,15,0.31,18,0.359,19,0.008,20,0.661,21,1.62,22,1.43,23,0.425,34,0.139,35,0.259,36,0.024,37,0.329,39,1.052,40,1.221,46,2.364,47,0.002,48,0.002,53,2.782,58,1.303,64,0.911,88,3.156,138,4.331,141,2.47,144,3.027,153,3.247,154,1.899,155,1.899,160,1.983,163,2.796,166,3.156,182,3.247,185,3.156,193,3.89,200,4.338,212,3.027,215,4.331,218,3.027,234,3.247,235,3.247,236,3.395,240,3.541,241,3.541,242,3.247,245,2.782,269,3.46,270,0.39,272,2.225,310,2.071,337,1.373,338,1.373,346,1.037,379,0.937,411,3.027,412,3.357,413,3.184,415,0.791,427,3.813,479,3.27,481,1.983,482,4.59,485,3.395,486,1.227,491,1.606,492,4.59,493,1.606,494,1.373,500,1.373,507,1.606,508,2.908,509,1.606,510,2.908,511,1.606,521,3.254,528,3.027,530,2.47,533,0.684,556,1.465,566,1.452,570,4.505,573,1.34,574,0.857,576,0.857,581,0.771,583,4.637,662,1.373,675,2.079,697,3.395,701,1.293,711,2.722,717,1.905,786,1.373,824,3.247,825,3.247,826,2.47,900,1.293,901,1.606,1010,3.247,1049,1.473,1104,1.293,1105,2.326,1185,6.141,1196,2.079,1206,1.606,1212,2.722,1213,6.201,1254,2.326,1496,3.27,1497,2.705,1507,3.563,1610,1.373,1637,3.247,1643,2.495,1734,3.541,1746,2.722,1747,2.722,1759,2.722,1760,2.722,1771,3.541,1863,3.563,1985,1.473,2031,1.473,2034,1.606,2053,3.541,2081,1.983,2090,3.037,2228,3.541,2307,2.079,2308,2.079,2309,2.079,2310,2.079,2338,1.606,2404,3.027,2508,3.541,2527,3.541,2627,3.247,2628,3.247,2663,2.495,2664,1.473,2699,3.541,2726,1.606,2727,2.722,2728,3.988,2729,3.988,2730,3.988,2731,3.988,2732,3.988,2733,3.988,2734,1.809,2735,3.065,2736,1.809,2737,3.065,2738,1.809,2739,1.809,2740,3.065,2741,1.809,2742,3.065,2743,1.809,2744,3.065,2745,3.065,2746,1.809,2747,3.065,2748,1.809,2749,1.809,2750,1.809,2751,3.065,2752,1.809,2753,3.065,2754,1.809,2755,1.809,2756,1.809,2757,1.809,2758,1.809,2759,1.809,2760,1.809,2761,1.809,2762,1.809,2763,3.988,2764,1.809,2765,3.065,2766,1.809,2767,1.809,2768,1.809,2769,1.809,2770,1.809,2771,3.065,2772,1.809,2773,3.065,2774,1.809,2775,1.809,2776,1.809,2777,1.809,2778,1.809,2779,1.809,2780,1.809,2781,1.809,2782,1.809,2783,3.065,2784,1.809,2785,3.065,2786,1.809,2787,3.065,2788,1.809,2789,1.809,2790,3.065,2791,1.809,2792,1.809,2793,1.809,2794,1.809,2795,3.988,2796,1.809,2797,1.809,2798,1.809,2799,1.809,2800,1.809,2801,1.809,2802,5.707,2803,1.809,2804,1.809,2805,1.809,2806,1.809,2807,1.809,2808,1.809,2809,1.809,2810,1.809,2811,1.809,2812,1.809,2813,1.809,2814,1.809]],["title/entities/UserBan.html",[485,2.731,556,1.432]],["body/entities/UserBan.html",[0,0.474,3,0.076,4,0.076,5,0.06,10,0.19,11,0.676,18,0.33,19,0.007,20,0.623,21,1.271,22,0.975,23,0.393,34,0.135,35,0.725,36,0.068,39,1.805,40,1.317,46,2.34,47,0.005,48,0.005,64,1.727,98,3.797,127,6.713,129,6.713,141,3.139,176,2.87,270,1.093,272,3.817,310,1.915,380,1.403,485,4.006,521,4.99,533,1.917,556,2.513,560,2.471,562,3.381,566,3.19,570,3.139,573,2.943,574,2.401,575,3.283,576,2.401,579,3.015,581,2.16,847,4.126,2081,4.355,2307,4.566,2308,4.566,2309,4.566,2310,4.566,2311,5.11,2696,4.126,2697,4.5,2815,7.018,2816,4.5,2817,7.561,2818,6.733,2819,5.068,2820,5.068,2821,5.068,2822,5.068,2823,7.561,2824,5.068,2825,5.068,2826,5.068]],["title/modules/UserModule.html",[366,1.556,463,3.113]],["body/modules/UserModule.html",[0,0.355,3,0.095,4,0.095,5,0.074,19,0.007,34,0.15,36,0.084,40,0.898,47,0.006,48,0.006,301,2.855,330,1.46,366,2.617,368,2.815,369,3.463,372,3.657,373,2.973,374,2.973,376,3.763,377,3.059,378,2.269,382,3.059,463,6.265,802,6.827,854,5.857,869,4.255,2827,5.57,2828,5.57,2829,5.57,2830,6.273,2831,7.422,2832,6.273,2833,6.273,2834,6.273]],["title/entities/UserReport.html",[482,2.969,556,1.432]],["body/entities/UserReport.html",[0,0.465,3,0.072,4,0.072,5,0.057,10,0.18,11,0.651,18,0.324,19,0.008,20,0.61,21,1.225,22,0.923,23,0.386,34,0.138,35,0.686,36,0.064,39,1.766,40,1.357,46,2.139,47,0.005,48,0.005,64,1.68,98,3.693,99,5.581,141,2.971,176,3.358,186,4.757,270,1.035,310,1.88,380,1.328,482,4.197,521,4.88,533,1.815,556,2.458,560,3.164,562,3.957,566,3.075,569,5.257,570,2.971,573,2.837,574,2.273,575,3.585,576,2.273,577,3.253,578,4.401,579,2.854,580,3.64,581,2.044,582,3.718,583,3.718,675,4.988,2081,4.197,2307,4.401,2308,4.401,2309,4.401,2310,4.401,2339,3.64,2373,3.905,2374,5.987,2382,4.639,2727,5.762,2815,6.907,2835,7.354,2836,4.797,2837,4.797,2838,6.489,2839,4.797,2840,6.489,2841,4.797,2842,4.797]],["title/coverage.html",[2843,5.591]],["body/coverage.html",[0,0.538,1,1.754,5,0.025,6,1.913,7,2.326,18,0.085,19,0.008,39,0.483,40,0.308,42,1.234,47,0.003,48,0.003,49,1.754,50,1.913,54,1.754,55,1.913,58,0.492,83,1.754,84,1.913,85,1.754,86,1.913,88,1.191,94,1.754,95,1.913,109,1.754,110,1.913,117,1.754,118,1.913,121,1.754,122,1.913,123,1.754,124,1.913,132,1.754,133,1.913,136,1.754,137,1.913,139,1.754,140,1.913,142,1.754,143,1.913,151,1.754,152,1.913,156,1.754,157,1.913,161,1.754,162,1.913,163,4.182,164,1.754,165,1.913,166,1.191,172,1.754,173,1.913,174,1.754,175,1.913,177,1.754,178,1.913,180,1.754,181,1.913,183,1.754,184,1.913,185,1.191,191,1.754,192,1.913,193,1.152,198,1.754,199,1.913,200,1.234,210,1.754,211,1.913,213,1.754,214,1.913,216,1.754,217,1.913,219,1.754,220,1.913,225,1.754,226,1.913,229,1.754,230,1.913,232,1.754,233,1.913,238,1.754,239,1.913,243,1.754,244,1.913,245,1.05,249,1.754,250,1.913,253,1.754,254,1.913,257,1.754,258,1.913,260,1.754,261,1.913,262,1.754,263,1.913,269,1.05,282,1.754,283,1.913,284,1.754,285,1.913,287,1.754,288,1.913,295,1.754,296,1.913,297,1.754,298,1.913,299,3.101,300,1.635,302,1.913,331,1.082,334,1.461,339,1.754,341,1.635,343,1.282,384,2.245,386,1.913,400,1.635,402,1.754,415,0.942,464,1.54,465,1.461,469,1.754,479,1.234,482,1.393,485,1.282,492,1.393,508,1.334,510,1.334,524,6.682,551,1.913,556,2.546,557,1.913,573,0.942,584,1.54,585,1.913,590,1.635,591,1.913,604,0.993,629,1.461,664,1.913,684,1.234,686,1.282,747,1.635,748,1.913,767,2.691,771,1.635,780,1.635,802,1.54,804,1.393,852,1.54,864,1.635,870,1.913,900,1.54,902,1.635,994,1.913,1001,1.913,1011,1.635,1012,1.913,1023,1.461,1044,1.913,1075,1.913,1085,1.635,1086,3.43,1087,1.913,1095,1.754,1096,1.913,1097,3.43,1102,1.54,1103,1.913,1111,1.635,1133,1.913,1137,1.54,1138,1.913,1144,1.754,1145,1.913,1150,1.754,1151,1.913,1152,1.913,1159,1.913,1179,1.635,1182,1.913,1219,1.913,1230,1.635,1231,1.913,1263,1.635,1278,2.294,1280,1.461,1316,1.913,1333,1.913,1465,6.824,1472,1.635,1473,1.913,1479,1.461,1491,1.913,1521,1.461,1522,5.072,1523,1.913,1525,1.754,1574,1.635,1584,1.913,1609,1.913,1619,1.635,1620,1.913,1662,1.461,1694,1.913,1695,1.913,1707,1.913,1790,1.913,1791,1.913,1794,1.54,1795,1.913,1796,1.913,1799,1.913,1800,2.887,1803,1.913,1830,1.913,1831,1.913,1840,1.913,1842,1.913,1852,1.913,1864,1.635,1865,1.913,1887,1.461,1910,1.913,1973,1.635,1974,1.913,1979,1.54,1990,1.393,2007,1.913,2029,1.754,2069,1.913,2070,1.635,2079,3.43,2080,1.913,2088,1.635,2104,1.635,2106,1.913,2108,1.913,2130,1.635,2131,1.913,2162,1.461,2188,1.913,2306,1.913,2341,1.913,2342,2.887,2364,1.754,2366,1.913,2372,1.913,2373,2.887,2383,1.913,2389,1.635,2390,1.913,2421,1.635,2433,1.461,2463,1.913,2475,1.913,2583,1.913,2593,1.754,2601,1.913,2609,1.913,2610,1.913,2618,1.913,2619,1.913,2641,1.754,2642,1.913,2650,1.913,2653,1.754,2660,1.54,2665,1.913,2702,1.754,2703,1.913,2704,3.929,2710,1.754,2711,1.913,2713,1.754,2714,1.913,2716,1.754,2717,1.913,2724,1.754,2725,1.913,2726,1.913,2815,2.887,2816,1.913,2831,1.913,2843,1.913,2844,2.154,2845,2.154,2846,2.154,2847,9.317,2848,3.546,2849,6.231,2850,6.231,2851,2.154,2852,2.154,2853,4.52,2854,3.546,2855,2.154,2856,5.143,2857,8.409,2858,1.913,2859,7.526,2860,1.913,2861,7.343,2862,2.154,2863,5.792,2864,5.792,2865,3.149,2866,3.149,2867,1.913,2868,1.913,2869,3.546,2870,3.546,2871,4.52,2872,2.154,2873,4.52,2874,4.52,2875,5.239,2876,2.154,2877,2.154,2878,1.913,2879,2.154,2880,3.546,2881,3.546,2882,5.239,2883,2.154,2884,5.792,2885,2.154,2886,2.154,2887,2.154,2888,2.154,2889,3.546,2890,3.546,2891,4.52,2892,2.154,2893,2.154,2894,2.154,2895,2.154,2896,2.154,2897,2.154,2898,2.154,2899,2.154,2900,2.154,2901,2.154,2902,2.154,2903,2.154,2904,2.154,2905,2.154,2906,2.154,2907,2.154,2908,1.913,2909,2.154]],["title/dependencies.html",[369,2.481,2910,3.107]],["body/dependencies.html",[0,0.431,19,0.008,35,0.879,47,0.006,48,0.006,330,1.43,336,3.286,369,2.757,378,2.223,395,3.975,470,5.456,503,5.002,589,2.493,774,4.663,777,4.663,801,5.002,856,5.002,858,5.002,860,4.167,1177,5.456,1524,5.783,1578,5.456,1808,6.742,2082,5.456,2143,4.393,2592,5.002,2911,6.144,2912,8.902,2913,6.144,2914,6.144,2915,6.144,2916,6.144,2917,6.144,2918,6.144,2919,6.144,2920,6.144,2921,6.144,2922,6.144,2923,6.144,2924,6.144,2925,6.144,2926,6.144,2927,6.144,2928,6.144,2929,6.144,2930,6.144,2931,6.144,2932,6.144,2933,6.144,2934,6.144,2935,6.144,2936,6.144,2937,6.144]],["title/miscellaneous/enumerations.html",[2938,2.589,2939,4.909]],["body/miscellaneous/enumerations.html",[10,0.184,14,1.621,19,0.007,22,1.871,47,0.005,48,0.005,53,3.206,70,3.303,113,5.038,114,3.713,126,4.991,138,4.991,141,4.073,186,4.254,215,4.991,236,3.913,237,5.839,326,5.354,395,4.254,405,3.116,577,4.46,1452,5.354,1676,6.466,1703,5.354,1756,7.053,1818,5.354,2020,7.053,2023,5.839,2030,5.354,2032,5.354,2109,5.839,2126,5.839,2696,5.354,2938,3.318,2939,4.344,2940,4.893,2941,8.534,2942,4.893,2943,4.893,2944,6.576,2945,6.576,2946,6.576,2947,4.893,2948,6.576,2949,6.576,2950,4.893,2951,4.893,2952,6.576,2953,4.893,2954,4.893,2955,4.893,2956,4.893,2957,6.576,2958,6.576,2959,6.576,2960,6.576,2961,6.576,2962,6.576,2963,6.576,2964,4.893,2965,6.576,2966,6.576,2967,6.576,2968,4.893,2969,4.893,2970,4.893,2971,4.893,2972,4.893,2973,6.576,2974,6.576,2975,6.576,2976,4.893,2977,4.893]],["title/miscellaneous/functions.html",[2938,2.589,2978,4.909]],["body/miscellaneous/functions.html",[10,0.279,19,0.007,47,0.007,48,0.007,2867,6.584,2868,7.967,2938,5.029,2978,6.584,2979,7.415]],["title/index.html",[10,0.143,2980,3.817,2981,3.817]],["body/index.html",[5,0.069,12,0.731,18,0.228,19,0.006,47,0.006,48,0.006,64,1.678,73,3.708,98,2.913,405,2.748,519,5.577,521,5.538,523,5.15,526,5.15,528,4.402,530,3.592,538,7.163,543,7.481,545,5.15,548,5.15,768,5.218,793,4.402,922,6.525,1349,4.722,1524,6.437,1574,4.402,1820,6.567,2141,5.15,2143,5.254,2150,4.722,2196,6.122,2215,4.722,2240,6.525,2624,5.15,2910,5.983,2982,5.8,2983,7.349,2984,5.8,2985,5.8,2986,5.8,2987,7.349,2988,5.8,2989,5.8,2990,5.15,2991,8.067,2992,5.8,2993,8.751,2994,5.8,2995,5.8,2996,5.8,2997,5.8,2998,5.8,2999,5.8,3000,8.067,3001,5.8,3002,5.8,3003,5.8,3004,5.8,3005,5.8,3006,5.8,3007,5.8,3008,5.8,3009,5.8,3010,5.8,3011,5.8,3012,7.349,3013,5.8,3014,5.8,3015,5.8]],["title/modules.html",[368,2.826]],["body/modules.html",[19,0.006,47,0.006,48,0.006,367,4.464,368,2.802,447,4.739,451,4.464,452,4.464,453,4.464,454,4.464,455,4.464,456,4.464,457,4.464,458,4.235,459,4.464,460,4.464,461,4.464,462,4.464,463,4.235,3016,9.637,3017,9.637,3018,9.637,3019,9.637]],["title/overview.html",[3020,5.591]],["body/overview.html",[2,0.671,19,0.007,47,0.005,48,0.005,301,1.567,334,4.673,367,5.63,368,1.902,369,2.673,370,3.763,371,3.763,372,2.823,373,2.008,374,2.008,385,1.762,447,7.315,448,3.763,449,3.763,450,3.763,451,5.63,452,6.435,453,5.63,454,5.63,455,5.63,456,5.63,457,5.63,458,5.69,459,5.997,460,5.839,461,5.63,462,5.63,463,5.69,464,4.925,465,5.069,533,1.603,629,4.673,657,3.763,658,3.763,802,5.997,804,5.426,848,3.763,849,3.763,851,3.763,852,4.925,1023,4.673,1038,3.763,1039,3.763,1280,4.673,1325,3.763,1326,3.763,1479,4.673,1487,3.763,1488,3.763,1518,2.521,1662,4.673,1688,3.763,1689,3.763,1887,4.673,1904,3.763,1905,3.763,1990,5.426,2002,3.763,2003,3.763,2004,3.763,2104,3.216,2162,4.673,2182,3.763,2183,3.763,2213,3.45,2361,3.763,2362,3.763,2363,3.763,2364,6.829,2433,4.673,2469,3.763,2470,3.763,2582,3.45,2658,3.763,2659,3.763,2660,4.925,2827,3.763,2828,3.763,2829,3.763,3020,3.763,3021,4.238,3022,4.238,3023,4.238,3024,4.238,3025,4.238]],["title/properties.html",[11,0.555,2910,3.107]],["body/properties.html",[11,0.738,19,0.007,47,0.007,48,0.007,270,1.586,1076,6.53,1588,6.53,3026,7.354,3027,7.354,3028,7.354]],["title/miscellaneous/variables.html",[519,4.196,2938,2.589]],["body/miscellaneous/variables.html",[10,0.202,18,0.325,19,0.007,20,0.542,21,1.755,22,1.789,36,0.072,42,5.023,47,0.005,48,0.005,53,2.624,73,2.353,236,3.202,321,3.415,339,5.702,395,3.481,415,2.353,469,6.339,519,4.085,796,6.219,864,5.316,983,4.779,1160,4.085,1522,4.382,1524,6.259,1525,6.339,1574,5.316,1820,4.382,2029,6.339,2157,4.382,2215,4.382,2593,5.702,2653,5.702,2856,7.783,2858,6.219,2860,6.219,2865,4.779,2866,4.779,2878,4.779,2908,6.219,2938,3.65,2990,6.219,3029,8.551,3030,5.382,3031,7.004,3032,7.004,3033,5.382,3034,5.382,3035,5.382,3036,5.382,3037,5.382,3038,5.382,3039,5.382,3040,5.382,3041,5.382,3042,5.382,3043,5.382,3044,5.382,3045,5.382,3046,5.382,3047,7.787,3048,5.382,3049,5.382]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateClueDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"controllers/EventController.html":{},"entities/EventGoal.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Memory.html":{},"controllers/MemoryController.html":{},"modules/MemoryModule.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"classes/ReCaptchaResponseDto.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"guards/SubscriptionsGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":163,"title":{},"body":{"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"injectables/AnalyticsService.html":{},"injectables/AuthService.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"injectables/EventService.html":{},"entities/Memory.html":{},"injectables/NotificationService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"coverage.html":{}}}],["0.0.1",{"_index":3026,"title":{},"body":{"properties.html":{}}}],["0.000000",{"_index":252,"title":{},"body":{"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1678774445242.html":{}}}],["0.1.13",{"_index":2931,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":2922,"title":{},"body":{"dependencies.html":{}}}],["0.3.11",{"_index":2937,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2921,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":2927,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2857,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2870,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2848,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2875,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2847,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2892,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1518,"title":{},"body":{"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/NotificationService.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["1.0.0",{"_index":2929,"title":{},"body":{"dependencies.html":{}}}],["1.3.4",{"_index":2918,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":2859,"title":{},"body":{"coverage.html":{}}}],["1/10",{"_index":2879,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":2884,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2850,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":2854,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":2890,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":2895,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":2852,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1179,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/MemoryService.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["10.0.1",{"_index":2914,"title":{},"body":{"dependencies.html":{}}}],["10/12",{"_index":2883,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1465,"title":{},"body":{"injectables/EventService.html":{},"coverage.html":{}}}],["1000",{"_index":1570,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["100m",{"_index":1354,"title":{},"body":{"injectables/EventService.html":{}}}],["100px",{"_index":954,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["10m",{"_index":1920,"title":{},"body":{"injectables/MemoryService.html":{}}}],["10px",{"_index":949,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["11",{"_index":2212,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["11.4.1",{"_index":2924,"title":{},"body":{"dependencies.html":{}}}],["11.7.0",{"_index":2936,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":2851,"title":{},"body":{"coverage.html":{}}}],["12:00:00",{"_index":2674,"title":{},"body":{"injectables/TasksService.html":{}}}],["13",{"_index":3021,"title":{},"body":{"overview.html":{}}}],["14",{"_index":2894,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":2213,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{},"overview.html":{}}}],["15px",{"_index":959,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["16",{"_index":3022,"title":{},"body":{"overview.html":{}}}],["17/18",{"_index":2898,"title":{},"body":{"coverage.html":{}}}],["17/20",{"_index":2900,"title":{},"body":{"coverage.html":{}}}],["18/21",{"_index":2904,"title":{},"body":{"coverage.html":{}}}],["180",{"_index":1468,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["2",{"_index":3025,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":2911,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":2915,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":2913,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":2926,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":2919,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":2864,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":2869,"title":{},"body":{"coverage.html":{}}}],["2/8",{"_index":2877,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2889,"title":{},"body":{"coverage.html":{}}}],["200px",{"_index":957,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["2022",{"_index":2211,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["20px",{"_index":952,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["22",{"_index":3023,"title":{},"body":{"overview.html":{}}}],["24",{"_index":1568,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["25",{"_index":2853,"title":{},"body":{"coverage.html":{}}}],["26/29",{"_index":2907,"title":{},"body":{"coverage.html":{}}}],["2h",{"_index":3045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2px",{"_index":968,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["3.0.2",{"_index":2933,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":2855,"title":{},"body":{"coverage.html":{}}}],["3/6",{"_index":2876,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":2849,"title":{},"body":{"coverage.html":{}}}],["3306",{"_index":549,"title":{},"body":{"modules/AppModule.html":{}}}],["3px",{"_index":969,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["4.0.1",{"_index":2928,"title":{},"body":{"dependencies.html":{}}}],["404f5e",{"_index":951,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["40px",{"_index":931,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["450d",{"_index":147,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{}}}],["4bf8",{"_index":148,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{}}}],["4px",{"_index":965,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["5",{"_index":1956,"title":{},"body":{"injectables/MemoryService.html":{}}}],["5/10",{"_index":2893,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":2891,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":2861,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1201,"title":{},"body":{"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"injectables/FirebaseStorageService.html":{},"entities/Memory.html":{}}}],["6/12",{"_index":2862,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":2872,"title":{},"body":{"coverage.html":{}}}],["6/8",{"_index":2874,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":1569,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["604800000",{"_index":1431,"title":{},"body":{"injectables/EventService.html":{},"injectables/ReportService.html":{}}}],["60px",{"_index":962,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["6183a.appspot.com",{"_index":3037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6183a.appspot.com/o/avatars%2favatars%2fdefaultimage.png?alt=media&token=4482a7ff",{"_index":146,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{}}}],["6378137",{"_index":1462,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["66",{"_index":2863,"title":{},"body":{"coverage.html":{}}}],["68",{"_index":3024,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":2935,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":2873,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1199,"title":{},"body":{"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"entities/Memory.html":{}}}],["8/10",{"_index":2888,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":2886,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":2887,"title":{},"body":{"coverage.html":{}}}],["81",{"_index":2901,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":2882,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":2871,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":2885,"title":{},"body":{"coverage.html":{}}}],["88b04b",{"_index":936,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["89",{"_index":2906,"title":{},"body":{"coverage.html":{}}}],["8b4a1a6ebbd2",{"_index":150,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{}}}],["9.0.0",{"_index":2912,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":2916,"title":{},"body":{"dependencies.html":{}}}],["9.15.0",{"_index":2923,"title":{},"body":{"dependencies.html":{}}}],["9/10",{"_index":2881,"title":{},"body":{"coverage.html":{}}}],["9/11",{"_index":2902,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":2880,"title":{},"body":{"coverage.html":{}}}],["900",{"_index":945,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["94",{"_index":2897,"title":{},"body":{"coverage.html":{}}}],["9abc66",{"_index":953,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["a4d7",{"_index":149,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{}}}],["above",{"_index":2621,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["abstract",{"_index":1000,"title":{},"body":{"classes/BaseEntity.html":{}}}],["accept",{"_index":602,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/FollowService.html":{}}}],["accepted",{"_index":1756,"title":{},"body":{"injectables/FollowService.html":{},"miscellaneous/enumerations.html":{}}}],["acceptfollow",{"_index":1621,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["acceptfollow(@request",{"_index":1671,"title":{},"body":{"controllers/FollowController.html":{}}}],["acceptfollow(id",{"_index":1712,"title":{},"body":{"injectables/FollowService.html":{}}}],["acceptfollow(req",{"_index":1629,"title":{},"body":{"controllers/FollowController.html":{}}}],["acceptfollow(requestid",{"_index":1673,"title":{},"body":{"controllers/FollowController.html":{}}}],["acceptpostappeal",{"_index":592,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["acceptpostappeal(@request",{"_index":641,"title":{},"body":{"controllers/AppealsController.html":{}}}],["acceptpostappeal(postid",{"_index":643,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["acceptpostappeal(req",{"_index":598,"title":{},"body":{"controllers/AppealsController.html":{}}}],["accepts",{"_index":671,"title":{},"body":{"injectables/AppealsService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["access",{"_index":517,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/FirebaseStorageService.html":{}}}],["access_token",{"_index":917,"title":{},"body":{"injectables/AuthService.html":{}}}],["accessible",{"_index":315,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AuthController.html":{}}}],["accessors",{"_index":2110,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["account",{"_index":3040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["action",{"_index":81,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"injectables/FirebaseStorageService.html":{}}}],["active",{"_index":126,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"injectables/EventService.html":{},"injectables/PaymentService.html":{},"miscellaneous/enumerations.html":{}}}],["add",{"_index":41,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678975542609.html":{}}}],["addgroupby('postreport.reason",{"_index":2570,"title":{},"body":{"injectables/ReportService.html":{}}}],["addgroupby('userreport.reason",{"_index":2577,"title":{},"body":{"injectables/ReportService.html":{}}}],["address",{"_index":182,"title":{},"body":{"classes/$npmConfigName1673337064308.html":{},"classes/SignUpUserDto.html":{},"entities/User.html":{}}}],["adds",{"_index":2028,"title":{},"body":{"injectables/NotificationService.html":{}}}],["admin",{"_index":395,"title":{},"body":{"injectables/AnalyticsService.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/ReportController.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["admin.service",{"_index":1575,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/NotificationService.html":{}}}],["admin.service.ts",{"_index":2856,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin/signup",{"_index":784,"title":{},"body":{"controllers/AuthController.html":{}}}],["admins",{"_index":316,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/EventController.html":{}}}],["aed",{"_index":2244,"title":{},"body":{"injectables/PaymentService.html":{}}}],["afterload",{"_index":2335,"title":{},"body":{"entities/Post.html":{}}}],["align",{"_index":928,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["allows",{"_index":317,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/FirebaseStorageService.html":{}}}],["already",{"_index":695,"title":{},"body":{"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/BlockService.html":{},"injectables/EventService.html":{},"injectables/FollowService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["analytic",{"_index":402,"title":{},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{},"coverage.html":{}}}],["analytics",{"_index":304,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{}}}],["analytics.controller",{"_index":381,"title":{},"body":{"modules/AnalyticsModule.html":{}}}],["analytics.service",{"_index":335,"title":{},"body":{"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{}}}],["analyticscontroller",{"_index":300,"title":{"controllers/AnalyticsController.html":{}},"body":{"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"coverage.html":{}}}],["analyticsmodule",{"_index":367,"title":{"modules/AnalyticsModule.html":{}},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["analyticsservice",{"_index":334,"title":{"injectables/AnalyticsService.html":{}},"body":{"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"coverage.html":{},"overview.html":{}}}],["andwhere",{"_index":1426,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["andwhere('participants.id",{"_index":1446,"title":{},"body":{"injectables/EventService.html":{}}}],["annotation",{"_index":2620,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["api",{"_index":314,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["apiversion",{"_index":2210,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["app",{"_index":544,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":467,"title":{},"body":{"modules/AppModule.html":{}}}],["appeal",{"_index":185,"title":{"entities/Appeal.html":{}},"body":{"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1674493007150.html":{},"modules/AppModule.html":{},"entities/Appeal.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"entities/User.html":{},"coverage.html":{}}}],["appeal.appealedby",{"_index":2735,"title":{},"body":{"entities/User.html":{}}}],["appeal.appealedpost",{"_index":2312,"title":{},"body":{"entities/Post.html":{}}}],["appeal.status",{"_index":694,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appeal/:postid",{"_index":640,"title":{},"body":{"controllers/AppealsController.html":{}}}],["appeal/:postid')@roles(role.admin",{"_index":600,"title":{},"body":{"controllers/AppealsController.html":{}}}],["appealcount",{"_index":422,"title":{},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["appealdto",{"_index":584,"title":{"classes/AppealDto.html":{}},"body":{"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"coverage.html":{}}}],["appealed",{"_index":696,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appealedby",{"_index":558,"title":{},"body":{"entities/Appeal.html":{}}}],["appealedbyid",{"_index":188,"title":{},"body":{"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["appealedpost",{"_index":559,"title":{},"body":{"entities/Appeal.html":{}}}],["appealedpostid",{"_index":187,"title":{},"body":{"classes/$npmConfigName1673770456243.html":{}}}],["appealing",{"_index":676,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appealpost",{"_index":665,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appealpost(req.user",{"_index":636,"title":{},"body":{"controllers/AppealsController.html":{}}}],["appealpost(user",{"_index":673,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appealrepository",{"_index":669,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appeals",{"_index":413,"title":{},"body":{"injectables/AnalyticsService.html":{},"entities/Appeal.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["appeals')@roles(role.admin",{"_index":606,"title":{},"body":{"controllers/AppealsController.html":{}}}],["appeals.controller",{"_index":660,"title":{},"body":{"modules/AppealsModule.html":{}}}],["appeals.items",{"_index":746,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appeals.itemscount",{"_index":745,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appeals.service",{"_index":630,"title":{},"body":{"controllers/AppealsController.html":{},"modules/AppealsModule.html":{}}}],["appeals/:postid",{"_index":612,"title":{},"body":{"controllers/AppealsController.html":{}}}],["appeals/entities/appeal.entity",{"_index":2338,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["appealsandcount[0",{"_index":742,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appealsandcount[0].length",{"_index":744,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appealscontroller",{"_index":590,"title":{"controllers/AppealsController.html":{}},"body":{"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"coverage.html":{}}}],["appealsmodule",{"_index":451,"title":{"modules/AppealsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules.html":{},"overview.html":{}}}],["appealsservice",{"_index":629,"title":{"injectables/AppealsService.html":{}},"body":{"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"coverage.html":{},"overview.html":{}}}],["application",{"_index":2308,"title":{},"body":{"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["appmodule",{"_index":447,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":464,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["around",{"_index":1355,"title":{},"body":{"injectables/EventService.html":{}}}],["artillery",{"_index":3000,"title":{},"body":{"index.html":{}}}],["asc",{"_index":2126,"title":{},"body":{"classes/PageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["async",{"_index":15,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MemoryService.html":{},"injectables/NotificationService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["atlas",{"_index":2215,"title":{},"body":{"injectables/PaymentService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["attend",{"_index":2803,"title":{},"body":{"entities/User.html":{}}}],["auth",{"_index":749,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":863,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":333,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{}}}],["auth.guard.ts",{"_index":1800,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":805,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/guards/jwt",{"_index":332,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{}}}],["auth/guards/roles.guard",{"_index":344,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/EventController.html":{},"controllers/NotificationController.html":{},"controllers/ReportController.html":{}}}],["auth/guards/subscriptions.guard",{"_index":342,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["authcontroller",{"_index":747,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":770,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["authguard",{"_index":1801,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":1802,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":1841,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":452,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1076,"title":{},"body":{"entities/Comment.html":{},"properties.html":{}}}],["authorid",{"_index":168,"title":{},"body":{"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["authorization",{"_index":1813,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authorized",{"_index":446,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["authservice",{"_index":804,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":973,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["autoloadentities",{"_index":535,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":542,"title":{},"body":{"modules/AppModule.html":{},"classes/SignUpUserDto.html":{}}}],["avatar",{"_index":1540,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["await",{"_index":37,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/LocalStrategy.html":{},"injectables/MemoryService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["axios",{"_index":2917,"title":{},"body":{"dependencies.html":{}}}],["axiosref(config",{"_index":989,"title":{},"body":{"injectables/AuthService.html":{}}}],["b",{"_index":706,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{}}}],["back",{"_index":787,"title":{},"body":{"controllers/AuthController.html":{}}}],["backend",{"_index":2216,"title":{},"body":{"injectables/PaymentService.html":{}}}],["background",{"_index":932,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["badrequestexception",{"_index":398,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["badrequestexception(\"user",{"_index":2254,"title":{},"body":{"injectables/PaymentService.html":{}}}],["badrequestexception('captcha",{"_index":979,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('follow",{"_index":1750,"title":{},"body":{"injectables/FollowService.html":{}}}],["badrequestexception('no",{"_index":2055,"title":{},"body":{"injectables/NotificationService.html":{}}}],["badrequestexception('post",{"_index":416,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{}}}],["badrequestexception('target",{"_index":2039,"title":{},"body":{"injectables/NotificationService.html":{}}}],["badrequestexception('this",{"_index":1755,"title":{},"body":{"injectables/FollowService.html":{}}}],["badrequestexception('user",{"_index":721,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["badrequestexception('you",{"_index":445,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/BlockService.html":{},"injectables/FollowService.html":{}}}],["badrequestexception(`webhook",{"_index":2267,"title":{},"body":{"injectables/PaymentService.html":{}}}],["ban",{"_index":2481,"title":{},"body":{"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["ban.entity",{"_index":486,"title":{},"body":{"modules/AppModule.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["ban.entity.ts",{"_index":2816,"title":{},"body":{"entities/UserBan.html":{},"coverage.html":{}}}],["ban.entity.ts:14",{"_index":2821,"title":{},"body":{"entities/UserBan.html":{}}}],["ban.entity.ts:17",{"_index":2824,"title":{},"body":{"entities/UserBan.html":{}}}],["ban.entity.ts:20",{"_index":2822,"title":{},"body":{"entities/UserBan.html":{}}}],["ban.entity.ts:23",{"_index":2820,"title":{},"body":{"entities/UserBan.html":{}}}],["ban.entity.ts:29",{"_index":2819,"title":{},"body":{"entities/UserBan.html":{}}}],["banned",{"_index":847,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReportController.html":{},"entities/UserBan.html":{}}}],["banneduser",{"_index":2817,"title":{},"body":{"entities/UserBan.html":{}}}],["banneduserid",{"_index":130,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["banpost",{"_index":2391,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["banpost(postid",{"_index":2453,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["banpost(req",{"_index":2399,"title":{},"body":{"controllers/ReportController.html":{}}}],["bans",{"_index":2404,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["banstatus",{"_index":2696,"title":{},"body":{"injectables/TasksService.html":{},"entities/UserBan.html":{},"miscellaneous/enumerations.html":{}}}],["banstatus.active",{"_index":2823,"title":{},"body":{"entities/UserBan.html":{}}}],["banuser",{"_index":2392,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["banuser(req",{"_index":2405,"title":{},"body":{"controllers/ReportController.html":{}}}],["banuser(userid",{"_index":2451,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["base",{"_index":995,"title":{},"body":{"classes/BaseEntity.html":{}}}],["baseentity",{"_index":573,"title":{"classes/BaseEntity.html":{}},"body":{"entities/Appeal.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["basic",{"_index":237,"title":{},"body":{"classes/$npmConfigName1674544597118.html":{},"miscellaneous/enumerations.html":{}}}],["bcryptjs",{"_index":1177,"title":{},"body":{"injectables/EncryptionService.html":{},"dependencies.html":{}}}],["before",{"_index":2807,"title":{},"body":{"entities/User.html":{}}}],["beforeinsert",{"_index":2795,"title":{},"body":{"entities/User.html":{}}}],["being",{"_index":1618,"title":{},"body":{"entities/Follow.html":{},"entities/FollowRequest.html":{}}}],["bio",{"_index":242,"title":{},"body":{"classes/$npmConfigName1675177507147.html":{},"classes/UpdateUserBioDto.html":{},"entities/User.html":{}}}],["block",{"_index":193,"title":{"entities/Block.html":{}},"body":{"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1674493007150.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"controllers/PaymentController.html":{},"entities/User.html":{},"coverage.html":{}}}],["block.blockeduser",{"_index":2740,"title":{},"body":{"entities/User.html":{}}}],["block.blockeduser.id",{"_index":1062,"title":{},"body":{"injectables/BlockService.html":{}}}],["block.blockinguser",{"_index":2742,"title":{},"body":{"entities/User.html":{}}}],["block.blockinguser.id",{"_index":1740,"title":{},"body":{"injectables/FollowService.html":{}}}],["block.controller",{"_index":1041,"title":{},"body":{"modules/BlockModule.html":{}}}],["block.id",{"_index":1073,"title":{},"body":{"injectables/BlockService.html":{}}}],["block.service",{"_index":1024,"title":{},"body":{"controllers/BlockController.html":{},"modules/BlockModule.html":{}}}],["block/entities/block.entity",{"_index":2799,"title":{},"body":{"entities/User.html":{}}}],["blockcontroller",{"_index":1011,"title":{"controllers/BlockController.html":{}},"body":{"controllers/BlockController.html":{},"modules/BlockModule.html":{},"coverage.html":{}}}],["blocked",{"_index":1049,"title":{},"body":{"injectables/BlockService.html":{},"injectables/FollowService.html":{},"entities/User.html":{}}}],["blockedby",{"_index":2728,"title":{},"body":{"entities/User.html":{}}}],["blockedby.blockinguser",{"_index":1736,"title":{},"body":{"injectables/FollowService.html":{}}}],["blockeduser",{"_index":1002,"title":{},"body":{"entities/Block.html":{}}}],["blockeduserid",{"_index":195,"title":{},"body":{"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["blockid",{"_index":1071,"title":{},"body":{"injectables/BlockService.html":{}}}],["blocking",{"_index":1050,"title":{},"body":{"injectables/BlockService.html":{}}}],["blockinguser",{"_index":1003,"title":{},"body":{"entities/Block.html":{},"injectables/BlockService.html":{}}}],["blockinguser.blocks.map((block",{"_index":1061,"title":{},"body":{"injectables/BlockService.html":{}}}],["blockinguserid",{"_index":194,"title":{},"body":{"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["blockmodule",{"_index":453,"title":{"modules/BlockModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BlockModule.html":{},"modules.html":{},"overview.html":{}}}],["blockrepository",{"_index":1047,"title":{},"body":{"injectables/BlockService.html":{}}}],["blocks",{"_index":1010,"title":{},"body":{"entities/Block.html":{},"injectables/BlockService.html":{},"entities/User.html":{}}}],["blocks.blockeduser",{"_index":1060,"title":{},"body":{"injectables/BlockService.html":{}}}],["blockservice",{"_index":1023,"title":{"injectables/BlockService.html":{}},"body":{"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"coverage.html":{},"overview.html":{}}}],["blockuser",{"_index":1013,"title":{},"body":{"controllers/BlockController.html":{},"injectables/BlockService.html":{}}}],["blockuser(@request",{"_index":1027,"title":{},"body":{"controllers/BlockController.html":{}}}],["blockuser(id",{"_index":1029,"title":{},"body":{"controllers/BlockController.html":{},"injectables/BlockService.html":{}}}],["blockuser(req",{"_index":1015,"title":{},"body":{"controllers/BlockController.html":{}}}],["body",{"_index":624,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{}}}],["body.confirmpassword",{"_index":816,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.id",{"_index":2502,"title":{},"body":{"injectables/ReportService.html":{}}}],["body.latitude",{"_index":1417,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["body.longitude",{"_index":1418,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["body.password",{"_index":815,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.postid",{"_index":691,"title":{},"body":{"injectables/AppealsService.html":{}}}],["body.reason",{"_index":2522,"title":{},"body":{"injectables/ReportService.html":{}}}],["body.text",{"_index":713,"title":{},"body":{"injectables/AppealsService.html":{}}}],["boilerplate",{"_index":3011,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":2090,"title":{},"body":{"classes/PageMetaDto.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"classes/ReCaptchaResponseDto.html":{},"guards/RolesGuard.html":{},"guards/SubscriptionsGuard.html":{},"entities/User.html":{}}}],["bootstrap",{"_index":2868,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["border",{"_index":963,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["both",{"_index":2464,"title":{},"body":{"classes/ReportDto.html":{}}}],["bottom",{"_index":948,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["box",{"_index":966,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["break",{"_index":2283,"title":{},"body":{"injectables/PaymentService.html":{}}}],["broadcast",{"_index":2962,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["browse",{"_index":3019,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3016,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1574,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["bucket(process.env.firebase_bucket_name",{"_index":1597,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["bucket.file(`users/${userid}/avatars/${imageid}.png",{"_index":1585,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["bucket.file(`users/${userid}/avatars/${previousimageid}.png",{"_index":1594,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["bucket.file(`users/${userid}/memories/${memoryid}/${imageid}.png",{"_index":1608,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["bucket.file(`users/${userid}/posts/${postid}/${imageid}.png",{"_index":1600,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["build",{"_index":2982,"title":{},"body":{"index.html":{}}}],["bulk",{"_index":2666,"title":{},"body":{"injectables/TasksService.html":{}}}],["bullying",{"_index":2969,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["bullyingorharrassement",{"_index":2968,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["c8d0d8",{"_index":970,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["called",{"_index":888,"title":{},"body":{"injectables/AuthService.html":{}}}],["canactivate",{"_index":2584,"title":{},"body":{"guards/RolesGuard.html":{},"guards/SubscriptionsGuard.html":{}}}],["canactivate(context",{"_index":2588,"title":{},"body":{"guards/RolesGuard.html":{},"guards/SubscriptionsGuard.html":{}}}],["cancel",{"_index":2149,"title":{},"body":{"controllers/PaymentController.html":{}}}],["cancel_url",{"_index":2251,"title":{},"body":{"injectables/PaymentService.html":{}}}],["captcharesponse",{"_index":756,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["captcharesult",{"_index":750,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["captcharesult(@res",{"_index":836,"title":{},"body":{"controllers/AuthController.html":{}}}],["captcharesult(body",{"_index":880,"title":{},"body":{"injectables/AuthService.html":{}}}],["captcharesult(captcharesponse",{"_index":837,"title":{},"body":{"controllers/AuthController.html":{}}}],["captcharesult(res",{"_index":755,"title":{},"body":{"controllers/AuthController.html":{}}}],["caption",{"_index":66,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"entities/Post.html":{},"entities/Scrapbook.html":{}}}],["card",{"_index":960,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["cascade",{"_index":176,"title":{},"body":{"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["case",{"_index":2270,"title":{},"body":{"injectables/PaymentService.html":{}}}],["catch",{"_index":2266,"title":{},"body":{"injectables/PaymentService.html":{}}}],["catch((err",{"_index":358,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FeedController.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/ReportController.html":{}}}],["catch(function",{"_index":992,"title":{},"body":{"injectables/AuthService.html":{}}}],["celebrity",{"_index":2020,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/enumerations.html":{}}}],["center",{"_index":929,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["challenge_ts",{"_index":2384,"title":{},"body":{"classes/ReCaptchaResponseDto.html":{}}}],["change",{"_index":52,"title":{},"body":{"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673337064308.html":{}}}],["check",{"_index":772,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["checkout",{"_index":2200,"title":{},"body":{"injectables/PaymentService.html":{}}}],["class",{"_index":0,"title":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"classes/AppealDto.html":{},"classes/BaseEntity.html":{},"classes/CreateClueDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PostAnalyticResposneDto.html":{},"classes/ReCaptchaResponseDto.html":{},"classes/ReportDto.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateClueDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"controllers/EventController.html":{},"entities/EventGoal.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Memory.html":{},"controllers/MemoryController.html":{},"modules/MemoryModule.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"classes/ReCaptchaResponseDto.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"guards/SubscriptionsGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"classes/AppealDto.html":{},"classes/BaseEntity.html":{},"classes/CreateClueDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PostAnalyticResposneDto.html":{},"classes/ReCaptchaResponseDto.html":{},"classes/ReportDto.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"overview.html":{}}}],["close",{"_index":978,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["cloud/storage",{"_index":1581,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["clue",{"_index":2744,"title":{},"body":{"entities/User.html":{}}}],["clue.creator",{"_index":2745,"title":{},"body":{"entities/User.html":{}}}],["clue.dto",{"_index":1128,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["clue.dto.ts",{"_index":1087,"title":{},"body":{"classes/CreateClueDto.html":{},"coverage.html":{}}}],["clue.dto.ts:13",{"_index":1091,"title":{},"body":{"classes/CreateClueDto.html":{}}}],["clue.dto.ts:5",{"_index":1092,"title":{},"body":{"classes/CreateClueDto.html":{}}}],["clue.dto.ts:9",{"_index":1089,"title":{},"body":{"classes/CreateClueDto.html":{}}}],["clues",{"_index":1104,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"entities/User.html":{}}}],["cluescreated",{"_index":2729,"title":{},"body":{"entities/User.html":{}}}],["cluster_analyticsmodule",{"_index":370,"title":{},"body":{"modules/AnalyticsModule.html":{},"overview.html":{}}}],["cluster_analyticsmodule_providers",{"_index":371,"title":{},"body":{"modules/AnalyticsModule.html":{},"overview.html":{}}}],["cluster_appealsmodule",{"_index":657,"title":{},"body":{"modules/AppealsModule.html":{},"overview.html":{}}}],["cluster_appealsmodule_providers",{"_index":658,"title":{},"body":{"modules/AppealsModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":448,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":450,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":449,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":848,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":849,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":850,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":851,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_blockmodule",{"_index":1038,"title":{},"body":{"modules/BlockModule.html":{},"overview.html":{}}}],["cluster_blockmodule_providers",{"_index":1039,"title":{},"body":{"modules/BlockModule.html":{},"overview.html":{}}}],["cluster_eventmodule",{"_index":1325,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_eventmodule_providers",{"_index":1326,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_feedmodule",{"_index":1487,"title":{},"body":{"modules/FeedModule.html":{},"overview.html":{}}}],["cluster_feedmodule_providers",{"_index":1488,"title":{},"body":{"modules/FeedModule.html":{},"overview.html":{}}}],["cluster_followmodule",{"_index":1688,"title":{},"body":{"modules/FollowModule.html":{},"overview.html":{}}}],["cluster_followmodule_providers",{"_index":1689,"title":{},"body":{"modules/FollowModule.html":{},"overview.html":{}}}],["cluster_memorymodule",{"_index":1904,"title":{},"body":{"modules/MemoryModule.html":{},"overview.html":{}}}],["cluster_memorymodule_providers",{"_index":1905,"title":{},"body":{"modules/MemoryModule.html":{},"overview.html":{}}}],["cluster_notificationmodule",{"_index":2002,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_notificationmodule_exports",{"_index":2003,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_notificationmodule_providers",{"_index":2004,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_paymentmodule",{"_index":2182,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_paymentmodule_imports",{"_index":2184,"title":{},"body":{"modules/PaymentModule.html":{}}}],["cluster_paymentmodule_providers",{"_index":2183,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":2361,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_exports",{"_index":2363,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_providers",{"_index":2362,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_reportmodule",{"_index":2469,"title":{},"body":{"modules/ReportModule.html":{},"overview.html":{}}}],["cluster_reportmodule_providers",{"_index":2470,"title":{},"body":{"modules/ReportModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":2658,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_providers",{"_index":2659,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":2827,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2828,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":2829,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["color",{"_index":935,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["column",{"_index":46,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678975542609.html":{},"entities/Appeal.html":{},"entities/Comment.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"entities/FollowRequest.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["column({default",{"_index":570,"title":{},"body":{"entities/Appeal.html":{},"entities/FollowRequest.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["column({select",{"_index":2776,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":1196,"title":{},"body":{"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["comment",{"_index":166,"title":{"entities/Comment.html":{}},"body":{"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1674493007150.html":{},"modules/AppModule.html":{},"entities/Comment.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"entities/User.html":{},"coverage.html":{}}}],["comment.author",{"_index":2747,"title":{},"body":{"entities/User.html":{}}}],["comment.entity",{"_index":2337,"title":{},"body":{"entities/Post.html":{}}}],["comment.post",{"_index":2315,"title":{},"body":{"entities/Post.html":{}}}],["commentcount",{"_index":418,"title":{},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["comments",{"_index":412,"title":{},"body":{"injectables/AnalyticsService.html":{},"entities/Comment.html":{},"injectables/FeedService.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["comments.author",{"_index":1509,"title":{},"body":{"injectables/FeedService.html":{}}}],["common/dto/page",{"_index":627,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["common/dto/page.dto",{"_index":687,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/MemoryService.html":{},"injectables/ReportService.html":{}}}],["common/entities/base.entity",{"_index":574,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["common/services/encryption.service",{"_index":901,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["common/services/firebase",{"_index":1926,"title":{},"body":{"injectables/MemoryService.html":{},"injectables/NotificationService.html":{},"entities/Post.html":{},"injectables/TasksService.html":{}}}],["compare",{"_index":1170,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["compare(password",{"_index":1181,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["comparepasswords",{"_index":1163,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["comparepasswords(password",{"_index":1165,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["compares",{"_index":1168,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["comparing",{"_index":1162,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["comprised",{"_index":1495,"title":{},"body":{"injectables/FeedService.html":{}}}],["concat(publicposts",{"_index":1512,"title":{},"body":{"injectables/FeedService.html":{}}}],["config",{"_index":983,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["configmodule",{"_index":468,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":513,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":469,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('database_host",{"_index":527,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_name",{"_index":532,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_password",{"_index":531,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_username",{"_index":529,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":788,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmpassword",{"_index":2626,"title":{},"body":{"classes/SignUpUserDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["console.log(`unhandled",{"_index":2305,"title":{},"body":{"injectables/PaymentService.html":{}}}],["console.log(err",{"_index":835,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/MemoryController.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["console.log(error",{"_index":993,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(users.length",{"_index":2701,"title":{},"body":{"injectables/TasksService.html":{}}}],["const",{"_index":407,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/LocalStrategy.html":{},"injectables/MemoryService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"guards/SubscriptionsGuard.html":{},"injectables/TasksService.html":{}}}],["constants",{"_index":865,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["constants/ban",{"_index":2697,"title":{},"body":{"injectables/TasksService.html":{},"entities/UserBan.html":{}}}],["constants/follow",{"_index":1706,"title":{},"body":{"entities/FollowRequest.html":{},"injectables/FollowService.html":{}}}],["constants/gender.enum",{"_index":2798,"title":{},"body":{"entities/User.html":{}}}],["constants/notification",{"_index":2031,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SendNotificationDto.html":{},"entities/User.html":{}}}],["constants/order.enum",{"_index":2121,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["constants/report",{"_index":578,"title":{},"body":{"entities/Appeal.html":{},"injectables/AppealsService.html":{},"entities/PostReport.html":{},"classes/ReportDto.html":{},"injectables/ReportService.html":{},"entities/UserReport.html":{}}}],["constants/role.enum",{"_index":346,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/ReportController.html":{},"guards/RolesGuard.html":{},"entities/User.html":{}}}],["constants/subscription",{"_index":337,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/PaymentService.html":{},"guards/SubscriptionsGuard.html":{},"entities/User.html":{}}}],["constants/visibility.enum",{"_index":1127,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"entities/Event.html":{},"injectables/FeedService.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/Scrapbook.html":{}}}],["constraint",{"_index":75,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{}}}],["constructor",{"_index":387,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MemoryService.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"guards/SubscriptionsGuard.html":{},"injectables/TasksService.html":{}}}],["constructor(appealrepository",{"_index":666,"title":{},"body":{"injectables/AppealsService.html":{}}}],["constructor(authservice",{"_index":1843,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(blockrepository",{"_index":1045,"title":{},"body":{"injectables/BlockService.html":{}}}],["constructor(data",{"_index":2071,"title":{},"body":{"classes/PageDto.html":{}}}],["constructor(eventrepository",{"_index":1335,"title":{},"body":{"injectables/EventService.html":{}}}],["constructor(memoryrepository",{"_index":1912,"title":{},"body":{"injectables/MemoryService.html":{}}}],["constructor(postrepository",{"_index":388,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/FeedService.html":{}}}],["constructor(private",{"_index":348,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"injectables/LocalStrategy.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{},"guards/RolesGuard.html":{},"guards/SubscriptionsGuard.html":{}}}],["constructor(reflector",{"_index":2585,"title":{},"body":{"guards/RolesGuard.html":{},"guards/SubscriptionsGuard.html":{}}}],["constructor(undefined",{"_index":2087,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["constructor(userreportsrepository",{"_index":2476,"title":{},"body":{"injectables/ReportService.html":{}}}],["constructor(userrepository",{"_index":2190,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/TasksService.html":{}}}],["constructor(usersrepository",{"_index":1708,"title":{},"body":{"injectables/FollowService.html":{},"injectables/NotificationService.html":{}}}],["constructor(usersservice",{"_index":874,"title":{},"body":{"injectables/AuthService.html":{}}}],["containing",{"_index":1365,"title":{},"body":{"injectables/EventService.html":{}}}],["context",{"_index":2591,"title":{},"body":{"guards/RolesGuard.html":{},"guards/SubscriptionsGuard.html":{}}}],["context.getclass",{"_index":2597,"title":{},"body":{"guards/RolesGuard.html":{},"guards/SubscriptionsGuard.html":{}}}],["context.gethandler",{"_index":2596,"title":{},"body":{"guards/RolesGuard.html":{},"guards/SubscriptionsGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":2598,"title":{},"body":{"guards/RolesGuard.html":{},"guards/SubscriptionsGuard.html":{}}}],["controller",{"_index":299,"title":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{}},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{},"coverage.html":{}}}],["controller('analytics",{"_index":347,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["controller('appeals",{"_index":632,"title":{},"body":{"controllers/AppealsController.html":{}}}],["controller('auth",{"_index":811,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('block",{"_index":1025,"title":{},"body":{"controllers/BlockController.html":{}}}],["controller('event",{"_index":1282,"title":{},"body":{"controllers/EventController.html":{}}}],["controller('feed",{"_index":1481,"title":{},"body":{"controllers/FeedController.html":{}}}],["controller('follow",{"_index":1664,"title":{},"body":{"controllers/FollowController.html":{}}}],["controller('memory",{"_index":1889,"title":{},"body":{"controllers/MemoryController.html":{}}}],["controller('notification",{"_index":1992,"title":{},"body":{"controllers/NotificationController.html":{}}}],["controller('payment",{"_index":2164,"title":{},"body":{"controllers/PaymentController.html":{}}}],["controller('report",{"_index":2435,"title":{},"body":{"controllers/ReportController.html":{}}}],["controllers",{"_index":301,"title":{},"body":{"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"controllers/MemoryController.html":{},"modules/MemoryModule.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"controllers/ReportController.html":{},"modules/ReportModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coordinates",{"_index":1459,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["coverage",{"_index":2843,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":793,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateEventDto.html":{},"controllers/EventController.html":{},"index.html":{}}}],["create.dto",{"_index":1886,"title":{},"body":{"controllers/MemoryController.html":{},"injectables/MemoryService.html":{}}}],["create.dto.ts",{"_index":1097,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"coverage.html":{}}}],["create.dto.ts:10",{"_index":1140,"title":{},"body":{"classes/CreateMemoryDto.html":{}}}],["create.dto.ts:11",{"_index":1147,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["create.dto.ts:14",{"_index":1142,"title":{},"body":{"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{}}}],["create.dto.ts:17",{"_index":1141,"title":{},"body":{"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{}}}],["create.dto.ts:20",{"_index":1148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["create.dto.ts:21",{"_index":1143,"title":{},"body":{"classes/CreateMemoryDto.html":{}}}],["create.dto.ts:24",{"_index":1149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["create.dto.ts:6",{"_index":1099,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["create.dto.ts:9",{"_index":1146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["create.dts.ts",{"_index":1152,"title":{},"body":{"classes/CreateScrapBookDto.html":{},"coverage.html":{}}}],["create.dts.ts:10",{"_index":1153,"title":{},"body":{"classes/CreateScrapBookDto.html":{}}}],["create.dts.ts:13",{"_index":1155,"title":{},"body":{"classes/CreateScrapBookDto.html":{}}}],["create.dts.ts:16",{"_index":1154,"title":{},"body":{"classes/CreateScrapBookDto.html":{}}}],["create.dts.ts:20",{"_index":1156,"title":{},"body":{"classes/CreateScrapBookDto.html":{}}}],["createcluedto",{"_index":1085,"title":{"classes/CreateClueDto.html":{}},"body":{"classes/CreateClueDto.html":{},"classes/CreateEventDto.html":{},"coverage.html":{}}}],["createcommentdto",{"_index":1095,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["created",{"_index":1253,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{}}}],["createdat",{"_index":59,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"injectables/AnalyticsService.html":{},"classes/BaseEntity.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["createdatecolumn",{"_index":996,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createevent",{"_index":1232,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["createevent(@request",{"_index":1284,"title":{},"body":{"controllers/EventController.html":{}}}],["createevent(req",{"_index":1241,"title":{},"body":{"controllers/EventController.html":{}}}],["createevent(req.user",{"_index":1286,"title":{},"body":{"controllers/EventController.html":{}}}],["createevent(user",{"_index":1340,"title":{},"body":{"injectables/EventService.html":{}}}],["createeventdto",{"_index":1102,"title":{"classes/CreateEventDto.html":{}},"body":{"classes/CreateEventDto.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"coverage.html":{}}}],["createeventdto.date",{"_index":1395,"title":{},"body":{"injectables/EventService.html":{}}}],["createeventdto.description",{"_index":1385,"title":{},"body":{"injectables/EventService.html":{}}}],["createeventdto.goal.latitude",{"_index":1400,"title":{},"body":{"injectables/EventService.html":{}}}],["createeventdto.goal.longitude",{"_index":1402,"title":{},"body":{"injectables/EventService.html":{}}}],["createeventdto.goal.text",{"_index":1398,"title":{},"body":{"injectables/EventService.html":{}}}],["createeventdto.latitude",{"_index":1389,"title":{},"body":{"injectables/EventService.html":{}}}],["createeventdto.longitude",{"_index":1391,"title":{},"body":{"injectables/EventService.html":{}}}],["createeventdto.name",{"_index":1383,"title":{},"body":{"injectables/EventService.html":{}}}],["createeventdto.numberofparticipants",{"_index":1387,"title":{},"body":{"injectables/EventService.html":{}}}],["createeventdto.visibility",{"_index":1393,"title":{},"body":{"injectables/EventService.html":{}}}],["creategoaldto",{"_index":1111,"title":{"classes/CreateGoalDto.html":{}},"body":{"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"coverage.html":{}}}],["creatememory",{"_index":1911,"title":{},"body":{"injectables/MemoryService.html":{}}}],["creatememory(req.user",{"_index":1893,"title":{},"body":{"controllers/MemoryController.html":{}}}],["creatememory(user",{"_index":1915,"title":{},"body":{"injectables/MemoryService.html":{}}}],["creatememorydto",{"_index":1137,"title":{"classes/CreateMemoryDto.html":{}},"body":{"classes/CreateMemoryDto.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"coverage.html":{}}}],["createpost",{"_index":1866,"title":{},"body":{"controllers/MemoryController.html":{}}}],["createpost(body",{"_index":1871,"title":{},"body":{"controllers/MemoryController.html":{}}}],["createpostdto",{"_index":1144,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["createquerybuilder",{"_index":731,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/MemoryService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["creates",{"_index":1342,"title":{},"body":{"injectables/EventService.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{}}}],["createscrapbookdto",{"_index":1150,"title":{"classes/CreateScrapBookDto.html":{}},"body":{"classes/CreateScrapBookDto.html":{},"coverage.html":{}}}],["creating",{"_index":783,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EventService.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"classes/ReportDto.html":{}}}],["creator",{"_index":1183,"title":{},"body":{"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"injectables/EventService.html":{}}}],["creatorid",{"_index":267,"title":{},"body":{"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779204584.html":{}}}],["credential",{"_index":3034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["credential.cert(serviceaccount",{"_index":3035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cron",{"_index":2694,"title":{},"body":{"injectables/TasksService.html":{}}}],["cron(cronexpression.every_minute",{"_index":2681,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronexpression",{"_index":2695,"title":{},"body":{"injectables/TasksService.html":{}}}],["currency",{"_index":2243,"title":{},"body":{"injectables/PaymentService.html":{}}}],["current_timestamp",{"_index":155,"title":{},"body":{"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["current_timestamp(6",{"_index":61,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{}}}],["currently",{"_index":1350,"title":{},"body":{"injectables/EventService.html":{}}}],["currentpassword",{"_index":2718,"title":{},"body":{"classes/UpdateUserPasswordDto.html":{}}}],["customer",{"_index":2225,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["customer.id",{"_index":2237,"title":{},"body":{"injectables/PaymentService.html":{}}}],["customer.subscription.deleted",{"_index":2293,"title":{},"body":{"injectables/PaymentService.html":{}}}],["customerid",{"_index":2646,"title":{},"body":{"injectables/StripeService.html":{}}}],["data",{"_index":1343,"title":{},"body":{"injectables/EventService.html":{},"classes/PageDto.html":{},"classes/SignUpUserDto.html":{}}}],["database",{"_index":521,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"index.html":{}}}],["database_host",{"_index":525,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":272,"title":{},"body":{"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678975542609.html":{},"classes/CreateEventDto.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"injectables/EventService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Memory.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{}}}],["date(a.createdat).gettime",{"_index":1514,"title":{},"body":{"injectables/FeedService.html":{}}}],["date(b.createdat).gettime",{"_index":1513,"title":{},"body":{"injectables/FeedService.html":{}}}],["date(date.now",{"_index":1430,"title":{},"body":{"injectables/EventService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["date(expirydate",{"_index":1947,"title":{},"body":{"injectables/MemoryService.html":{}}}],["date(post.createdat",{"_index":430,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["date.now",{"_index":1567,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["date.parse(a.createdat))[0].reason",{"_index":708,"title":{},"body":{"injectables/AppealsService.html":{}}}],["date.parse(b.createdat",{"_index":707,"title":{},"body":{"injectables/AppealsService.html":{}}}],["dateofbirth",{"_index":2627,"title":{},"body":{"classes/SignUpUserDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"entities/User.html":{}}}],["dates",{"_index":2706,"title":{},"body":{"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["datetime",{"_index":128,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678975542609.html":{}}}],["datetime(6",{"_index":60,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{}}}],["days",{"_index":1583,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["dbevent",{"_index":1407,"title":{},"body":{"injectables/EventService.html":{}}}],["dbeventgoal",{"_index":1404,"title":{},"body":{"injectables/EventService.html":{}}}],["dbeventgoal.event",{"_index":1409,"title":{},"body":{"injectables/EventService.html":{}}}],["dbmemory",{"_index":1962,"title":{},"body":{"injectables/MemoryService.html":{}}}],["dbmemory.id",{"_index":1967,"title":{},"body":{"injectables/MemoryService.html":{}}}],["dbmemory.imageid",{"_index":1965,"title":{},"body":{"injectables/MemoryService.html":{}}}],["dbuser",{"_index":719,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/PaymentService.html":{}}}],["dbuser.appeals",{"_index":723,"title":{},"body":{"injectables/AppealsService.html":{}}}],["dbuser.appeals.length",{"_index":722,"title":{},"body":{"injectables/AppealsService.html":{}}}],["dbuser.email",{"_index":2231,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dbuser.firstname",{"_index":2232,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dbuser.followers.map((follow",{"_index":1768,"title":{},"body":{"injectables/FollowService.html":{}}}],["dbuser.following.map((follow",{"_index":1770,"title":{},"body":{"injectables/FollowService.html":{}}}],["dbuser.following.map((user",{"_index":1510,"title":{},"body":{"injectables/FeedService.html":{}}}],["dbuser.followrequestsreceived",{"_index":1774,"title":{},"body":{"injectables/FollowService.html":{}}}],["dbuser.followrequestsreceived.length",{"_index":1773,"title":{},"body":{"injectables/FollowService.html":{}}}],["dbuser.followrequestssent",{"_index":1776,"title":{},"body":{"injectables/FollowService.html":{}}}],["dbuser.followrequestssent.length",{"_index":1775,"title":{},"body":{"injectables/FollowService.html":{}}}],["dbuser.hasstripaccount",{"_index":2229,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dbuser.lastname",{"_index":2233,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dbuser.phonenumber",{"_index":2235,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dbuser.stripecustomerid",{"_index":2242,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dbuser.subscriptionplan",{"_index":2227,"title":{},"body":{"injectables/PaymentService.html":{}}}],["decimal",{"_index":1197,"title":{},"body":{"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"entities/Memory.html":{}}}],["decimal(8,6",{"_index":251,"title":{},"body":{"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1678774445242.html":{}}}],["decorator",{"_index":796,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":310,"title":{},"body":{"controllers/AnalyticsController.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"entities/Comment.html":{},"classes/CreateClueDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"controllers/EventController.html":{},"entities/EventGoal.html":{},"controllers/FeedController.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"entities/Like.html":{},"entities/Memory.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["decorators/roles.decorator",{"_index":345,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/NotificationController.html":{},"controllers/ReportController.html":{},"guards/RolesGuard.html":{}}}],["decorators/subscription.decorator",{"_index":340,"title":{},"body":{"controllers/AnalyticsController.html":{},"guards/SubscriptionsGuard.html":{}}}],["default",{"_index":21,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"entities/Appeal.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"injectables/FirebaseStorageService.html":{},"entities/FollowRequest.html":{},"entities/Memory.html":{},"classes/PageOptionsDto.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"injectables/StripeService.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":2986,"title":{},"body":{"index.html":{}}}],["defined",{"_index":23,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateClueDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"controllers/EventController.html":{},"entities/EventGoal.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalStrategy.html":{},"entities/Memory.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"entities/PostReport.html":{},"classes/ReCaptchaResponseDto.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"guards/SubscriptionsGuard.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["delete",{"_index":80,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"controllers/MemoryController.html":{},"injectables/StripeService.html":{}}}],["delete('/:id",{"_index":1312,"title":{},"body":{"controllers/EventController.html":{},"controllers/MemoryController.html":{}}}],["delete('unfollow/:id",{"_index":1677,"title":{},"body":{"controllers/FollowController.html":{}}}],["deleteavatar",{"_index":1527,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["deleteavatar(imageid",{"_index":1537,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["deletecustomer",{"_index":2643,"title":{},"body":{"injectables/StripeService.html":{}}}],["deletecustomer(customerid",{"_index":2644,"title":{},"body":{"injectables/StripeService.html":{}}}],["deleted",{"_index":1315,"title":{},"body":{"controllers/EventController.html":{},"injectables/MemoryService.html":{}}}],["deletedcustomer",{"_index":2295,"title":{},"body":{"injectables/PaymentService.html":{}}}],["deletedcustomer.id",{"_index":2298,"title":{},"body":{"injectables/PaymentService.html":{}}}],["deleteduser",{"_index":2297,"title":{},"body":{"injectables/PaymentService.html":{}}}],["deleteduser.id",{"_index":2304,"title":{},"body":{"injectables/PaymentService.html":{}}}],["deleteeventbyid",{"_index":1233,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["deleteeventbyid(@request",{"_index":1313,"title":{},"body":{"controllers/EventController.html":{}}}],["deleteeventbyid(req",{"_index":1244,"title":{},"body":{"controllers/EventController.html":{}}}],["deleteeventbyid(req.user",{"_index":1314,"title":{},"body":{"controllers/EventController.html":{}}}],["deleteeventbyid(user",{"_index":1344,"title":{},"body":{"injectables/EventService.html":{}}}],["deletememorybyid",{"_index":1867,"title":{},"body":{"controllers/MemoryController.html":{},"injectables/MemoryService.html":{}}}],["deletememorybyid(@param('id",{"_index":1902,"title":{},"body":{"controllers/MemoryController.html":{}}}],["deletememorybyid(id",{"_index":1874,"title":{},"body":{"controllers/MemoryController.html":{}}}],["deletememorybyid(req.user",{"_index":1903,"title":{},"body":{"controllers/MemoryController.html":{}}}],["deletememorybyid(user",{"_index":1917,"title":{},"body":{"injectables/MemoryService.html":{}}}],["deletememoryimage",{"_index":1528,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["deletememoryimage(imageid",{"_index":1543,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["deletepostimage",{"_index":1529,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["deletepostimage(imageid",{"_index":1546,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["deleteresult",{"_index":1054,"title":{},"body":{"injectables/BlockService.html":{},"injectables/EventService.html":{},"injectables/FollowService.html":{},"injectables/MemoryService.html":{}}}],["deletes",{"_index":1247,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{}}}],["demo",{"_index":923,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":369,"title":{"dependencies.html":{}},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/EventModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/MemoryModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":1452,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{},"miscellaneous/enumerations.html":{}}}],["description",{"_index":270,"title":{},"body":{"classes/$npmConfigName1678774445242.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"classes/CreateEventDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"injectables/LocalStrategy.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"injectables/ReportService.html":{},"entities/Scrapbook.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"properties.html":{}}}],["details",{"_index":897,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["developer",{"_index":2996,"title":{},"body":{"index.html":{}}}],["display",{"_index":971,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["documentation",{"_index":2844,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":2255,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["doing",{"_index":1617,"title":{},"body":{"entities/Follow.html":{},"entities/FollowRequest.html":{}}}],["done",{"_index":1009,"title":{},"body":{"entities/Block.html":{}}}],["dotenv",{"_index":2220,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["dotenv.config",{"_index":2222,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["down",{"_index":16,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"injectables/AppealsService.html":{}}}],["down(queryrunner",{"_index":25,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{}}}],["driver",{"_index":2989,"title":{},"body":{"index.html":{}}}],["drop",{"_index":45,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678975542609.html":{}}}],["dto",{"_index":1139,"title":{},"body":{"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"classes/PageOptionsDto.html":{},"classes/ReportDto.html":{},"classes/SignUpUserDto.html":{}}}],["dto/appeal.dto",{"_index":631,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["dto/captcha",{"_index":903,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/create",{"_index":1275,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["dto/get",{"_index":1277,"title":{},"body":{"controllers/EventController.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{}}}],["dto/memory",{"_index":1885,"title":{},"body":{"controllers/MemoryController.html":{},"injectables/MemoryService.html":{}}}],["dto/post",{"_index":401,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["dto/report.dto",{"_index":2432,"title":{},"body":{"controllers/ReportController.html":{}}}],["dto/send",{"_index":1988,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["dto/user",{"_index":806,"title":{},"body":{"controllers/AuthController.html":{}}}],["each",{"_index":2622,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["earth's",{"_index":1463,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["earthradius",{"_index":1461,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["ebf0f5",{"_index":933,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["el.a.run.app",{"_index":2218,"title":{},"body":{"injectables/PaymentService.html":{}}}],["email",{"_index":826,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PaymentService.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserEmailDto.html":{},"entities/User.html":{}}}],["emails",{"_index":2715,"title":{},"body":{"classes/UpdateUserEmailDto.html":{}}}],["emailtolowercase",{"_index":2809,"title":{},"body":{"entities/User.html":{}}}],["empty",{"_index":2625,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["encrypt",{"_index":537,"title":{},"body":{"modules/AppModule.html":{},"injectables/EncryptionService.html":{}}}],["encrypted",{"_index":1175,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encrypting",{"_index":1161,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryptionservice",{"_index":900,"title":{"injectables/EncryptionService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/EncryptionService.html":{},"entities/User.html":{},"coverage.html":{}}}],["encryptionservice().comparepasswords(pass",{"_index":910,"title":{},"body":{"injectables/AuthService.html":{}}}],["encryptionservice().encryptpassword(this.password",{"_index":2814,"title":{},"body":{"entities/User.html":{}}}],["encryptpassword",{"_index":1164,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryptpassword(password",{"_index":1172,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encrypts",{"_index":1174,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["enddate",{"_index":129,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"entities/UserBan.html":{}}}],["endpointsecret",{"_index":2189,"title":{},"body":{"injectables/PaymentService.html":{}}}],["engine=innodb",{"_index":74,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{}}}],["ensure",{"_index":1817,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["entities",{"_index":533,"title":{},"body":{"modules/AppModule.html":{},"entities/Appeal.html":{},"injectables/AppealsService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/Like.html":{},"entities/Memory.html":{},"injectables/MemoryService.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"injectables/ReportService.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"overview.html":{}}}],["entities/appeal.entity",{"_index":661,"title":{},"body":{"modules/AppealsModule.html":{},"injectables/AppealsService.html":{}}}],["entities/block.entity",{"_index":1042,"title":{},"body":{"modules/BlockModule.html":{},"injectables/BlockService.html":{}}}],["entities/comment.entity",{"_index":2370,"title":{},"body":{"modules/PostModule.html":{}}}],["entities/event.entity",{"_index":1328,"title":{},"body":{"modules/EventModule.html":{},"injectables/EventService.html":{}}}],["entities/eventclues.entity",{"_index":1329,"title":{},"body":{"modules/EventModule.html":{},"injectables/EventService.html":{}}}],["entities/eventgoal.entity",{"_index":1330,"title":{},"body":{"modules/EventModule.html":{},"injectables/EventService.html":{}}}],["entities/follow",{"_index":1691,"title":{},"body":{"modules/FollowModule.html":{},"injectables/FollowService.html":{}}}],["entities/follow.entity",{"_index":1692,"title":{},"body":{"modules/FollowModule.html":{},"injectables/FollowService.html":{}}}],["entities/memory.entity",{"_index":1907,"title":{},"body":{"modules/MemoryModule.html":{},"injectables/MemoryService.html":{}}}],["entities/post",{"_index":2371,"title":{},"body":{"modules/PostModule.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{}}}],["entities/post.entity",{"_index":1157,"title":{},"body":{"classes/CreateScrapBookDto.html":{},"modules/PostModule.html":{}}}],["entities/scrapbook.entity",{"_index":2369,"title":{},"body":{"modules/PostModule.html":{}}}],["entities/user",{"_index":2472,"title":{},"body":{"modules/ReportModule.html":{},"injectables/ReportService.html":{}}}],["entities/user.entity",{"_index":2833,"title":{},"body":{"modules/UserModule.html":{}}}],["entity",{"_index":556,"title":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}},"body":{"entities/Appeal.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["enumerations",{"_index":2939,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":2987,"title":{},"body":{"index.html":{}}}],["environment",{"_index":518,"title":{},"body":{"modules/AppModule.html":{}}}],["envs",{"_index":2988,"title":{},"body":{"index.html":{}}}],["err",{"_index":1599,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/PaymentService.html":{}}}],["err.message",{"_index":361,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/ReportController.html":{}}}],["error",{"_index":789,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"classes/SignUpUserDto.html":{}}}],["event",{"_index":269,"title":{"entities/Event.html":{}},"body":{"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"modules/AppModule.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"controllers/EventController.html":{},"entities/EventGoal.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"injectables/PaymentService.html":{},"entities/User.html":{},"coverage.html":{}}}],["event.clues",{"_index":1223,"title":{},"body":{"entities/EventClue.html":{}}}],["event.controller",{"_index":1331,"title":{},"body":{"modules/EventModule.html":{}}}],["event.creator",{"_index":2753,"title":{},"body":{"entities/User.html":{}}}],["event.creator.id",{"_index":1447,"title":{},"body":{"injectables/EventService.html":{}}}],["event.data.object",{"_index":2273,"title":{},"body":{"injectables/PaymentService.html":{}}}],["event.dto",{"_index":1276,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["event.dto.ts",{"_index":1103,"title":{},"body":{"classes/CreateEventDto.html":{},"coverage.html":{}}}],["event.dto.ts:19",{"_index":1115,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:22",{"_index":1110,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:27",{"_index":1117,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:31",{"_index":1113,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:35",{"_index":1114,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:39",{"_index":1119,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:43",{"_index":1109,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:46",{"_index":1112,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.dto.ts:50",{"_index":1107,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["event.entity",{"_index":1229,"title":{},"body":{"entities/EventClue.html":{},"entities/EventGoal.html":{}}}],["event.goal",{"_index":1319,"title":{},"body":{"entities/EventGoal.html":{}}}],["event.numberofparticipants",{"_index":1436,"title":{},"body":{"injectables/EventService.html":{}}}],["event.participants",{"_index":2751,"title":{},"body":{"entities/User.html":{}}}],["event.participants.length",{"_index":1435,"title":{},"body":{"injectables/EventService.html":{}}}],["event.participants.push(user",{"_index":1442,"title":{},"body":{"injectables/EventService.html":{}}}],["event.participants.some((p",{"_index":1439,"title":{},"body":{"injectables/EventService.html":{}}}],["event.service",{"_index":1281,"title":{},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{}}}],["event.type",{"_index":2269,"title":{},"body":{"injectables/PaymentService.html":{}}}],["event/:id",{"_index":1272,"title":{},"body":{"controllers/EventController.html":{}}}],["event\\`(\\`id",{"_index":277,"title":{},"body":{"classes/$npmConfigName1678774445242.html":{}}}],["event_clue",{"_index":265,"title":{},"body":{"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678975542609.html":{}}}],["event_goal",{"_index":268,"title":{},"body":{"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{}}}],["event_goal\\`(\\`id",{"_index":294,"title":{},"body":{"classes/$npmConfigName1678780013678.html":{}}}],["event_participants_user",{"_index":273,"title":{},"body":{"classes/$npmConfigName1678774445242.html":{}}}],["eventclue",{"_index":508,"title":{"entities/EventClue.html":{}},"body":{"modules/AppModule.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"entities/User.html":{},"coverage.html":{}}}],["eventclue.event",{"_index":1186,"title":{},"body":{"entities/Event.html":{}}}],["eventcluerepository",{"_index":1337,"title":{},"body":{"injectables/EventService.html":{}}}],["eventclues.entity",{"_index":1215,"title":{},"body":{"entities/Event.html":{}}}],["eventcontroller",{"_index":1230,"title":{"controllers/EventController.html":{}},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{},"coverage.html":{}}}],["eventgoal",{"_index":510,"title":{"entities/EventGoal.html":{}},"body":{"modules/AppModule.html":{},"entities/Event.html":{},"entities/EventGoal.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"entities/User.html":{},"coverage.html":{}}}],["eventgoal.creator",{"_index":1403,"title":{},"body":{"injectables/EventService.html":{}}}],["eventgoal.entity",{"_index":1216,"title":{},"body":{"entities/Event.html":{}}}],["eventgoal.latitude",{"_index":1399,"title":{},"body":{"injectables/EventService.html":{}}}],["eventgoal.longitude",{"_index":1401,"title":{},"body":{"injectables/EventService.html":{}}}],["eventgoal.text",{"_index":1397,"title":{},"body":{"injectables/EventService.html":{}}}],["eventgoalrepository",{"_index":1336,"title":{},"body":{"injectables/EventService.html":{}}}],["eventid",{"_index":266,"title":{},"body":{"classes/$npmConfigName1678774445242.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["eventmodule",{"_index":454,"title":{"modules/EventModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules.html":{},"overview.html":{}}}],["eventrepository",{"_index":1339,"title":{},"body":{"injectables/EventService.html":{}}}],["events",{"_index":1254,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/PaymentService.html":{},"entities/User.html":{}}}],["events')@roles(role.admin",{"_index":1250,"title":{},"body":{"controllers/EventController.html":{}}}],["events.dto",{"_index":1279,"title":{},"body":{"controllers/EventController.html":{}}}],["events.dto.ts",{"_index":1791,"title":{},"body":{"classes/GetProximityEventsDto.html":{},"coverage.html":{}}}],["events.dto.ts:13",{"_index":1793,"title":{},"body":{"classes/GetProximityEventsDto.html":{}}}],["events.dto.ts:9",{"_index":1792,"title":{},"body":{"classes/GetProximityEventsDto.html":{}}}],["eventsattended",{"_index":2730,"title":{},"body":{"entities/User.html":{}}}],["eventscreated",{"_index":2731,"title":{},"body":{"entities/User.html":{}}}],["eventservice",{"_index":1280,"title":{"injectables/EventService.html":{}},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"coverage.html":{},"overview.html":{}}}],["everyday",{"_index":2673,"title":{},"body":{"injectables/TasksService.html":{}}}],["excluding",{"_index":898,"title":{},"body":{"injectables/AuthService.html":{}}}],["execute",{"_index":1949,"title":{},"body":{"injectables/MemoryService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["executed",{"_index":2806,"title":{},"body":{"entities/User.html":{}}}],["executioncontext",{"_index":2589,"title":{},"body":{"guards/RolesGuard.html":{},"guards/SubscriptionsGuard.html":{}}}],["exist",{"_index":417,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/MemoryService.html":{},"injectables/ReportService.html":{}}}],["exists",{"_index":821,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FirebaseStorageService.html":{}}}],["exists[0",{"_index":1604,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["expire",{"_index":2689,"title":{},"body":{"injectables/TasksService.html":{}}}],["expired",{"_index":1818,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"miscellaneous/enumerations.html":{}}}],["expires",{"_index":1590,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["expiresin",{"_index":3044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiry",{"_index":1559,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["expirydate",{"_index":1526,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/MemoryService.html":{}}}],["export",{"_index":36,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateClueDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"controllers/EventController.html":{},"entities/EventGoal.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Memory.html":{},"controllers/MemoryController.html":{},"modules/MemoryModule.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"classes/ReCaptchaResponseDto.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"guards/SubscriptionsGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"miscellaneous/variables.html":{}}}],["exports",{"_index":854,"title":{},"body":{"modules/AuthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":336,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{},"dependencies.html":{}}}],["extends",{"_index":581,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["extract",{"_index":1812,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":1807,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1816,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failcustomer",{"_index":2286,"title":{},"body":{"injectables/PaymentService.html":{}}}],["failcustomer.id",{"_index":2289,"title":{},"body":{"injectables/PaymentService.html":{}}}],["failed",{"_index":980,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["failuser",{"_index":2288,"title":{},"body":{"injectables/PaymentService.html":{}}}],["failuser.id",{"_index":2292,"title":{},"body":{"injectables/PaymentService.html":{}}}],["false",{"_index":427,"title":{},"body":{"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppealsService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"injectables/ReportService.html":{},"entities/User.html":{}}}],["family",{"_index":938,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["fcm",{"_index":1987,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["fcmtoken",{"_index":212,"title":{},"body":{"classes/$npmConfigName1674121256550.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"entities/User.html":{}}}],["fcmtokens",{"_index":2057,"title":{},"body":{"injectables/NotificationService.html":{}}}],["fcmtokens[0",{"_index":2060,"title":{},"body":{"injectables/NotificationService.html":{}}}],["feed",{"_index":1474,"title":{},"body":{"controllers/FeedController.html":{},"injectables/FeedService.html":{}}}],["feed.controller",{"_index":1490,"title":{},"body":{"modules/FeedModule.html":{}}}],["feed.service",{"_index":1480,"title":{},"body":{"controllers/FeedController.html":{},"modules/FeedModule.html":{}}}],["feedcontroller",{"_index":1472,"title":{"controllers/FeedController.html":{}},"body":{"controllers/FeedController.html":{},"modules/FeedModule.html":{},"coverage.html":{}}}],["feedmodule",{"_index":455,"title":{"modules/FeedModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{},"modules.html":{},"overview.html":{}}}],["feedservice",{"_index":1479,"title":{"injectables/FeedService.html":{}},"body":{"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"coverage.html":{},"overview.html":{}}}],["female",{"_index":2958,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["field",{"_index":1158,"title":{},"body":{"classes/CreateScrapBookDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateClueDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"controllers/EventController.html":{},"entities/EventGoal.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Memory.html":{},"controllers/MemoryController.html":{},"modules/MemoryModule.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"classes/ReCaptchaResponseDto.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"guards/SubscriptionsGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"coverage.html":{},"index.html":{}}}],["file(filename",{"_index":1598,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["file).then((user",{"_index":823,"title":{},"body":{"controllers/AuthController.html":{}}}],["file.getsignedurl(urloptions",{"_index":1592,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["file.save(image",{"_index":1586,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["fileinterceptor",{"_index":800,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MemoryController.html":{}}}],["filename",{"_index":1595,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["filter((appeal",{"_index":725,"title":{},"body":{"injectables/AppealsService.html":{}}}],["filter((report",{"_index":704,"title":{},"body":{"injectables/AppealsService.html":{}}}],["find",{"_index":2501,"title":{},"body":{"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["findone",{"_index":2507,"title":{},"body":{"injectables/ReportService.html":{}}}],["firebase",{"_index":1524,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["firebaseconfig",{"_index":2858,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebasestorageservice",{"_index":1521,"title":{"injectables/FirebaseStorageService.html":{}},"body":{"injectables/FirebaseStorageService.html":{},"injectables/MemoryService.html":{},"entities/Post.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["firebasestorageservice().deletememoryimage(dbmemory.imageid",{"_index":1966,"title":{},"body":{"injectables/MemoryService.html":{}}}],["firebasestorageservice().uploadmemoryimage",{"_index":1941,"title":{},"body":{"injectables/MemoryService.html":{}}}],["first",{"_index":3002,"title":{},"body":{"index.html":{}}}],["firstname",{"_index":824,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignUpUserDto.html":{},"entities/User.html":{}}}],["fk_120333cf695db458809e8b29e22",{"_index":281,"title":{},"body":{"classes/$npmConfigName1678774445242.html":{}}}],["fk_22b6df8103e450a49ea0f9ff939",{"_index":107,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672417201262.html":{}}}],["fk_276779da446413a0d79598d4fbd",{"_index":170,"title":{},"body":{"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_288f29161615bed72435a2f90ee",{"_index":223,"title":{},"body":{"classes/$npmConfigName1674486373359.html":{}}}],["fk_2d3711064572aa0203cba01242b",{"_index":120,"title":{},"body":{"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_2e595b9d3a37e4b72879dddb5ce",{"_index":106,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_37ecc4fc7d8451a768b704c43e0",{"_index":209,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_43cb4b8de8f8cfa4fd2857369c2",{"_index":131,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_48750d6b207c4bd82d30c5dd722",{"_index":224,"title":{},"body":{"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_7a773352fcf1271324f2e5a3e41",{"_index":286,"title":{},"body":{"classes/$npmConfigName1678779204584.html":{}}}],["fk_7b9ec6db412ee31e791072faf29",{"_index":189,"title":{},"body":{"classes/$npmConfigName1673770456243.html":{}}}],["fk_7c5f8647272441265e4c2e61071",{"_index":208,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_929dcdf74558612cc6166981480",{"_index":103,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_94a85bb16d24033a2afdd5df060",{"_index":171,"title":{},"body":{"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{}}}],["fk_9b9ae2fda8caa069f3564df40e3",{"_index":293,"title":{},"body":{"classes/$npmConfigName1678780013678.html":{}}}],["fk_a9aad25ed05e8f5a9dffbc17a4a",{"_index":115,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1673027114310.html":{}}}],["fk_aea779e51a733247bccf1f61d9a",{"_index":104,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{}}}],["fk_b5db9533f87c9bc26bbb8ed3d06",{"_index":91,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_baa1c30b37f90c0df2e56257f16",{"_index":92,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{}}}],["fk_c2159058051b11b2f9bb1b36983",{"_index":206,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_c2e03da07cfe6311f67a2c14699",{"_index":278,"title":{},"body":{"classes/$npmConfigName1678774445242.html":{}}}],["fk_c9a8df2f7cbbae1cda940694409",{"_index":197,"title":{},"body":{"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_cac6c15bcaa655e31e86e48f59a",{"_index":196,"title":{},"body":{"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_cb16f471dfa696d2da841aaf21e",{"_index":280,"title":{},"body":{"classes/$npmConfigName1678774445242.html":{}}}],["fk_d7835fe85af927de67a58305cfa",{"_index":276,"title":{},"body":{"classes/$npmConfigName1678774445242.html":{}}}],["fk_f422f6f552c1c7b7a63e784cab5",{"_index":279,"title":{},"body":{"classes/$npmConfigName1678774445242.html":{}}}],["fk_f4a9d59861c87ba252ead40d84d",{"_index":207,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_f975f729d8f811976339e642f1b",{"_index":190,"title":{},"body":{"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_fb7ffd0860cbcc5cf22c96d3c05",{"_index":76,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_fc71562e9a53841973da0dde326",{"_index":248,"title":{},"body":{"classes/$npmConfigName1676616826310.html":{}}}],["folder",{"_index":540,"title":{},"body":{"modules/AppModule.html":{}}}],["follow",{"_index":200,"title":{"entities/Follow.html":{}},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{},"modules/AppModule.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"injectables/FollowService.html":{},"entities/User.html":{},"coverage.html":{}}}],["follow.controller",{"_index":1693,"title":{},"body":{"modules/FollowModule.html":{}}}],["follow.followed",{"_index":1760,"title":{},"body":{"injectables/FollowService.html":{},"entities/User.html":{}}}],["follow.followed.id",{"_index":1745,"title":{},"body":{"injectables/FollowService.html":{}}}],["follow.followedby",{"_index":1759,"title":{},"body":{"injectables/FollowService.html":{},"entities/User.html":{}}}],["follow.followedby.id",{"_index":1761,"title":{},"body":{"injectables/FollowService.html":{}}}],["follow.id",{"_index":1784,"title":{},"body":{"injectables/FollowService.html":{}}}],["follow.service",{"_index":1663,"title":{},"body":{"controllers/FollowController.html":{},"modules/FollowModule.html":{}}}],["follow/:id",{"_index":1654,"title":{},"body":{"controllers/FollowController.html":{}}}],["follow/:requestid",{"_index":1632,"title":{},"body":{"controllers/FollowController.html":{}}}],["follow_request",{"_index":203,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["followcontroller",{"_index":1619,"title":{"controllers/FollowController.html":{}},"body":{"controllers/FollowController.html":{},"modules/FollowModule.html":{},"coverage.html":{}}}],["followed",{"_index":1610,"title":{},"body":{"entities/Follow.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/User.html":{}}}],["followed.followerscount",{"_index":1764,"title":{},"body":{"injectables/FollowService.html":{}}}],["followedby",{"_index":1611,"title":{},"body":{"entities/Follow.html":{},"injectables/FollowService.html":{}}}],["followedby.followingcount",{"_index":1762,"title":{},"body":{"injectables/FollowService.html":{}}}],["followedbyid",{"_index":201,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["followedid",{"_index":202,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["followers",{"_index":1637,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{},"entities/User.html":{}}}],["followers.followedby",{"_index":1767,"title":{},"body":{"injectables/FollowService.html":{}}}],["followerscount",{"_index":240,"title":{},"body":{"classes/$npmConfigName1675177507147.html":{},"entities/User.html":{}}}],["followid",{"_index":1782,"title":{},"body":{"injectables/FollowService.html":{}}}],["following",{"_index":1497,"title":{},"body":{"injectables/FeedService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/User.html":{}}}],["following.followed",{"_index":1733,"title":{},"body":{"injectables/FollowService.html":{}}}],["following.followed.posts",{"_index":1498,"title":{},"body":{"injectables/FeedService.html":{}}}],["following.followed.posts.comments",{"_index":1502,"title":{},"body":{"injectables/FeedService.html":{}}}],["following.followed.posts.comments.author",{"_index":1503,"title":{},"body":{"injectables/FeedService.html":{}}}],["following.followed.posts.likes",{"_index":1500,"title":{},"body":{"injectables/FeedService.html":{}}}],["following.followed.posts.likes.likedby",{"_index":1501,"title":{},"body":{"injectables/FeedService.html":{}}}],["following.followed.posts.postedby",{"_index":1499,"title":{},"body":{"injectables/FeedService.html":{}}}],["followingcount",{"_index":241,"title":{},"body":{"classes/$npmConfigName1675177507147.html":{},"entities/User.html":{}}}],["followmodule",{"_index":456,"title":{"modules/FollowModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FollowModule.html":{},"modules.html":{},"overview.html":{}}}],["followrequest",{"_index":492,"title":{"entities/FollowRequest.html":{}},"body":{"modules/AppModule.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/User.html":{},"coverage.html":{}}}],["followrequest.requestedby",{"_index":1746,"title":{},"body":{"injectables/FollowService.html":{},"entities/User.html":{}}}],["followrequest.requesteduser",{"_index":1747,"title":{},"body":{"injectables/FollowService.html":{},"entities/User.html":{}}}],["followrequest.requesteduser.id",{"_index":1742,"title":{},"body":{"injectables/FollowService.html":{}}}],["followrequest.status",{"_index":1743,"title":{},"body":{"injectables/FollowService.html":{}}}],["followrequestsreceived",{"_index":1771,"title":{},"body":{"injectables/FollowService.html":{},"entities/User.html":{}}}],["followrequestsreceived.requestedby",{"_index":1772,"title":{},"body":{"injectables/FollowService.html":{}}}],["followrequestsrepository",{"_index":1709,"title":{},"body":{"injectables/FollowService.html":{}}}],["followrequestssent",{"_index":1734,"title":{},"body":{"injectables/FollowService.html":{},"entities/User.html":{}}}],["followrequestssent.requesteduser",{"_index":1735,"title":{},"body":{"injectables/FollowService.html":{}}}],["followservice",{"_index":1662,"title":{"injectables/FollowService.html":{}},"body":{"controllers/FollowController.html":{},"modules/FollowModule.html":{},"injectables/FollowService.html":{},"coverage.html":{},"overview.html":{}}}],["followsrepository",{"_index":1710,"title":{},"body":{"injectables/FollowService.html":{}}}],["followstatus",{"_index":1703,"title":{},"body":{"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"miscellaneous/enumerations.html":{}}}],["followstatus.accepted",{"_index":1754,"title":{},"body":{"injectables/FollowService.html":{}}}],["followstatus.pending",{"_index":1704,"title":{},"body":{"entities/FollowRequest.html":{},"injectables/FollowService.html":{}}}],["followstatus.rejected",{"_index":1757,"title":{},"body":{"injectables/FollowService.html":{}}}],["font",{"_index":937,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["forbiddenexception",{"_index":797,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FollowService.html":{}}}],["forbiddenexception('user",{"_index":846,"title":{},"body":{"controllers/AuthController.html":{}}}],["forbiddenexception('you",{"_index":1751,"title":{},"body":{"injectables/FollowService.html":{}}}],["foreign",{"_index":77,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{}}}],["found",{"_index":692,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/LocalStrategy.html":{},"injectables/MemoryService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["frontend",{"_index":2124,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["full",{"_index":1437,"title":{},"body":{"injectables/EventService.html":{}}}],["function",{"_index":1584,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"coverage.html":{}}}],["functions",{"_index":2978,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":3005,"title":{},"body":{"index.html":{}}}],["gender",{"_index":138,"title":{},"body":{"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["gender.undefined",{"_index":2763,"title":{},"body":{"entities/User.html":{}}}],["generate",{"_index":2107,"title":{},"body":{"interfaces/PageMetaDtoParameters.html":{}}}],["geometry",{"_index":259,"title":{},"body":{"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{}}}],["geopoint",{"_index":255,"title":{},"body":{"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{}}}],["get('/:id",{"_index":1309,"title":{},"body":{"controllers/EventController.html":{},"controllers/MemoryController.html":{}}}],["get('active",{"_index":1306,"title":{},"body":{"controllers/EventController.html":{}}}],["get('admin/post/:id",{"_index":349,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["get('cancel",{"_index":2146,"title":{},"body":{"controllers/PaymentController.html":{}}}],["get('captcha",{"_index":760,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('follow",{"_index":1685,"title":{},"body":{"controllers/FollowController.html":{}}}],["get('followers",{"_index":1681,"title":{},"body":{"controllers/FollowController.html":{}}}],["get('following",{"_index":1683,"title":{},"body":{"controllers/FollowController.html":{}}}],["get('joined",{"_index":1301,"title":{},"body":{"controllers/EventController.html":{}}}],["get('post",{"_index":647,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/ReportController.html":{}}}],["get('post/:id",{"_index":362,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["get('reported",{"_index":2458,"title":{},"body":{"controllers/ReportController.html":{}}}],["get('success",{"_index":2152,"title":{},"body":{"controllers/PaymentController.html":{}}}],["get('user",{"_index":650,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/EventController.html":{},"controllers/MemoryController.html":{},"controllers/ReportController.html":{}}}],["getactiveevents",{"_index":1234,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["getactiveevents(@request",{"_index":1307,"title":{},"body":{"controllers/EventController.html":{}}}],["getactiveevents(pageoptionsdto",{"_index":1308,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["getactiveevents(req",{"_index":1248,"title":{},"body":{"controllers/EventController.html":{}}}],["getadminpostanalytics",{"_index":305,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{}}}],["getadminpostanalytics(@request",{"_index":351,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["getadminpostanalytics(req",{"_index":307,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["getadminpostanalytics(req.user",{"_index":354,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["getadminpostanalytics(user",{"_index":393,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["getcaptcha",{"_index":751,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getcaptcha(@res",{"_index":831,"title":{},"body":{"controllers/AuthController.html":{}}}],["getcaptcha(res",{"_index":759,"title":{},"body":{"controllers/AuthController.html":{}}}],["getcoordinatesradius",{"_index":1334,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["getcoordinatesradius(lat",{"_index":1351,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["geteventbyid",{"_index":1235,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["geteventbyid(@request",{"_index":1310,"title":{},"body":{"controllers/EventController.html":{}}}],["geteventbyid(eventid",{"_index":1311,"title":{},"body":{"controllers/EventController.html":{}}}],["geteventbyid(id",{"_index":1357,"title":{},"body":{"injectables/EventService.html":{}}}],["geteventbyid(req",{"_index":1255,"title":{},"body":{"controllers/EventController.html":{}}}],["getfeed",{"_index":1475,"title":{},"body":{"controllers/FeedController.html":{},"injectables/FeedService.html":{}}}],["getfeed(@request",{"_index":1482,"title":{},"body":{"controllers/FeedController.html":{}}}],["getfeed(req",{"_index":1476,"title":{},"body":{"controllers/FeedController.html":{}}}],["getfeed(req.user",{"_index":1484,"title":{},"body":{"controllers/FeedController.html":{}}}],["getfeed(user",{"_index":1493,"title":{},"body":{"injectables/FeedService.html":{}}}],["getfollowers",{"_index":1622,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["getfollowers(req",{"_index":1634,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowers(req.user",{"_index":1682,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowers(user",{"_index":1715,"title":{},"body":{"injectables/FollowService.html":{}}}],["getfollowing",{"_index":1623,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["getfollowing(req",{"_index":1638,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowing(req.user",{"_index":1684,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowing(user",{"_index":1717,"title":{},"body":{"injectables/FollowService.html":{}}}],["getfollowrequestsreceived",{"_index":1624,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["getfollowrequestsreceived(req",{"_index":1641,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowrequestsreceived(req.user",{"_index":1686,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowrequestsreceived(user",{"_index":1719,"title":{},"body":{"injectables/FollowService.html":{}}}],["getfollowrequestssent",{"_index":1625,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["getfollowrequestssent(req",{"_index":1646,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowrequestssent(req.user",{"_index":1687,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowrequestssent(user",{"_index":1721,"title":{},"body":{"injectables/FollowService.html":{}}}],["gethello",{"_index":552,"title":{},"body":{"injectables/AppService.html":{}}}],["getjoinedevents",{"_index":1236,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["getjoinedevents(@request",{"_index":1302,"title":{},"body":{"controllers/EventController.html":{}}}],["getjoinedevents(req",{"_index":1258,"title":{},"body":{"controllers/EventController.html":{}}}],["getjoinedevents(req.user",{"_index":1303,"title":{},"body":{"controllers/EventController.html":{}}}],["getjoinedevents(user",{"_index":1360,"title":{},"body":{"injectables/EventService.html":{}}}],["getmany",{"_index":1432,"title":{},"body":{"injectables/EventService.html":{}}}],["getmanyandcount",{"_index":739,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/EventService.html":{},"injectables/MemoryService.html":{},"injectables/ReportService.html":{}}}],["getmemorybyid",{"_index":1868,"title":{},"body":{"controllers/MemoryController.html":{},"injectables/MemoryService.html":{}}}],["getmemorybyid(@param('id",{"_index":1901,"title":{},"body":{"controllers/MemoryController.html":{}}}],["getmemorybyid(id",{"_index":1876,"title":{},"body":{"controllers/MemoryController.html":{},"injectables/MemoryService.html":{}}}],["getmemoryimagesignedurl",{"_index":1530,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["getmemoryimagesignedurl(imageid",{"_index":1548,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["getmessaging",{"_index":3038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getone",{"_index":1958,"title":{},"body":{"injectables/MemoryService.html":{}}}],["getpostanalytics",{"_index":306,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{}}}],["getpostanalytics(@request",{"_index":364,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["getpostanalytics(req",{"_index":323,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["getpostanalytics(req.user",{"_index":365,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["getpostanalytics(user",{"_index":396,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["getpostappeals",{"_index":593,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["getpostappeals(@request",{"_index":653,"title":{},"body":{"controllers/AppealsController.html":{}}}],["getpostappeals(pageoptionsdto",{"_index":654,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["getpostappeals(req",{"_index":603,"title":{},"body":{"controllers/AppealsController.html":{}}}],["getpostappealsbyid",{"_index":594,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["getpostappealsbyid(postid",{"_index":648,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["getpostappealsbyid(req",{"_index":610,"title":{},"body":{"controllers/AppealsController.html":{}}}],["getpostimagesignedurl",{"_index":1531,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["getpostimagesignedurl(imageid",{"_index":1550,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["getpostreports",{"_index":2393,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["getpostreports(id",{"_index":2483,"title":{},"body":{"injectables/ReportService.html":{}}}],["getpostreports(params.id",{"_index":2443,"title":{},"body":{"controllers/ReportController.html":{}}}],["getpostreports(req",{"_index":2408,"title":{},"body":{"controllers/ReportController.html":{}}}],["getproximityclues",{"_index":1237,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["getproximityclues(@request",{"_index":1297,"title":{},"body":{"controllers/EventController.html":{}}}],["getproximityclues(req",{"_index":1262,"title":{},"body":{"controllers/EventController.html":{}}}],["getproximityclues(req.user",{"_index":1298,"title":{},"body":{"controllers/EventController.html":{}}}],["getproximityclues(user",{"_index":1363,"title":{},"body":{"injectables/EventService.html":{}}}],["getproximityevents",{"_index":1238,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["getproximityevents(@request",{"_index":1293,"title":{},"body":{"controllers/EventController.html":{}}}],["getproximityevents(req",{"_index":1266,"title":{},"body":{"controllers/EventController.html":{}}}],["getproximityevents(req.user",{"_index":1294,"title":{},"body":{"controllers/EventController.html":{}}}],["getproximityevents(user",{"_index":1367,"title":{},"body":{"injectables/EventService.html":{}}}],["getproximityeventsdto",{"_index":1263,"title":{"classes/GetProximityEventsDto.html":{}},"body":{"controllers/EventController.html":{},"classes/GetProximityEventsDto.html":{},"coverage.html":{}}}],["getproximitymemories",{"_index":1869,"title":{},"body":{"controllers/MemoryController.html":{},"injectables/MemoryService.html":{}}}],["getproximitymemories(body",{"_index":1878,"title":{},"body":{"controllers/MemoryController.html":{}}}],["getproximitymemories(req.user",{"_index":1896,"title":{},"body":{"controllers/MemoryController.html":{}}}],["getproximitymemories(user",{"_index":1922,"title":{},"body":{"injectables/MemoryService.html":{}}}],["getproximitymemorydto",{"_index":1794,"title":{"classes/GetProximityMemoryDto.html":{}},"body":{"classes/GetProximityMemoryDto.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"coverage.html":{}}}],["getrawone",{"_index":908,"title":{},"body":{"injectables/AuthService.html":{}}}],["getreportedposts",{"_index":2394,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["getreportedposts(@request",{"_index":2459,"title":{},"body":{"controllers/ReportController.html":{}}}],["getreportedposts(pageoptionsdto",{"_index":2460,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["getreportedposts(req",{"_index":2412,"title":{},"body":{"controllers/ReportController.html":{}}}],["getreportedusers",{"_index":2395,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["getreportedusers(@request",{"_index":2461,"title":{},"body":{"controllers/ReportController.html":{}}}],["getreportedusers(pageoptionsdto",{"_index":2462,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["getreportedusers(req",{"_index":2416,"title":{},"body":{"controllers/ReportController.html":{}}}],["gets",{"_index":608,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["getsignedurl",{"_index":1532,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["getsignedurl(urloptions",{"_index":1606,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["getsignedurl(userid",{"_index":1552,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["getsignedurlconfig",{"_index":1579,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["getskip",{"_index":2119,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["getstorage",{"_index":3041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getstorage().bucket",{"_index":3033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getting",{"_index":2980,"title":{"index.html":{}},"body":{}}],["getuserappeals",{"_index":595,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["getuserappeals(@request",{"_index":651,"title":{},"body":{"controllers/AppealsController.html":{}}}],["getuserappeals(req",{"_index":614,"title":{},"body":{"controllers/AppealsController.html":{}}}],["getuserappeals(req.user",{"_index":652,"title":{},"body":{"controllers/AppealsController.html":{}}}],["getuserappeals(user",{"_index":680,"title":{},"body":{"injectables/AppealsService.html":{}}}],["getuserevents",{"_index":1239,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["getuserevents(@request",{"_index":1304,"title":{},"body":{"controllers/EventController.html":{}}}],["getuserevents(req",{"_index":1268,"title":{},"body":{"controllers/EventController.html":{}}}],["getuserevents(req.user",{"_index":1305,"title":{},"body":{"controllers/EventController.html":{}}}],["getuserevents(user",{"_index":1369,"title":{},"body":{"injectables/EventService.html":{}}}],["getusermemories",{"_index":1870,"title":{},"body":{"controllers/MemoryController.html":{},"injectables/MemoryService.html":{}}}],["getusermemories(@request",{"_index":1897,"title":{},"body":{"controllers/MemoryController.html":{}}}],["getusermemories(req",{"_index":1882,"title":{},"body":{"controllers/MemoryController.html":{}}}],["getusermemories(req.user",{"_index":1898,"title":{},"body":{"controllers/MemoryController.html":{}}}],["getusermemories(user",{"_index":1924,"title":{},"body":{"injectables/MemoryService.html":{}}}],["getuserreports",{"_index":2396,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["getuserreports(id",{"_index":2487,"title":{},"body":{"injectables/ReportService.html":{}}}],["getuserreports(params.id",{"_index":2446,"title":{},"body":{"controllers/ReportController.html":{}}}],["getuserreports(req",{"_index":2419,"title":{},"body":{"controllers/ReportController.html":{}}}],["given",{"_index":1359,"title":{},"body":{"injectables/EventService.html":{}}}],["global",{"_index":3003,"title":{},"body":{"index.html":{}}}],["go",{"_index":2303,"title":{},"body":{"injectables/PaymentService.html":{}}}],["goal",{"_index":1105,"title":{},"body":{"classes/CreateEventDto.html":{},"entities/Event.html":{},"injectables/EventService.html":{},"entities/User.html":{}}}],["goal.creator",{"_index":2765,"title":{},"body":{"entities/User.html":{}}}],["goal.dto",{"_index":1129,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["goal.dto.ts",{"_index":1133,"title":{},"body":{"classes/CreateGoalDto.html":{},"coverage.html":{}}}],["goal.dto.ts:13",{"_index":1135,"title":{},"body":{"classes/CreateGoalDto.html":{}}}],["goal.dto.ts:5",{"_index":1136,"title":{},"body":{"classes/CreateGoalDto.html":{}}}],["goal.dto.ts:9",{"_index":1134,"title":{},"body":{"classes/CreateGoalDto.html":{}}}],["goal.event",{"_index":1217,"title":{},"body":{"entities/Event.html":{}}}],["goal.event)@joincolumn",{"_index":1193,"title":{},"body":{"entities/Event.html":{}}}],["goalid",{"_index":289,"title":{},"body":{"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{}}}],["goals",{"_index":2804,"title":{},"body":{"entities/User.html":{}}}],["goalscreated",{"_index":2732,"title":{},"body":{"entities/User.html":{}}}],["google",{"_index":1580,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["grecaptcharesponse",{"_index":891,"title":{},"body":{"injectables/AuthService.html":{}}}],["group.enum",{"_index":2033,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SendNotificationDto.html":{}}}],["group.enum.ts",{"_index":2946,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["groupby('post.id",{"_index":2569,"title":{},"body":{"injectables/ReportService.html":{}}}],["groupby('user.id",{"_index":2576,"title":{},"body":{"injectables/ReportService.html":{}}}],["guard",{"_index":767,"title":{"guards/RolesGuard.html":{},"guards/SubscriptionsGuard.html":{}},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["guards",{"_index":2582,"title":{},"body":{"guards/RolesGuard.html":{},"guards/SubscriptionsGuard.html":{},"overview.html":{}}}],["guards/jwt",{"_index":808,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/local",{"_index":809,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/roles.guard",{"_index":810,"title":{},"body":{"controllers/AuthController.html":{}}}],["h1",{"_index":934,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["harrassement",{"_index":2970,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hash",{"_index":1176,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["hash(password",{"_index":1180,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["hashed",{"_index":1169,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["hashedpassword",{"_index":1166,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["hashpassword",{"_index":2812,"title":{},"body":{"entities/User.html":{}}}],["hasnextpage",{"_index":2083,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["haspreviouspage",{"_index":2084,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["hasstripaccount",{"_index":234,"title":{},"body":{"classes/$npmConfigName1674544597118.html":{},"injectables/PaymentService.html":{},"entities/User.html":{}}}],["header",{"_index":1814,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["height",{"_index":956,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["hello",{"_index":554,"title":{},"body":{"injectables/AppService.html":{}}}],["helvetica",{"_index":941,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["hook",{"_index":2805,"title":{},"body":{"entities/User.html":{}}}],["host",{"_index":526,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["hostname",{"_index":2385,"title":{},"body":{"classes/ReCaptchaResponseDto.html":{}}}],["httpexception",{"_index":1375,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{},"injectables/ReportService.html":{}}}],["httpexception('event",{"_index":1433,"title":{},"body":{"injectables/EventService.html":{}}}],["httpexception('memory",{"_index":1959,"title":{},"body":{"injectables/MemoryService.html":{}}}],["httpexception('post",{"_index":2503,"title":{},"body":{"injectables/ReportService.html":{}}}],["httpexception('report",{"_index":2560,"title":{},"body":{"injectables/ReportService.html":{}}}],["httpexception('user",{"_index":1441,"title":{},"body":{"injectables/EventService.html":{},"injectables/ReportService.html":{}}}],["httpexception('you",{"_index":2504,"title":{},"body":{"injectables/ReportService.html":{}}}],["httpmodule",{"_index":855,"title":{},"body":{"modules/AuthModule.html":{}}}],["https://${this.url}:443/payment/cancel?session_id={checkout_session_id",{"_index":2252,"title":{},"body":{"injectables/PaymentService.html":{}}}],["https://${this.url}:443/payment/success?session_id={checkout_session_id",{"_index":2250,"title":{},"body":{"injectables/PaymentService.html":{}}}],["https://firebasestorage.googleapis.com/v0/b/atlas",{"_index":145,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{}}}],["https://github.com/jmcdo29/testing",{"_index":3013,"title":{},"body":{"index.html":{}}}],["https://github.com/narhakobyan/awesome",{"_index":3010,"title":{},"body":{"index.html":{}}}],["https://www.google.com/recaptcha/api/siteverify?response=${grecaptcharesponse}&secret=${secretkey",{"_index":987,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpservice",{"_index":876,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus",{"_index":327,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["httpstatus.bad_request",{"_index":1438,"title":{},"body":{"injectables/EventService.html":{},"injectables/ReportService.html":{}}}],["httpstatus.no_content",{"_index":1964,"title":{},"body":{"injectables/MemoryService.html":{},"injectables/ReportService.html":{}}}],["httpstatus.not_found",{"_index":1434,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["id",{"_index":64,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"entities/Appeal.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"controllers/EventController.html":{},"entities/EventGoal.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"entities/Memory.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"injectables/NotificationService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"injectables/ReportService.html":{},"entities/Scrapbook.html":{},"injectables/StripeService.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"index.html":{}}}],["identifier",{"_index":2845,"title":{},"body":{"coverage.html":{}}}],["idx_120333cf695db458809e8b29e2",{"_index":275,"title":{},"body":{"classes/$npmConfigName1678774445242.html":{}}}],["idx_9b9ae2fda8caa069f3564df40e",{"_index":291,"title":{},"body":{"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{}}}],["idx_cb16f471dfa696d2da841aaf21",{"_index":274,"title":{},"body":{"classes/$npmConfigName1678774445242.html":{}}}],["ignoreexpiration",{"_index":1819,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":1541,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{}}}],["image.buffer",{"_index":1942,"title":{},"body":{"injectables/MemoryService.html":{}}}],["imageexpirydate",{"_index":159,"title":{},"body":{"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"entities/Memory.html":{},"injectables/MemoryService.html":{},"entities/Post.html":{}}}],["imageid",{"_index":158,"title":{},"body":{"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"injectables/FirebaseStorageService.html":{},"entities/Memory.html":{},"injectables/MemoryService.html":{},"entities/Post.html":{}}}],["images",{"_index":1582,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["imageurl",{"_index":67,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/CreatePostDto.html":{},"injectables/FirebaseStorageService.html":{},"entities/Memory.html":{},"injectables/MemoryService.html":{},"entities/Post.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"guards/RolesGuard.html":{},"guards/SubscriptionsGuard.html":{}}}],["import",{"_index":34,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateClueDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"controllers/EventController.html":{},"entities/EventGoal.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Memory.html":{},"controllers/MemoryController.html":{},"modules/MemoryModule.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"guards/SubscriptionsGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{}}}],["imports",{"_index":382,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/EventModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/MemoryModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["inappropriate",{"_index":2967,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateClueDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"controllers/EventController.html":{},"entities/EventGoal.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalStrategy.html":{},"entities/Memory.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"entities/PostReport.html":{},"classes/ReCaptchaResponseDto.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"guards/SubscriptionsGuard.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["infinity",{"_index":985,"title":{},"body":{"injectables/AuthService.html":{}}}],["influencer",{"_index":2974,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["influencers",{"_index":2023,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/enumerations.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateClueDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"controllers/EventController.html":{},"entities/EventGoal.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Memory.html":{},"controllers/MemoryController.html":{},"modules/MemoryModule.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"classes/ReCaptchaResponseDto.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"guards/SubscriptionsGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{}}}],["inject",{"_index":550,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{}}}],["injectable",{"_index":384,"title":{"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MemoryService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{}},"body":{"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MemoryService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"guards/SubscriptionsGuard.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["injectables",{"_index":385,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MemoryService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["injectrepository",{"_index":399,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/MemoryService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["injectrepository(appeal",{"_index":688,"title":{},"body":{"injectables/AppealsService.html":{}}}],["injectrepository(block",{"_index":1055,"title":{},"body":{"injectables/BlockService.html":{}}}],["injectrepository(event",{"_index":1378,"title":{},"body":{"injectables/EventService.html":{}}}],["injectrepository(eventclue",{"_index":1380,"title":{},"body":{"injectables/EventService.html":{}}}],["injectrepository(eventgoal",{"_index":1379,"title":{},"body":{"injectables/EventService.html":{}}}],["injectrepository(follow",{"_index":1729,"title":{},"body":{"injectables/FollowService.html":{}}}],["injectrepository(followrequest",{"_index":1728,"title":{},"body":{"injectables/FollowService.html":{}}}],["injectrepository(memory",{"_index":1928,"title":{},"body":{"injectables/MemoryService.html":{},"injectables/TasksService.html":{}}}],["injectrepository(post",{"_index":404,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["injectrepository(postreport",{"_index":689,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["injectrepository(user",{"_index":406,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["injectrepository(userban",{"_index":2498,"title":{},"body":{"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["injectrepository(userreport",{"_index":2497,"title":{},"body":{"injectables/ReportService.html":{}}}],["inline",{"_index":972,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["input",{"_index":896,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["inserted",{"_index":2808,"title":{},"body":{"entities/User.html":{}}}],["install",{"_index":3004,"title":{},"body":{"index.html":{}}}],["installed",{"_index":3001,"title":{},"body":{"index.html":{}}}],["instance",{"_index":2648,"title":{},"body":{"injectables/StripeService.html":{}}}],["int",{"_index":228,"title":{},"body":{"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1678774445242.html":{}}}],["integration",{"_index":3008,"title":{},"body":{"index.html":{}}}],["interact",{"_index":2307,"title":{},"body":{"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["interactioncount",{"_index":428,"title":{},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["interface",{"_index":2104,"title":{"interfaces/PageMetaDtoParameters.html":{}},"body":{"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":2105,"title":{},"body":{"interfaces/PageMetaDtoParameters.html":{}}}],["interval",{"_index":2685,"title":{},"body":{"injectables/TasksService.html":{}}}],["invalid",{"_index":899,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["invoice.payment_failed",{"_index":2284,"title":{},"body":{"injectables/PaymentService.html":{}}}],["invoice.payment_succeeded",{"_index":2271,"title":{},"body":{"injectables/PaymentService.html":{}}}],["invoicingwebhook",{"_index":2133,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["invoicingwebhook(@req",{"_index":2178,"title":{},"body":{"controllers/PaymentController.html":{}}}],["invoicingwebhook(req",{"_index":2138,"title":{},"body":{"controllers/PaymentController.html":{}}}],["invoicingwebhook(req.headers['stripe",{"_index":2179,"title":{},"body":{"controllers/PaymentController.html":{}}}],["invoicingwebhook(stripesignature",{"_index":2192,"title":{},"body":{"injectables/PaymentService.html":{}}}],["invoked",{"_index":1824,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["isarray",{"_index":1120,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/PageDto.html":{}}}],["isarray()@isoptional",{"_index":1106,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isbanned",{"_index":218,"title":{},"body":{"classes/$npmConfigName1674453163372.html":{},"controllers/AuthController.html":{},"injectables/ReportService.html":{},"entities/User.html":{}}}],["isboolean",{"_index":2357,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["isboolean()@isnotempty",{"_index":2350,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["isdate",{"_index":1121,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["isdate()@isnotempty",{"_index":2347,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["isemail",{"_index":2632,"title":{},"body":{"classes/SignUpUserDto.html":{},"classes/UpdateUserEmailDto.html":{}}}],["isenum",{"_index":1122,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"classes/PageOptionsDto.html":{},"classes/ReportDto.html":{},"classes/SendNotificationDto.html":{}}}],["isenum(notificationtargetgroup",{"_index":2614,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["isenum(order",{"_index":2127,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(order)@isoptional",{"_index":2113,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(reportreason",{"_index":2468,"title":{},"body":{"classes/ReportDto.html":{}}}],["isenum(reportreason)@isnotempty",{"_index":2466,"title":{},"body":{"classes/ReportDto.html":{}}}],["isenum(visibility",{"_index":1132,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{}}}],["isenum(visibility)@isnotempty",{"_index":1118,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{}}}],["isfollowing",{"_index":1781,"title":{},"body":{"injectables/FollowService.html":{}}}],["isint",{"_index":1123,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/PageOptionsDto.html":{}}}],["isint()@min(1)@isoptional",{"_index":2115,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isint()@min(1)@max(100",{"_index":1116,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isint()@min(1)@max(50)@isoptional",{"_index":2117,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["islatitude",{"_index":1093,"title":{},"body":{"classes/CreateClueDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{}}}],["islongitude",{"_index":1094,"title":{},"body":{"classes/CreateClueDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{}}}],["isnotempty",{"_index":586,"title":{},"body":{"classes/AppealDto.html":{},"classes/CreateClueDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"classes/PostAnalyticResposneDto.html":{},"classes/ReportDto.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["isnotempty()@isdate",{"_index":1108,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["isnotempty()@islatitude",{"_index":1088,"title":{},"body":{"classes/CreateClueDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{}}}],["isnotempty()@islongitude",{"_index":1090,"title":{},"body":{"classes/CreateClueDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{}}}],["isnotempty()@maxlength(100",{"_index":1098,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["isnotempty()@maxlength(100)@isstring",{"_index":2707,"title":{},"body":{"classes/UpdateUserBioDto.html":{}}}],["isnumber",{"_index":2358,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["isnumber()@min(0)@isnotempty",{"_index":2344,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["isoptional",{"_index":1124,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/PageOptionsDto.html":{},"classes/PostAnalyticResposneDto.html":{},"classes/SendNotificationDto.html":{}}}],["isoptional()@isuuid",{"_index":2355,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{},"classes/SendNotificationDto.html":{}}}],["ispartofscrapbook",{"_index":424,"title":{},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["isphonenumber",{"_index":2640,"title":{},"body":{"classes/SignUpUserDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["isphonenumber('ae",{"_index":2637,"title":{},"body":{"classes/SignUpUserDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["isstring",{"_index":2709,"title":{},"body":{"classes/UpdateUserBioDto.html":{}}}],["istakendown",{"_index":134,"title":{},"body":{"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672833410692.html":{},"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"injectables/ReportService.html":{}}}],["isuserbanned",{"_index":871,"title":{},"body":{"injectables/AuthService.html":{}}}],["isuserbanned(user",{"_index":883,"title":{},"body":{"injectables/AuthService.html":{}}}],["isuuid",{"_index":2359,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{},"classes/SendNotificationDto.html":{}}}],["itemcount",{"_index":716,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/MemoryService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"injectables/ReportService.html":{}}}],["items",{"_index":741,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/EventService.html":{},"injectables/MemoryService.html":{},"injectables/ReportService.html":{}}}],["itemscount",{"_index":743,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/EventService.html":{},"injectables/MemoryService.html":{},"injectables/ReportService.html":{}}}],["itself",{"_index":785,"title":{},"body":{"controllers/AuthController.html":{}}}],["join",{"_index":1274,"title":{},"body":{"controllers/EventController.html":{}}}],["joincolumn",{"_index":1210,"title":{},"body":{"entities/Event.html":{}}}],["joined",{"_index":1261,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["joinevent",{"_index":1240,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["joinevent(@request",{"_index":1290,"title":{},"body":{"controllers/EventController.html":{}}}],["joinevent(req",{"_index":1270,"title":{},"body":{"controllers/EventController.html":{}}}],["joinevent(req.user",{"_index":1291,"title":{},"body":{"controllers/EventController.html":{}}}],["joinevent(user",{"_index":1371,"title":{},"body":{"injectables/EventService.html":{}}}],["joining",{"_index":1374,"title":{},"body":{"injectables/EventService.html":{}}}],["joins",{"_index":1373,"title":{},"body":{"injectables/EventService.html":{}}}],["jointable",{"_index":1211,"title":{},"body":{"entities/Event.html":{}}}],["json",{"_index":828,"title":{},"body":{"controllers/AuthController.html":{}}}],["json.parse(json.stringify(captcharesponse",{"_index":926,"title":{},"body":{"injectables/AuthService.html":{}}}],["json.parse(process.env?.firebase_private_key.tostring",{"_index":3039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt",{"_index":777,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":331,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{},"coverage.html":{}}}],["jwtconfig",{"_index":864,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig.secret",{"_index":1823,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":1815,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":857,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register(jwtconfig",{"_index":868,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":875,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":852,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":73,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["lastname",{"_index":825,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignUpUserDto.html":{},"entities/User.html":{}}}],["lat",{"_index":1356,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["latdiff",{"_index":1467,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["latitude",{"_index":246,"title":{},"body":{"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/CreateClueDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"injectables/EventService.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"entities/Memory.html":{},"injectables/MemoryService.html":{}}}],["left",{"_index":958,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["leftjoinandselect('appeal.appealedby",{"_index":734,"title":{},"body":{"injectables/AppealsService.html":{}}}],["leftjoinandselect('appeal.appealedpost",{"_index":732,"title":{},"body":{"injectables/AppealsService.html":{}}}],["leftjoinandselect('event.clues",{"_index":1421,"title":{},"body":{"injectables/EventService.html":{}}}],["leftjoinandselect('event.creator",{"_index":1423,"title":{},"body":{"injectables/EventService.html":{}}}],["leftjoinandselect('event.goal",{"_index":1422,"title":{},"body":{"injectables/EventService.html":{}}}],["leftjoinandselect('event.participants",{"_index":1420,"title":{},"body":{"injectables/EventService.html":{}}}],["leftjoinandselect('eventclue.event",{"_index":1445,"title":{},"body":{"injectables/EventService.html":{}}}],["leftjoinandselect('memory.user",{"_index":1951,"title":{},"body":{"injectables/MemoryService.html":{}}}],["leftjoinandselect('post.postedby",{"_index":733,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["leftjoinandselect('postreport.reportedby",{"_index":2539,"title":{},"body":{"injectables/ReportService.html":{}}}],["leftjoinandselect('postreport.reportedpost",{"_index":2538,"title":{},"body":{"injectables/ReportService.html":{}}}],["leftjoinandselect('userreport.reportedby",{"_index":2547,"title":{},"body":{"injectables/ReportService.html":{}}}],["leftjoinandselect('userreport.reporteduser",{"_index":2546,"title":{},"body":{"injectables/ReportService.html":{}}}],["lessthan",{"_index":1376,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{},"injectables/TasksService.html":{}}}],["lessthan(maxlat",{"_index":1428,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["lessthan(maxlon",{"_index":1427,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["lessthan(tomorrow",{"_index":2700,"title":{},"body":{"injectables/TasksService.html":{}}}],["license",{"_index":3027,"title":{},"body":{"properties.html":{}}}],["like.entity",{"_index":500,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"entities/User.html":{}}}],["like.entity.ts",{"_index":1831,"title":{},"body":{"entities/Like.html":{},"coverage.html":{}}}],["like.entity.ts:14",{"_index":1838,"title":{},"body":{"entities/Like.html":{}}}],["like.entity.ts:20",{"_index":1836,"title":{},"body":{"entities/Like.html":{}}}],["like.entity.ts:9",{"_index":1834,"title":{},"body":{"entities/Like.html":{}}}],["like.likedby",{"_index":2771,"title":{},"body":{"entities/User.html":{}}}],["like.likedpost",{"_index":2322,"title":{},"body":{"entities/Post.html":{}}}],["likecount",{"_index":2343,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["liked",{"_index":1839,"title":{},"body":{"entities/Like.html":{}}}],["likedby",{"_index":1832,"title":{},"body":{"entities/Like.html":{}}}],["likedbyid",{"_index":222,"title":{},"body":{"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["likedpost",{"_index":1833,"title":{},"body":{"entities/Like.html":{}}}],["likedpostid",{"_index":221,"title":{},"body":{"classes/$npmConfigName1674486373359.html":{}}}],["likes",{"_index":1507,"title":{},"body":{"injectables/FeedService.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["likes.likedby",{"_index":1508,"title":{},"body":{"injectables/FeedService.html":{}}}],["likescount",{"_index":227,"title":{},"body":{"classes/$npmConfigName1674487677914.html":{},"entities/Post.html":{}}}],["line",{"_index":955,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["line_items",{"_index":2245,"title":{},"body":{"injectables/PaymentService.html":{}}}],["list",{"_index":1349,"title":{},"body":{"injectables/EventService.html":{},"classes/PageMetaDto.html":{},"index.html":{}}}],["listens",{"_index":2194,"title":{},"body":{"injectables/PaymentService.html":{}}}],["load",{"_index":2998,"title":{},"body":{"index.html":{}}}],["local",{"_index":774,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":771,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":465,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["location",{"_index":69,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/Scrapbook.html":{}}}],["login",{"_index":766,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(user",{"_index":885,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuser",{"_index":752,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(@request",{"_index":843,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(req",{"_index":762,"title":{},"body":{"controllers/AuthController.html":{}}}],["lon",{"_index":1352,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["londiff",{"_index":1470,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["longer",{"_index":1752,"title":{},"body":{"injectables/FollowService.html":{}}}],["longitude",{"_index":247,"title":{},"body":{"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/CreateClueDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"injectables/EventService.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"entities/Memory.html":{},"injectables/MemoryService.html":{}}}],["longtext",{"_index":160,"title":{},"body":{"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["lot",{"_index":2669,"title":{},"body":{"injectables/TasksService.html":{}}}],["made",{"_index":1084,"title":{},"body":{"entities/Comment.html":{},"entities/Memory.html":{}}}],["make",{"_index":2802,"title":{},"body":{"entities/User.html":{}}}],["male",{"_index":2957,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["many",{"_index":583,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Like.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserReport.html":{}}}],["manytomany",{"_index":1212,"title":{},"body":{"entities/Event.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":1206,"title":{},"body":{"entities/Event.html":{},"entities/User.html":{}}}],["manytoone",{"_index":575,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["manytoone(undefined",{"_index":560,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["map((appeal",{"_index":724,"title":{},"body":{"injectables/AppealsService.html":{}}}],["margin",{"_index":947,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["match",{"_index":819,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EncryptionService.html":{}}}],["matching",{"_index":48,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateClueDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"controllers/EventController.html":{},"entities/EventGoal.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Memory.html":{},"controllers/MemoryController.html":{},"modules/MemoryModule.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"classes/ReCaptchaResponseDto.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"guards/SubscriptionsGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.itemcount",{"_index":2101,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["math.cos((lat",{"_index":1471,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["math.pi",{"_index":1469,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["max",{"_index":1125,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/PageOptionsDto.html":{}}}],["max(100",{"_index":1131,"title":{},"body":{"classes/CreateEventDto.html":{}}}],["max(50",{"_index":2129,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["maxbodylength",{"_index":984,"title":{},"body":{"injectables/AuthService.html":{}}}],["maxlat",{"_index":1413,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["maxlength",{"_index":1100,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/UpdateUserBioDto.html":{}}}],["maxlength(100",{"_index":1101,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/UpdateUserBioDto.html":{}}}],["maxlon",{"_index":1415,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["memories",{"_index":1863,"title":{},"body":{"entities/Memory.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"entities/User.html":{}}}],["memory",{"_index":245,"title":{"entities/Memory.html":{}},"body":{"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"modules/AppModule.html":{},"entities/Memory.html":{},"controllers/MemoryController.html":{},"modules/MemoryModule.html":{},"injectables/MemoryService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"coverage.html":{}}}],["memory.controller",{"_index":1908,"title":{},"body":{"modules/MemoryModule.html":{}}}],["memory.dto",{"_index":1884,"title":{},"body":{"controllers/MemoryController.html":{},"injectables/MemoryService.html":{}}}],["memory.dto.ts",{"_index":1796,"title":{},"body":{"classes/GetProximityMemoryDto.html":{},"coverage.html":{}}}],["memory.dto.ts:13",{"_index":1798,"title":{},"body":{"classes/GetProximityMemoryDto.html":{}}}],["memory.dto.ts:9",{"_index":1797,"title":{},"body":{"classes/GetProximityMemoryDto.html":{}}}],["memory.imageexpirydate",{"_index":1961,"title":{},"body":{"injectables/MemoryService.html":{}}}],["memory.imageid",{"_index":1960,"title":{},"body":{"injectables/MemoryService.html":{}}}],["memory.latitude",{"_index":1933,"title":{},"body":{"injectables/MemoryService.html":{}}}],["memory.location",{"_index":1931,"title":{},"body":{"injectables/MemoryService.html":{}}}],["memory.longitude",{"_index":1935,"title":{},"body":{"injectables/MemoryService.html":{}}}],["memory.service",{"_index":1888,"title":{},"body":{"controllers/MemoryController.html":{},"modules/MemoryModule.html":{}}}],["memory.user",{"_index":2773,"title":{},"body":{"entities/User.html":{}}}],["memory.visibility",{"_index":1937,"title":{},"body":{"injectables/MemoryService.html":{}}}],["memory/entities/memory.entity",{"_index":2664,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["memorycontroller",{"_index":1864,"title":{"controllers/MemoryController.html":{}},"body":{"controllers/MemoryController.html":{},"modules/MemoryModule.html":{},"coverage.html":{}}}],["memoryid",{"_index":1544,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/MemoryService.html":{}}}],["memorymodule",{"_index":457,"title":{"modules/MemoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MemoryModule.html":{},"modules.html":{},"overview.html":{}}}],["memoryrepository",{"_index":1914,"title":{},"body":{"injectables/MemoryService.html":{},"injectables/TasksService.html":{}}}],["memoryservice",{"_index":1887,"title":{"injectables/MemoryService.html":{}},"body":{"controllers/MemoryController.html":{},"modules/MemoryModule.html":{},"injectables/MemoryService.html":{},"coverage.html":{},"overview.html":{}}}],["message",{"_index":360,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{}}}],["message.dto",{"_index":1989,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["message.dto.ts",{"_index":2610,"title":{},"body":{"classes/SendNotificationDto.html":{},"coverage.html":{}}}],["message.dto.ts:12",{"_index":2615,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["message.dto.ts:16",{"_index":2616,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["message.dto.ts:6",{"_index":2617,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["message.dto.ts:9",{"_index":2613,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["messaging",{"_index":2029,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["messaging.send(payload",{"_index":2061,"title":{},"body":{"injectables/NotificationService.html":{}}}],["messaging.sendmulticast(payload",{"_index":2063,"title":{},"body":{"injectables/NotificationService.html":{}}}],["meta",{"_index":2070,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{}}}],["meta.dto",{"_index":685,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/MemoryService.html":{},"classes/PageDto.html":{},"injectables/ReportService.html":{}}}],["meta.dto.ts",{"_index":2080,"title":{},"body":{"classes/PageMetaDto.html":{},"coverage.html":{}}}],["meta.dto.ts:10",{"_index":2094,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:11",{"_index":2091,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:12",{"_index":2089,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:7",{"_index":2093,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:8",{"_index":2095,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:9",{"_index":2092,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["metadata",{"_index":2082,"title":{},"body":{"classes/PageMetaDto.html":{},"dependencies.html":{}}}],["meter",{"_index":1466,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["meters",{"_index":1464,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["method",{"_index":887,"title":{},"body":{"injectables/AuthService.html":{}}}],["methods",{"_index":13,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"guards/SubscriptionsGuard.html":{},"injectables/TasksService.html":{}}}],["migrationinterface",{"_index":9,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{}}}],["migrations",{"_index":538,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["migrations/*{.ts,.js",{"_index":541,"title":{},"body":{"modules/AppModule.html":{}}}],["migrations/1672082558971",{"_index":6,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"coverage.html":{}}}],["migrations/1672082713679",{"_index":50,"title":{},"body":{"classes/$npmConfigName1672082713679.html":{},"coverage.html":{}}}],["migrations/1672133224744",{"_index":55,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"coverage.html":{}}}],["migrations/1672166137042",{"_index":84,"title":{},"body":{"classes/$npmConfigName1672166137042.html":{},"coverage.html":{}}}],["migrations/1672251740346",{"_index":86,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{},"coverage.html":{}}}],["migrations/1672388811259",{"_index":95,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"coverage.html":{}}}],["migrations/1672399737695",{"_index":110,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{},"coverage.html":{}}}],["migrations/1672417201262",{"_index":118,"title":{},"body":{"classes/$npmConfigName1672417201262.html":{},"coverage.html":{}}}],["migrations/1672417384470",{"_index":122,"title":{},"body":{"classes/$npmConfigName1672417384470.html":{},"coverage.html":{}}}],["migrations/1672576067204",{"_index":124,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"coverage.html":{}}}],["migrations/1672585305519",{"_index":133,"title":{},"body":{"classes/$npmConfigName1672585305519.html":{},"coverage.html":{}}}],["migrations/1672600378154",{"_index":137,"title":{},"body":{"classes/$npmConfigName1672600378154.html":{},"coverage.html":{}}}],["migrations/1672678196724",{"_index":140,"title":{},"body":{"classes/$npmConfigName1672678196724.html":{},"coverage.html":{}}}],["migrations/1672744437528",{"_index":143,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"coverage.html":{}}}],["migrations/1672760070076",{"_index":152,"title":{},"body":{"classes/$npmConfigName1672760070076.html":{},"coverage.html":{}}}],["migrations/1672832148243",{"_index":157,"title":{},"body":{"classes/$npmConfigName1672832148243.html":{},"coverage.html":{}}}],["migrations/1672833410692",{"_index":162,"title":{},"body":{"classes/$npmConfigName1672833410692.html":{},"coverage.html":{}}}],["migrations/1673022319464",{"_index":165,"title":{},"body":{"classes/$npmConfigName1673022319464.html":{},"coverage.html":{}}}],["migrations/1673025398979",{"_index":173,"title":{},"body":{"classes/$npmConfigName1673025398979.html":{},"coverage.html":{}}}],["migrations/1673027114310",{"_index":175,"title":{},"body":{"classes/$npmConfigName1673027114310.html":{},"coverage.html":{}}}],["migrations/1673177373733",{"_index":178,"title":{},"body":{"classes/$npmConfigName1673177373733.html":{},"coverage.html":{}}}],["migrations/1673337064308",{"_index":181,"title":{},"body":{"classes/$npmConfigName1673337064308.html":{},"coverage.html":{}}}],["migrations/1673770456243",{"_index":184,"title":{},"body":{"classes/$npmConfigName1673770456243.html":{},"coverage.html":{}}}],["migrations/1673847605869",{"_index":192,"title":{},"body":{"classes/$npmConfigName1673847605869.html":{},"coverage.html":{}}}],["migrations/1673974513613",{"_index":199,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"coverage.html":{}}}],["migrations/1674121256550",{"_index":211,"title":{},"body":{"classes/$npmConfigName1674121256550.html":{},"coverage.html":{}}}],["migrations/1674198387677",{"_index":214,"title":{},"body":{"classes/$npmConfigName1674198387677.html":{},"coverage.html":{}}}],["migrations/1674453163372",{"_index":217,"title":{},"body":{"classes/$npmConfigName1674453163372.html":{},"coverage.html":{}}}],["migrations/1674486373359",{"_index":220,"title":{},"body":{"classes/$npmConfigName1674486373359.html":{},"coverage.html":{}}}],["migrations/1674487677914",{"_index":226,"title":{},"body":{"classes/$npmConfigName1674487677914.html":{},"coverage.html":{}}}],["migrations/1674493007150",{"_index":230,"title":{},"body":{"classes/$npmConfigName1674493007150.html":{},"coverage.html":{}}}],["migrations/1674544597118",{"_index":233,"title":{},"body":{"classes/$npmConfigName1674544597118.html":{},"coverage.html":{}}}],["migrations/1675177507147",{"_index":239,"title":{},"body":{"classes/$npmConfigName1675177507147.html":{},"coverage.html":{}}}],["migrations/1676616826310",{"_index":244,"title":{},"body":{"classes/$npmConfigName1676616826310.html":{},"coverage.html":{}}}],["migrations/1676624523857",{"_index":250,"title":{},"body":{"classes/$npmConfigName1676624523857.html":{},"coverage.html":{}}}],["migrations/1676644288779",{"_index":254,"title":{},"body":{"classes/$npmConfigName1676644288779.html":{},"coverage.html":{}}}],["migrations/1676990992500",{"_index":258,"title":{},"body":{"classes/$npmConfigName1676990992500.html":{},"coverage.html":{}}}],["migrations/1676993098020",{"_index":261,"title":{},"body":{"classes/$npmConfigName1676993098020.html":{},"coverage.html":{}}}],["migrations/1678774445242",{"_index":263,"title":{},"body":{"classes/$npmConfigName1678774445242.html":{},"coverage.html":{}}}],["migrations/1678779028547",{"_index":283,"title":{},"body":{"classes/$npmConfigName1678779028547.html":{},"coverage.html":{}}}],["migrations/1678779204584",{"_index":285,"title":{},"body":{"classes/$npmConfigName1678779204584.html":{},"coverage.html":{}}}],["migrations/1678780013678",{"_index":288,"title":{},"body":{"classes/$npmConfigName1678780013678.html":{},"coverage.html":{}}}],["migrations/1678780110507",{"_index":296,"title":{},"body":{"classes/$npmConfigName1678780110507.html":{},"coverage.html":{}}}],["migrations/1678975542609",{"_index":298,"title":{},"body":{"classes/$npmConfigName1678975542609.html":{},"coverage.html":{}}}],["migrationsrun",{"_index":547,"title":{},"body":{"modules/AppModule.html":{}}}],["migrationstablename",{"_index":539,"title":{},"body":{"modules/AppModule.html":{}}}],["millisecondsinaweek",{"_index":2554,"title":{},"body":{"injectables/ReportService.html":{}}}],["min",{"_index":1126,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/PageOptionsDto.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["min(0",{"_index":2360,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["min(1",{"_index":1130,"title":{},"body":{"classes/CreateEventDto.html":{},"classes/PageOptionsDto.html":{}}}],["minlat",{"_index":1412,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["minlength",{"_index":2722,"title":{},"body":{"classes/UpdateUserPasswordDto.html":{}}}],["minlength(8",{"_index":2723,"title":{},"body":{"classes/UpdateUserPasswordDto.html":{}}}],["minlength(8)@isnotempty",{"_index":2719,"title":{},"body":{"classes/UpdateUserPasswordDto.html":{}}}],["minlon",{"_index":1414,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["miscellaneous",{"_index":2938,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":2240,"title":{},"body":{"injectables/PaymentService.html":{},"index.html":{}}}],["module",{"_index":366,"title":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/EventModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/MemoryModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/EventModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/MemoryModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":368,"title":{"modules.html":{}},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/EventModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/MemoryModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/analytics/analytics.module",{"_index":497,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/appeals/appeals.module",{"_index":488,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/appeals/entities/appeal.entity",{"_index":487,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth/auth.module",{"_index":473,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth/strategies/local.strategy",{"_index":474,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/block/block.module",{"_index":489,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/block/entities/block.entity",{"_index":490,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/event/entities/event.entity",{"_index":507,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{}}}],["modules/event/entities/eventclues.entity",{"_index":509,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{}}}],["modules/event/entities/eventgoal.entity",{"_index":511,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{}}}],["modules/event/event.module",{"_index":512,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/feed/feed.module",{"_index":498,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/follow/entities/follow",{"_index":493,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{}}}],["modules/follow/entities/follow.entity",{"_index":491,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{}}}],["modules/follow/follow.module",{"_index":495,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/memory/entities/memory.entity",{"_index":505,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/memory/memory.module",{"_index":506,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/notification/notification.module",{"_index":496,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/payment/payment.module",{"_index":501,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/post/entities/comment.entity",{"_index":478,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/post/entities/post",{"_index":499,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/post/entities/post.entity",{"_index":476,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/post/entities/scrapbook.entity",{"_index":477,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/post/post.module",{"_index":475,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/report/entities/post",{"_index":480,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/report/entities/user",{"_index":483,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/report/report.module",{"_index":484,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/tasks/tasks.module",{"_index":504,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/entities/user.entity",{"_index":472,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/user.module",{"_index":471,"title":{},"body":{"modules/AppModule.html":{}}}],["morethan",{"_index":1377,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["morethan(minlat",{"_index":1425,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["morethan(minlon",{"_index":1424,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["morethan(new",{"_index":1429,"title":{},"body":{"injectables/EventService.html":{}}}],["multiple",{"_index":2825,"title":{},"body":{"entities/UserBan.html":{}}}],["mysql",{"_index":523,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["mysql2",{"_index":2925,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":12,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"classes/CreateEventDto.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"guards/SubscriptionsGuard.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["named",{"_index":2985,"title":{},"body":{"index.html":{}}}],["nearby",{"_index":1880,"title":{},"body":{"controllers/MemoryController.html":{},"injectables/MemoryService.html":{}}}],["need",{"_index":2309,"title":{},"body":{"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["needed",{"_index":546,"title":{},"body":{"modules/AppModule.html":{}}}],["nest",{"_index":2624,"title":{},"body":{"classes/SignUpUserDto.html":{},"index.html":{}}}],["nestjs",{"_index":3014,"title":{},"body":{"index.html":{}}}],["nestjs/axios",{"_index":856,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":330,"title":{},"body":{"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MemoryController.html":{},"modules/MemoryModule.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"modules/PostModule.html":{},"controllers/ReportController.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"guards/SubscriptionsGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/common/decorators",{"_index":1661,"title":{},"body":{"controllers/FollowController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{}}}],["nestjs/config",{"_index":470,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2592,"title":{},"body":{"guards/RolesGuard.html":{},"guards/SubscriptionsGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":858,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":860,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":801,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MemoryController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":503,"title":{},"body":{"modules/AppModule.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":378,"title":{},"body":{"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"modules/FollowModule.html":{},"injectables/FollowService.html":{},"modules/MemoryModule.html":{},"injectables/MemoryService.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm/dist/typeorm.module",{"_index":861,"title":{},"body":{"modules/AuthModule.html":{}}}],["neue",{"_index":942,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["new",{"_index":415,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/LocalStrategy.html":{},"injectables/MemoryService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newappeal",{"_index":690,"title":{},"body":{"injectables/AppealsService.html":{}}}],["newappeal.appealedby",{"_index":710,"title":{},"body":{"injectables/AppealsService.html":{}}}],["newappeal.appealedpost",{"_index":709,"title":{},"body":{"injectables/AppealsService.html":{}}}],["newappeal.reportreason",{"_index":714,"title":{},"body":{"injectables/AppealsService.html":{}}}],["newappeal.text",{"_index":712,"title":{},"body":{"injectables/AppealsService.html":{}}}],["newban",{"_index":2553,"title":{},"body":{"injectables/ReportService.html":{}}}],["newban.banneduser",{"_index":2555,"title":{},"body":{"injectables/ReportService.html":{}}}],["newban.enddate",{"_index":2557,"title":{},"body":{"injectables/ReportService.html":{}}}],["newban.startdate",{"_index":2556,"title":{},"body":{"injectables/ReportService.html":{}}}],["newblock",{"_index":1063,"title":{},"body":{"injectables/BlockService.html":{}}}],["newblock.blockeduser",{"_index":1064,"title":{},"body":{"injectables/BlockService.html":{}}}],["newblock.blockinguser",{"_index":1065,"title":{},"body":{"injectables/BlockService.html":{}}}],["newevent",{"_index":1381,"title":{},"body":{"injectables/EventService.html":{}}}],["newevent.creator",{"_index":1396,"title":{},"body":{"injectables/EventService.html":{}}}],["newevent.date",{"_index":1394,"title":{},"body":{"injectables/EventService.html":{}}}],["newevent.description",{"_index":1384,"title":{},"body":{"injectables/EventService.html":{}}}],["newevent.goal",{"_index":1406,"title":{},"body":{"injectables/EventService.html":{}}}],["newevent.latitude",{"_index":1388,"title":{},"body":{"injectables/EventService.html":{}}}],["newevent.longitude",{"_index":1390,"title":{},"body":{"injectables/EventService.html":{}}}],["newevent.name",{"_index":1382,"title":{},"body":{"injectables/EventService.html":{}}}],["newevent.numberofparticipants",{"_index":1386,"title":{},"body":{"injectables/EventService.html":{}}}],["newevent.visibility",{"_index":1392,"title":{},"body":{"injectables/EventService.html":{}}}],["newmemory",{"_index":1929,"title":{},"body":{"injectables/MemoryService.html":{}}}],["newmemory.latitude",{"_index":1932,"title":{},"body":{"injectables/MemoryService.html":{}}}],["newmemory.location",{"_index":1930,"title":{},"body":{"injectables/MemoryService.html":{}}}],["newmemory.longitude",{"_index":1934,"title":{},"body":{"injectables/MemoryService.html":{}}}],["newmemory.user",{"_index":1938,"title":{},"body":{"injectables/MemoryService.html":{}}}],["newmemory.visibility",{"_index":1936,"title":{},"body":{"injectables/MemoryService.html":{}}}],["newreport",{"_index":2499,"title":{},"body":{"injectables/ReportService.html":{}}}],["newreport.reason",{"_index":2521,"title":{},"body":{"injectables/ReportService.html":{}}}],["newreport.reportedby",{"_index":2500,"title":{},"body":{"injectables/ReportService.html":{}}}],["newreport.reportedpost",{"_index":2520,"title":{},"body":{"injectables/ReportService.html":{}}}],["newreport.reporteduser",{"_index":2535,"title":{},"body":{"injectables/ReportService.html":{}}}],["newuser",{"_index":2224,"title":{},"body":{"injectables/PaymentService.html":{}}}],["none",{"_index":2960,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["normal",{"_index":2995,"title":{},"body":{"index.html":{}}}],["not(notificationpreference.none",{"_index":2067,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notfoundexception",{"_index":2219,"title":{},"body":{"injectables/PaymentService.html":{}}}],["notfoundexception('user",{"_index":2223,"title":{},"body":{"injectables/PaymentService.html":{}}}],["notification",{"_index":1975,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["notification.controller",{"_index":2006,"title":{},"body":{"modules/NotificationModule.html":{}}}],["notification.service",{"_index":1991,"title":{},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{}}}],["notification/notification.module",{"_index":2186,"title":{},"body":{"modules/PaymentModule.html":{}}}],["notification/notification.service",{"_index":2221,"title":{},"body":{"injectables/PaymentService.html":{}}}],["notificationcontroller",{"_index":1973,"title":{"controllers/NotificationController.html":{}},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"coverage.html":{}}}],["notificationmodule",{"_index":458,"title":{"modules/NotificationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules.html":{},"overview.html":{}}}],["notificationpreference",{"_index":215,"title":{},"body":{"classes/$npmConfigName1674198387677.html":{},"injectables/NotificationService.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["notificationpreference.all",{"_index":2053,"title":{},"body":{"injectables/NotificationService.html":{},"entities/User.html":{}}}],["notificationpreference.broadcast",{"_index":2065,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationpreference.selectedgroup",{"_index":2052,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notifications",{"_index":1986,"title":{},"body":{"controllers/NotificationController.html":{}}}],["notificationservice",{"_index":1990,"title":{"injectables/NotificationService.html":{}},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"coverage.html":{},"overview.html":{}}}],["notificationtargetgroup",{"_index":2030,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SendNotificationDto.html":{},"miscellaneous/enumerations.html":{}}}],["notificationtargetgroup.all",{"_index":2043,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationtargetgroup.celebrity",{"_index":2045,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationtargetgroup.influencers",{"_index":2047,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationtargetgroup.singleuser",{"_index":2037,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notified",{"_index":2056,"title":{},"body":{"injectables/NotificationService.html":{}}}],["now",{"_index":977,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/PaymentController.html":{}}}],["npm",{"_index":2993,"title":{},"body":{"index.html":{}}}],["npm_config_name.ts",{"_index":7,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"coverage.html":{}}}],["npm_config_name.ts:10",{"_index":27,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{}}}],["npm_config_name.ts:11",{"_index":56,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678779204584.html":{}}}],["npm_config_name.ts:12",{"_index":51,"title":{},"body":{"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{}}}],["npm_config_name.ts:13",{"_index":87,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1678780013678.html":{}}}],["npm_config_name.ts:14",{"_index":111,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{}}}],["npm_config_name.ts:15",{"_index":179,"title":{},"body":{"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1678779028547.html":{}}}],["npm_config_name.ts:17",{"_index":96,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{}}}],["npm_config_name.ts:18",{"_index":264,"title":{},"body":{"classes/$npmConfigName1678774445242.html":{}}}],["npm_config_name.ts:39",{"_index":231,"title":{},"body":{"classes/$npmConfigName1674493007150.html":{}}}],["npm_config_name.ts:4",{"_index":24,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{}}}],["npm_config_name.ts:6",{"_index":33,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{}}}],["npmconfigname1672082558971",{"_index":1,"title":{"classes/$npmConfigName1672082558971.html":{}},"body":{"classes/$npmConfigName1672082558971.html":{},"coverage.html":{}}}],["npmconfigname1672082713679",{"_index":49,"title":{"classes/$npmConfigName1672082713679.html":{}},"body":{"classes/$npmConfigName1672082713679.html":{},"coverage.html":{}}}],["npmconfigname1672133224744",{"_index":54,"title":{"classes/$npmConfigName1672133224744.html":{}},"body":{"classes/$npmConfigName1672133224744.html":{},"coverage.html":{}}}],["npmconfigname1672166137042",{"_index":83,"title":{"classes/$npmConfigName1672166137042.html":{}},"body":{"classes/$npmConfigName1672166137042.html":{},"coverage.html":{}}}],["npmconfigname1672251740346",{"_index":85,"title":{"classes/$npmConfigName1672251740346.html":{}},"body":{"classes/$npmConfigName1672251740346.html":{},"coverage.html":{}}}],["npmconfigname1672388811259",{"_index":94,"title":{"classes/$npmConfigName1672388811259.html":{}},"body":{"classes/$npmConfigName1672388811259.html":{},"coverage.html":{}}}],["npmconfigname1672399737695",{"_index":109,"title":{"classes/$npmConfigName1672399737695.html":{}},"body":{"classes/$npmConfigName1672399737695.html":{},"coverage.html":{}}}],["npmconfigname1672417201262",{"_index":117,"title":{"classes/$npmConfigName1672417201262.html":{}},"body":{"classes/$npmConfigName1672417201262.html":{},"coverage.html":{}}}],["npmconfigname1672417384470",{"_index":121,"title":{"classes/$npmConfigName1672417384470.html":{}},"body":{"classes/$npmConfigName1672417384470.html":{},"coverage.html":{}}}],["npmconfigname1672576067204",{"_index":123,"title":{"classes/$npmConfigName1672576067204.html":{}},"body":{"classes/$npmConfigName1672576067204.html":{},"coverage.html":{}}}],["npmconfigname1672585305519",{"_index":132,"title":{"classes/$npmConfigName1672585305519.html":{}},"body":{"classes/$npmConfigName1672585305519.html":{},"coverage.html":{}}}],["npmconfigname1672600378154",{"_index":136,"title":{"classes/$npmConfigName1672600378154.html":{}},"body":{"classes/$npmConfigName1672600378154.html":{},"coverage.html":{}}}],["npmconfigname1672678196724",{"_index":139,"title":{"classes/$npmConfigName1672678196724.html":{}},"body":{"classes/$npmConfigName1672678196724.html":{},"coverage.html":{}}}],["npmconfigname1672744437528",{"_index":142,"title":{"classes/$npmConfigName1672744437528.html":{}},"body":{"classes/$npmConfigName1672744437528.html":{},"coverage.html":{}}}],["npmconfigname1672760070076",{"_index":151,"title":{"classes/$npmConfigName1672760070076.html":{}},"body":{"classes/$npmConfigName1672760070076.html":{},"coverage.html":{}}}],["npmconfigname1672832148243",{"_index":156,"title":{"classes/$npmConfigName1672832148243.html":{}},"body":{"classes/$npmConfigName1672832148243.html":{},"coverage.html":{}}}],["npmconfigname1672833410692",{"_index":161,"title":{"classes/$npmConfigName1672833410692.html":{}},"body":{"classes/$npmConfigName1672833410692.html":{},"coverage.html":{}}}],["npmconfigname1673022319464",{"_index":164,"title":{"classes/$npmConfigName1673022319464.html":{}},"body":{"classes/$npmConfigName1673022319464.html":{},"coverage.html":{}}}],["npmconfigname1673025398979",{"_index":172,"title":{"classes/$npmConfigName1673025398979.html":{}},"body":{"classes/$npmConfigName1673025398979.html":{},"coverage.html":{}}}],["npmconfigname1673027114310",{"_index":174,"title":{"classes/$npmConfigName1673027114310.html":{}},"body":{"classes/$npmConfigName1673027114310.html":{},"coverage.html":{}}}],["npmconfigname1673177373733",{"_index":177,"title":{"classes/$npmConfigName1673177373733.html":{}},"body":{"classes/$npmConfigName1673177373733.html":{},"coverage.html":{}}}],["npmconfigname1673337064308",{"_index":180,"title":{"classes/$npmConfigName1673337064308.html":{}},"body":{"classes/$npmConfigName1673337064308.html":{},"coverage.html":{}}}],["npmconfigname1673770456243",{"_index":183,"title":{"classes/$npmConfigName1673770456243.html":{}},"body":{"classes/$npmConfigName1673770456243.html":{},"coverage.html":{}}}],["npmconfigname1673847605869",{"_index":191,"title":{"classes/$npmConfigName1673847605869.html":{}},"body":{"classes/$npmConfigName1673847605869.html":{},"coverage.html":{}}}],["npmconfigname1673974513613",{"_index":198,"title":{"classes/$npmConfigName1673974513613.html":{}},"body":{"classes/$npmConfigName1673974513613.html":{},"coverage.html":{}}}],["npmconfigname1674121256550",{"_index":210,"title":{"classes/$npmConfigName1674121256550.html":{}},"body":{"classes/$npmConfigName1674121256550.html":{},"coverage.html":{}}}],["npmconfigname1674198387677",{"_index":213,"title":{"classes/$npmConfigName1674198387677.html":{}},"body":{"classes/$npmConfigName1674198387677.html":{},"coverage.html":{}}}],["npmconfigname1674453163372",{"_index":216,"title":{"classes/$npmConfigName1674453163372.html":{}},"body":{"classes/$npmConfigName1674453163372.html":{},"coverage.html":{}}}],["npmconfigname1674486373359",{"_index":219,"title":{"classes/$npmConfigName1674486373359.html":{}},"body":{"classes/$npmConfigName1674486373359.html":{},"coverage.html":{}}}],["npmconfigname1674487677914",{"_index":225,"title":{"classes/$npmConfigName1674487677914.html":{}},"body":{"classes/$npmConfigName1674487677914.html":{},"coverage.html":{}}}],["npmconfigname1674493007150",{"_index":229,"title":{"classes/$npmConfigName1674493007150.html":{}},"body":{"classes/$npmConfigName1674493007150.html":{},"coverage.html":{}}}],["npmconfigname1674544597118",{"_index":232,"title":{"classes/$npmConfigName1674544597118.html":{}},"body":{"classes/$npmConfigName1674544597118.html":{},"coverage.html":{}}}],["npmconfigname1675177507147",{"_index":238,"title":{"classes/$npmConfigName1675177507147.html":{}},"body":{"classes/$npmConfigName1675177507147.html":{},"coverage.html":{}}}],["npmconfigname1676616826310",{"_index":243,"title":{"classes/$npmConfigName1676616826310.html":{}},"body":{"classes/$npmConfigName1676616826310.html":{},"coverage.html":{}}}],["npmconfigname1676624523857",{"_index":249,"title":{"classes/$npmConfigName1676624523857.html":{}},"body":{"classes/$npmConfigName1676624523857.html":{},"coverage.html":{}}}],["npmconfigname1676644288779",{"_index":253,"title":{"classes/$npmConfigName1676644288779.html":{}},"body":{"classes/$npmConfigName1676644288779.html":{},"coverage.html":{}}}],["npmconfigname1676990992500",{"_index":257,"title":{"classes/$npmConfigName1676990992500.html":{}},"body":{"classes/$npmConfigName1676990992500.html":{},"coverage.html":{}}}],["npmconfigname1676993098020",{"_index":260,"title":{"classes/$npmConfigName1676993098020.html":{}},"body":{"classes/$npmConfigName1676993098020.html":{},"coverage.html":{}}}],["npmconfigname1678774445242",{"_index":262,"title":{"classes/$npmConfigName1678774445242.html":{}},"body":{"classes/$npmConfigName1678774445242.html":{},"coverage.html":{}}}],["npmconfigname1678779028547",{"_index":282,"title":{"classes/$npmConfigName1678779028547.html":{}},"body":{"classes/$npmConfigName1678779028547.html":{},"coverage.html":{}}}],["npmconfigname1678779204584",{"_index":284,"title":{"classes/$npmConfigName1678779204584.html":{}},"body":{"classes/$npmConfigName1678779204584.html":{},"coverage.html":{}}}],["npmconfigname1678780013678",{"_index":287,"title":{"classes/$npmConfigName1678780013678.html":{}},"body":{"classes/$npmConfigName1678780013678.html":{},"coverage.html":{}}}],["npmconfigname1678780110507",{"_index":295,"title":{"classes/$npmConfigName1678780110507.html":{}},"body":{"classes/$npmConfigName1678780110507.html":{},"coverage.html":{}}}],["npmconfigname1678975542609",{"_index":297,"title":{"classes/$npmConfigName1678975542609.html":{}},"body":{"classes/$npmConfigName1678975542609.html":{},"coverage.html":{}}}],["null",{"_index":44,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678975542609.html":{},"injectables/AuthService.html":{}}}],["number",{"_index":717,"title":{},"body":{"injectables/AppealsService.html":{},"classes/CreateClueDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"entities/Memory.html":{},"injectables/MemoryService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"injectables/ReportService.html":{},"entities/User.html":{}}}],["numberofparticipants",{"_index":271,"title":{},"body":{"classes/$npmConfigName1678774445242.html":{},"classes/CreateEventDto.html":{},"entities/Event.html":{}}}],["nunito",{"_index":939,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["object",{"_index":321,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FeedController.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"classes/PageDto.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{},"miscellaneous/variables.html":{}}}],["once",{"_index":2672,"title":{},"body":{"injectables/TasksService.html":{}}}],["ondelete",{"_index":562,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["one",{"_index":582,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Like.html":{},"entities/Memory.html":{},"injectables/NotificationService.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/UserReport.html":{}}}],["onetomany",{"_index":1213,"title":{},"body":{"entities/Event.html":{},"entities/Post.html":{},"entities/Scrapbook.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":1185,"title":{},"body":{"entities/Event.html":{},"entities/Post.html":{},"entities/Scrapbook.html":{},"entities/User.html":{}}}],["onetoone",{"_index":1214,"title":{},"body":{"entities/Event.html":{},"entities/EventGoal.html":{}}}],["onetoone(undefined",{"_index":1192,"title":{},"body":{"entities/Event.html":{},"entities/EventGoal.html":{}}}],["operation",{"_index":1347,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{}}}],["optional",{"_index":29,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"guards/SubscriptionsGuard.html":{},"injectables/TasksService.html":{}}}],["options",{"_index":536,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"classes/PageOptionsDto.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["options.dto",{"_index":628,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"interfaces/PageMetaDtoParameters.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["options.dto.ts",{"_index":2108,"title":{},"body":{"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:15",{"_index":2114,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:23",{"_index":2116,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:32",{"_index":2118,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:37",{"_index":2120,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["order",{"_index":2109,"title":{},"body":{"classes/PageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["order.asc",{"_index":2112,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["orderby('appeal.createdat",{"_index":737,"title":{},"body":{"injectables/AppealsService.html":{}}}],["orderby('event.createdat",{"_index":1451,"title":{},"body":{"injectables/EventService.html":{}}}],["orderby('memory.createdat",{"_index":1952,"title":{},"body":{"injectables/MemoryService.html":{}}}],["orderby('post.createdat",{"_index":2571,"title":{},"body":{"injectables/ReportService.html":{}}}],["orderby('postreport.createdat",{"_index":2541,"title":{},"body":{"injectables/ReportService.html":{}}}],["orderby('user.createdat",{"_index":2578,"title":{},"body":{"injectables/ReportService.html":{}}}],["orderby('userreport.createdat",{"_index":2549,"title":{},"body":{"injectables/ReportService.html":{}}}],["otherwise",{"_index":1171,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["out",{"_index":374,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/EventModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/MemoryModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":3020,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":1346,"title":{},"body":{"injectables/EventService.html":{}}}],["p",{"_index":950,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["p.id",{"_index":1440,"title":{},"body":{"injectables/EventService.html":{}}}],["package",{"_index":2910,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["padding",{"_index":930,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["page",{"_index":609,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["pagecount",{"_index":2085,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pagedto",{"_index":686,"title":{"classes/PageDto.html":{}},"body":{"injectables/AppealsService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/MemoryService.html":{},"classes/PageDto.html":{},"injectables/ReportService.html":{},"coverage.html":{}}}],["pagedto(entities",{"_index":718,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/MemoryService.html":{},"injectables/ReportService.html":{}}}],["pagemetadto",{"_index":684,"title":{"classes/PageMetaDto.html":{}},"body":{"injectables/AppealsService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/MemoryService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/ReportService.html":{},"coverage.html":{}}}],["pagemetadtoparameters",{"_index":2088,"title":{"interfaces/PageMetaDtoParameters.html":{}},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{}}}],["pageoptionsdto",{"_index":604,"title":{"classes/PageOptionsDto.html":{}},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"coverage.html":{}}}],["pageoptionsdto.order",{"_index":738,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/MemoryService.html":{},"injectables/ReportService.html":{}}}],["pageoptionsdto.page",{"_index":1517,"title":{},"body":{"injectables/FeedService.html":{},"classes/PageMetaDto.html":{}}}],["pageoptionsdto.take",{"_index":1519,"title":{},"body":{"injectables/FeedService.html":{},"classes/PageMetaDto.html":{}}}],["paginated",{"_index":2076,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{}}}],["paginatedposts",{"_index":1515,"title":{},"body":{"injectables/FeedService.html":{}}}],["pagination",{"_index":2122,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["param",{"_index":328,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/LocalStrategy.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{}}}],["param('fcmtoken",{"_index":1995,"title":{},"body":{"controllers/NotificationController.html":{}}}],["param('id",{"_index":352,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FollowController.html":{}}}],["param('postid",{"_index":642,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/ReportController.html":{}}}],["param('reportid",{"_index":2450,"title":{},"body":{"controllers/ReportController.html":{}}}],["param('requestid",{"_index":1672,"title":{},"body":{"controllers/FollowController.html":{}}}],["param('userid",{"_index":2449,"title":{},"body":{"controllers/ReportController.html":{}}}],["parameters",{"_index":28,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"guards/SubscriptionsGuard.html":{},"injectables/TasksService.html":{}}}],["parameters.dto",{"_index":2096,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["parameters.dto.ts",{"_index":2106,"title":{},"body":{"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{}}}],["params",{"_index":2409,"title":{},"body":{"controllers/ReportController.html":{}}}],["part",{"_index":2340,"title":{},"body":{"entities/Post.html":{}}}],["participants",{"_index":1184,"title":{},"body":{"entities/Event.html":{},"injectables/EventService.html":{}}}],["pass",{"_index":893,"title":{},"body":{"injectables/AuthService.html":{}}}],["passed",{"_index":2123,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["passport",{"_index":1808,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":859,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1809,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1810,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":530,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/EncryptionService.html":{},"injectables/LocalStrategy.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserPasswordDto.html":{},"entities/User.html":{},"index.html":{}}}],["passwords",{"_index":818,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EncryptionService.html":{}}}],["passwordsmatch",{"_index":909,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":625,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/FollowController.html":{}}}],["patch('accept",{"_index":639,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/FollowController.html":{}}}],["patch('reject",{"_index":644,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/FollowController.html":{}}}],["payload",{"_index":913,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{}}}],["payload.email",{"_index":1827,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.role",{"_index":1828,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":1826,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.subscriptionplan",{"_index":1829,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payment",{"_index":2132,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["payment.controller",{"_index":2187,"title":{},"body":{"modules/PaymentModule.html":{}}}],["payment.service",{"_index":2163,"title":{},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{}}}],["payment_method_types",{"_index":2241,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentcancel",{"_index":2134,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["paymentcancel(req",{"_index":2144,"title":{},"body":{"controllers/PaymentController.html":{}}}],["paymentcancel(sessionid",{"_index":2177,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["paymentcontroller",{"_index":2130,"title":{"controllers/PaymentController.html":{}},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"coverage.html":{}}}],["paymentfailedevent",{"_index":2285,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentfailedevent.customer",{"_index":2287,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentmodule",{"_index":459,"title":{"modules/PaymentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"modules.html":{},"overview.html":{}}}],["paymentservice",{"_index":2162,"title":{"injectables/PaymentService.html":{}},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"coverage.html":{},"overview.html":{}}}],["paymentsuccess",{"_index":2135,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["paymentsuccess(req",{"_index":2151,"title":{},"body":{"controllers/PaymentController.html":{}}}],["paymentsuccess(sessionid",{"_index":2173,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["paymentsuccessedevent",{"_index":2272,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentsuccessedevent.customer",{"_index":2276,"title":{},"body":{"injectables/PaymentService.html":{}}}],["pending",{"_index":113,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673974513613.html":{},"injectables/ReportService.html":{},"miscellaneous/enumerations.html":{}}}],["pendingreview",{"_index":2971,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["per",{"_index":2128,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["phone",{"_index":2234,"title":{},"body":{"injectables/PaymentService.html":{}}}],["phonenumber",{"_index":2628,"title":{},"body":{"classes/SignUpUserDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{}}}],["picture",{"_index":2688,"title":{},"body":{"injectables/TasksService.html":{}}}],["plan",{"_index":2158,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["plan.enum",{"_index":338,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/PaymentService.html":{},"guards/SubscriptionsGuard.html":{},"entities/User.html":{}}}],["plan.enum.ts",{"_index":2952,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["plans",{"_index":3048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["point",{"_index":256,"title":{},"body":{"classes/$npmConfigName1676644288779.html":{}}}],["port",{"_index":548,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["post",{"_index":58,"title":{"entities/Post.html":{}},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"entities/Appeal.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"entities/Comment.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"controllers/EventController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"entities/Like.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"entities/Scrapbook.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"coverage.html":{}}}],["post's",{"_index":672,"title":{},"body":{"injectables/AppealsService.html":{}}}],["post('admin/signup",{"_index":838,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('appeal",{"_index":633,"title":{},"body":{"controllers/AppealsController.html":{}}}],["post('ban",{"_index":2447,"title":{},"body":{"controllers/ReportController.html":{}}}],["post('block",{"_index":1026,"title":{},"body":{"controllers/BlockController.html":{}}}],["post('captcha",{"_index":757,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('create",{"_index":1283,"title":{},"body":{"controllers/EventController.html":{},"controllers/MemoryController.html":{}}}],["post('invoicing",{"_index":2140,"title":{},"body":{"controllers/PaymentController.html":{}}}],["post('join",{"_index":1289,"title":{},"body":{"controllers/EventController.html":{}}}],["post('login",{"_index":842,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('proximity",{"_index":1292,"title":{},"body":{"controllers/EventController.html":{},"controllers/MemoryController.html":{}}}],["post('report",{"_index":2436,"title":{},"body":{"controllers/ReportController.html":{}}}],["post('request",{"_index":1665,"title":{},"body":{"controllers/FollowController.html":{}}}],["post('send",{"_index":1999,"title":{},"body":{"controllers/NotificationController.html":{}}}],["post('signup",{"_index":813,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup')@useinterceptors(undefined",{"_index":791,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup/:fcmtoken",{"_index":1993,"title":{},"body":{"controllers/NotificationController.html":{}}}],["post('subscribe",{"_index":2165,"title":{},"body":{"controllers/PaymentController.html":{}}}],["post('unban",{"_index":2454,"title":{},"body":{"controllers/ReportController.html":{}}}],["post('unblock",{"_index":1032,"title":{},"body":{"controllers/BlockController.html":{}}}],["post('unsubscribe",{"_index":2169,"title":{},"body":{"controllers/PaymentController.html":{}}}],["post.appeals",{"_index":564,"title":{},"body":{"entities/Appeal.html":{},"injectables/AppealsService.html":{}}}],["post.appeals.length",{"_index":423,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{}}}],["post.appeals.some((appeal",{"_index":693,"title":{},"body":{"injectables/AppealsService.html":{}}}],["post.comments",{"_index":1080,"title":{},"body":{"entities/Comment.html":{}}}],["post.comments.length",{"_index":419,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["post.controller",{"_index":2367,"title":{},"body":{"modules/PostModule.html":{}}}],["post.entity",{"_index":1083,"title":{},"body":{"entities/Comment.html":{},"entities/Like.html":{},"entities/Scrapbook.html":{}}}],["post.id",{"_index":2518,"title":{},"body":{"injectables/ReportService.html":{}}}],["post.istakendown",{"_index":429,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{}}}],["post.likes",{"_index":1837,"title":{},"body":{"entities/Like.html":{}}}],["post.postedby",{"_index":711,"title":{},"body":{"injectables/AppealsService.html":{},"entities/User.html":{}}}],["post.postedby.id",{"_index":443,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["post.reportsagainst",{"_index":703,"title":{},"body":{"injectables/AppealsService.html":{},"entities/PostReport.html":{}}}],["post.reportsagainst.length",{"_index":421,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["post.reportsagainst.some((report",{"_index":698,"title":{},"body":{"injectables/AppealsService.html":{}}}],["post.scrapbook",{"_index":425,"title":{},"body":{"injectables/AnalyticsService.html":{},"entities/Scrapbook.html":{}}}],["post.scrapbook.id",{"_index":440,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["post.service",{"_index":2368,"title":{},"body":{"modules/PostModule.html":{}}}],["post/:id",{"_index":2455,"title":{},"body":{"controllers/ReportController.html":{}}}],["post/:id')@roles(role.admin",{"_index":2428,"title":{},"body":{"controllers/ReportController.html":{}}}],["post/:postid/:reportid",{"_index":2452,"title":{},"body":{"controllers/ReportController.html":{}}}],["post/:postid/:reportid')@roles(role.admin",{"_index":2402,"title":{},"body":{"controllers/ReportController.html":{}}}],["post/entities/comment.entity",{"_index":2797,"title":{},"body":{"entities/User.html":{}}}],["post/entities/post",{"_index":2800,"title":{},"body":{"entities/User.html":{}}}],["post/entities/post.entity",{"_index":379,"title":{},"body":{"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"entities/Appeal.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"entities/PostReport.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["post/entities/scrapbook.entity",{"_index":2796,"title":{},"body":{"entities/User.html":{}}}],["post\\`(\\`id",{"_index":116,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1674486373359.html":{}}}],["post_report",{"_index":97,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["post_report\\`(\\`id",{"_index":105,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{}}}],["postalreadyreported",{"_index":2515,"title":{},"body":{"injectables/ReportService.html":{}}}],["postalreadyreported.includes(true",{"_index":2519,"title":{},"body":{"injectables/ReportService.html":{}}}],["postanalyticresposnedto",{"_index":400,"title":{"classes/PostAnalyticResposneDto.html":{}},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{},"coverage.html":{}}}],["postcontroller",{"_index":2366,"title":{},"body":{"modules/PostModule.html":{},"coverage.html":{}}}],["posted",{"_index":2339,"title":{},"body":{"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/UserReport.html":{}}}],["postedby",{"_index":410,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"entities/Post.html":{},"injectables/ReportService.html":{}}}],["postedbyid",{"_index":71,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["postid",{"_index":169,"title":{},"body":{"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["postmodule",{"_index":460,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postreport",{"_index":479,"title":{"entities/PostReport.html":{}},"body":{"modules/AppModule.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"entities/User.html":{},"coverage.html":{}}}],["postreport.reportedby",{"_index":2783,"title":{},"body":{"entities/User.html":{}}}],["postreport.reportedpost",{"_index":2328,"title":{},"body":{"entities/Post.html":{}}}],["postreportsandcount[0",{"_index":2543,"title":{},"body":{"injectables/ReportService.html":{}}}],["postreportsandcount[1",{"_index":2544,"title":{},"body":{"injectables/ReportService.html":{}}}],["postreportsrepository",{"_index":667,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["postrepository",{"_index":392,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["posts",{"_index":697,"title":{},"body":{"injectables/AppealsService.html":{},"classes/CreateScrapBookDto.html":{},"injectables/FeedService.html":{},"entities/Post.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"entities/Scrapbook.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["posts')@roles(role.admin",{"_index":2414,"title":{},"body":{"controllers/ReportController.html":{}}}],["posts.length",{"_index":1520,"title":{},"body":{"injectables/FeedService.html":{}}}],["posts.slice",{"_index":1516,"title":{},"body":{"injectables/FeedService.html":{}}}],["postsandcount[0",{"_index":2573,"title":{},"body":{"injectables/ReportService.html":{}}}],["postsandcount[0].length",{"_index":2574,"title":{},"body":{"injectables/ReportService.html":{}}}],["postservice",{"_index":2364,"title":{},"body":{"modules/PostModule.html":{},"coverage.html":{},"overview.html":{}}}],["power",{"_index":2671,"title":{},"body":{"injectables/TasksService.html":{}}}],["precision",{"_index":1198,"title":{},"body":{"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"entities/Memory.html":{}}}],["preference.enum",{"_index":2034,"title":{},"body":{"injectables/NotificationService.html":{},"entities/User.html":{}}}],["preference.enum.ts",{"_index":2945,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":303,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{}}}],["premium",{"_index":326,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"miscellaneous/enumerations.html":{}}}],["prerequisites",{"_index":2984,"title":{},"body":{"index.html":{}}}],["previous",{"_index":1558,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["previousimageid",{"_index":1555,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["price",{"_index":2246,"title":{},"body":{"injectables/PaymentService.html":{}}}],["price_1mthm0b4qqtc27uczovemolz",{"_index":2247,"title":{},"body":{"injectables/PaymentService.html":{}}}],["primary",{"_index":72,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{}}}],["primarygeneratedcolumn",{"_index":576,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":566,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["private",{"_index":405,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/MemoryService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["process.env.recaptcha_secret_key",{"_index":982,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.recaptcha_site_key",{"_index":921,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env?.secret",{"_index":3042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env?.stripe_webhook_secret",{"_index":2207,"title":{},"body":{"injectables/PaymentService.html":{}}}],["processing",{"_index":2670,"title":{},"body":{"injectables/TasksService.html":{}}}],["professional",{"_index":2975,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["profile",{"_index":2693,"title":{},"body":{"injectables/TasksService.html":{}}}],["profilepictureexpirydate",{"_index":153,"title":{},"body":{"classes/$npmConfigName1672760070076.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["profilepictureid",{"_index":2699,"title":{},"body":{"injectables/TasksService.html":{},"entities/User.html":{}}}],["profilepictureurl",{"_index":144,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"controllers/AuthController.html":{},"entities/User.html":{}}}],["project",{"_index":2990,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":31,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/LocalStrategy.html":{},"injectables/MemoryService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{}}}],["properties",{"_index":11,"title":{"properties.html":{}},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"entities/Comment.html":{},"classes/CreateClueDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"entities/Like.html":{},"entities/Memory.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"entities/PostReport.html":{},"classes/ReCaptchaResponseDto.html":{},"classes/ReportDto.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"properties.html":{}}}],["property",{"_index":2623,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["protect",{"_index":769,"title":{},"body":{"controllers/AuthController.html":{}}}],["providers",{"_index":376,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/EventModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/MemoryModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["proximity",{"_index":1278,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"coverage.html":{}}}],["public",{"_index":14,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"injectables/FeedService.html":{},"miscellaneous/enumerations.html":{}}}],["publicposts",{"_index":1504,"title":{},"body":{"injectables/FeedService.html":{}}}],["quantity",{"_index":2248,"title":{},"body":{"injectables/PaymentService.html":{}}}],["queries",{"_index":2727,"title":{},"body":{"entities/User.html":{},"entities/UserReport.html":{}}}],["query",{"_index":626,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/EventController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/MemoryController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{}}}],["query('session_id",{"_index":2172,"title":{},"body":{"controllers/PaymentController.html":{}}}],["queryresults",{"_index":1449,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{},"injectables/ReportService.html":{}}}],["queryresults.items",{"_index":1457,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{},"injectables/ReportService.html":{}}}],["queryresults.itemscount",{"_index":1456,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{},"injectables/ReportService.html":{}}}],["queryrunner",{"_index":26,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{}}}],["queryrunner.query(`alter",{"_index":38,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678975542609.html":{}}}],["queryrunner.query(`create",{"_index":57,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{}}}],["queryrunner.query(`drop",{"_index":82,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{}}}],["quesries",{"_index":2311,"title":{},"body":{"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/UserBan.html":{}}}],["radius",{"_index":964,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/MemoryService.html":{},"controllers/PaymentController.html":{}}}],["rawbodyrequest",{"_index":2139,"title":{},"body":{"controllers/PaymentController.html":{}}}],["read",{"_index":1589,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["readonly",{"_index":904,"title":{},"body":{"injectables/AuthService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["reason",{"_index":99,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"entities/PostReport.html":{},"classes/ReportDto.html":{},"entities/UserReport.html":{}}}],["reason.enum",{"_index":580,"title":{},"body":{"entities/Appeal.html":{},"entities/PostReport.html":{},"classes/ReportDto.html":{},"entities/UserReport.html":{}}}],["reason.enum.ts",{"_index":2949,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["recaptcha",{"_index":922,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["recaptcharesponsedto",{"_index":902,"title":{"classes/ReCaptchaResponseDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/ReCaptchaResponseDto.html":{},"coverage.html":{}}}],["receive",{"_index":1985,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"entities/User.html":{}}}],["received",{"_index":1644,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["redirects",{"_index":2148,"title":{},"body":{"controllers/PaymentController.html":{}}}],["references",{"_index":78,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{}}}],["reflect",{"_index":2930,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2586,"title":{},"body":{"guards/RolesGuard.html":{},"guards/SubscriptionsGuard.html":{}}}],["reject",{"_index":620,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/FollowService.html":{}}}],["rejected",{"_index":1676,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{},"miscellaneous/enumerations.html":{}}}],["rejectfollow",{"_index":1626,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["rejectfollow(@request",{"_index":1674,"title":{},"body":{"controllers/FollowController.html":{}}}],["rejectfollow(id",{"_index":1723,"title":{},"body":{"injectables/FollowService.html":{}}}],["rejectfollow(req",{"_index":1649,"title":{},"body":{"controllers/FollowController.html":{}}}],["rejectfollow(requestid",{"_index":1675,"title":{},"body":{"controllers/FollowController.html":{}}}],["rejectpostappeal",{"_index":596,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["rejectpostappeal(@request",{"_index":645,"title":{},"body":{"controllers/AppealsController.html":{}}}],["rejectpostappeal(postid",{"_index":646,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["rejectpostappeal(req",{"_index":617,"title":{},"body":{"controllers/AppealsController.html":{}}}],["rejects",{"_index":683,"title":{},"body":{"injectables/AppealsService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["rel_9b9ae2fda8caa069f3564df40e",{"_index":292,"title":{},"body":{"classes/$npmConfigName1678780013678.html":{}}}],["relations",{"_index":409,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/BlockService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/ReportService.html":{}}}],["removed",{"_index":1542,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["removeexpiredbans",{"_index":2676,"title":{},"body":{"injectables/TasksService.html":{}}}],["removes",{"_index":1539,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/TasksService.html":{}}}],["report",{"_index":675,"title":{},"body":{"injectables/AppealsService.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"entities/User.html":{},"entities/UserReport.html":{}}}],["report.controller",{"_index":2473,"title":{},"body":{"modules/ReportModule.html":{}}}],["report.entity",{"_index":481,"title":{},"body":{"modules/AppModule.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"entities/User.html":{}}}],["report.entity.ts",{"_index":2373,"title":{},"body":{"entities/PostReport.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["report.entity.ts:15",{"_index":2836,"title":{},"body":{"entities/UserReport.html":{}}}],["report.entity.ts:16",{"_index":2376,"title":{},"body":{"entities/PostReport.html":{}}}],["report.entity.ts:18",{"_index":2842,"title":{},"body":{"entities/UserReport.html":{}}}],["report.entity.ts:19",{"_index":2381,"title":{},"body":{"entities/PostReport.html":{}}}],["report.entity.ts:21",{"_index":2837,"title":{},"body":{"entities/UserReport.html":{}}}],["report.entity.ts:22",{"_index":2377,"title":{},"body":{"entities/PostReport.html":{}}}],["report.entity.ts:27",{"_index":2841,"title":{},"body":{"entities/UserReport.html":{}}}],["report.entity.ts:28",{"_index":2380,"title":{},"body":{"entities/PostReport.html":{}}}],["report.entity.ts:33",{"_index":2839,"title":{},"body":{"entities/UserReport.html":{}}}],["report.entity.ts:34",{"_index":2379,"title":{},"body":{"entities/PostReport.html":{}}}],["report.service",{"_index":2434,"title":{},"body":{"controllers/ReportController.html":{},"modules/ReportModule.html":{}}}],["report.status",{"_index":699,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["report/entities/post",{"_index":662,"title":{},"body":{"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["report/entities/user",{"_index":2663,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["reportcontroller",{"_index":2389,"title":{"controllers/ReportController.html":{}},"body":{"controllers/ReportController.html":{},"modules/ReportModule.html":{},"coverage.html":{}}}],["reportcount",{"_index":420,"title":{},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["reportdto",{"_index":2421,"title":{"classes/ReportDto.html":{}},"body":{"controllers/ReportController.html":{},"classes/ReportDto.html":{},"coverage.html":{}}}],["reported",{"_index":701,"title":{},"body":{"injectables/AppealsService.html":{},"entities/Post.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"entities/User.html":{}}}],["reportedby",{"_index":2374,"title":{},"body":{"entities/PostReport.html":{},"injectables/ReportService.html":{},"entities/UserReport.html":{}}}],["reportedbyid",{"_index":100,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["reportedpost",{"_index":2375,"title":{},"body":{"entities/PostReport.html":{},"injectables/ReportService.html":{}}}],["reportedpost.id",{"_index":2517,"title":{},"body":{"injectables/ReportService.html":{}}}],["reportedpostid",{"_index":112,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1673027114310.html":{}}}],["reportedposts",{"_index":2508,"title":{},"body":{"injectables/ReportService.html":{},"entities/User.html":{}}}],["reportedposts.reportedpost",{"_index":2509,"title":{},"body":{"injectables/ReportService.html":{}}}],["reportedposts.reportedpost.postedby",{"_index":2510,"title":{},"body":{"injectables/ReportService.html":{}}}],["reporteduser",{"_index":2835,"title":{},"body":{"entities/UserReport.html":{}}}],["reporteduser.id",{"_index":2533,"title":{},"body":{"injectables/ReportService.html":{}}}],["reporteduserid",{"_index":119,"title":{},"body":{"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["reportedusers",{"_index":2527,"title":{},"body":{"injectables/ReportService.html":{},"entities/User.html":{}}}],["reportedusers.reporteduser",{"_index":2528,"title":{},"body":{"injectables/ReportService.html":{}}}],["reportid",{"_index":2400,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["reporting",{"_index":2491,"title":{},"body":{"injectables/ReportService.html":{}}}],["reportmodule",{"_index":461,"title":{"modules/ReportModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ReportModule.html":{},"modules.html":{},"overview.html":{}}}],["reportpost",{"_index":597,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["reportpost(@body",{"_index":634,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/ReportController.html":{}}}],["reportpost(body",{"_index":621,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/ReportController.html":{}}}],["reportpost(req.user",{"_index":2438,"title":{},"body":{"controllers/ReportController.html":{}}}],["reportpost(user",{"_index":2489,"title":{},"body":{"injectables/ReportService.html":{}}}],["reportreason",{"_index":186,"title":{},"body":{"classes/$npmConfigName1673770456243.html":{},"entities/Appeal.html":{},"injectables/AppealsService.html":{},"entities/PostReport.html":{},"classes/ReportDto.html":{},"entities/UserReport.html":{},"miscellaneous/enumerations.html":{}}}],["reports",{"_index":2382,"title":{},"body":{"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"injectables/ReportService.html":{},"entities/UserReport.html":{}}}],["reports.reportedpost",{"_index":2514,"title":{},"body":{"injectables/ReportService.html":{}}}],["reports.reporteduser",{"_index":2530,"title":{},"body":{"injectables/ReportService.html":{}}}],["reports.status",{"_index":2513,"title":{},"body":{"injectables/ReportService.html":{}}}],["reports/:id",{"_index":2410,"title":{},"body":{"controllers/ReportController.html":{}}}],["reportsagainst",{"_index":411,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["reportsagainstid",{"_index":102,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{}}}],["reportservice",{"_index":2433,"title":{"injectables/ReportService.html":{}},"body":{"controllers/ReportController.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"coverage.html":{},"overview.html":{}}}],["reportstatus",{"_index":577,"title":{},"body":{"entities/Appeal.html":{},"injectables/AppealsService.html":{},"entities/PostReport.html":{},"injectables/ReportService.html":{},"entities/UserReport.html":{},"miscellaneous/enumerations.html":{}}}],["reportstatus.accepted",{"_index":700,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["reportstatus.pendingreview",{"_index":569,"title":{},"body":{"entities/Appeal.html":{},"injectables/AppealsService.html":{},"entities/PostReport.html":{},"injectables/ReportService.html":{},"entities/UserReport.html":{}}}],["reportstatus.rejected",{"_index":729,"title":{},"body":{"injectables/AppealsService.html":{}}}],["reportuser",{"_index":2397,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["reportuser(@body",{"_index":2441,"title":{},"body":{"controllers/ReportController.html":{}}}],["reportuser(body",{"_index":2424,"title":{},"body":{"controllers/ReportController.html":{}}}],["reportuser(req.user",{"_index":2442,"title":{},"body":{"controllers/ReportController.html":{}}}],["reportuser(user",{"_index":2492,"title":{},"body":{"injectables/ReportService.html":{}}}],["repos",{"_index":3009,"title":{},"body":{"index.html":{}}}],["repository",{"_index":389,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/MemoryService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["represents",{"_index":2081,"title":{},"body":{"classes/PageMetaDto.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["req",{"_index":319,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{}}}],["req.rawbody",{"_index":2181,"title":{},"body":{"controllers/PaymentController.html":{}}}],["req.user",{"_index":649,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/BlockController.html":{},"controllers/FollowController.html":{}}}],["request",{"_index":320,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"classes/SignUpUserDto.html":{}}}],["request.entity",{"_index":494,"title":{},"body":{"modules/AppModule.html":{},"modules/FollowModule.html":{},"injectables/FollowService.html":{},"entities/User.html":{}}}],["request.entity.ts",{"_index":1695,"title":{},"body":{"entities/FollowRequest.html":{},"coverage.html":{}}}],["request.entity.ts:12",{"_index":1705,"title":{},"body":{"entities/FollowRequest.html":{}}}],["request.entity.ts:18",{"_index":1700,"title":{},"body":{"entities/FollowRequest.html":{}}}],["request.entity.ts:24",{"_index":1702,"title":{},"body":{"entities/FollowRequest.html":{}}}],["request.entity.ts:9",{"_index":1698,"title":{},"body":{"entities/FollowRequest.html":{}}}],["requestedby",{"_index":1696,"title":{},"body":{"entities/FollowRequest.html":{},"injectables/FollowService.html":{}}}],["requestedbyid",{"_index":204,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["requesteduser",{"_index":1697,"title":{},"body":{"entities/FollowRequest.html":{},"injectables/FollowService.html":{}}}],["requesteduserid",{"_index":205,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["requestfollow",{"_index":1627,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["requestfollow(@request",{"_index":1666,"title":{},"body":{"controllers/FollowController.html":{}}}],["requestfollow(id",{"_index":1668,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["requestfollow(req",{"_index":1652,"title":{},"body":{"controllers/FollowController.html":{}}}],["requestid",{"_index":1630,"title":{},"body":{"controllers/FollowController.html":{}}}],["requesting",{"_index":1362,"title":{},"body":{"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{}}}],["requests",{"_index":1643,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{},"entities/User.html":{}}}],["required",{"_index":1891,"title":{},"body":{"controllers/MemoryController.html":{},"injectables/NotificationService.html":{}}}],["requiredroles",{"_index":2594,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":2599,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredsubscriptions",{"_index":2654,"title":{},"body":{"guards/SubscriptionsGuard.html":{}}}],["requiredsubscriptions.some((subscriptionplan",{"_index":2656,"title":{},"body":{"guards/SubscriptionsGuard.html":{}}}],["requiring",{"_index":2668,"title":{},"body":{"injectables/TasksService.html":{}}}],["res",{"_index":308,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{}}}],["res.send",{"_index":2174,"title":{},"body":{"controllers/PaymentController.html":{}}}],["res.status(err.status).json",{"_index":359,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{}}}],["res.status(httpstatus.bad_request).json",{"_index":817,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MemoryController.html":{}}}],["res.status(httpstatus.created).json",{"_index":830,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(httpstatus.ok).json",{"_index":1036,"title":{},"body":{"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{}}}],["res.status(httpstatus.ok).json(analytics",{"_index":357,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["res.status(httpstatus.ok).json(appeal",{"_index":638,"title":{},"body":{"controllers/AppealsController.html":{}}}],["res.status(httpstatus.ok).json(appeals",{"_index":656,"title":{},"body":{"controllers/AppealsController.html":{}}}],["res.status(httpstatus.ok).json(block",{"_index":1031,"title":{},"body":{"controllers/BlockController.html":{}}}],["res.status(httpstatus.ok).json(clues",{"_index":1300,"title":{},"body":{"controllers/EventController.html":{}}}],["res.status(httpstatus.ok).json(event",{"_index":1288,"title":{},"body":{"controllers/EventController.html":{}}}],["res.status(httpstatus.ok).json(events",{"_index":1296,"title":{},"body":{"controllers/EventController.html":{}}}],["res.status(httpstatus.ok).json(memories",{"_index":1900,"title":{},"body":{"controllers/MemoryController.html":{}}}],["res.status(httpstatus.ok).json(memory",{"_index":1895,"title":{},"body":{"controllers/MemoryController.html":{}}}],["res.status(httpstatus.ok).json(posts",{"_index":1486,"title":{},"body":{"controllers/FeedController.html":{},"controllers/ReportController.html":{}}}],["res.status(httpstatus.ok).json(report",{"_index":2440,"title":{},"body":{"controllers/ReportController.html":{}}}],["res.status(httpstatus.ok).json(reports",{"_index":2445,"title":{},"body":{"controllers/ReportController.html":{}}}],["res.status(httpstatus.ok).json(result",{"_index":1670,"title":{},"body":{"controllers/FollowController.html":{}}}],["res.status(httpstatus.ok).send(captcha",{"_index":834,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":373,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/EventModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/MemoryModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":309,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["response.appealcount",{"_index":436,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.commentcount",{"_index":431,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.createdat",{"_index":437,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.data",{"_index":991,"title":{},"body":{"injectables/AuthService.html":{}}}],["response.dto",{"_index":403,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AuthService.html":{}}}],["response.dto.ts",{"_index":2342,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{},"classes/ReCaptchaResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:12",{"_index":2353,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:17",{"_index":2349,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:2",{"_index":2388,"title":{},"body":{"classes/ReCaptchaResponseDto.html":{}}}],["response.dto.ts:21",{"_index":2352,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:26",{"_index":2354,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:31",{"_index":2345,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:35",{"_index":2348,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:39",{"_index":2351,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:4",{"_index":2386,"title":{},"body":{"classes/ReCaptchaResponseDto.html":{}}}],["response.dto.ts:43",{"_index":2356,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:6",{"_index":2387,"title":{},"body":{"classes/ReCaptchaResponseDto.html":{}}}],["response.dto.ts:7",{"_index":2346,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.interactioncount",{"_index":433,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.ispartofscrapbook",{"_index":438,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.istakendown",{"_index":434,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.likecount",{"_index":432,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.reportcount",{"_index":435,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.scrapbookid",{"_index":439,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.success",{"_index":927,"title":{},"body":{"injectables/AuthService.html":{}}}],["result",{"_index":912,"title":{},"body":{"injectables/AuthService.html":{},"injectables/NotificationService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["results",{"_index":47,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateClueDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"controllers/EventController.html":{},"entities/EventGoal.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Memory.html":{},"controllers/MemoryController.html":{},"modules/MemoryModule.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"classes/ReCaptchaResponseDto.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"guards/SubscriptionsGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":356,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"guards/SubscriptionsGuard.html":{}}}],["returns",{"_index":30,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"guards/SubscriptionsGuard.html":{},"injectables/TasksService.html":{}}}],["review",{"_index":114,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1673770456243.html":{},"miscellaneous/enumerations.html":{}}}],["rimraf",{"_index":2932,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":53,"title":{},"body":{"classes/$npmConfigName1672082713679.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/ReportController.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":442,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["role.celebrity",{"_index":2051,"title":{},"body":{"injectables/NotificationService.html":{}}}],["role.influencer",{"_index":2064,"title":{},"body":{"injectables/NotificationService.html":{}}}],["roles",{"_index":42,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/NotificationController.html":{},"controllers/ReportController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":350,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/NotificationController.html":{},"controllers/ReportController.html":{}}}],["roles_key",{"_index":2593,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":343,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/NotificationController.html":{},"controllers/ReportController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesguard)@get('active",{"_index":1249,"title":{},"body":{"controllers/EventController.html":{}}}],["rolesguard)@get('admin/post/:id')@roles(role.admin",{"_index":312,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["rolesguard)@get('post",{"_index":605,"title":{},"body":{"controllers/AppealsController.html":{}}}],["rolesguard)@get('reported",{"_index":2413,"title":{},"body":{"controllers/ReportController.html":{}}}],["rolesguard)@patch('accept",{"_index":599,"title":{},"body":{"controllers/AppealsController.html":{}}}],["rolesguard)@patch('reject",{"_index":618,"title":{},"body":{"controllers/AppealsController.html":{}}}],["rolesguard)@post('admin/signup')@roles(role.admin",{"_index":781,"title":{},"body":{"controllers/AuthController.html":{}}}],["rolesguard)@post('ban",{"_index":2401,"title":{},"body":{"controllers/ReportController.html":{}}}],["rolesguard)@post('send')@roles(role.admin",{"_index":1980,"title":{},"body":{"controllers/NotificationController.html":{}}}],["rolesguard)@post('unban",{"_index":2427,"title":{},"body":{"controllers/ReportController.html":{}}}],["route",{"_index":765,"title":{},"body":{"controllers/AuthController.html":{}}}],["run",{"_index":543,"title":{},"body":{"modules/AppModule.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["running",{"_index":2983,"title":{},"body":{"index.html":{}}}],["runs",{"_index":2683,"title":{},"body":{"injectables/TasksService.html":{}}}],["rxjs",{"_index":2934,"title":{},"body":{"dependencies.html":{}}}],["salt_factor",{"_index":1178,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["sans",{"_index":940,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["saved",{"_index":1998,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["savedmemory",{"_index":1939,"title":{},"body":{"injectables/MemoryService.html":{}}}],["savedmemory.id",{"_index":1943,"title":{},"body":{"injectables/MemoryService.html":{}}}],["scale",{"_index":1200,"title":{},"body":{"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"entities/Memory.html":{}}}],["schedulemodule",{"_index":502,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":514,"title":{},"body":{"modules/AppModule.html":{}}}],["scrapbook",{"_index":88,"title":{"entities/Scrapbook.html":{}},"body":{"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1674493007150.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"classes/CreateScrapBookDto.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"coverage.html":{}}}],["scrapbook.entity",{"_index":2336,"title":{},"body":{"entities/Post.html":{}}}],["scrapbook.posts",{"_index":2330,"title":{},"body":{"entities/Post.html":{}}}],["scrapbook.user",{"_index":2790,"title":{},"body":{"entities/User.html":{}}}],["scrapbook\\`(\\`id",{"_index":93,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{}}}],["scrapbookid",{"_index":90,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["scrapbooks",{"_index":2733,"title":{},"body":{"entities/User.html":{}}}],["secret",{"_index":1820,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":981,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":1822,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":2302,"title":{},"body":{"injectables/PaymentService.html":{}}}],["select",{"_index":2801,"title":{},"body":{"entities/User.html":{}}}],["select(['id",{"_index":906,"title":{},"body":{"injectables/AuthService.html":{}}}],["selectedgroup",{"_index":2961,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["send",{"_index":786,"title":{},"body":{"controllers/AuthController.html":{},"controllers/NotificationController.html":{},"classes/SignUpUserDto.html":{},"entities/User.html":{}}}],["sending",{"_index":1881,"title":{},"body":{"controllers/MemoryController.html":{},"injectables/MemoryService.html":{}}}],["sendnotification",{"_index":2008,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotification(body",{"_index":2001,"title":{},"body":{"controllers/NotificationController.html":{}}}],["sendnotification(sendnotificationdto",{"_index":2013,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationdto",{"_index":1979,"title":{"classes/SendNotificationDto.html":{}},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/SendNotificationDto.html":{},"coverage.html":{}}}],["sendnotificationdto.body",{"_index":2042,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationdto.targetgroup",{"_index":2036,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationdto.targetuserid",{"_index":2038,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationdto.title",{"_index":2041,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationtoall",{"_index":1976,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["sendnotificationtoall(@request",{"_index":2000,"title":{},"body":{"controllers/NotificationController.html":{}}}],["sendnotificationtoall(req",{"_index":1978,"title":{},"body":{"controllers/NotificationController.html":{}}}],["sendnotificationtoall(title",{"_index":2015,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationtocelebrities",{"_index":2009,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationtocelebrities(title",{"_index":2018,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationtoinfluencers",{"_index":2010,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationtoinfluencers(title",{"_index":2021,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationtoone",{"_index":2011,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/PaymentService.html":{}}}],["sendnotificationtoone('payment",{"_index":2280,"title":{},"body":{"injectables/PaymentService.html":{}}}],["sendnotificationtoone(title",{"_index":2024,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sends",{"_index":1656,"title":{},"body":{"controllers/FollowController.html":{},"injectables/NotificationService.html":{},"classes/SignUpUserDto.html":{}}}],["sent",{"_index":1647,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["serif",{"_index":943,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["server",{"_index":2196,"title":{},"body":{"injectables/PaymentService.html":{},"classes/SignUpUserDto.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["service",{"_index":1160,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["serviceaccount",{"_index":2860,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["servicec",{"_index":812,"title":{},"body":{"controllers/AuthController.html":{}}}],["session",{"_index":2150,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"index.html":{}}}],["session.url",{"_index":2253,"title":{},"body":{"injectables/PaymentService.html":{}}}],["sessionid",{"_index":2145,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["set",{"_index":1946,"title":{},"body":{"injectables/MemoryService.html":{},"classes/PageOptionsDto.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["setmetadata(roles_key",{"_index":3046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(subscription_plans_key",{"_index":3049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settings",{"_index":522,"title":{},"body":{"modules/AppModule.html":{}}}],["shadow",{"_index":967,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["sign",{"_index":794,"title":{},"body":{"controllers/AuthController.html":{},"controllers/NotificationController.html":{},"classes/SignUpUserDto.html":{}}}],["signature",{"_index":2180,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["signed",{"_index":1572,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/NotificationService.html":{}}}],["signoptions",{"_index":3043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signup",{"_index":1977,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["signup(@request",{"_index":1994,"title":{},"body":{"controllers/NotificationController.html":{}}}],["signup(req",{"_index":1982,"title":{},"body":{"controllers/NotificationController.html":{}}}],["signup(req.user",{"_index":1997,"title":{},"body":{"controllers/NotificationController.html":{}}}],["signup(user",{"_index":2026,"title":{},"body":{"injectables/NotificationService.html":{}}}],["signup.dto",{"_index":807,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup.dto.ts",{"_index":2619,"title":{},"body":{"classes/SignUpUserDto.html":{},"coverage.html":{}}}],["signup.dto.ts:13",{"_index":2634,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:16",{"_index":2635,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:19",{"_index":2633,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:22",{"_index":2639,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:25",{"_index":2636,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:28",{"_index":2630,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:31",{"_index":2638,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:33",{"_index":2629,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:36",{"_index":2631,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signupadmin",{"_index":753,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupadmin(@body",{"_index":839,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupadmin(body",{"_index":779,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupuser",{"_index":754,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupuser(body",{"_index":790,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupuserdto",{"_index":780,"title":{"classes/SignUpUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SignUpUserDto.html":{},"coverage.html":{}}}],["simple",{"_index":924,"title":{},"body":{"injectables/AuthService.html":{}}}],["singleuser",{"_index":2963,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["site",{"_index":2992,"title":{},"body":{"index.html":{}}}],["sitekey",{"_index":920,"title":{},"body":{"injectables/AuthService.html":{}}}],["size",{"_index":946,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["skip",{"_index":2111,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["skip(pageoptionsdto.skip",{"_index":735,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/EventService.html":{},"injectables/MemoryService.html":{},"injectables/ReportService.html":{}}}],["sorry",{"_index":2301,"title":{},"body":{"injectables/PaymentService.html":{}}}],["sort((a",{"_index":705,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateClueDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"controllers/EventController.html":{},"entities/EventGoal.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Memory.html":{},"controllers/MemoryController.html":{},"modules/MemoryModule.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"classes/ReCaptchaResponseDto.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"guards/SubscriptionsGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{}}}],["spam",{"_index":2966,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["specified",{"_index":2684,"title":{},"body":{"injectables/TasksService.html":{}}}],["sql",{"_index":2310,"title":{},"body":{"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["square",{"_index":1460,"title":{},"body":{"injectables/EventService.html":{}}}],["src/.../ban",{"_index":2940,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../constants.ts",{"_index":3030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../firebase",{"_index":3029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../follow",{"_index":2942,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../gender.enum.ts",{"_index":2943,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":2979,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../notification",{"_index":2944,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../order.enum.ts",{"_index":2947,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../report",{"_index":2948,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role.enum.ts",{"_index":2950,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":3031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../subscription",{"_index":2951,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../subscription.decorator.ts",{"_index":3032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../visibility.enum.ts",{"_index":2953,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":466,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":551,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":553,"title":{},"body":{"injectables/AppService.html":{}}}],["src/common/dto/page",{"_index":2079,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["src/common/dto/page.dto.ts",{"_index":2069,"title":{},"body":{"classes/PageDto.html":{},"coverage.html":{}}}],["src/common/dto/page.dto.ts:10",{"_index":2074,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dto/page.dto.ts:12",{"_index":2073,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/entities/base.entity.ts",{"_index":994,"title":{},"body":{"classes/BaseEntity.html":{},"coverage.html":{}}}],["src/common/entities/base.entity.ts:12",{"_index":999,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entity.ts:9",{"_index":997,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/services/encryption.service.ts",{"_index":1159,"title":{},"body":{"injectables/EncryptionService.html":{},"coverage.html":{}}}],["src/common/services/encryption.service.ts:14",{"_index":1173,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/common/services/encryption.service.ts:25",{"_index":1167,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/common/services/firebase",{"_index":1522,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/services/stripe.service.ts",{"_index":2642,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/common/services/stripe.service.ts:11",{"_index":2647,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/common/services/stripe.service.ts:19",{"_index":2645,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/constants/ban",{"_index":2954,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/constants/follow",{"_index":2955,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/constants/gender.enum.ts",{"_index":2956,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/constants/notification",{"_index":2959,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/constants/order.enum.ts",{"_index":2964,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/constants/report",{"_index":2965,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/constants/role.enum.ts",{"_index":2972,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/constants/subscription",{"_index":2976,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/constants/visibility.enum.ts",{"_index":2977,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/decorators/roles.decorator.ts",{"_index":2865,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/decorators/subscription.decorator.ts",{"_index":2866,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":2867,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/analytics/analytics.controller.ts",{"_index":302,"title":{},"body":{"controllers/AnalyticsController.html":{},"coverage.html":{}}}],["src/modules/analytics/analytics.controller.ts:25",{"_index":313,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["src/modules/analytics/analytics.controller.ts:45",{"_index":325,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["src/modules/analytics/analytics.module.ts",{"_index":375,"title":{},"body":{"modules/AnalyticsModule.html":{}}}],["src/modules/analytics/analytics.service.ts",{"_index":386,"title":{},"body":{"injectables/AnalyticsService.html":{},"coverage.html":{}}}],["src/modules/analytics/analytics.service.ts:10",{"_index":391,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["src/modules/analytics/analytics.service.ts:25",{"_index":394,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["src/modules/analytics/analytics.service.ts:66",{"_index":397,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["src/modules/analytics/dto/post",{"_index":2341,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{},"coverage.html":{}}}],["src/modules/appeals/appeals.controller.ts",{"_index":591,"title":{},"body":{"controllers/AppealsController.html":{},"coverage.html":{}}}],["src/modules/appeals/appeals.controller.ts:118",{"_index":616,"title":{},"body":{"controllers/AppealsController.html":{}}}],["src/modules/appeals/appeals.controller.ts:138",{"_index":607,"title":{},"body":{"controllers/AppealsController.html":{}}}],["src/modules/appeals/appeals.controller.ts:35",{"_index":623,"title":{},"body":{"controllers/AppealsController.html":{}}}],["src/modules/appeals/appeals.controller.ts:55",{"_index":601,"title":{},"body":{"controllers/AppealsController.html":{}}}],["src/modules/appeals/appeals.controller.ts:75",{"_index":619,"title":{},"body":{"controllers/AppealsController.html":{}}}],["src/modules/appeals/appeals.controller.ts:94",{"_index":613,"title":{},"body":{"controllers/AppealsController.html":{}}}],["src/modules/appeals/appeals.module.ts",{"_index":659,"title":{},"body":{"modules/AppealsModule.html":{}}}],["src/modules/appeals/appeals.service.ts",{"_index":664,"title":{},"body":{"injectables/AppealsService.html":{},"coverage.html":{}}}],["src/modules/appeals/appeals.service.ts:118",{"_index":681,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/appeals.service.ts:141",{"_index":670,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/appeals.service.ts:15",{"_index":668,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/appeals.service.ts:175",{"_index":682,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/appeals.service.ts:207",{"_index":677,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/appeals.service.ts:36",{"_index":674,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/appeals.service.ts:86",{"_index":678,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/dto/appeal.dto.ts",{"_index":585,"title":{},"body":{"classes/AppealDto.html":{},"coverage.html":{}}}],["src/modules/appeals/dto/appeal.dto.ts:5",{"_index":587,"title":{},"body":{"classes/AppealDto.html":{}}}],["src/modules/appeals/dto/appeal.dto.ts:8",{"_index":588,"title":{},"body":{"classes/AppealDto.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts",{"_index":557,"title":{},"body":{"entities/Appeal.html":{},"coverage.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts:11",{"_index":567,"title":{},"body":{"entities/Appeal.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts:14",{"_index":571,"title":{},"body":{"entities/Appeal.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts:17",{"_index":568,"title":{},"body":{"entities/Appeal.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts:20",{"_index":572,"title":{},"body":{"entities/Appeal.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts:26",{"_index":565,"title":{},"body":{"entities/Appeal.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts:32",{"_index":563,"title":{},"body":{"entities/Appeal.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":748,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:115",{"_index":782,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:144",{"_index":764,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:41",{"_index":792,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:81",{"_index":761,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:94",{"_index":758,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":853,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":870,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:12",{"_index":878,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:27",{"_index":894,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:52",{"_index":886,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:64",{"_index":884,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:70",{"_index":882,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:75",{"_index":881,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:86",{"_index":890,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/constants.ts",{"_index":2878,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/dto/captcha",{"_index":2383,"title":{},"body":{"classes/ReCaptchaResponseDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/user",{"_index":2618,"title":{},"body":{"classes/SignUpUserDto.html":{},"coverage.html":{}}}],["src/modules/auth/guards/jwt",{"_index":1799,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/local",{"_index":1840,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/roles.guard.ts",{"_index":2583,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/roles.guard.ts:10",{"_index":2590,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/modules/auth/guards/roles.guard.ts:7",{"_index":2587,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/modules/auth/guards/subscriptions.guard.ts",{"_index":2650,"title":{},"body":{"guards/SubscriptionsGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/subscriptions.guard.ts:10",{"_index":2652,"title":{},"body":{"guards/SubscriptionsGuard.html":{}}}],["src/modules/auth/guards/subscriptions.guard.ts:7",{"_index":2651,"title":{},"body":{"guards/SubscriptionsGuard.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts",{"_index":1803,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:20",{"_index":1806,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:7",{"_index":1804,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts",{"_index":1842,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:10",{"_index":1844,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:21",{"_index":1846,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/block/block.controller.ts",{"_index":1012,"title":{},"body":{"controllers/BlockController.html":{},"coverage.html":{}}}],["src/modules/block/block.controller.ts:18",{"_index":1018,"title":{},"body":{"controllers/BlockController.html":{}}}],["src/modules/block/block.controller.ts:37",{"_index":1021,"title":{},"body":{"controllers/BlockController.html":{}}}],["src/modules/block/block.module.ts",{"_index":1040,"title":{},"body":{"modules/BlockModule.html":{}}}],["src/modules/block/block.service.ts",{"_index":1044,"title":{},"body":{"injectables/BlockService.html":{},"coverage.html":{}}}],["src/modules/block/block.service.ts:23",{"_index":1048,"title":{},"body":{"injectables/BlockService.html":{}}}],["src/modules/block/block.service.ts:62",{"_index":1051,"title":{},"body":{"injectables/BlockService.html":{}}}],["src/modules/block/block.service.ts:8",{"_index":1046,"title":{},"body":{"injectables/BlockService.html":{}}}],["src/modules/block/entities/block.entity.ts",{"_index":1001,"title":{},"body":{"entities/Block.html":{},"coverage.html":{}}}],["src/modules/block/entities/block.entity.ts:14",{"_index":1007,"title":{},"body":{"entities/Block.html":{}}}],["src/modules/block/entities/block.entity.ts:20",{"_index":1005,"title":{},"body":{"entities/Block.html":{}}}],["src/modules/block/entities/block.entity.ts:8",{"_index":1008,"title":{},"body":{"entities/Block.html":{}}}],["src/modules/event/dto/create",{"_index":1086,"title":{},"body":{"classes/CreateClueDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"coverage.html":{}}}],["src/modules/event/dto/get",{"_index":1790,"title":{},"body":{"classes/GetProximityEventsDto.html":{},"coverage.html":{}}}],["src/modules/event/entities/event.entity.ts",{"_index":1182,"title":{},"body":{"entities/Event.html":{},"coverage.html":{}}}],["src/modules/event/entities/event.entity.ts:21",{"_index":1195,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/event/entities/event.entity.ts:24",{"_index":1204,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/event/entities/event.entity.ts:27",{"_index":1191,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/event/entities/event.entity.ts:30",{"_index":1205,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/event/entities/event.entity.ts:33",{"_index":1202,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/event/entities/event.entity.ts:36",{"_index":1203,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/event/entities/event.entity.ts:39",{"_index":1209,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/event/entities/event.entity.ts:42",{"_index":1190,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/event/entities/event.entity.ts:45",{"_index":1187,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/event/entities/event.entity.ts:49",{"_index":1194,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/event/entities/event.entity.ts:52",{"_index":1189,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/event/entities/event.entity.ts:56",{"_index":1208,"title":{},"body":{"entities/Event.html":{}}}],["src/modules/event/entities/eventclues.entity.ts",{"_index":1219,"title":{},"body":{"entities/EventClue.html":{},"coverage.html":{}}}],["src/modules/event/entities/eventclues.entity.ts:12",{"_index":1228,"title":{},"body":{"entities/EventClue.html":{}}}],["src/modules/event/entities/eventclues.entity.ts:15",{"_index":1222,"title":{},"body":{"entities/EventClue.html":{}}}],["src/modules/event/entities/eventclues.entity.ts:18",{"_index":1226,"title":{},"body":{"entities/EventClue.html":{}}}],["src/modules/event/entities/eventclues.entity.ts:21",{"_index":1227,"title":{},"body":{"entities/EventClue.html":{}}}],["src/modules/event/entities/eventclues.entity.ts:26",{"_index":1224,"title":{},"body":{"entities/EventClue.html":{}}}],["src/modules/event/entities/eventclues.entity.ts:31",{"_index":1221,"title":{},"body":{"entities/EventClue.html":{}}}],["src/modules/event/entities/eventclues.entity.ts:9",{"_index":1225,"title":{},"body":{"entities/EventClue.html":{}}}],["src/modules/event/entities/eventgoal.entity.ts",{"_index":1316,"title":{},"body":{"entities/EventGoal.html":{},"coverage.html":{}}}],["src/modules/event/entities/eventgoal.entity.ts:12",{"_index":1324,"title":{},"body":{"entities/EventGoal.html":{}}}],["src/modules/event/entities/eventgoal.entity.ts:15",{"_index":1322,"title":{},"body":{"entities/EventGoal.html":{}}}],["src/modules/event/entities/eventgoal.entity.ts:18",{"_index":1323,"title":{},"body":{"entities/EventGoal.html":{}}}],["src/modules/event/entities/eventgoal.entity.ts:23",{"_index":1320,"title":{},"body":{"entities/EventGoal.html":{}}}],["src/modules/event/entities/eventgoal.entity.ts:28",{"_index":1318,"title":{},"body":{"entities/EventGoal.html":{}}}],["src/modules/event/entities/eventgoal.entity.ts:9",{"_index":1321,"title":{},"body":{"entities/EventGoal.html":{}}}],["src/modules/event/event.controller.ts",{"_index":1231,"title":{},"body":{"controllers/EventController.html":{},"coverage.html":{}}}],["src/modules/event/event.controller.ts:120",{"_index":1260,"title":{},"body":{"controllers/EventController.html":{}}}],["src/modules/event/event.controller.ts:141",{"_index":1269,"title":{},"body":{"controllers/EventController.html":{}}}],["src/modules/event/event.controller.ts:163",{"_index":1251,"title":{},"body":{"controllers/EventController.html":{}}}],["src/modules/event/event.controller.ts:184",{"_index":1257,"title":{},"body":{"controllers/EventController.html":{}}}],["src/modules/event/event.controller.ts:203",{"_index":1246,"title":{},"body":{"controllers/EventController.html":{}}}],["src/modules/event/event.controller.ts:36",{"_index":1243,"title":{},"body":{"controllers/EventController.html":{}}}],["src/modules/event/event.controller.ts:57",{"_index":1273,"title":{},"body":{"controllers/EventController.html":{}}}],["src/modules/event/event.controller.ts:78",{"_index":1267,"title":{},"body":{"controllers/EventController.html":{}}}],["src/modules/event/event.controller.ts:99",{"_index":1265,"title":{},"body":{"controllers/EventController.html":{}}}],["src/modules/event/event.module.ts",{"_index":1327,"title":{},"body":{"modules/EventModule.html":{}}}],["src/modules/event/event.service.ts",{"_index":1333,"title":{},"body":{"injectables/EventService.html":{},"coverage.html":{}}}],["src/modules/event/event.service.ts:129",{"_index":1372,"title":{},"body":{"injectables/EventService.html":{}}}],["src/modules/event/event.service.ts:14",{"_index":1338,"title":{},"body":{"injectables/EventService.html":{}}}],["src/modules/event/event.service.ts:160",{"_index":1364,"title":{},"body":{"injectables/EventService.html":{}}}],["src/modules/event/event.service.ts:189",{"_index":1345,"title":{},"body":{"injectables/EventService.html":{}}}],["src/modules/event/event.service.ts:212",{"_index":1361,"title":{},"body":{"injectables/EventService.html":{}}}],["src/modules/event/event.service.ts:245",{"_index":1370,"title":{},"body":{"injectables/EventService.html":{}}}],["src/modules/event/event.service.ts:278",{"_index":1353,"title":{},"body":{"injectables/EventService.html":{}}}],["src/modules/event/event.service.ts:298",{"_index":1348,"title":{},"body":{"injectables/EventService.html":{}}}],["src/modules/event/event.service.ts:35",{"_index":1341,"title":{},"body":{"injectables/EventService.html":{}}}],["src/modules/event/event.service.ts:84",{"_index":1358,"title":{},"body":{"injectables/EventService.html":{}}}],["src/modules/event/event.service.ts:97",{"_index":1368,"title":{},"body":{"injectables/EventService.html":{}}}],["src/modules/feed/feed.controller.ts",{"_index":1473,"title":{},"body":{"controllers/FeedController.html":{},"coverage.html":{}}}],["src/modules/feed/feed.controller.ts:19",{"_index":1478,"title":{},"body":{"controllers/FeedController.html":{}}}],["src/modules/feed/feed.module.ts",{"_index":1489,"title":{},"body":{"modules/FeedModule.html":{}}}],["src/modules/feed/feed.service.ts",{"_index":1491,"title":{},"body":{"injectables/FeedService.html":{},"coverage.html":{}}}],["src/modules/feed/feed.service.ts:12",{"_index":1492,"title":{},"body":{"injectables/FeedService.html":{}}}],["src/modules/feed/feed.service.ts:28",{"_index":1494,"title":{},"body":{"injectables/FeedService.html":{}}}],["src/modules/follow/entities/follow",{"_index":1694,"title":{},"body":{"entities/FollowRequest.html":{},"coverage.html":{}}}],["src/modules/follow/entities/follow.entity.ts",{"_index":1609,"title":{},"body":{"entities/Follow.html":{},"coverage.html":{}}}],["src/modules/follow/entities/follow.entity.ts:14",{"_index":1615,"title":{},"body":{"entities/Follow.html":{}}}],["src/modules/follow/entities/follow.entity.ts:20",{"_index":1613,"title":{},"body":{"entities/Follow.html":{}}}],["src/modules/follow/entities/follow.entity.ts:8",{"_index":1616,"title":{},"body":{"entities/Follow.html":{}}}],["src/modules/follow/follow.controller.ts",{"_index":1620,"title":{},"body":{"controllers/FollowController.html":{},"coverage.html":{}}}],["src/modules/follow/follow.controller.ts:119",{"_index":1640,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:142",{"_index":1645,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:165",{"_index":1648,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:20",{"_index":1655,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:39",{"_index":1633,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:58",{"_index":1651,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:77",{"_index":1659,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:96",{"_index":1636,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.module.ts",{"_index":1690,"title":{},"body":{"modules/FollowModule.html":{}}}],["src/modules/follow/follow.service.ts",{"_index":1707,"title":{},"body":{"injectables/FollowService.html":{},"coverage.html":{}}}],["src/modules/follow/follow.service.ts:13",{"_index":1711,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:148",{"_index":1724,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:185",{"_index":1716,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:213",{"_index":1718,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:241",{"_index":1720,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:268",{"_index":1722,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:295",{"_index":1726,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:31",{"_index":1725,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:91",{"_index":1714,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/memory/dto/get",{"_index":1795,"title":{},"body":{"classes/GetProximityMemoryDto.html":{},"coverage.html":{}}}],["src/modules/memory/dto/memory",{"_index":1138,"title":{},"body":{"classes/CreateMemoryDto.html":{},"coverage.html":{}}}],["src/modules/memory/entities/memory.entity.ts",{"_index":1852,"title":{},"body":{"entities/Memory.html":{},"coverage.html":{}}}],["src/modules/memory/entities/memory.entity.ts:12",{"_index":1858,"title":{},"body":{"entities/Memory.html":{}}}],["src/modules/memory/entities/memory.entity.ts:15",{"_index":1857,"title":{},"body":{"entities/Memory.html":{}}}],["src/modules/memory/entities/memory.entity.ts:18",{"_index":1859,"title":{},"body":{"entities/Memory.html":{}}}],["src/modules/memory/entities/memory.entity.ts:21",{"_index":1862,"title":{},"body":{"entities/Memory.html":{}}}],["src/modules/memory/entities/memory.entity.ts:24",{"_index":1856,"title":{},"body":{"entities/Memory.html":{}}}],["src/modules/memory/entities/memory.entity.ts:27",{"_index":1855,"title":{},"body":{"entities/Memory.html":{}}}],["src/modules/memory/entities/memory.entity.ts:30",{"_index":1854,"title":{},"body":{"entities/Memory.html":{}}}],["src/modules/memory/entities/memory.entity.ts:36",{"_index":1861,"title":{},"body":{"entities/Memory.html":{}}}],["src/modules/memory/entities/memory.entity.ts:9",{"_index":1853,"title":{},"body":{"entities/Memory.html":{}}}],["src/modules/memory/memory.controller.ts",{"_index":1865,"title":{},"body":{"controllers/MemoryController.html":{},"coverage.html":{}}}],["src/modules/memory/memory.controller.ts:113",{"_index":1877,"title":{},"body":{"controllers/MemoryController.html":{}}}],["src/modules/memory/memory.controller.ts:134",{"_index":1875,"title":{},"body":{"controllers/MemoryController.html":{}}}],["src/modules/memory/memory.controller.ts:39",{"_index":1873,"title":{},"body":{"controllers/MemoryController.html":{}}}],["src/modules/memory/memory.controller.ts:69",{"_index":1879,"title":{},"body":{"controllers/MemoryController.html":{}}}],["src/modules/memory/memory.controller.ts:95",{"_index":1883,"title":{},"body":{"controllers/MemoryController.html":{}}}],["src/modules/memory/memory.module.ts",{"_index":1906,"title":{},"body":{"modules/MemoryModule.html":{}}}],["src/modules/memory/memory.service.ts",{"_index":1910,"title":{},"body":{"injectables/MemoryService.html":{},"coverage.html":{}}}],["src/modules/memory/memory.service.ts:112",{"_index":1919,"title":{},"body":{"injectables/MemoryService.html":{}}}],["src/modules/memory/memory.service.ts:132",{"_index":1921,"title":{},"body":{"injectables/MemoryService.html":{}}}],["src/modules/memory/memory.service.ts:14",{"_index":1913,"title":{},"body":{"injectables/MemoryService.html":{}}}],["src/modules/memory/memory.service.ts:172",{"_index":1918,"title":{},"body":{"injectables/MemoryService.html":{}}}],["src/modules/memory/memory.service.ts:193",{"_index":1925,"title":{},"body":{"injectables/MemoryService.html":{}}}],["src/modules/memory/memory.service.ts:27",{"_index":1916,"title":{},"body":{"injectables/MemoryService.html":{}}}],["src/modules/memory/memory.service.ts:66",{"_index":1923,"title":{},"body":{"injectables/MemoryService.html":{}}}],["src/modules/notification/dto/send",{"_index":2609,"title":{},"body":{"classes/SendNotificationDto.html":{},"coverage.html":{}}}],["src/modules/notification/notification.controller.ts",{"_index":1974,"title":{},"body":{"controllers/NotificationController.html":{},"coverage.html":{}}}],["src/modules/notification/notification.controller.ts:22",{"_index":1984,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/modules/notification/notification.controller.ts:42",{"_index":1981,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/modules/notification/notification.module.ts",{"_index":2005,"title":{},"body":{"modules/NotificationModule.html":{}}}],["src/modules/notification/notification.service.ts",{"_index":2007,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{}}}],["src/modules/notification/notification.service.ts:118",{"_index":2022,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:12",{"_index":2012,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:170",{"_index":2016,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:220",{"_index":2025,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:24",{"_index":2027,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:33",{"_index":2014,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:66",{"_index":2019,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/payment/payment.controller.ts",{"_index":2131,"title":{},"body":{"controllers/PaymentController.html":{},"coverage.html":{}}}],["src/modules/payment/payment.controller.ts:109",{"_index":2142,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/modules/payment/payment.controller.ts:27",{"_index":2156,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/modules/payment/payment.controller.ts:45",{"_index":2161,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/modules/payment/payment.controller.ts:63",{"_index":2153,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/modules/payment/payment.controller.ts:88",{"_index":2147,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/modules/payment/payment.module.ts",{"_index":2185,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/modules/payment/payment.service.ts",{"_index":2188,"title":{},"body":{"injectables/PaymentService.html":{},"coverage.html":{}}}],["src/modules/payment/payment.service.ts:118",{"_index":2201,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:13",{"_index":2214,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:135",{"_index":2199,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:153",{"_index":2193,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:17",{"_index":2208,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:19",{"_index":2191,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:32",{"_index":2203,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:84",{"_index":2205,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/post/dto/comment",{"_index":1096,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/modules/post/dto/post",{"_index":1145,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/modules/post/dto/scrapbook",{"_index":1151,"title":{},"body":{"classes/CreateScrapBookDto.html":{},"coverage.html":{}}}],["src/modules/post/entities/comment.entity.ts",{"_index":1075,"title":{},"body":{"entities/Comment.html":{},"coverage.html":{}}}],["src/modules/post/entities/comment.entity.ts:12",{"_index":1082,"title":{},"body":{"entities/Comment.html":{}}}],["src/modules/post/entities/comment.entity.ts:18",{"_index":1078,"title":{},"body":{"entities/Comment.html":{}}}],["src/modules/post/entities/comment.entity.ts:24",{"_index":1081,"title":{},"body":{"entities/Comment.html":{}}}],["src/modules/post/entities/comment.entity.ts:9",{"_index":1079,"title":{},"body":{"entities/Comment.html":{}}}],["src/modules/post/entities/post",{"_index":1830,"title":{},"body":{"entities/Like.html":{},"coverage.html":{}}}],["src/modules/post/entities/post.entity.ts",{"_index":2306,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/modules/post/entities/post.entity.ts:20",{"_index":2317,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:23",{"_index":2314,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:26",{"_index":2332,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:29",{"_index":2333,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:32",{"_index":2325,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:35",{"_index":2334,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:38",{"_index":2321,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:41",{"_index":2320,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:44",{"_index":2319,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:47",{"_index":2318,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:50",{"_index":2324,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:56",{"_index":2327,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:60",{"_index":2329,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:64",{"_index":2331,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:67",{"_index":2316,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:71",{"_index":2313,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:75",{"_index":2323,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts",{"_index":2601,"title":{},"body":{"entities/Scrapbook.html":{},"coverage.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts:15",{"_index":2603,"title":{},"body":{"entities/Scrapbook.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts:18",{"_index":2602,"title":{},"body":{"entities/Scrapbook.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts:21",{"_index":2604,"title":{},"body":{"entities/Scrapbook.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts:24",{"_index":2608,"title":{},"body":{"entities/Scrapbook.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts:30",{"_index":2607,"title":{},"body":{"entities/Scrapbook.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts:34",{"_index":2605,"title":{},"body":{"entities/Scrapbook.html":{}}}],["src/modules/post/post.controller.ts",{"_index":2896,"title":{},"body":{"coverage.html":{}}}],["src/modules/post/post.module.ts",{"_index":2365,"title":{},"body":{"modules/PostModule.html":{}}}],["src/modules/post/post.service.ts",{"_index":2899,"title":{},"body":{"coverage.html":{}}}],["src/modules/report/dto/report.dto.ts",{"_index":2463,"title":{},"body":{"classes/ReportDto.html":{},"coverage.html":{}}}],["src/modules/report/dto/report.dto.ts:13",{"_index":2467,"title":{},"body":{"classes/ReportDto.html":{}}}],["src/modules/report/dto/report.dto.ts:9",{"_index":2465,"title":{},"body":{"classes/ReportDto.html":{}}}],["src/modules/report/entities/post",{"_index":2372,"title":{},"body":{"entities/PostReport.html":{},"coverage.html":{}}}],["src/modules/report/entities/user",{"_index":2815,"title":{},"body":{"entities/UserBan.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["src/modules/report/report.controller.ts",{"_index":2390,"title":{},"body":{"controllers/ReportController.html":{},"coverage.html":{}}}],["src/modules/report/report.controller.ts:111",{"_index":2407,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:136",{"_index":2403,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:161",{"_index":2429,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:181",{"_index":2415,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:201",{"_index":2418,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:24",{"_index":2423,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:43",{"_index":2425,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:62",{"_index":2411,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:86",{"_index":2420,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.module.ts",{"_index":2471,"title":{},"body":{"modules/ReportModule.html":{}}}],["src/modules/report/report.service.ts",{"_index":2475,"title":{},"body":{"injectables/ReportService.html":{},"coverage.html":{}}}],["src/modules/report/report.service.ts:102",{"_index":2493,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:15",{"_index":2478,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:157",{"_index":2484,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:189",{"_index":2488,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:220",{"_index":2482,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:259",{"_index":2480,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:293",{"_index":2495,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:315",{"_index":2485,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:348",{"_index":2486,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:39",{"_index":2490,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/tasks/tasks.module.ts",{"_index":2661,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/modules/tasks/tasks.service.ts",{"_index":2665,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/modules/tasks/tasks.service.ts:115",{"_index":2682,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:139",{"_index":2687,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:17",{"_index":2680,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:37",{"_index":2692,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:76",{"_index":2691,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/user/dto/bio",{"_index":2703,"title":{},"body":{"classes/UpdateUserBioDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/dateofbirth",{"_index":2711,"title":{},"body":{"classes/UpdateUserDateOfBirthDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/email",{"_index":2714,"title":{},"body":{"classes/UpdateUserEmailDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/password",{"_index":2717,"title":{},"body":{"classes/UpdateUserPasswordDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/phone",{"_index":2725,"title":{},"body":{"classes/UpdateUserPhoneNumberDto.html":{},"coverage.html":{}}}],["src/modules/user/entities/user.entity.ts",{"_index":2726,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/modules/user/entities/user.entity.ts:102",{"_index":2760,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:105",{"_index":2739,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:109",{"_index":2779,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:113",{"_index":2791,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:117",{"_index":2784,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:121",{"_index":2786,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:125",{"_index":2788,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:128",{"_index":2738,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:132",{"_index":2748,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:136",{"_index":2736,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:140",{"_index":2743,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:144",{"_index":2741,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:148",{"_index":2759,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:152",{"_index":2757,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:156",{"_index":2762,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:160",{"_index":2761,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:164",{"_index":2772,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:168",{"_index":2774,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:172",{"_index":2754,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:176",{"_index":2752,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:180",{"_index":2746,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:184",{"_index":2766,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:39",{"_index":2768,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:42",{"_index":2756,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:45",{"_index":2770,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:48",{"_index":2750,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:51",{"_index":2794,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:54",{"_index":2777,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:57",{"_index":2778,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:60",{"_index":2734,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:63",{"_index":2749,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:66",{"_index":2789,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:69",{"_index":2782,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:72",{"_index":2781,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:75",{"_index":2780,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:78",{"_index":2764,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:81",{"_index":2755,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:84",{"_index":2775,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:87",{"_index":2769,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:90",{"_index":2767,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:93",{"_index":2792,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:96",{"_index":2793,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:99",{"_index":2758,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/user.controller.ts",{"_index":2903,"title":{},"body":{"coverage.html":{}}}],["src/modules/user/user.module.ts",{"_index":2830,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/user/user.service.ts",{"_index":2905,"title":{},"body":{"coverage.html":{}}}],["standard",{"_index":2973,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["start",{"_index":545,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["start:dev",{"_index":2997,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":127,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"entities/UserBan.html":{}}}],["started",{"_index":2981,"title":{"index.html":{}},"body":{}}],["statements",{"_index":2846,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":98,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673974513613.html":{},"entities/Appeal.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/PostReport.html":{},"injectables/ReportService.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"index.html":{}}}],["status(httpstatus.created",{"_index":827,"title":{},"body":{"controllers/AuthController.html":{}}}],["status.enum",{"_index":579,"title":{},"body":{"entities/Appeal.html":{},"injectables/AppealsService.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/PostReport.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["status.enum.ts",{"_index":2941,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["still",{"_index":2505,"title":{},"body":{"injectables/ReportService.html":{}}}],["storage",{"_index":1525,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["storage.service",{"_index":1927,"title":{},"body":{"injectables/MemoryService.html":{},"entities/Post.html":{},"injectables/TasksService.html":{}}}],["storage.service.ts",{"_index":1523,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"coverage.html":{}}}],["storage.service.ts:111",{"_index":1547,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:123",{"_index":1553,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:152",{"_index":1551,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:16",{"_index":1571,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:180",{"_index":1549,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:208",{"_index":1564,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:226",{"_index":1545,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:25",{"_index":1561,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:50",{"_index":1556,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:73",{"_index":1538,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:93",{"_index":1566,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storagebucket",{"_index":3036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategies/jwt.strategy",{"_index":866,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":867,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":775,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":20,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateClueDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"controllers/EventController.html":{},"entities/EventGoal.html":{},"injectables/EventService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/Like.html":{},"injectables/LocalStrategy.html":{},"entities/Memory.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"entities/PostReport.html":{},"classes/ReCaptchaResponseDto.html":{},"classes/ReportDto.html":{},"injectables/ReportService.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"miscellaneous/variables.html":{}}}],["strip",{"_index":2195,"title":{},"body":{"injectables/PaymentService.html":{}}}],["stripe",{"_index":2143,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/StripeService.html":{},"dependencies.html":{},"index.html":{}}}],["stripe(process.env?.stripe_test_key",{"_index":2209,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.customer",{"_index":2226,"title":{},"body":{"injectables/PaymentService.html":{}}}],["stripecustomerid",{"_index":235,"title":{},"body":{"classes/$npmConfigName1674544597118.html":{},"injectables/PaymentService.html":{},"entities/User.html":{}}}],["stripeservice",{"_index":2641,"title":{"injectables/StripeService.html":{}},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["stripesignature",{"_index":2198,"title":{},"body":{"injectables/PaymentService.html":{}}}],["structure",{"_index":3012,"title":{},"body":{"index.html":{}}}],["sub",{"_index":915,"title":{},"body":{"injectables/AuthService.html":{}}}],["subscribe",{"_index":2136,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["subscribe(@request",{"_index":2166,"title":{},"body":{"controllers/PaymentController.html":{}}}],["subscribe(req",{"_index":2154,"title":{},"body":{"controllers/PaymentController.html":{}}}],["subscribe(req.user",{"_index":2168,"title":{},"body":{"controllers/PaymentController.html":{}}}],["subscribe(user",{"_index":2202,"title":{},"body":{"injectables/PaymentService.html":{}}}],["subscribed",{"_index":2175,"title":{},"body":{"controllers/PaymentController.html":{}}}],["subscription",{"_index":2157,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"miscellaneous/variables.html":{}}}],["subscription_plans",{"_index":3047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscription_plans_key",{"_index":2653,"title":{},"body":{"guards/SubscriptionsGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["subscriptiondeletedevent",{"_index":2294,"title":{},"body":{"injectables/PaymentService.html":{}}}],["subscriptiondeletedevent.customer",{"_index":2296,"title":{},"body":{"injectables/PaymentService.html":{}}}],["subscriptionplan",{"_index":236,"title":{},"body":{"classes/$npmConfigName1674544597118.html":{},"controllers/AnalyticsController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PaymentService.html":{},"guards/SubscriptionsGuard.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["subscriptionplan.basic",{"_index":2228,"title":{},"body":{"injectables/PaymentService.html":{},"entities/User.html":{}}}],["subscriptionplan.premium",{"_index":2238,"title":{},"body":{"injectables/PaymentService.html":{}}}],["subscriptionplans",{"_index":339,"title":{},"body":{"controllers/AnalyticsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["subscriptionplans(subscriptionplan.premium",{"_index":363,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["subscriptions",{"_index":2256,"title":{},"body":{"injectables/PaymentService.html":{}}}],["subscriptionsguard",{"_index":341,"title":{"guards/SubscriptionsGuard.html":{}},"body":{"controllers/AnalyticsController.html":{},"guards/SubscriptionsGuard.html":{},"coverage.html":{}}}],["subscriptionsguard)@get('post/:id')@subscriptionplans(subscriptionplan.premium",{"_index":324,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["success",{"_index":974,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{},"classes/ReCaptchaResponseDto.html":{}}}],["success_url",{"_index":2249,"title":{},"body":{"injectables/PaymentService.html":{}}}],["successcustomer",{"_index":2274,"title":{},"body":{"injectables/PaymentService.html":{}}}],["successcustomer.id",{"_index":2278,"title":{},"body":{"injectables/PaymentService.html":{}}}],["successful",{"_index":976,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PaymentService.html":{}}}],["successfully",{"_index":2176,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["successuser",{"_index":2277,"title":{},"body":{"injectables/PaymentService.html":{}}}],["successuser.id",{"_index":2282,"title":{},"body":{"injectables/PaymentService.html":{}}}],["super",{"_index":1811,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":3017,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":3018,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":2268,"title":{},"body":{"injectables/PaymentService.html":{}}}],["synchronize",{"_index":534,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":2072,"title":{},"body":{"classes/PageDto.html":{}}}],["table",{"_index":39,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678975542609.html":{},"modules/AppModule.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2909,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":68,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["take",{"_index":2086,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["take(pageoptionsdto.take",{"_index":736,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/EventService.html":{},"injectables/MemoryService.html":{},"injectables/ReportService.html":{}}}],["taken",{"_index":702,"title":{},"body":{"injectables/AppealsService.html":{}}}],["target",{"_index":2032,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SendNotificationDto.html":{},"miscellaneous/enumerations.html":{}}}],["targetgroup",{"_index":2611,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["targetuserid",{"_index":2612,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["tasks",{"_index":2667,"title":{},"body":{"injectables/TasksService.html":{}}}],["tasks.service",{"_index":2662,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasksmodule",{"_index":462,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":2660,"title":{"injectables/TasksService.html":{}},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["temporary",{"_index":1605,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["test",{"_index":2991,"title":{},"body":{"index.html":{}}}],["test/load_testing/test.json",{"_index":3006,"title":{},"body":{"index.html":{}}}],["testing",{"_index":3015,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2999,"title":{},"body":{"index.html":{}}}],["text",{"_index":167,"title":{},"body":{"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1678774445242.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"classes/CreateClueDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateGoalDto.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"controllers/PaymentController.html":{}}}],["thank",{"_index":2281,"title":{},"body":{"injectables/PaymentService.html":{}}}],["then((_",{"_index":1035,"title":{},"body":{"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FollowController.html":{}}}],["then((analytics",{"_index":355,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["then((appeal",{"_index":637,"title":{},"body":{"controllers/AppealsController.html":{}}}],["then((appeals",{"_index":655,"title":{},"body":{"controllers/AppealsController.html":{}}}],["then((appealsandcount",{"_index":740,"title":{},"body":{"injectables/AppealsService.html":{}}}],["then((block",{"_index":1030,"title":{},"body":{"controllers/BlockController.html":{}}}],["then((captcha",{"_index":833,"title":{},"body":{"controllers/AuthController.html":{}}}],["then((clues",{"_index":1299,"title":{},"body":{"controllers/EventController.html":{}}}],["then((event",{"_index":1287,"title":{},"body":{"controllers/EventController.html":{}}}],["then((events",{"_index":1295,"title":{},"body":{"controllers/EventController.html":{}}}],["then((memories",{"_index":1899,"title":{},"body":{"controllers/MemoryController.html":{}}}],["then((memory",{"_index":1894,"title":{},"body":{"controllers/MemoryController.html":{},"injectables/MemoryService.html":{}}}],["then((postreportsandcount",{"_index":2542,"title":{},"body":{"injectables/ReportService.html":{}}}],["then((posts",{"_index":1485,"title":{},"body":{"controllers/FeedController.html":{},"controllers/ReportController.html":{}}}],["then((postsandcount",{"_index":2572,"title":{},"body":{"injectables/ReportService.html":{}}}],["then((report",{"_index":2439,"title":{},"body":{"controllers/ReportController.html":{}}}],["then((reports",{"_index":2444,"title":{},"body":{"controllers/ReportController.html":{}}}],["then((result",{"_index":1669,"title":{},"body":{"controllers/FollowController.html":{},"controllers/PaymentController.html":{}}}],["then((user",{"_index":2511,"title":{},"body":{"injectables/ReportService.html":{}}}],["then((usereventsandcount",{"_index":1453,"title":{},"body":{"injectables/EventService.html":{}}}],["then((usermemoriesandcount",{"_index":1953,"title":{},"body":{"injectables/MemoryService.html":{}}}],["then((userpostsandcount",{"_index":1970,"title":{},"body":{"injectables/MemoryService.html":{}}}],["then((userreportsandcount",{"_index":2550,"title":{},"body":{"injectables/ReportService.html":{}}}],["then((usersandcount",{"_index":2579,"title":{},"body":{"injectables/ReportService.html":{}}}],["then(async",{"_index":1603,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/TasksService.html":{}}}],["then(function",{"_index":990,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.analyticsservice",{"_index":353,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["this.appealrepository",{"_index":730,"title":{},"body":{"injectables/AppealsService.html":{}}}],["this.appealrepository.save(appeal",{"_index":728,"title":{},"body":{"injectables/AppealsService.html":{}}}],["this.appealrepository.save(newappeal",{"_index":715,"title":{},"body":{"injectables/AppealsService.html":{}}}],["this.appealsservice",{"_index":635,"title":{},"body":{"controllers/AppealsController.html":{}}}],["this.authservice",{"_index":832,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.isuserbanned(req.user",{"_index":844,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(req.user",{"_index":845,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":1851,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.blockrepository.delete",{"_index":1074,"title":{},"body":{"injectables/BlockService.html":{}}}],["this.blockrepository.save(newblock",{"_index":1066,"title":{},"body":{"injectables/BlockService.html":{}}}],["this.blockservice",{"_index":1028,"title":{},"body":{"controllers/BlockController.html":{}}}],["this.data",{"_index":2077,"title":{},"body":{"classes/PageDto.html":{}}}],["this.deleteavatar(previousimageid",{"_index":1593,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["this.email",{"_index":2810,"title":{},"body":{"entities/User.html":{}}}],["this.email.tolowercase",{"_index":2811,"title":{},"body":{"entities/User.html":{}}}],["this.endpointsecret",{"_index":2265,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.eventcluerepository",{"_index":1444,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventgoalrepository.save(dbeventgoal",{"_index":1410,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventgoalrepository.save(eventgoal",{"_index":1405,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventrepository",{"_index":1419,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventrepository.delete",{"_index":1448,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventrepository.findone",{"_index":1411,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventrepository.save(event",{"_index":1443,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventrepository.save(newevent",{"_index":1408,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventservice",{"_index":1285,"title":{},"body":{"controllers/EventController.html":{}}}],["this.expirydate",{"_index":1591,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["this.feedservice",{"_index":1483,"title":{},"body":{"controllers/FeedController.html":{}}}],["this.followrequestsrepository.findone",{"_index":1749,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.followrequestsrepository.save(followrequest",{"_index":1748,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.followrequestsrepository.update(followrequest.id",{"_index":1758,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.followservice",{"_index":1667,"title":{},"body":{"controllers/FollowController.html":{}}}],["this.followsrepository.delete(followid",{"_index":1789,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.followsrepository.save(follow",{"_index":1766,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.getcoordinatesradius",{"_index":1416,"title":{},"body":{"injectables/EventService.html":{},"injectables/MemoryService.html":{}}}],["this.getmemorybyid(memoryid).then((memory",{"_index":1963,"title":{},"body":{"injectables/MemoryService.html":{}}}],["this.hasnextpage",{"_index":2103,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.haspreviouspage",{"_index":2102,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.httpservice",{"_index":988,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.itemcount",{"_index":2099,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.jwtservice.sign(payload",{"_index":918,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.memoryrepository",{"_index":1944,"title":{},"body":{"injectables/MemoryService.html":{}}}],["this.memoryrepository.delete",{"_index":1968,"title":{},"body":{"injectables/MemoryService.html":{}}}],["this.memoryrepository.findoneby",{"_index":1950,"title":{},"body":{"injectables/MemoryService.html":{}}}],["this.memoryrepository.save(newmemory",{"_index":1940,"title":{},"body":{"injectables/MemoryService.html":{}}}],["this.memoryservice",{"_index":1892,"title":{},"body":{"controllers/MemoryController.html":{}}}],["this.meta",{"_index":2078,"title":{},"body":{"classes/PageDto.html":{}}}],["this.notificationservice",{"_index":1996,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/PaymentService.html":{}}}],["this.page",{"_index":2097,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.pagecount",{"_index":2100,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.password",{"_index":2813,"title":{},"body":{"entities/User.html":{}}}],["this.paymentservice",{"_index":2167,"title":{},"body":{"controllers/PaymentController.html":{}}}],["this.postreportsrepository",{"_index":2537,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.postreportsrepository.findone",{"_index":2564,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.postreportsrepository.save(newreport",{"_index":2523,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.postreportsrepository.save(report",{"_index":2565,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.postrepository",{"_index":2566,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.postrepository.find",{"_index":1505,"title":{},"body":{"injectables/FeedService.html":{}}}],["this.postrepository.findone",{"_index":408,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["this.postrepository.update(postid",{"_index":727,"title":{},"body":{"injectables/AppealsService.html":{}}}],["this.reflector.getallandoverride",{"_index":2655,"title":{},"body":{"guards/SubscriptionsGuard.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":2595,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reportservice",{"_index":2437,"title":{},"body":{"controllers/ReportController.html":{}}}],["this.sendnotificationtoall(sendnotificationdto.title",{"_index":2044,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.sendnotificationtocelebrities",{"_index":2046,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.sendnotificationtoinfluencers",{"_index":2048,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.sendnotificationtoone",{"_index":2040,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.stripe.checkout.sessions.create",{"_index":2239,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.stripe.checkout.sessions.retrieve(sessionid",{"_index":2258,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.stripe.customers.create",{"_index":2230,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.stripe.customers.del(customerid",{"_index":2649,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.retrieve",{"_index":2275,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.stripe.customers.retrieve(session.customer",{"_index":2259,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.stripe.subscriptions.list",{"_index":2257,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.stripe.webhooks.constructevent(body",{"_index":2264,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.take",{"_index":2098,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.userbanrepository.save(newban",{"_index":2563,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.userreportsrepository",{"_index":2545,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.userreportsrepository.findone",{"_index":2559,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.userreportsrepository.save(newreport",{"_index":2536,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.userreportsrepository.save(report",{"_index":2561,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.userrepository",{"_index":2260,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["this.userrepository.findone",{"_index":720,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["this.userrepository.findoneby",{"_index":1057,"title":{},"body":{"injectables/BlockService.html":{}}}],["this.userrepository.update(dbuser.id",{"_index":2236,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.userrepository.update(deleteduser.id",{"_index":2299,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.userrepository.update(failuser.id",{"_index":2290,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.userrepository.update(successuser.id",{"_index":2279,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.userrepository.update(userid",{"_index":2562,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.userservice.create(body).then((user",{"_index":829,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.createadmin(body).then((user",{"_index":840,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.createuserwithimage(body",{"_index":822,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.findonebyemail(body.email).then((user",{"_index":820,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersrepository",{"_index":905,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.find",{"_index":2050,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.usersrepository.findone",{"_index":1732,"title":{},"body":{"injectables/FollowService.html":{},"injectables/NotificationService.html":{}}}],["this.usersrepository.findoneby",{"_index":1730,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.usersrepository.save(followed",{"_index":1765,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.usersrepository.save(followedby",{"_index":1763,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.usersrepository.save(userrequestingunfollow",{"_index":1788,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.usersrepository.save(usertobeunfollowed",{"_index":1787,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.usersrepository.update(user.id",{"_index":2035,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.usersservice.isuserbanned(user.id).then((result",{"_index":919,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validatecaptcharesponse(body['g",{"_index":925,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":414,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/LocalStrategy.html":{},"injectables/MemoryService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"classes/SignUpUserDto.html":{}}}],["throws",{"_index":1848,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["time",{"_index":2675,"title":{},"body":{"injectables/TasksService.html":{}}}],["times",{"_index":2826,"title":{},"body":{"entities/UserBan.html":{}}}],["timestamp",{"_index":154,"title":{},"body":{"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["tinyint",{"_index":135,"title":{},"body":{"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674544597118.html":{}}}],["title",{"_index":2017,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SendNotificationDto.html":{}}}],["token",{"_index":778,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["tokens",{"_index":2062,"title":{},"body":{"injectables/NotificationService.html":{}}}],["tomorrow",{"_index":2690,"title":{},"body":{"injectables/TasksService.html":{}}}],["tomorrow.setdate(tomorrow.getdate",{"_index":2698,"title":{},"body":{"injectables/TasksService.html":{}}}],["transfer",{"_index":2075,"title":{},"body":{"classes/PageDto.html":{}}}],["transformer",{"_index":2920,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":426,"title":{},"body":{"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/FollowService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"guards/SubscriptionsGuard.html":{}}}],["try",{"_index":2263,"title":{},"body":{"injectables/PaymentService.html":{}}}],["type",{"_index":18,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateClueDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"controllers/EventController.html":{},"entities/EventGoal.html":{},"injectables/EventService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalStrategy.html":{},"entities/Memory.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"entities/PostReport.html":{},"classes/ReCaptchaResponseDto.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"guards/SubscriptionsGuard.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":35,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"injectables/AnalyticsService.html":{},"entities/Appeal.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/Like.html":{},"entities/Memory.html":{},"injectables/MemoryService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"injectables/ReportService.html":{},"entities/Scrapbook.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"dependencies.html":{}}}],["typeorm.config.ts",{"_index":2908,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm:run",{"_index":2994,"title":{},"body":{"index.html":{}}}],["typeormmodule",{"_index":377,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/EventModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/MemoryModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([appeal",{"_index":663,"title":{},"body":{"modules/AppealsModule.html":{}}}],["typeormmodule.forfeature([block",{"_index":1043,"title":{},"body":{"modules/BlockModule.html":{}}}],["typeormmodule.forfeature([event",{"_index":1332,"title":{},"body":{"modules/EventModule.html":{}}}],["typeormmodule.forfeature([memory",{"_index":1909,"title":{},"body":{"modules/MemoryModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":383,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/FeedModule.html":{},"modules/PostModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":869,"title":{},"body":{"modules/AuthModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([userreport",{"_index":2474,"title":{},"body":{"modules/ReportModule.html":{}}}],["typeormmodule.forrootasync",{"_index":515,"title":{},"body":{"modules/AppModule.html":{}}}],["unauthorizedexception",{"_index":1849,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unban",{"_index":2496,"title":{},"body":{"injectables/ReportService.html":{}}}],["unbanned",{"_index":2431,"title":{},"body":{"controllers/ReportController.html":{}}}],["unbanpost",{"_index":2398,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["unbanpost(@request",{"_index":2456,"title":{},"body":{"controllers/ReportController.html":{}}}],["unbanpost(id",{"_index":2494,"title":{},"body":{"injectables/ReportService.html":{}}}],["unbanpost(params.id",{"_index":2457,"title":{},"body":{"controllers/ReportController.html":{}}}],["unbanpost(req",{"_index":2426,"title":{},"body":{"controllers/ReportController.html":{}}}],["unbans",{"_index":2430,"title":{},"body":{"controllers/ReportController.html":{}}}],["unblock",{"_index":1022,"title":{},"body":{"controllers/BlockController.html":{},"injectables/BlockService.html":{}}}],["unblocked",{"_index":1037,"title":{},"body":{"controllers/BlockController.html":{},"injectables/BlockService.html":{}}}],["unblocking",{"_index":1053,"title":{},"body":{"injectables/BlockService.html":{}}}],["unblockinguser",{"_index":1069,"title":{},"body":{"injectables/BlockService.html":{}}}],["unblockinguser.blocks.map((block",{"_index":1072,"title":{},"body":{"injectables/BlockService.html":{}}}],["unblocks",{"_index":1052,"title":{},"body":{"injectables/BlockService.html":{}}}],["unblockuser",{"_index":1014,"title":{},"body":{"controllers/BlockController.html":{},"injectables/BlockService.html":{}}}],["unblockuser(@request",{"_index":1033,"title":{},"body":{"controllers/BlockController.html":{}}}],["unblockuser(id",{"_index":1034,"title":{},"body":{"controllers/BlockController.html":{},"injectables/BlockService.html":{}}}],["unblockuser(req",{"_index":1019,"title":{},"body":{"controllers/BlockController.html":{}}}],["undefined",{"_index":141,"title":{},"body":{"classes/$npmConfigName1672678196724.html":{},"entities/Appeal.html":{},"entities/FollowRequest.html":{},"entities/PostReport.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"miscellaneous/enumerations.html":{}}}],["undefined)[0",{"_index":726,"title":{},"body":{"injectables/AppealsService.html":{}}}],["unfollow",{"_index":1628,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["unfollow(@request",{"_index":1678,"title":{},"body":{"controllers/FollowController.html":{}}}],["unfollow(id",{"_index":1679,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["unfollow(req",{"_index":1657,"title":{},"body":{"controllers/FollowController.html":{}}}],["unfollowed",{"_index":1680,"title":{},"body":{"controllers/FollowController.html":{}}}],["unfollows",{"_index":1660,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["unique",{"_index":290,"title":{},"body":{"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{}}}],["unit",{"_index":3007,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":776,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/JwtStrategy.html":{},"injectables/PaymentService.html":{}}}],["unlicensed",{"_index":3028,"title":{},"body":{"properties.html":{}}}],["unsubscribe",{"_index":2137,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["unsubscribe(@request",{"_index":2170,"title":{},"body":{"controllers/PaymentController.html":{}}}],["unsubscribe(req",{"_index":2159,"title":{},"body":{"controllers/PaymentController.html":{}}}],["unsubscribe(req.user",{"_index":2171,"title":{},"body":{"controllers/PaymentController.html":{}}}],["unsubscribe(user",{"_index":2204,"title":{},"body":{"injectables/PaymentService.html":{}}}],["unsubscribed",{"_index":2300,"title":{},"body":{"injectables/PaymentService.html":{}}}],["unsuccessful",{"_index":2291,"title":{},"body":{"injectables/PaymentService.html":{}}}],["up",{"_index":17,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"controllers/AuthController.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/SignUpUserDto.html":{}}}],["up(queryrunner",{"_index":32,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{}}}],["update",{"_index":63,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"injectables/FirebaseStorageService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["update(memory",{"_index":1945,"title":{},"body":{"injectables/MemoryService.html":{}}}],["update(post",{"_index":2567,"title":{},"body":{"injectables/ReportService.html":{}}}],["update(user",{"_index":2261,"title":{},"body":{"injectables/PaymentService.html":{}}}],["update.dto.ts",{"_index":2704,"title":{},"body":{"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"coverage.html":{}}}],["update.dto.ts:13",{"_index":2720,"title":{},"body":{"classes/UpdateUserPasswordDto.html":{}}}],["update.dto.ts:5",{"_index":2721,"title":{},"body":{"classes/UpdateUserPasswordDto.html":{}}}],["update.dto.ts:7",{"_index":2712,"title":{},"body":{"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["update.dto.ts:9",{"_index":2708,"title":{},"body":{"classes/UpdateUserBioDto.html":{},"classes/UpdateUserPasswordDto.html":{}}}],["updateavatar",{"_index":1533,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["updateavatar(image",{"_index":1554,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["updated",{"_index":2206,"title":{},"body":{"injectables/PaymentService.html":{}}}],["updatedat",{"_index":62,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/BaseEntity.html":{}}}],["updatedatecolumn",{"_index":998,"title":{},"body":{"classes/BaseEntity.html":{}}}],["updateresult",{"_index":1727,"title":{},"body":{"injectables/FollowService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["updates",{"_index":2197,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/TasksService.html":{}}}],["updateuserbiodto",{"_index":2702,"title":{"classes/UpdateUserBioDto.html":{}},"body":{"classes/UpdateUserBioDto.html":{},"coverage.html":{}}}],["updateuserdateofbirthdto",{"_index":2710,"title":{"classes/UpdateUserDateOfBirthDto.html":{}},"body":{"classes/UpdateUserDateOfBirthDto.html":{},"coverage.html":{}}}],["updateuseremaildto",{"_index":2713,"title":{"classes/UpdateUserEmailDto.html":{}},"body":{"classes/UpdateUserEmailDto.html":{},"coverage.html":{}}}],["updateusermemoryurls",{"_index":2677,"title":{},"body":{"injectables/TasksService.html":{}}}],["updateuserpassworddto",{"_index":2716,"title":{"classes/UpdateUserPasswordDto.html":{}},"body":{"classes/UpdateUserPasswordDto.html":{},"coverage.html":{}}}],["updateuserphonenumberdto",{"_index":2724,"title":{"classes/UpdateUserPhoneNumberDto.html":{}},"body":{"classes/UpdateUserPhoneNumberDto.html":{},"coverage.html":{}}}],["updateuserposturls",{"_index":2678,"title":{},"body":{"injectables/TasksService.html":{}}}],["updateuserprofileurls",{"_index":2679,"title":{},"body":{"injectables/TasksService.html":{}}}],["updating",{"_index":2705,"title":{},"body":{"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["upload",{"_index":1562,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["uploadavatar",{"_index":1534,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["uploadavatar(image",{"_index":1560,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["uploaded",{"_index":1557,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{}}}],["uploadedfile",{"_index":799,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MemoryController.html":{}}}],["uploadmemoryimage",{"_index":1535,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["uploadmemoryimage(image",{"_index":1563,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["uploadpostimage",{"_index":1536,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["uploadpostimage(image",{"_index":1565,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["url",{"_index":986,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/MemoryService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/TasksService.html":{}}}],["urloptions",{"_index":1587,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["urls",{"_index":1573,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["use",{"_index":516,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["used",{"_index":768,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"classes/SignUpUserDto.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["usefactory",{"_index":520,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":329,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{}}}],["useguards(jwtauthguard",{"_index":311,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{}}}],["useguards(jwtauthguard)@delete('/:id",{"_index":1245,"title":{},"body":{"controllers/EventController.html":{},"controllers/MemoryController.html":{}}}],["useguards(jwtauthguard)@delete('unfollow/:id",{"_index":1658,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@get",{"_index":1477,"title":{},"body":{"controllers/FeedController.html":{}}}],["useguards(jwtauthguard)@get('/:id",{"_index":1256,"title":{},"body":{"controllers/EventController.html":{},"controllers/MemoryController.html":{}}}],["useguards(jwtauthguard)@get('follow",{"_index":1642,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@get('followers",{"_index":1635,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@get('following",{"_index":1639,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@get('joined",{"_index":1259,"title":{},"body":{"controllers/EventController.html":{}}}],["useguards(jwtauthguard)@get('post",{"_index":611,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/ReportController.html":{}}}],["useguards(jwtauthguard)@get('user",{"_index":615,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/EventController.html":{},"controllers/MemoryController.html":{},"controllers/ReportController.html":{}}}],["useguards(jwtauthguard)@patch('accept",{"_index":1631,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@patch('reject",{"_index":1650,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@post('appeal",{"_index":622,"title":{},"body":{"controllers/AppealsController.html":{}}}],["useguards(jwtauthguard)@post('block",{"_index":1016,"title":{},"body":{"controllers/BlockController.html":{}}}],["useguards(jwtauthguard)@post('create",{"_index":1242,"title":{},"body":{"controllers/EventController.html":{}}}],["useguards(jwtauthguard)@post('create')@useinterceptors(undefined",{"_index":1872,"title":{},"body":{"controllers/MemoryController.html":{}}}],["useguards(jwtauthguard)@post('join",{"_index":1271,"title":{},"body":{"controllers/EventController.html":{}}}],["useguards(jwtauthguard)@post('proximity",{"_index":1264,"title":{},"body":{"controllers/EventController.html":{},"controllers/MemoryController.html":{}}}],["useguards(jwtauthguard)@post('report",{"_index":2422,"title":{},"body":{"controllers/ReportController.html":{}}}],["useguards(jwtauthguard)@post('request",{"_index":1653,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@post('signup/:fcmtoken",{"_index":1983,"title":{},"body":{"controllers/NotificationController.html":{}}}],["useguards(jwtauthguard)@post('subscribe",{"_index":2155,"title":{},"body":{"controllers/PaymentController.html":{}}}],["useguards(jwtauthguard)@post('unblock",{"_index":1020,"title":{},"body":{"controllers/BlockController.html":{}}}],["useguards(jwtauthguard)@post('unsubscribe",{"_index":2160,"title":{},"body":{"controllers/PaymentController.html":{}}}],["useguards(localauthguard",{"_index":841,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('login",{"_index":763,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":798,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MemoryController.html":{}}}],["useinterceptors(fileinterceptor('avatar",{"_index":814,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors(fileinterceptor('image",{"_index":1890,"title":{},"body":{"controllers/MemoryController.html":{}}}],["user",{"_index":40,"title":{"entities/User.html":{}},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"entities/Appeal.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"controllers/EventController.html":{},"entities/EventGoal.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/Like.html":{},"injectables/LocalStrategy.html":{},"entities/Memory.html":{},"controllers/MemoryController.html":{},"injectables/MemoryService.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SignUpUserDto.html":{},"guards/SubscriptionsGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["user's",{"_index":1252,"title":{},"body":{"controllers/EventController.html":{},"injectables/PaymentService.html":{}}}],["user.appeals",{"_index":561,"title":{},"body":{"entities/Appeal.html":{}}}],["user.bans",{"_index":2818,"title":{},"body":{"entities/UserBan.html":{}}}],["user.blockedby",{"_index":1004,"title":{},"body":{"entities/Block.html":{}}}],["user.blocks",{"_index":1006,"title":{},"body":{"entities/Block.html":{}}}],["user.cluescreated",{"_index":1220,"title":{},"body":{"entities/EventClue.html":{}}}],["user.comments",{"_index":1077,"title":{},"body":{"entities/Comment.html":{}}}],["user.controller",{"_index":2832,"title":{},"body":{"modules/UserModule.html":{}}}],["user.email",{"_index":914,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.eventsattended",{"_index":1218,"title":{},"body":{"entities/Event.html":{}}}],["user.eventsattended)@jointable",{"_index":1207,"title":{},"body":{"entities/Event.html":{}}}],["user.eventscreated",{"_index":1188,"title":{},"body":{"entities/Event.html":{}}}],["user.fcmtoken",{"_index":2059,"title":{},"body":{"injectables/NotificationService.html":{}}}],["user.followed.posts)[0",{"_index":1511,"title":{},"body":{"injectables/FeedService.html":{}}}],["user.followers",{"_index":1612,"title":{},"body":{"entities/Follow.html":{}}}],["user.following",{"_index":1614,"title":{},"body":{"entities/Follow.html":{}}}],["user.followrequestsreceived",{"_index":1701,"title":{},"body":{"entities/FollowRequest.html":{}}}],["user.followrequestssent",{"_index":1699,"title":{},"body":{"entities/FollowRequest.html":{}}}],["user.goalscreated",{"_index":1317,"title":{},"body":{"entities/EventGoal.html":{}}}],["user.id",{"_index":444,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/MemoryService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["user.likes",{"_index":1835,"title":{},"body":{"entities/Like.html":{}}}],["user.memories",{"_index":1860,"title":{},"body":{"entities/Memory.html":{}}}],["user.password",{"_index":911,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.posts",{"_index":2326,"title":{},"body":{"entities/Post.html":{}}}],["user.reportedposts",{"_index":2378,"title":{},"body":{"entities/PostReport.html":{}}}],["user.reportedposts.map((reports",{"_index":2512,"title":{},"body":{"injectables/ReportService.html":{}}}],["user.reportedusers",{"_index":2838,"title":{},"body":{"entities/UserReport.html":{}}}],["user.reportedusers.map((reports",{"_index":2529,"title":{},"body":{"injectables/ReportService.html":{}}}],["user.reportsagainst",{"_index":2840,"title":{},"body":{"entities/UserReport.html":{}}}],["user.role",{"_index":441,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AuthService.html":{}}}],["user.role?.includes(role",{"_index":2600,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.scrapbooks",{"_index":2606,"title":{},"body":{"entities/Scrapbook.html":{}}}],["user.service",{"_index":2834,"title":{},"body":{"modules/UserModule.html":{}}}],["user.subscriptionplan",{"_index":916,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.subscriptionplan?.includes(subscriptionplan",{"_index":2657,"title":{},"body":{"guards/SubscriptionsGuard.html":{}}}],["user/:id",{"_index":1017,"title":{},"body":{"controllers/BlockController.html":{}}}],["user/:userid/:reportid",{"_index":2448,"title":{},"body":{"controllers/ReportController.html":{}}}],["user/:userid/:reportid')@roles(role.admin",{"_index":2406,"title":{},"body":{"controllers/ReportController.html":{}}}],["user/entities/user.entity",{"_index":380,"title":{},"body":{"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"entities/Appeal.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Block.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"entities/Event.html":{},"entities/EventClue.html":{},"entities/EventGoal.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"entities/Follow.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/Like.html":{},"entities/Memory.html":{},"injectables/MemoryService.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"entities/Scrapbook.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["user/signup",{"_index":795,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/user.module",{"_index":862,"title":{},"body":{"modules/AuthModule.html":{}}}],["user/user.service",{"_index":803,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user\\`(\\`id",{"_index":79,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779204584.html":{}}}],["user_ban",{"_index":125,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["user_report",{"_index":101,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["user_report\\`(\\`id",{"_index":108,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672417201262.html":{}}}],["userban",{"_index":485,"title":{"entities/UserBan.html":{}},"body":{"modules/AppModule.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"entities/UserBan.html":{},"coverage.html":{}}}],["userban.banneduser",{"_index":2737,"title":{},"body":{"entities/User.html":{}}}],["userbanrepository",{"_index":2477,"title":{},"body":{"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["usercontroller",{"_index":2831,"title":{},"body":{"modules/UserModule.html":{},"coverage.html":{}}}],["usereventsandcount[0",{"_index":1454,"title":{},"body":{"injectables/EventService.html":{}}}],["usereventsandcount[1",{"_index":1455,"title":{},"body":{"injectables/EventService.html":{}}}],["userfound",{"_index":1070,"title":{},"body":{"injectables/BlockService.html":{}}}],["userid",{"_index":89,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"injectables/FirebaseStorageService.html":{},"injectables/NotificationService.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["usermemoriesandcount[0",{"_index":1954,"title":{},"body":{"injectables/MemoryService.html":{}}}],["usermemoriesandcount[1",{"_index":1955,"title":{},"body":{"injectables/MemoryService.html":{}}}],["usermodule",{"_index":463,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":528,"title":{},"body":{"modules/AppModule.html":{},"classes/SignUpUserDto.html":{},"entities/User.html":{},"index.html":{}}}],["usernamefield",{"_index":1850,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userpostsandcount[0",{"_index":1971,"title":{},"body":{"injectables/MemoryService.html":{}}}],["userpostsandcount[1",{"_index":1972,"title":{},"body":{"injectables/MemoryService.html":{}}}],["userreport",{"_index":482,"title":{"entities/UserReport.html":{}},"body":{"modules/AppModule.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"entities/User.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["userreport.reportedby",{"_index":2785,"title":{},"body":{"entities/User.html":{}}}],["userreport.reporteduser",{"_index":2787,"title":{},"body":{"entities/User.html":{}}}],["userreportedposts",{"_index":2506,"title":{},"body":{"injectables/ReportService.html":{}}}],["userreportedposts.map((reportedpost",{"_index":2516,"title":{},"body":{"injectables/ReportService.html":{}}}],["userreportedusers",{"_index":2526,"title":{},"body":{"injectables/ReportService.html":{}}}],["userreportedusers.map((reporteduser",{"_index":2532,"title":{},"body":{"injectables/ReportService.html":{}}}],["userreportsandcount[0",{"_index":2551,"title":{},"body":{"injectables/ReportService.html":{}}}],["userreportsandcount[1",{"_index":2552,"title":{},"body":{"injectables/ReportService.html":{}}}],["userreportsrepository",{"_index":2479,"title":{},"body":{"injectables/ReportService.html":{}}}],["userrepository",{"_index":390,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/BlockService.html":{},"injectables/EventService.html":{},"injectables/FeedService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["userrequestingfollow",{"_index":1731,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingfollow.blockedby.map((block",{"_index":1739,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingfollow.following.map((follow",{"_index":1744,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingfollow.followrequestssent.map((followrequest",{"_index":1741,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingfollow.id",{"_index":1738,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingunfollow",{"_index":1778,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingunfollow.following.map((follow",{"_index":1783,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingunfollow.followingcount",{"_index":1786,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingunfollow.id",{"_index":1780,"title":{},"body":{"injectables/FollowService.html":{}}}],["users",{"_index":1496,"title":{},"body":{"injectables/FeedService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"entities/Post.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["users')@roles(role.admin",{"_index":2417,"title":{},"body":{"controllers/ReportController.html":{}}}],["users.length",{"_index":1769,"title":{},"body":{"injectables/FollowService.html":{}}}],["users/${userid}/avatars/${imageid}.png",{"_index":1596,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["users/${userid}/memories/${memoryid}/${imageid}.png",{"_index":1607,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["users/${userid}/posts/${postid}/${imageid}.png",{"_index":1601,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["usersalreadyreported",{"_index":2531,"title":{},"body":{"injectables/ReportService.html":{}}}],["usersalreadyreported.includes(true",{"_index":2534,"title":{},"body":{"injectables/ReportService.html":{}}}],["usersandcount[0",{"_index":2580,"title":{},"body":{"injectables/ReportService.html":{}}}],["usersandcount[0].length",{"_index":2581,"title":{},"body":{"injectables/ReportService.html":{}}}],["userservice",{"_index":802,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersrepository",{"_index":877,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FollowService.html":{},"injectables/NotificationService.html":{}}}],["usersservice",{"_index":879,"title":{},"body":{"injectables/AuthService.html":{}}}],["userstobenotified",{"_index":2049,"title":{},"body":{"injectables/NotificationService.html":{}}}],["userstobenotified.length",{"_index":2054,"title":{},"body":{"injectables/NotificationService.html":{}}}],["userstobenotified.map((user",{"_index":2058,"title":{},"body":{"injectables/NotificationService.html":{}}}],["usertobeblocked",{"_index":1056,"title":{},"body":{"injectables/BlockService.html":{}}}],["usertobeblocked.id",{"_index":1058,"title":{},"body":{"injectables/BlockService.html":{}}}],["usertobefollowed",{"_index":1713,"title":{},"body":{"injectables/FollowService.html":{}}}],["usertobefollowed.id",{"_index":1737,"title":{},"body":{"injectables/FollowService.html":{}}}],["usertobenotified",{"_index":2066,"title":{},"body":{"injectables/NotificationService.html":{}}}],["usertobenotified.fcmtoken",{"_index":2068,"title":{},"body":{"injectables/NotificationService.html":{}}}],["usertobereported",{"_index":2524,"title":{},"body":{"injectables/ReportService.html":{}}}],["usertobereported.id",{"_index":2525,"title":{},"body":{"injectables/ReportService.html":{}}}],["usertobeunblocked",{"_index":1067,"title":{},"body":{"injectables/BlockService.html":{}}}],["usertobeunblocked.id",{"_index":1068,"title":{},"body":{"injectables/BlockService.html":{}}}],["usertobeunfollowed",{"_index":1777,"title":{},"body":{"injectables/FollowService.html":{}}}],["usertobeunfollowed.followerscount",{"_index":1785,"title":{},"body":{"injectables/FollowService.html":{}}}],["usertobeunfollowed.id",{"_index":1779,"title":{},"body":{"injectables/FollowService.html":{}}}],["using",{"_index":773,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["uuid",{"_index":1578,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":1577,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["v4",{"_index":1576,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["valid",{"_index":1753,"title":{},"body":{"injectables/FollowService.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["validate",{"_index":895,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/SignUpUserDto.html":{}}}],["validate(email",{"_index":1845,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1805,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatecaptcharesponse",{"_index":872,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatecaptcharesponse(grecaptcharesponse",{"_index":889,"title":{},"body":{"injectables/AuthService.html":{}}}],["validates",{"_index":1847,"title":{},"body":{"injectables/LocalStrategy.html":{},"classes/SignUpUserDto.html":{}}}],["validateuser",{"_index":873,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":892,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":589,"title":{},"body":{"classes/AppealDto.html":{},"classes/CreateClueDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateEventDto.html":{},"classes/CreateGoalDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"classes/GetProximityEventsDto.html":{},"classes/GetProximityMemoryDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PostAnalyticResposneDto.html":{},"classes/ReportDto.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasswordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"dependencies.html":{}}}],["value",{"_index":22,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1676624523857.html":{},"classes/$npmConfigName1676644288779.html":{},"classes/$npmConfigName1676990992500.html":{},"classes/$npmConfigName1676993098020.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{},"classes/$npmConfigName1678780110507.html":{},"classes/$npmConfigName1678975542609.html":{},"modules/AppModule.html":{},"entities/Appeal.html":{},"injectables/FirebaseStorageService.html":{},"entities/FollowRequest.html":{},"entities/Memory.html":{},"classes/PageOptionsDto.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"injectables/StripeService.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":2125,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["varchar(255",{"_index":43,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779028547.html":{}}}],["varchar(36",{"_index":65,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/$npmConfigName1678779204584.html":{},"classes/$npmConfigName1678780013678.html":{}}}],["variable",{"_index":524,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{}}}],["variables",{"_index":519,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["verification",{"_index":975,"title":{},"body":{"injectables/AuthService.html":{}}}],["verified",{"_index":1825,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["verify",{"_index":1821,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["version",{"_index":1588,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"properties.html":{}}}],["view",{"_index":318,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{}}}],["viewing",{"_index":679,"title":{},"body":{"injectables/AppealsService.html":{}}}],["visibility",{"_index":70,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1676616826310.html":{},"classes/$npmConfigName1678774445242.html":{},"classes/CreateEventDto.html":{},"classes/CreateMemoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"entities/Event.html":{},"injectables/FeedService.html":{},"entities/Memory.html":{},"entities/Post.html":{},"entities/Scrapbook.html":{},"miscellaneous/enumerations.html":{}}}],["visibility.public",{"_index":1506,"title":{},"body":{"injectables/FeedService.html":{}}}],["void",{"_index":322,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/EventController.html":{},"controllers/FeedController.html":{},"controllers/MemoryController.html":{},"controllers/NotificationController.html":{},"controllers/ReportController.html":{}}}],["want",{"_index":1602,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["webhook",{"_index":2141,"title":{},"body":{"controllers/PaymentController.html":{},"index.html":{}}}],["week",{"_index":2558,"title":{},"body":{"injectables/ReportService.html":{}}}],["weight",{"_index":944,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["where('creator.id",{"_index":1458,"title":{},"body":{"injectables/EventService.html":{}}}],["where('email",{"_index":907,"title":{},"body":{"injectables/AuthService.html":{}}}],["where('id",{"_index":1948,"title":{},"body":{"injectables/MemoryService.html":{},"injectables/ReportService.html":{}}}],["where('memory.id",{"_index":1957,"title":{},"body":{"injectables/MemoryService.html":{}}}],["where('participants.id",{"_index":1450,"title":{},"body":{"injectables/EventService.html":{}}}],["where('postreport.reportedpost.id",{"_index":2540,"title":{},"body":{"injectables/ReportService.html":{}}}],["where('postreport.status",{"_index":2568,"title":{},"body":{"injectables/ReportService.html":{}}}],["where('stripecustomerid",{"_index":2262,"title":{},"body":{"injectables/PaymentService.html":{}}}],["where('user.id",{"_index":1969,"title":{},"body":{"injectables/MemoryService.html":{}}}],["where('userreport.reporteduser.id",{"_index":2548,"title":{},"body":{"injectables/ReportService.html":{}}}],["where('userreport.status",{"_index":2575,"title":{},"body":{"injectables/ReportService.html":{}}}],["white",{"_index":961,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["whose",{"_index":2686,"title":{},"body":{"injectables/TasksService.html":{}}}],["within",{"_index":1366,"title":{},"body":{"injectables/EventService.html":{}}}],["world",{"_index":555,"title":{},"body":{"injectables/AppService.html":{}}}],["xtkhgxenvq",{"_index":2217,"title":{},"body":{"injectables/PaymentService.html":{}}}],["yourself",{"_index":1059,"title":{},"body":{"injectables/BlockService.html":{},"injectables/FollowService.html":{},"injectables/ReportService.html":{}}}],["zoom",{"_index":372,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/EventModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/MemoryModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/$npmConfigName1672082558971.html":{"url":"classes/$npmConfigName1672082558971.html","title":"class - $npmConfigName1672082558971","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672082558971\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672082558971-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672082558971'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672082558971-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672082558971-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672082558971-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672082558971 implements MigrationInterface {\n    name = '$npmConfigName1672082558971'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`roles\\` varchar(255) NOT NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`roles\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672082713679.html":{"url":"classes/$npmConfigName1672082713679.html","title":"class - $npmConfigName1672082713679","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672082713679\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672082713679-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672082713679'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672082713679-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672082713679-$npm_config_name.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672082713679-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672082713679 implements MigrationInterface {\n    name = '$npmConfigName1672082713679'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`roles\\` \\`role\\` varchar(255) NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`role\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`role\\` varchar(255) NOT NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`role\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`role\\` varchar(255) NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`role\\` \\`roles\\` varchar(255) NOT NULL`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672133224744.html":{"url":"classes/$npmConfigName1672133224744.html","title":"class - $npmConfigName1672133224744","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672133224744\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672133224744-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672133224744'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672133224744-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672133224744-$npm_config_name.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672133224744-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672133224744 implements MigrationInterface {\n    name = '$npmConfigName1672133224744'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`post\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`caption\\` varchar(255) NOT NULL, \\`imageUrl\\` varchar(255) NOT NULL, \\`tag\\` varchar(255) NOT NULL, \\`type\\` varchar(255) NOT NULL, \\`location\\` varchar(255) NOT NULL, \\`visibility\\` varchar(255) NOT NULL, \\`postedById\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_fb7ffd0860cbcc5cf22c96d3c05\\` FOREIGN KEY (\\`postedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_fb7ffd0860cbcc5cf22c96d3c05\\``);\n        await queryRunner.query(`DROP TABLE \\`post\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672166137042.html":{"url":"classes/$npmConfigName1672166137042.html","title":"class - $npmConfigName1672166137042","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672166137042\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672166137042-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672166137042'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672166137042-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672166137042-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672166137042-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672166137042 implements MigrationInterface {\n    name = '$npmConfigName1672166137042'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` CHANGE \\`imageUrl\\` \\`imageUrl\\` varchar(255) NOT NULL DEFAULT ''`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` CHANGE \\`imageUrl\\` \\`imageUrl\\` varchar(255) NOT NULL`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672251740346.html":{"url":"classes/$npmConfigName1672251740346.html","title":"class - $npmConfigName1672251740346","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672251740346\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672251740346-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672251740346'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672251740346-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672251740346-$npm_config_name.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672251740346-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672251740346 implements MigrationInterface {\n    name = '$npmConfigName1672251740346'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`scrapbook\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`caption\\` varchar(255) NOT NULL, \\`location\\` varchar(255) NOT NULL, \\`visibility\\` varchar(255) NOT NULL, \\`userId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`scrapbookId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`scrapbook\\` ADD CONSTRAINT \\`FK_b5db9533f87c9bc26bbb8ed3d06\\` FOREIGN KEY (\\`userId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_baa1c30b37f90c0df2e56257f16\\` FOREIGN KEY (\\`scrapbookId\\`) REFERENCES \\`scrapbook\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_baa1c30b37f90c0df2e56257f16\\``);\n        await queryRunner.query(`ALTER TABLE \\`scrapbook\\` DROP FOREIGN KEY \\`FK_b5db9533f87c9bc26bbb8ed3d06\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`scrapbookId\\``);\n        await queryRunner.query(`DROP TABLE \\`scrapbook\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672388811259.html":{"url":"classes/$npmConfigName1672388811259.html","title":"class - $npmConfigName1672388811259","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672388811259\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672388811259-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672388811259'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672388811259-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672388811259-$npm_config_name.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672388811259-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672388811259 implements MigrationInterface {\n    name = '$npmConfigName1672388811259'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`post_report\\` (\\`id\\` varchar(36) NOT NULL, \\`status\\` varchar(255) NOT NULL, \\`reason\\` varchar(255) NOT NULL, \\`reportedById\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`user_report\\` (\\`id\\` varchar(36) NOT NULL, \\`status\\` varchar(255) NOT NULL, \\`reason\\` varchar(255) NOT NULL, \\`reportedById\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`reportsAgainstId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`reportsAgainstId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD CONSTRAINT \\`FK_929dcdf74558612cc6166981480\\` FOREIGN KEY (\\`reportedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_aea779e51a733247bccf1f61d9a\\` FOREIGN KEY (\\`reportsAgainstId\\`) REFERENCES \\`post_report\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD CONSTRAINT \\`FK_2e595b9d3a37e4b72879dddb5ce\\` FOREIGN KEY (\\`reportedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD CONSTRAINT \\`FK_22b6df8103e450a49ea0f9ff939\\` FOREIGN KEY (\\`reportsAgainstId\\`) REFERENCES \\`user_report\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP FOREIGN KEY \\`FK_22b6df8103e450a49ea0f9ff939\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP FOREIGN KEY \\`FK_2e595b9d3a37e4b72879dddb5ce\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_aea779e51a733247bccf1f61d9a\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP FOREIGN KEY \\`FK_929dcdf74558612cc6166981480\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`reportsAgainstId\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`reportsAgainstId\\``);\n        await queryRunner.query(`DROP TABLE \\`user_report\\``);\n        await queryRunner.query(`DROP TABLE \\`post_report\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672399737695.html":{"url":"classes/$npmConfigName1672399737695.html","title":"class - $npmConfigName1672399737695","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672399737695\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672399737695-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672399737695'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672399737695-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672399737695-$npm_config_name.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672399737695-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672399737695 implements MigrationInterface {\n    name = '$npmConfigName1672399737695'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_aea779e51a733247bccf1f61d9a\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`reportsAgainstId\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD \\`reportedPostId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` CHANGE \\`status\\` \\`status\\` varchar(255) NOT NULL DEFAULT 'pending review'`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD CONSTRAINT \\`FK_a9aad25ed05e8f5a9dffbc17a4a\\` FOREIGN KEY (\\`reportedPostId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP FOREIGN KEY \\`FK_a9aad25ed05e8f5a9dffbc17a4a\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` CHANGE \\`status\\` \\`status\\` varchar(255) NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP COLUMN \\`reportedPostId\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`reportsAgainstId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_aea779e51a733247bccf1f61d9a\\` FOREIGN KEY (\\`reportsAgainstId\\`) REFERENCES \\`post_report\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672417201262.html":{"url":"classes/$npmConfigName1672417201262.html","title":"class - $npmConfigName1672417201262","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672417201262\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672417201262-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672417201262'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672417201262-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672417201262-$npm_config_name.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672417201262-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672417201262 implements MigrationInterface {\n    name = '$npmConfigName1672417201262'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP FOREIGN KEY \\`FK_22b6df8103e450a49ea0f9ff939\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`reportsAgainstId\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD \\`reportedUserId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD CONSTRAINT \\`FK_2d3711064572aa0203cba01242b\\` FOREIGN KEY (\\`reportedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP FOREIGN KEY \\`FK_2d3711064572aa0203cba01242b\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP COLUMN \\`reportedUserId\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`reportsAgainstId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD CONSTRAINT \\`FK_22b6df8103e450a49ea0f9ff939\\` FOREIGN KEY (\\`reportsAgainstId\\`) REFERENCES \\`user_report\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672417384470.html":{"url":"classes/$npmConfigName1672417384470.html","title":"class - $npmConfigName1672417384470","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672417384470\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672417384470-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672417384470'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672417384470-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672417384470-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672417384470-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672417384470 implements MigrationInterface {\n    name = '$npmConfigName1672417384470'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` CHANGE \\`status\\` \\`status\\` varchar(255) NOT NULL DEFAULT 'pending review'`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` CHANGE \\`status\\` \\`status\\` varchar(255) NOT NULL`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672576067204.html":{"url":"classes/$npmConfigName1672576067204.html","title":"class - $npmConfigName1672576067204","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672576067204\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672576067204-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672576067204'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672576067204-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672576067204-$npm_config_name.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672576067204-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672576067204 implements MigrationInterface {\n    name = '$npmConfigName1672576067204'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`user_ban\\` (\\`id\\` varchar(36) NOT NULL, \\`status\\` varchar(255) NOT NULL DEFAULT 'active', \\`startDate\\` datetime NOT NULL, \\`endDate\\` datetime NOT NULL, \\`bannedUserId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` ADD CONSTRAINT \\`FK_43cb4b8de8f8cfa4fd2857369c2\\` FOREIGN KEY (\\`bannedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` DROP FOREIGN KEY \\`FK_43cb4b8de8f8cfa4fd2857369c2\\``);\n        await queryRunner.query(`DROP TABLE \\`user_ban\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672585305519.html":{"url":"classes/$npmConfigName1672585305519.html","title":"class - $npmConfigName1672585305519","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672585305519\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672585305519-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672585305519'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672585305519-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672585305519-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672585305519-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672585305519 implements MigrationInterface {\n    name = '$npmConfigName1672585305519'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`isTakenDown\\` tinyint NOT NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`isTakenDown\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672600378154.html":{"url":"classes/$npmConfigName1672600378154.html","title":"class - $npmConfigName1672600378154","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672600378154\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672600378154-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672600378154'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672600378154-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672600378154-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672600378154-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672600378154 implements MigrationInterface {\n    name = '$npmConfigName1672600378154'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`gender\\` varchar(255) NOT NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`gender\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672678196724.html":{"url":"classes/$npmConfigName1672678196724.html","title":"class - $npmConfigName1672678196724","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672678196724\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672678196724-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672678196724'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672678196724-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672678196724-$npm_config_name.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672678196724-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672678196724 implements MigrationInterface {\n    name = '$npmConfigName1672678196724'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`isTakenDown\\` tinyint NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`gender\\` \\`gender\\` varchar(255) NOT NULL DEFAULT 'undefined'`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`gender\\` \\`gender\\` varchar(255) NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`isTakenDown\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672744437528.html":{"url":"classes/$npmConfigName1672744437528.html","title":"class - $npmConfigName1672744437528","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672744437528\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672744437528-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672744437528'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672744437528-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672744437528-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672744437528-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672744437528 implements MigrationInterface {\n    name = '$npmConfigName1672744437528'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`profilePictureUrl\\` varchar(255) NOT NULL DEFAULT 'https://firebasestorage.googleapis.com/v0/b/atlas-6183a.appspot.com/o/Avatars%2FAvatars%2FdefaultImage.png?alt=media&token=4482a7ff-450d-4bf8-a4d7-8b4a1a6ebbd2'`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`profilePictureUrl\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672760070076.html":{"url":"classes/$npmConfigName1672760070076.html","title":"class - $npmConfigName1672760070076","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672760070076\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672760070076-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672760070076'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672760070076-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672760070076-$npm_config_name.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672760070076-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672760070076 implements MigrationInterface {\n    name = '$npmConfigName1672760070076'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`profilePictureExpiryDate\\` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`profilePictureUrl\\` \\`profilePictureUrl\\` varchar(255) NOT NULL DEFAULT ''`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`profilePictureUrl\\` \\`profilePictureUrl\\` varchar(255) NOT NULL DEFAULT 'https://firebasestorage.googleapis.com/v0/b/atlas-6183a.appspot.com/o/Avatars%2FAvatars%2FdefaultImage.png?alt=media&token=4482a7ff-450d-4bf8-a4d7-8b4a1a6ebbd2'`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`profilePictureExpiryDate\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672832148243.html":{"url":"classes/$npmConfigName1672832148243.html","title":"class - $npmConfigName1672832148243","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672832148243\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672832148243-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672832148243'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672832148243-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672832148243-$npm_config_name.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672832148243-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672832148243 implements MigrationInterface {\n    name = '$npmConfigName1672832148243'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`imageId\\` varchar(255) NOT NULL DEFAULT ''`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`imageExpiryDate\\` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`imageUrl\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`imageUrl\\` longtext NOT NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`imageUrl\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`imageUrl\\` varchar(255) NOT NULL DEFAULT ''`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`imageExpiryDate\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`imageId\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672833410692.html":{"url":"classes/$npmConfigName1672833410692.html","title":"class - $npmConfigName1672833410692","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672833410692\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672833410692-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672833410692'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672833410692-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672833410692-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672833410692-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672833410692 implements MigrationInterface {\n    name = '$npmConfigName1672833410692'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` CHANGE \\`isTakenDown\\` \\`isTakenDown\\` tinyint NOT NULL DEFAULT 0`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` CHANGE \\`isTakenDown\\` \\`isTakenDown\\` tinyint NOT NULL`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673022319464.html":{"url":"classes/$npmConfigName1673022319464.html","title":"class - $npmConfigName1673022319464","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673022319464\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673022319464-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673022319464'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673022319464-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673022319464-$npm_config_name.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673022319464-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673022319464 implements MigrationInterface {\n    name = '$npmConfigName1673022319464'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`comment\\` (\\`id\\` varchar(36) NOT NULL, \\`text\\` varchar(255) NOT NULL, \\`authorId\\` varchar(36) NULL, \\`postId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD CONSTRAINT \\`FK_276779da446413a0d79598d4fbd\\` FOREIGN KEY (\\`authorId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD CONSTRAINT \\`FK_94a85bb16d24033a2afdd5df060\\` FOREIGN KEY (\\`postId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP FOREIGN KEY \\`FK_94a85bb16d24033a2afdd5df060\\``);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP FOREIGN KEY \\`FK_276779da446413a0d79598d4fbd\\``);\n        await queryRunner.query(`DROP TABLE \\`comment\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673025398979.html":{"url":"classes/$npmConfigName1673025398979.html","title":"class - $npmConfigName1673025398979","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673025398979\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673025398979-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673025398979'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673025398979-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673025398979-$npm_config_name.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673025398979-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673025398979 implements MigrationInterface {\n    name = '$npmConfigName1673025398979'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)`);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP COLUMN \\`updatedAt\\``);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP COLUMN \\`createdAt\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673027114310.html":{"url":"classes/$npmConfigName1673027114310.html","title":"class - $npmConfigName1673027114310","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673027114310\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673027114310-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673027114310'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673027114310-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673027114310-$npm_config_name.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673027114310-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673027114310 implements MigrationInterface {\n    name = '$npmConfigName1673027114310'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP FOREIGN KEY \\`FK_94a85bb16d24033a2afdd5df060\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP FOREIGN KEY \\`FK_a9aad25ed05e8f5a9dffbc17a4a\\``);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD CONSTRAINT \\`FK_94a85bb16d24033a2afdd5df060\\` FOREIGN KEY (\\`postId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD CONSTRAINT \\`FK_a9aad25ed05e8f5a9dffbc17a4a\\` FOREIGN KEY (\\`reportedPostId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP FOREIGN KEY \\`FK_a9aad25ed05e8f5a9dffbc17a4a\\``);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP FOREIGN KEY \\`FK_94a85bb16d24033a2afdd5df060\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD CONSTRAINT \\`FK_a9aad25ed05e8f5a9dffbc17a4a\\` FOREIGN KEY (\\`reportedPostId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD CONSTRAINT \\`FK_94a85bb16d24033a2afdd5df060\\` FOREIGN KEY (\\`postId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673177373733.html":{"url":"classes/$npmConfigName1673177373733.html","title":"class - $npmConfigName1673177373733","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673177373733\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673177373733-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673177373733'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673177373733-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673177373733-$npm_config_name.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673177373733-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673177373733 implements MigrationInterface {\n    name = '$npmConfigName1673177373733'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)`);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` ADD \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)`);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` ADD \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` DROP COLUMN \\`updatedAt\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` DROP COLUMN \\`createdAt\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP COLUMN \\`updatedAt\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP COLUMN \\`createdAt\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP COLUMN \\`updatedAt\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP COLUMN \\`createdAt\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673337064308.html":{"url":"classes/$npmConfigName1673337064308.html","title":"class - $npmConfigName1673337064308","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673337064308\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673337064308-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673337064308'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673337064308-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673337064308-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673337064308-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673337064308 implements MigrationInterface {\n    name = '$npmConfigName1673337064308'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`address\\` \\`address\\` varchar(255) NOT NULL DEFAULT ''`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`address\\` \\`address\\` varchar(255) NOT NULL`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673770456243.html":{"url":"classes/$npmConfigName1673770456243.html","title":"class - $npmConfigName1673770456243","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673770456243\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673770456243-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673770456243'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673770456243-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673770456243-$npm_config_name.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673770456243-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673770456243 implements MigrationInterface {\n    name = '$npmConfigName1673770456243'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`appeal\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`status\\` varchar(255) NOT NULL DEFAULT 'pending review', \\`reportReason\\` varchar(255) NOT NULL, \\`text\\` varchar(255) NOT NULL, \\`appealedPostId\\` varchar(36) NULL, \\`appealedById\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` ADD CONSTRAINT \\`FK_7b9ec6db412ee31e791072faf29\\` FOREIGN KEY (\\`appealedPostId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` ADD CONSTRAINT \\`FK_f975f729d8f811976339e642f1b\\` FOREIGN KEY (\\`appealedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` DROP FOREIGN KEY \\`FK_f975f729d8f811976339e642f1b\\``);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` DROP FOREIGN KEY \\`FK_7b9ec6db412ee31e791072faf29\\``);\n        await queryRunner.query(`DROP TABLE \\`appeal\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673847605869.html":{"url":"classes/$npmConfigName1673847605869.html","title":"class - $npmConfigName1673847605869","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673847605869\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673847605869-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673847605869'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673847605869-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673847605869-$npm_config_name.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673847605869-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673847605869 implements MigrationInterface {\n    name = '$npmConfigName1673847605869'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`block\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`blockingUserId\\` varchar(36) NULL, \\`blockedUserId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`block\\` ADD CONSTRAINT \\`FK_cac6c15bcaa655e31e86e48f59a\\` FOREIGN KEY (\\`blockingUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`block\\` ADD CONSTRAINT \\`FK_c9a8df2f7cbbae1cda940694409\\` FOREIGN KEY (\\`blockedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`block\\` DROP FOREIGN KEY \\`FK_c9a8df2f7cbbae1cda940694409\\``);\n        await queryRunner.query(`ALTER TABLE \\`block\\` DROP FOREIGN KEY \\`FK_cac6c15bcaa655e31e86e48f59a\\``);\n        await queryRunner.query(`DROP TABLE \\`block\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673974513613.html":{"url":"classes/$npmConfigName1673974513613.html","title":"class - $npmConfigName1673974513613","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673974513613\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673974513613-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673974513613'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673974513613-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673974513613-$npm_config_name.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673974513613-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673974513613 implements MigrationInterface {\n    name = '$npmConfigName1673974513613'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`follow\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`followedById\\` varchar(36) NULL, \\`followedId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`follow_request\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`status\\` varchar(255) NOT NULL DEFAULT 'pending', \\`requestedById\\` varchar(36) NULL, \\`requestedUserId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` ADD CONSTRAINT \\`FK_c2159058051b11b2f9bb1b36983\\` FOREIGN KEY (\\`followedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` ADD CONSTRAINT \\`FK_f4a9d59861c87ba252ead40d84d\\` FOREIGN KEY (\\`followedId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` ADD CONSTRAINT \\`FK_7c5f8647272441265e4c2e61071\\` FOREIGN KEY (\\`requestedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` ADD CONSTRAINT \\`FK_37ecc4fc7d8451a768b704c43e0\\` FOREIGN KEY (\\`requestedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` DROP FOREIGN KEY \\`FK_37ecc4fc7d8451a768b704c43e0\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` DROP FOREIGN KEY \\`FK_7c5f8647272441265e4c2e61071\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` DROP FOREIGN KEY \\`FK_f4a9d59861c87ba252ead40d84d\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` DROP FOREIGN KEY \\`FK_c2159058051b11b2f9bb1b36983\\``);\n        await queryRunner.query(`DROP TABLE \\`follow_request\\``);\n        await queryRunner.query(`DROP TABLE \\`follow\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674121256550.html":{"url":"classes/$npmConfigName1674121256550.html","title":"class - $npmConfigName1674121256550","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674121256550\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674121256550-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674121256550'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674121256550-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674121256550-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674121256550-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674121256550 implements MigrationInterface {\n    name = '$npmConfigName1674121256550'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`fcmToken\\` varchar(255) NOT NULL DEFAULT ''`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`fcmToken\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674198387677.html":{"url":"classes/$npmConfigName1674198387677.html","title":"class - $npmConfigName1674198387677","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674198387677\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674198387677-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674198387677'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674198387677-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674198387677-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674198387677-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674198387677 implements MigrationInterface {\n    name = '$npmConfigName1674198387677'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`notificationPreference\\` varchar(255) NOT NULL DEFAULT 'all'`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`notificationPreference\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674453163372.html":{"url":"classes/$npmConfigName1674453163372.html","title":"class - $npmConfigName1674453163372","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674453163372\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674453163372-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674453163372'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674453163372-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674453163372-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674453163372-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674453163372 implements MigrationInterface {\n    name = '$npmConfigName1674453163372'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`isBanned\\` tinyint NOT NULL DEFAULT 0`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`isBanned\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674486373359.html":{"url":"classes/$npmConfigName1674486373359.html","title":"class - $npmConfigName1674486373359","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674486373359\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674486373359-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674486373359'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674486373359-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674486373359-$npm_config_name.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674486373359-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674486373359 implements MigrationInterface {\n    name = '$npmConfigName1674486373359'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`like\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`likedPostId\\` varchar(36) NULL, \\`likedById\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`like\\` ADD CONSTRAINT \\`FK_288f29161615bed72435a2f90ee\\` FOREIGN KEY (\\`likedPostId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`like\\` ADD CONSTRAINT \\`FK_48750d6b207c4bd82d30c5dd722\\` FOREIGN KEY (\\`likedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`like\\` DROP FOREIGN KEY \\`FK_48750d6b207c4bd82d30c5dd722\\``);\n        await queryRunner.query(`ALTER TABLE \\`like\\` DROP FOREIGN KEY \\`FK_288f29161615bed72435a2f90ee\\``);\n        await queryRunner.query(`DROP TABLE \\`like\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674487677914.html":{"url":"classes/$npmConfigName1674487677914.html","title":"class - $npmConfigName1674487677914","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674487677914\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674487677914-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674487677914'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674487677914-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674487677914-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674487677914-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674487677914 implements MigrationInterface {\n    name = '$npmConfigName1674487677914'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`likesCount\\` int NOT NULL DEFAULT '0'`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`likesCount\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674493007150.html":{"url":"classes/$npmConfigName1674493007150.html","title":"class - $npmConfigName1674493007150","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674493007150\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674493007150-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674493007150'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674493007150-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674493007150-$npm_config_name.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674493007150-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674493007150 implements MigrationInterface {\n    name = '$npmConfigName1674493007150'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`scrapbook\\` DROP FOREIGN KEY \\`FK_b5db9533f87c9bc26bbb8ed3d06\\``);\n        await queryRunner.query(`ALTER TABLE \\`like\\` DROP FOREIGN KEY \\`FK_48750d6b207c4bd82d30c5dd722\\``);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP FOREIGN KEY \\`FK_276779da446413a0d79598d4fbd\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP FOREIGN KEY \\`FK_929dcdf74558612cc6166981480\\``);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` DROP FOREIGN KEY \\`FK_f975f729d8f811976339e642f1b\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_fb7ffd0860cbcc5cf22c96d3c05\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP FOREIGN KEY \\`FK_2d3711064572aa0203cba01242b\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP FOREIGN KEY \\`FK_2e595b9d3a37e4b72879dddb5ce\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` DROP FOREIGN KEY \\`FK_43cb4b8de8f8cfa4fd2857369c2\\``);\n        await queryRunner.query(`ALTER TABLE \\`block\\` DROP FOREIGN KEY \\`FK_c9a8df2f7cbbae1cda940694409\\``);\n        await queryRunner.query(`ALTER TABLE \\`block\\` DROP FOREIGN KEY \\`FK_cac6c15bcaa655e31e86e48f59a\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` DROP FOREIGN KEY \\`FK_c2159058051b11b2f9bb1b36983\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` DROP FOREIGN KEY \\`FK_f4a9d59861c87ba252ead40d84d\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` DROP FOREIGN KEY \\`FK_37ecc4fc7d8451a768b704c43e0\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` DROP FOREIGN KEY \\`FK_7c5f8647272441265e4c2e61071\\``);\n        await queryRunner.query(`ALTER TABLE \\`scrapbook\\` ADD CONSTRAINT \\`FK_b5db9533f87c9bc26bbb8ed3d06\\` FOREIGN KEY (\\`userId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`like\\` ADD CONSTRAINT \\`FK_48750d6b207c4bd82d30c5dd722\\` FOREIGN KEY (\\`likedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD CONSTRAINT \\`FK_276779da446413a0d79598d4fbd\\` FOREIGN KEY (\\`authorId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD CONSTRAINT \\`FK_929dcdf74558612cc6166981480\\` FOREIGN KEY (\\`reportedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` ADD CONSTRAINT \\`FK_f975f729d8f811976339e642f1b\\` FOREIGN KEY (\\`appealedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_fb7ffd0860cbcc5cf22c96d3c05\\` FOREIGN KEY (\\`postedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD CONSTRAINT \\`FK_2d3711064572aa0203cba01242b\\` FOREIGN KEY (\\`reportedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD CONSTRAINT \\`FK_2e595b9d3a37e4b72879dddb5ce\\` FOREIGN KEY (\\`reportedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` ADD CONSTRAINT \\`FK_43cb4b8de8f8cfa4fd2857369c2\\` FOREIGN KEY (\\`bannedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`block\\` ADD CONSTRAINT \\`FK_cac6c15bcaa655e31e86e48f59a\\` FOREIGN KEY (\\`blockingUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`block\\` ADD CONSTRAINT \\`FK_c9a8df2f7cbbae1cda940694409\\` FOREIGN KEY (\\`blockedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` ADD CONSTRAINT \\`FK_c2159058051b11b2f9bb1b36983\\` FOREIGN KEY (\\`followedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` ADD CONSTRAINT \\`FK_f4a9d59861c87ba252ead40d84d\\` FOREIGN KEY (\\`followedId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` ADD CONSTRAINT \\`FK_7c5f8647272441265e4c2e61071\\` FOREIGN KEY (\\`requestedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` ADD CONSTRAINT \\`FK_37ecc4fc7d8451a768b704c43e0\\` FOREIGN KEY (\\`requestedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` DROP FOREIGN KEY \\`FK_37ecc4fc7d8451a768b704c43e0\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` DROP FOREIGN KEY \\`FK_7c5f8647272441265e4c2e61071\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` DROP FOREIGN KEY \\`FK_f4a9d59861c87ba252ead40d84d\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` DROP FOREIGN KEY \\`FK_c2159058051b11b2f9bb1b36983\\``);\n        await queryRunner.query(`ALTER TABLE \\`block\\` DROP FOREIGN KEY \\`FK_c9a8df2f7cbbae1cda940694409\\``);\n        await queryRunner.query(`ALTER TABLE \\`block\\` DROP FOREIGN KEY \\`FK_cac6c15bcaa655e31e86e48f59a\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` DROP FOREIGN KEY \\`FK_43cb4b8de8f8cfa4fd2857369c2\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP FOREIGN KEY \\`FK_2e595b9d3a37e4b72879dddb5ce\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP FOREIGN KEY \\`FK_2d3711064572aa0203cba01242b\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_fb7ffd0860cbcc5cf22c96d3c05\\``);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` DROP FOREIGN KEY \\`FK_f975f729d8f811976339e642f1b\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP FOREIGN KEY \\`FK_929dcdf74558612cc6166981480\\``);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP FOREIGN KEY \\`FK_276779da446413a0d79598d4fbd\\``);\n        await queryRunner.query(`ALTER TABLE \\`like\\` DROP FOREIGN KEY \\`FK_48750d6b207c4bd82d30c5dd722\\``);\n        await queryRunner.query(`ALTER TABLE \\`scrapbook\\` DROP FOREIGN KEY \\`FK_b5db9533f87c9bc26bbb8ed3d06\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` ADD CONSTRAINT \\`FK_7c5f8647272441265e4c2e61071\\` FOREIGN KEY (\\`requestedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` ADD CONSTRAINT \\`FK_37ecc4fc7d8451a768b704c43e0\\` FOREIGN KEY (\\`requestedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` ADD CONSTRAINT \\`FK_f4a9d59861c87ba252ead40d84d\\` FOREIGN KEY (\\`followedId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` ADD CONSTRAINT \\`FK_c2159058051b11b2f9bb1b36983\\` FOREIGN KEY (\\`followedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`block\\` ADD CONSTRAINT \\`FK_cac6c15bcaa655e31e86e48f59a\\` FOREIGN KEY (\\`blockingUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`block\\` ADD CONSTRAINT \\`FK_c9a8df2f7cbbae1cda940694409\\` FOREIGN KEY (\\`blockedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` ADD CONSTRAINT \\`FK_43cb4b8de8f8cfa4fd2857369c2\\` FOREIGN KEY (\\`bannedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD CONSTRAINT \\`FK_2e595b9d3a37e4b72879dddb5ce\\` FOREIGN KEY (\\`reportedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD CONSTRAINT \\`FK_2d3711064572aa0203cba01242b\\` FOREIGN KEY (\\`reportedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_fb7ffd0860cbcc5cf22c96d3c05\\` FOREIGN KEY (\\`postedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` ADD CONSTRAINT \\`FK_f975f729d8f811976339e642f1b\\` FOREIGN KEY (\\`appealedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD CONSTRAINT \\`FK_929dcdf74558612cc6166981480\\` FOREIGN KEY (\\`reportedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD CONSTRAINT \\`FK_276779da446413a0d79598d4fbd\\` FOREIGN KEY (\\`authorId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`like\\` ADD CONSTRAINT \\`FK_48750d6b207c4bd82d30c5dd722\\` FOREIGN KEY (\\`likedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`scrapbook\\` ADD CONSTRAINT \\`FK_b5db9533f87c9bc26bbb8ed3d06\\` FOREIGN KEY (\\`userId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674544597118.html":{"url":"classes/$npmConfigName1674544597118.html","title":"class - $npmConfigName1674544597118","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674544597118\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674544597118-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674544597118'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674544597118-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674544597118-$npm_config_name.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674544597118-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674544597118 implements MigrationInterface {\n    name = '$npmConfigName1674544597118'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`hasStripAccount\\` tinyint NOT NULL DEFAULT 0`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`stripeCustomerId\\` varchar(255) NOT NULL DEFAULT ''`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`subscriptionPlan\\` varchar(255) NOT NULL DEFAULT 'Basic'`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`subscriptionPlan\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`stripeCustomerId\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`hasStripAccount\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1675177507147.html":{"url":"classes/$npmConfigName1675177507147.html","title":"class - $npmConfigName1675177507147","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1675177507147\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1675177507147-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1675177507147'\n                    \n                \n                    \n                        \n                                Defined in migrations/1675177507147-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1675177507147-$npm_config_name.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1675177507147-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1675177507147 implements MigrationInterface {\n    name = '$npmConfigName1675177507147'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`followersCount\\` int NOT NULL DEFAULT '0'`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`followingCount\\` int NOT NULL DEFAULT '0'`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`bio\\` varchar(255) NOT NULL DEFAULT ''`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`bio\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`followingCount\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`followersCount\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1676616826310.html":{"url":"classes/$npmConfigName1676616826310.html","title":"class - $npmConfigName1676616826310","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1676616826310\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1676616826310-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1676616826310'\n                    \n                \n                    \n                        \n                                Defined in migrations/1676616826310-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1676616826310-$npm_config_name.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1676616826310-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1676616826310 implements MigrationInterface {\n    name = '$npmConfigName1676616826310'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`memory\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`location\\` varchar(255) NOT NULL, \\`latitude\\` int NOT NULL, \\`longitude\\` int NOT NULL, \\`visibility\\` varchar(255) NOT NULL, \\`imageUrl\\` longtext NOT NULL, \\`imageId\\` varchar(255) NOT NULL DEFAULT '', \\`imageExpiryDate\\` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, \\`userId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`memory\\` ADD CONSTRAINT \\`FK_fc71562e9a53841973da0dde326\\` FOREIGN KEY (\\`userId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`memory\\` DROP FOREIGN KEY \\`FK_fc71562e9a53841973da0dde326\\``);\n        await queryRunner.query(`DROP TABLE \\`memory\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1676624523857.html":{"url":"classes/$npmConfigName1676624523857.html","title":"class - $npmConfigName1676624523857","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1676624523857\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1676624523857-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1676624523857'\n                    \n                \n                    \n                        \n                                Defined in migrations/1676624523857-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1676624523857-$npm_config_name.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1676624523857-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1676624523857 implements MigrationInterface {\n    name = '$npmConfigName1676624523857'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`memory\\` DROP COLUMN \\`latitude\\``);\n        await queryRunner.query(`ALTER TABLE \\`memory\\` ADD \\`latitude\\` decimal(8,6) NOT NULL DEFAULT '0.000000'`);\n        await queryRunner.query(`ALTER TABLE \\`memory\\` DROP COLUMN \\`longitude\\``);\n        await queryRunner.query(`ALTER TABLE \\`memory\\` ADD \\`longitude\\` decimal(8,6) NOT NULL DEFAULT '0.000000'`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`memory\\` DROP COLUMN \\`longitude\\``);\n        await queryRunner.query(`ALTER TABLE \\`memory\\` ADD \\`longitude\\` int NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \\`memory\\` DROP COLUMN \\`latitude\\``);\n        await queryRunner.query(`ALTER TABLE \\`memory\\` ADD \\`latitude\\` int NOT NULL`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1676644288779.html":{"url":"classes/$npmConfigName1676644288779.html","title":"class - $npmConfigName1676644288779","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1676644288779\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1676644288779-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1676644288779'\n                    \n                \n                    \n                        \n                                Defined in migrations/1676644288779-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1676644288779-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1676644288779-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1676644288779 implements MigrationInterface {\n    name = '$npmConfigName1676644288779'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`memory\\` ADD \\`geoPoint\\` point NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`memory\\` DROP COLUMN \\`geoPoint\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1676990992500.html":{"url":"classes/$npmConfigName1676990992500.html","title":"class - $npmConfigName1676990992500","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1676990992500\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1676990992500-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1676990992500'\n                    \n                \n                    \n                        \n                                Defined in migrations/1676990992500-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1676990992500-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1676990992500-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1676990992500 implements MigrationInterface {\n    name = '$npmConfigName1676990992500'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`memory\\` ADD \\`geoPoint\\` geometry NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`memory\\` DROP COLUMN \\`geoPoint\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1676993098020.html":{"url":"classes/$npmConfigName1676993098020.html","title":"class - $npmConfigName1676993098020","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1676993098020\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1676993098020-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1676993098020'\n                    \n                \n                    \n                        \n                                Defined in migrations/1676993098020-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1676993098020-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1676993098020-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1676993098020 implements MigrationInterface {\n    name = '$npmConfigName1676993098020'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`memory\\` DROP COLUMN \\`geoPoint\\``);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`memory\\` ADD \\`geoPoint\\` geometry NULL`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1678774445242.html":{"url":"classes/$npmConfigName1678774445242.html","title":"class - $npmConfigName1678774445242","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1678774445242\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1678774445242-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1678774445242'\n                    \n                \n                    \n                        \n                                Defined in migrations/1678774445242-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1678774445242-$npm_config_name.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1678774445242-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1678774445242 implements MigrationInterface {\n    name = '$npmConfigName1678774445242'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`event_clue\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`text\\` varchar(255) NOT NULL, \\`latitude\\` decimal(8,6) NOT NULL DEFAULT '0.000000', \\`longitude\\` decimal(8,6) NOT NULL DEFAULT '0.000000', \\`imageUrl\\` longtext NOT NULL, \\`imageId\\` varchar(255) NOT NULL DEFAULT '', \\`imageExpiryDate\\` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, \\`eventId\\` varchar(36) NULL, \\`creatorId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`event_goal\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`text\\` varchar(255) NOT NULL, \\`latitude\\` decimal(8,6) NOT NULL DEFAULT '0.000000', \\`longitude\\` decimal(8,6) NOT NULL DEFAULT '0.000000', \\`imageUrl\\` longtext NOT NULL, \\`imageId\\` varchar(255) NOT NULL DEFAULT '', \\`imageExpiryDate\\` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, \\`creatorId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`event\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`name\\` varchar(255) NOT NULL, \\`description\\` varchar(255) NOT NULL, \\`numberOfParticipants\\` int NOT NULL, \\`latitude\\` decimal(8,6) NOT NULL DEFAULT '0.000000', \\`longitude\\` decimal(8,6) NOT NULL DEFAULT '0.000000', \\`visibility\\` varchar(255) NOT NULL, \\`date\\` datetime NOT NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`event_participants_user\\` (\\`eventId\\` varchar(36) NOT NULL, \\`userId\\` varchar(36) NOT NULL, INDEX \\`IDX_cb16f471dfa696d2da841aaf21\\` (\\`eventId\\`), INDEX \\`IDX_120333cf695db458809e8b29e2\\` (\\`userId\\`), PRIMARY KEY (\\`eventId\\`, \\`userId\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`event_clue\\` ADD CONSTRAINT \\`FK_d7835fe85af927de67a58305cfa\\` FOREIGN KEY (\\`eventId\\`) REFERENCES \\`event\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`event_clue\\` ADD CONSTRAINT \\`FK_c2e03da07cfe6311f67a2c14699\\` FOREIGN KEY (\\`creatorId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`event_goal\\` ADD CONSTRAINT \\`FK_f422f6f552c1c7b7a63e784cab5\\` FOREIGN KEY (\\`creatorId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`event_participants_user\\` ADD CONSTRAINT \\`FK_cb16f471dfa696d2da841aaf21e\\` FOREIGN KEY (\\`eventId\\`) REFERENCES \\`event\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE CASCADE`);\n        await queryRunner.query(`ALTER TABLE \\`event_participants_user\\` ADD CONSTRAINT \\`FK_120333cf695db458809e8b29e22\\` FOREIGN KEY (\\`userId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`event_participants_user\\` DROP FOREIGN KEY \\`FK_120333cf695db458809e8b29e22\\``);\n        await queryRunner.query(`ALTER TABLE \\`event_participants_user\\` DROP FOREIGN KEY \\`FK_cb16f471dfa696d2da841aaf21e\\``);\n        await queryRunner.query(`ALTER TABLE \\`event_goal\\` DROP FOREIGN KEY \\`FK_f422f6f552c1c7b7a63e784cab5\\``);\n        await queryRunner.query(`ALTER TABLE \\`event_clue\\` DROP FOREIGN KEY \\`FK_c2e03da07cfe6311f67a2c14699\\``);\n        await queryRunner.query(`ALTER TABLE \\`event_clue\\` DROP FOREIGN KEY \\`FK_d7835fe85af927de67a58305cfa\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_120333cf695db458809e8b29e2\\` ON \\`event_participants_user\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_cb16f471dfa696d2da841aaf21\\` ON \\`event_participants_user\\``);\n        await queryRunner.query(`DROP TABLE \\`event_participants_user\\``);\n        await queryRunner.query(`DROP TABLE \\`event\\``);\n        await queryRunner.query(`DROP TABLE \\`event_goal\\``);\n        await queryRunner.query(`DROP TABLE \\`event_clue\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1678779028547.html":{"url":"classes/$npmConfigName1678779028547.html","title":"class - $npmConfigName1678779028547","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1678779028547\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1678779028547-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1678779028547'\n                    \n                \n                    \n                        \n                                Defined in migrations/1678779028547-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1678779028547-$npm_config_name.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1678779028547-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1678779028547 implements MigrationInterface {\n    name = '$npmConfigName1678779028547'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`event_clue\\` DROP COLUMN \\`imageExpiryDate\\``);\n        await queryRunner.query(`ALTER TABLE \\`event_clue\\` DROP COLUMN \\`imageId\\``);\n        await queryRunner.query(`ALTER TABLE \\`event_clue\\` DROP COLUMN \\`imageUrl\\``);\n        await queryRunner.query(`ALTER TABLE \\`event_goal\\` DROP COLUMN \\`imageExpiryDate\\``);\n        await queryRunner.query(`ALTER TABLE \\`event_goal\\` DROP COLUMN \\`imageId\\``);\n        await queryRunner.query(`ALTER TABLE \\`event_goal\\` DROP COLUMN \\`imageUrl\\``);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`event_goal\\` ADD \\`imageUrl\\` longtext NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \\`event_goal\\` ADD \\`imageId\\` varchar(255) NOT NULL DEFAULT ''`);\n        await queryRunner.query(`ALTER TABLE \\`event_goal\\` ADD \\`imageExpiryDate\\` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP`);\n        await queryRunner.query(`ALTER TABLE \\`event_clue\\` ADD \\`imageUrl\\` longtext NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \\`event_clue\\` ADD \\`imageId\\` varchar(255) NOT NULL DEFAULT ''`);\n        await queryRunner.query(`ALTER TABLE \\`event_clue\\` ADD \\`imageExpiryDate\\` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1678779204584.html":{"url":"classes/$npmConfigName1678779204584.html","title":"class - $npmConfigName1678779204584","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1678779204584\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1678779204584-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1678779204584'\n                    \n                \n                    \n                        \n                                Defined in migrations/1678779204584-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1678779204584-$npm_config_name.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1678779204584-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1678779204584 implements MigrationInterface {\n    name = '$npmConfigName1678779204584'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`event\\` ADD \\`creatorId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`event\\` ADD CONSTRAINT \\`FK_7a773352fcf1271324f2e5a3e41\\` FOREIGN KEY (\\`creatorId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`event\\` DROP FOREIGN KEY \\`FK_7a773352fcf1271324f2e5a3e41\\``);\n        await queryRunner.query(`ALTER TABLE \\`event\\` DROP COLUMN \\`creatorId\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1678780013678.html":{"url":"classes/$npmConfigName1678780013678.html","title":"class - $npmConfigName1678780013678","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1678780013678\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1678780013678-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1678780013678'\n                    \n                \n                    \n                        \n                                Defined in migrations/1678780013678-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1678780013678-$npm_config_name.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1678780013678-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1678780013678 implements MigrationInterface {\n    name = '$npmConfigName1678780013678'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`event\\` ADD \\`goalId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`event\\` ADD UNIQUE INDEX \\`IDX_9b9ae2fda8caa069f3564df40e\\` (\\`goalId\\`)`);\n        await queryRunner.query(`CREATE UNIQUE INDEX \\`REL_9b9ae2fda8caa069f3564df40e\\` ON \\`event\\` (\\`goalId\\`)`);\n        await queryRunner.query(`ALTER TABLE \\`event\\` ADD CONSTRAINT \\`FK_9b9ae2fda8caa069f3564df40e3\\` FOREIGN KEY (\\`goalId\\`) REFERENCES \\`event_goal\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`event\\` DROP FOREIGN KEY \\`FK_9b9ae2fda8caa069f3564df40e3\\``);\n        await queryRunner.query(`DROP INDEX \\`REL_9b9ae2fda8caa069f3564df40e\\` ON \\`event\\``);\n        await queryRunner.query(`ALTER TABLE \\`event\\` DROP INDEX \\`IDX_9b9ae2fda8caa069f3564df40e\\``);\n        await queryRunner.query(`ALTER TABLE \\`event\\` DROP COLUMN \\`goalId\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1678780110507.html":{"url":"classes/$npmConfigName1678780110507.html","title":"class - $npmConfigName1678780110507","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1678780110507\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1678780110507-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1678780110507'\n                    \n                \n                    \n                        \n                                Defined in migrations/1678780110507-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1678780110507-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1678780110507-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1678780110507 implements MigrationInterface {\n    name = '$npmConfigName1678780110507'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`DROP INDEX \\`IDX_9b9ae2fda8caa069f3564df40e\\` ON \\`event\\``);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE UNIQUE INDEX \\`IDX_9b9ae2fda8caa069f3564df40e\\` ON \\`event\\` (\\`goalId\\`)`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1678975542609.html":{"url":"classes/$npmConfigName1678975542609.html","title":"class - $npmConfigName1678975542609","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1678975542609\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1678975542609-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1678975542609'\n                    \n                \n                    \n                        \n                                Defined in migrations/1678975542609-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1678975542609-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1678975542609-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1678975542609 implements MigrationInterface {\n    name = '$npmConfigName1678975542609'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`event_clue\\` ADD \\`date\\` datetime NOT NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`event_clue\\` DROP COLUMN \\`date\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AnalyticsController.html":{"url":"controllers/AnalyticsController.html","title":"controller - AnalyticsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AnalyticsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/analytics/analytics.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                analytics\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAdminPostAnalytics\n                            \n                            \n                                getPostAnalytics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAdminPostAnalytics\n                        \n                    \n                \n            \n            \n                \ngetAdminPostAnalytics(req, postId, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Get('admin/post/:id')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/analytics/analytics.controller.ts:25\n                \n            \n\n\n            \n                \n                    This API is only accessible to admins and allows them to view the analytics of any post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    postId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the post\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostAnalytics\n                        \n                    \n                \n            \n            \n                \ngetPostAnalytics(req, postId, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, SubscriptionsGuard)@Get('post/:id')@SubscriptionPlans(SubscriptionPlan.Premium)\n                \n            \n\n            \n                \n                    Defined in src/modules/analytics/analytics.controller.ts:45\n                \n            \n\n\n            \n                \n                    This API is only accessible to premium user and allows them to view the analytics of only their post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    postId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the post\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpStatus, Param, Res, UseGuards, Request } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { AnalyticsService } from './analytics.service';\nimport { Response } from 'express';\nimport { SubscriptionPlan } from '../../constants/subscription-plan.enum';\nimport { SubscriptionPlans } from '../../decorators/subscription.decorator';\nimport { SubscriptionsGuard } from '../auth/guards/subscriptions.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../../decorators/roles.decorator';\nimport { Role } from '../../constants/role.enum';\n\n@Controller('analytics')\nexport class AnalyticsController {\n  constructor(private analyticsService: AnalyticsService) {}\n\n  /**\n   * This API is only accessible to admins and allows them to view the analytics of any post\n   * @param req the request object\n   * @param postId the id of the post\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Get('admin/post/:id')\n  @Roles(Role.Admin)\n  getAdminPostAnalytics(@Request() req, @Param('id') postId, @Res() res: Response) {\n    this.analyticsService\n      .getAdminPostAnalytics(req.user, postId)\n      .then((analytics) => {\n        return res.status(HttpStatus.OK).json(analytics);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * This API is only accessible to premium user and allows them to view the analytics of only their post\n   * @param req the request object\n   * @param postId the id of the post\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard, SubscriptionsGuard)\n  @Get('post/:id')\n  @SubscriptionPlans(SubscriptionPlan.Premium)\n  getPostAnalytics(@Request() req, @Param('id') postId, @Res() res: Response) {\n    this.analyticsService\n      .getPostAnalytics(req.user, postId)\n      .then((analytics) => {\n        return res.status(HttpStatus.OK).json(analytics);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AnalyticsModule.html":{"url":"modules/AnalyticsModule.html","title":"module - AnalyticsModule","body":"\n                   \n\n\n\n\n    Modules\n    AnalyticsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AnalyticsModule\n\n\n\ncluster_AnalyticsModule_providers\n\n\n\n\nAnalyticsService\n\nAnalyticsService\n\n\n\nAnalyticsModule\n\nAnalyticsModule\n\nAnalyticsModule -->\n\nAnalyticsService->AnalyticsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/analytics/analytics.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AnalyticsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AnalyticsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { User } from '../user/entities/user.entity';\nimport { AnalyticsController } from './analytics.controller';\nimport { AnalyticsService } from './analytics.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Post, User])],\n  controllers: [AnalyticsController],\n  providers: [AnalyticsService]\n})\nexport class AnalyticsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AnalyticsService.html":{"url":"injectables/AnalyticsService.html","title":"injectable - AnalyticsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AnalyticsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/analytics/analytics.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAdminPostAnalytics\n                            \n                            \n                                    Async\n                                getPostAnalytics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/analytics/analytics.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAdminPostAnalytics\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAdminPostAnalytics(user: any, postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/analytics/analytics.service.ts:25\n                \n            \n\n\n            \n                \n                    Get the analytics of a post for an admin\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user object\n\n                                    \n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the post\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        the analytics of the post\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostAnalytics\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostAnalytics(user: any, postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/analytics/analytics.service.ts:66\n                \n            \n\n\n            \n                \n                    Get the analytics of a post for a premium user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user object\n\n                                    \n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the post\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        the analytics of the post\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Role } from '../../constants/role.enum';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { User } from '../user/entities/user.entity';\nimport { PostAnalyticResposneDto } from './dto/post-analytic-response.dto';\n\n@Injectable()\nexport class AnalyticsService {\n  constructor(\n    @InjectRepository(Post)\n    private postRepository: Repository,\n\n    @InjectRepository(User)\n    private userRepository: Repository\n  ) {}\n\n  /**\n   * Get the analytics of a post for an admin\n   * @param user the user object\n   * @param postId the id of the post\n   * @returns the analytics of the post\n   */\n  async getAdminPostAnalytics(user: any, postId: string): Promise {\n    const post = await this.postRepository.findOne({\n      where: { id: postId },\n      relations: ['postedBy', 'reportsAgainst', 'scrapbook', 'comments', 'appeals']\n    });\n\n    if (!post) {\n      throw new BadRequestException('Post does not exist');\n    }\n\n    const commentCount = post.comments.length;\n    const reportCount = post.reportsAgainst.length;\n    const appealCount = post.appeals.length;\n    const isPartOfScrapbook = post.scrapbook ? true : false;\n    const interactionCount = commentCount;\n    const isTakenDown = post.isTakenDown;\n    const createdAt = new Date(post.createdAt);\n\n    const response = new PostAnalyticResposneDto();\n    response.commentCount = commentCount;\n    response.likeCount = 0;\n    response.interactionCount = interactionCount;\n    response.isTakenDown = isTakenDown;\n    response.reportCount = reportCount;\n    response.appealCount = appealCount;\n    response.createdAt = createdAt;\n    response.isPartOfScrapbook = isPartOfScrapbook;\n\n    if (isPartOfScrapbook) {\n      response.scrapbookId = post.scrapbook.id;\n    }\n\n    return response;\n  }\n\n  /**\n   * Get the analytics of a post for a premium user\n   * @param user the user object\n   * @param postId the id of the post\n   * @returns the analytics of the post\n   */\n  async getPostAnalytics(user: any, postId: string): Promise {\n    const post = await this.postRepository.findOne({\n      where: { id: postId },\n      relations: ['postedBy', 'reportsAgainst', 'scrapbook', 'comments', 'appeals']\n    });\n\n    if (user.role !== Role.Admin) {\n      if (post.postedBy.id !== user.id) {\n        throw new BadRequestException('You are not authorized to view the analytics of this post');\n      }\n    }\n\n    if (!post) {\n      throw new BadRequestException('Post does not exist');\n    }\n\n    const commentCount = post.comments.length;\n    const reportCount = post.reportsAgainst.length;\n    const appealCount = post.appeals.length;\n    const isPartOfScrapbook = post.scrapbook ? true : false;\n    const interactionCount = commentCount;\n    const isTakenDown = post.isTakenDown;\n    const createdAt = new Date(post.createdAt);\n\n    const response = new PostAnalyticResposneDto();\n    response.commentCount = commentCount;\n    response.likeCount = 0;\n    response.interactionCount = interactionCount;\n    response.isTakenDown = isTakenDown;\n    response.reportCount = reportCount;\n    response.appealCount = appealCount;\n    response.createdAt = createdAt;\n    response.isPartOfScrapbook = isPartOfScrapbook;\n\n    if (isPartOfScrapbook) {\n      response.scrapbookId = post.scrapbook.id;\n    }\n\n    return response;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAnalyticsModule\n\nAnalyticsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnalyticsModule->AppModule\n\n\n\n\n\nAppealsModule\n\nAppealsModule\n\nAppModule -->\n\nAppealsModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBlockModule\n\nBlockModule\n\nAppModule -->\n\nBlockModule->AppModule\n\n\n\n\n\nEventModule\n\nEventModule\n\nAppModule -->\n\nEventModule->AppModule\n\n\n\n\n\nFeedModule\n\nFeedModule\n\nAppModule -->\n\nFeedModule->AppModule\n\n\n\n\n\nFollowModule\n\nFollowModule\n\nAppModule -->\n\nFollowModule->AppModule\n\n\n\n\n\nMemoryModule\n\nMemoryModule\n\nAppModule -->\n\nMemoryModule->AppModule\n\n\n\n\n\nNotificationModule\n\nNotificationModule\n\nAppModule -->\n\nNotificationModule->AppModule\n\n\n\n\n\nPaymentModule\n\nPaymentModule\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nReportModule\n\nReportModule\n\nAppModule -->\n\nReportModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAppModule -->\n\nLocalStrategy->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AnalyticsModule\n                        \n                        \n                            AppealsModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            BlockModule\n                        \n                        \n                            EventModule\n                        \n                        \n                            FeedModule\n                        \n                        \n                            FollowModule\n                        \n                        \n                            MemoryModule\n                        \n                        \n                            NotificationModule\n                        \n                        \n                            PaymentModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            ReportModule\n                        \n                        \n                            TasksModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { UserModule } from './modules/user/user.module';\nimport { User } from './modules/user/entities/user.entity';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { LocalStrategy } from './modules/auth/strategies/local.strategy';\nimport { PostModule } from './modules/post/post.module';\nimport { Post } from './modules/post/entities/post.entity';\nimport { Scrapbook } from './modules/post/entities/scrapbook.entity';\nimport { Comment } from './modules/post/entities/comment.entity';\nimport { PostReport } from './modules/report/entities/post-report.entity';\nimport { UserReport } from './modules/report/entities/user-report.entity';\nimport { ReportModule } from './modules/report/report.module';\nimport { UserBan } from './modules/report/entities/user-ban.entity';\nimport { Appeal } from './modules/appeals/entities/appeal.entity';\nimport { AppealsModule } from './modules/appeals/appeals.module';\nimport { BlockModule } from './modules/block/block.module';\nimport { Block } from './modules/block/entities/block.entity';\nimport { Follow } from './modules/follow/entities/follow.entity';\nimport { FollowRequest } from './modules/follow/entities/follow-request.entity';\nimport { FollowModule } from './modules/follow/follow.module';\nimport { NotificationModule } from './modules/notification/notification.module';\nimport { AnalyticsModule } from './modules/analytics/analytics.module';\nimport { FeedModule } from './modules/feed/feed.module';\nimport { Like } from './modules/post/entities/post-like.entity';\nimport { PaymentModule } from './modules/payment/payment.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { TasksModule } from './modules/tasks/tasks.module';\nimport { Memory } from './modules/memory/entities/memory.entity';\nimport { MemoryModule } from './modules/memory/memory.module';\nimport { Event } from './modules/event/entities/event.entity';\nimport { EventClue } from './modules/event/entities/eventClues.entity';\nimport { EventGoal } from './modules/event/entities/eventGoal.entity';\nimport { EventModule } from './modules/event/event.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    ScheduleModule.forRoot(),\n    TypeOrmModule.forRootAsync({\n      //We import the ConfigModule to use the ConfigService to access the environment variables\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        //*Database Settings\n        type: 'mysql',\n        //We get get the value of the environment variable DATABASE_HOST\n        host: configService.get('DATABASE_HOST'),\n        username: configService.get('DATABASE_USERNAME'),\n        password: configService.get('DATABASE_PASSWORD'),\n        database: configService.get('DATABASE_NAME'),\n        entities: [\n          User,\n          Post,\n          Scrapbook,\n          PostReport,\n          UserReport,\n          UserBan,\n          Comment,\n          Appeal,\n          Block,\n          Follow,\n          FollowRequest,\n          Like,\n          Memory,\n          Event,\n          EventClue,\n          EventGoal\n        ],\n        synchronize: false,\n        autoLoadEntities: true,\n        options: { encrypt: false },\n        //*Migrations Settings\n        //Migrations Table Name\n        migrationsTableName: 'migrations',\n        //Migrations Folder\n        migrations: ['../migrations/*{.ts,.js}'],\n        //Automatically run migrations on app start if needed\n        migrationsRun: true,\n        port: 3306\n      }),\n      inject: [ConfigService]\n    }),\n    UserModule,\n    AuthModule,\n    PostModule,\n    ReportModule,\n    AppealsModule,\n    BlockModule,\n    FollowModule,\n    NotificationModule,\n    AnalyticsModule,\n    FeedModule,\n    PaymentModule,\n    MemoryModule,\n    TasksModule,\n    EventModule\n  ],\n  controllers: [],\n  providers: [AppService, LocalStrategy]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Appeal.html":{"url":"entities/Appeal.html","title":"entity - Appeal","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Appeal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appeals/entities/appeal.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                appealedBy\n                            \n                            \n                                appealedPost\n                            \n                            \n                                id\n                            \n                            \n                                reportReason\n                            \n                            \n                                status\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        appealedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.appeals, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/entities/appeal.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        appealedPost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.appeals, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/entities/appeal.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/entities/appeal.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportReason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReportReason\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/entities/appeal.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ReportStatus.PendingReview\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/entities/appeal.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/entities/appeal.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Post } from '../../post/entities/post.entity';\nimport { User } from '../../user/entities/user.entity';\nimport { ReportStatus } from '../../../constants/report-status.enum';\nimport { ReportReason } from '../../../constants/report-reason.enum';\n\n@Entity()\nexport class Appeal extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ default: ReportStatus.PendingReview })\n  status: string = ReportStatus.PendingReview;\n\n  @Column()\n  reportReason: ReportReason;\n\n  @Column()\n  text: string;\n\n  //An appeal can only appeal one post but a post can be in many appeals\n  @ManyToOne(() => Post, (post) => post.appeals, {\n    onDelete: 'CASCADE'\n  })\n  appealedPost: Post;\n\n  //A appeal can only be appeal by one user but a user can have many appeal\n  @ManyToOne(() => User, (user) => user.appeals, {\n    onDelete: 'CASCADE'\n  })\n  appealedBy: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppealDto.html":{"url":"classes/AppealDto.html","title":"class - AppealDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppealDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appeals/dto/appeal.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                postId\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/dto/appeal.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/dto/appeal.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport class AppealDto {\n  @IsNotEmpty()\n  postId: string;\n\n  @IsNotEmpty()\n  text: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppealsController.html":{"url":"controllers/AppealsController.html","title":"controller - AppealsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppealsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appeals/appeals.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                appeals\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                acceptPostAppeal\n                            \n                            \n                                getPostAppeals\n                            \n                            \n                                getPostAppealsById\n                            \n                            \n                                getUserAppeals\n                            \n                            \n                                rejectPostAppeal\n                            \n                            \n                                reportPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        acceptPostAppeal\n                        \n                    \n                \n            \n            \n                \nacceptPostAppeal(req, postId, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Patch('accept-appeal/:postId')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/appeals/appeals.controller.ts:55\n                \n            \n\n\n            \n                \n                    Accept an appeal\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    postId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostAppeals\n                        \n                    \n                \n            \n            \n                \ngetPostAppeals(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Get('post-appeals')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/appeals/appeals.controller.ts:138\n                \n            \n\n\n            \n                \n                    Gets the post appeals for an admin\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostAppealsById\n                        \n                    \n                \n            \n            \n                \ngetPostAppealsById(req, postId, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('post-appeals/:postId')\n                \n            \n\n            \n                \n                    Defined in src/modules/appeals/appeals.controller.ts:94\n                \n            \n\n\n            \n                \n                    Get the appeals of a post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    postId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserAppeals\n                        \n                    \n                \n            \n            \n                \ngetUserAppeals(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('user-appeals')\n                \n            \n\n            \n                \n                    Defined in src/modules/appeals/appeals.controller.ts:118\n                \n            \n\n\n            \n                \n                    Get the appeals of a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rejectPostAppeal\n                        \n                    \n                \n            \n            \n                \nrejectPostAppeal(req, postId, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Patch('reject-appeal/:postId')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/appeals/appeals.controller.ts:75\n                \n            \n\n\n            \n                \n                    Reject an appeal\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    postId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportPost\n                        \n                    \n                \n            \n            \n                \nreportPost(body: AppealDto, req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('appeal-post')\n                \n            \n\n            \n                \n                    Defined in src/modules/appeals/appeals.controller.ts:35\n                \n            \n\n\n            \n                \n                    Appeal a post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AppealDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the body of the request\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  UseGuards,\n  Res,\n  Request,\n  Post,\n  Body,\n  HttpStatus,\n  Get,\n  Param,\n  Patch,\n  Query\n} from '@nestjs/common';\nimport { Response } from 'express';\nimport { PageOptionsDto } from '../../common/dto/page-options.dto';\nimport { Role } from '../../constants/role.enum';\nimport { Roles } from '../../decorators/roles.decorator';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { AppealsService } from './appeals.service';\nimport { AppealDto } from './dto/appeal.dto';\n\n@Controller('appeals')\nexport class AppealsController {\n  constructor(private appealsService: AppealsService) {}\n\n  /**\n   * Appeal a post\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('appeal-post')\n  reportPost(@Body() body: AppealDto, @Request() req, @Res() res: Response) {\n    this.appealsService\n      .appealPost(req.user, body)\n      .then((appeal) => {\n        return res.status(HttpStatus.OK).json(appeal);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Accept an appeal\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Patch('accept-appeal/:postId')\n  @Roles(Role.Admin)\n  acceptPostAppeal(@Request() req, @Param('postId') postId, @Res() res: Response) {\n    this.appealsService\n      .acceptPostAppeal(postId)\n      .then((appeal) => {\n        return res.status(HttpStatus.OK).json(appeal);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Reject an appeal\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Patch('reject-appeal/:postId')\n  @Roles(Role.Admin)\n  rejectPostAppeal(@Request() req, @Param('postId') postId, @Res() res: Response) {\n    this.appealsService\n      .rejectPostAppeal(postId)\n      .then((appeal) => {\n        return res.status(HttpStatus.OK).json(appeal);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Get the appeals of a post\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('post-appeals/:postId')\n  getPostAppealsById(\n    @Request() req,\n    @Param('postId') postId,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.appealsService\n      .getPostAppealsById(postId, req.user, pageOptionsDto)\n      .then((appeal) => {\n        return res.status(HttpStatus.OK).json(appeal);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Get the appeals of a user\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('user-appeals')\n  getUserAppeals(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.appealsService\n      .getUserAppeals(req.user, pageOptionsDto)\n      .then((appeal) => {\n        return res.status(HttpStatus.OK).json(appeal);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Gets the post appeals for an admin\n   * @param req the request object\n   * @param res the response object\n   * @param pageOptionsDto the page options\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Get('post-appeals')\n  @Roles(Role.Admin)\n  getPostAppeals(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.appealsService\n      .getPostAppeals(pageOptionsDto)\n      .then((appeals) => {\n        return res.status(HttpStatus.OK).json(appeals);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppealsModule.html":{"url":"modules/AppealsModule.html","title":"module - AppealsModule","body":"\n                   \n\n\n\n\n    Modules\n    AppealsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppealsModule\n\n\n\ncluster_AppealsModule_providers\n\n\n\n\nAppealsService\n\nAppealsService\n\n\n\nAppealsModule\n\nAppealsModule\n\nAppealsModule -->\n\nAppealsService->AppealsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/appeals/appeals.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppealsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppealsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppealsService } from './appeals.service';\nimport { AppealsController } from './appeals.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { Appeal } from './entities/appeal.entity';\nimport { Post } from '../post/entities/post.entity';\nimport { PostReport } from '../report/entities/post-report.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Appeal, Post, User, PostReport])],\n  providers: [AppealsService],\n  controllers: [AppealsController]\n})\nexport class AppealsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppealsService.html":{"url":"injectables/AppealsService.html","title":"injectable - AppealsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppealsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appeals/appeals.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                acceptPostAppeal\n                            \n                            \n                                    Async\n                                appealPost\n                            \n                            \n                                    Async\n                                getPostAppeals\n                            \n                            \n                                    Async\n                                getPostAppealsById\n                            \n                            \n                                    Async\n                                getUserAppeals\n                            \n                            \n                                    Async\n                                rejectPostAppeal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appealRepository: Repository, postReportsRepository: Repository, postRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/appeals/appeals.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appealRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postReportsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        acceptPostAppeal\n                        \n                    \n                \n            \n            \n                \n                    \n                    acceptPostAppeal(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/appeals/appeals.service.ts:141\n                \n            \n\n\n            \n                \n                    Accepts a post's appeal\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the post id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        the appeal\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        appealPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    appealPost(user: any, body: AppealDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/appeals/appeals.service.ts:36\n                \n            \n\n\n            \n                \n                    Appeal a post's report\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user who is appealing the post\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                AppealDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the appeal body\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        the appeal\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostAppeals\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostAppeals(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/appeals/appeals.service.ts:207\n                \n            \n\n\n            \n                \n                    Gets the appeals for a post for an admin\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        the page of appeals\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostAppealsById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostAppealsById(postId: string, user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/appeals/appeals.service.ts:86\n                \n            \n\n\n            \n                \n                    Get the appeals for a post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the post id\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user who is viewing the post's appeals\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        the page of appeals\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserAppeals\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserAppeals(user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/appeals/appeals.service.ts:118\n                \n            \n\n\n            \n                \n                    Gets the appeals for a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user who is viewing their appeals\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        the page of appeals\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        rejectPostAppeal\n                        \n                    \n                \n            \n            \n                \n                    \n                    rejectPostAppeal(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/appeals/appeals.service.ts:175\n                \n            \n\n\n            \n                \n                    Rejects a post's appeal\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the post id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        the appeal\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PageMetaDto } from '../../common/dto/page-meta.dto';\nimport { PageOptionsDto } from '../../common/dto/page-options.dto';\nimport { PageDto } from '../../common/dto/page.dto';\nimport { ReportStatus } from '../../constants/report-status.enum';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { PostReport } from '../report/entities/post-report.entity';\nimport { User } from '../user/entities/user.entity';\nimport { AppealDto } from './dto/appeal.dto';\nimport { Appeal } from './entities/appeal.entity';\n\n@Injectable()\nexport class AppealsService {\n  constructor(\n    @InjectRepository(Appeal)\n    private appealRepository: Repository,\n\n    @InjectRepository(PostReport)\n    private postReportsRepository: Repository,\n\n    @InjectRepository(Post)\n    private postRepository: Repository,\n\n    @InjectRepository(User)\n    private userRepository: Repository\n  ) {}\n\n  /**\n   * Appeal a post's report\n   * @param user the user who is appealing the post\n   * @param body the appeal body\n   * @returns the appeal\n   */\n  async appealPost(user: any, body: AppealDto): Promise {\n    const newAppeal = new Appeal();\n\n    const post = await this.postRepository.findOne({\n      where: { id: body.postId },\n      relations: ['reportsAgainst', 'postedBy', 'appeals']\n    });\n\n    if (!post) {\n      throw new BadRequestException('Post not found');\n    }\n\n    if (post.appeals.some((appeal) => appeal.status === ReportStatus.PendingReview)) {\n      throw new BadRequestException('Post has already been appealed');\n    }\n\n    if (post.postedBy.id !== user.id) {\n      throw new BadRequestException('You can only appeal your posts');\n    }\n\n    if (\n      !(\n        post.reportsAgainst.some((report) => report.status === ReportStatus.Accepted) &&\n        post.isTakenDown\n      )\n    ) {\n      throw new BadRequestException('Post has not been reported or taken down');\n    }\n\n    const reportReason = post.reportsAgainst\n      .filter((report) => {\n        return report.status === ReportStatus.Accepted;\n      })\n      .sort((a, b) => Date.parse(b.createdAt) - Date.parse(a.createdAt))[0].reason;\n\n    newAppeal.appealedPost = post;\n    newAppeal.appealedBy = post.postedBy;\n    newAppeal.text = body.text;\n    newAppeal.reportReason = reportReason;\n\n    return this.appealRepository.save(newAppeal);\n  }\n\n  /**\n   * Get the appeals for a post\n   * @param postId the post id\n   * @param user the user who is viewing the post's appeals\n   * @param pageOptionsDto the page options\n   * @returns the page of appeals\n   */\n  async getPostAppealsById(\n    postId: string,\n    user: any,\n    pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const post = await this.postRepository.findOne({\n      where: { id: postId },\n      relations: ['postedBy', 'appeals']\n    });\n\n    if (!post) {\n      throw new BadRequestException('Post not found');\n    }\n\n    if (post.postedBy.id !== user.id) {\n      throw new BadRequestException('You can only view your post appeals');\n    }\n\n    const itemCount: number = post.appeals.length;\n    const entities: Appeal[] = post.appeals;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  /**\n   * Gets the appeals for a user\n   * @param user the user who is viewing their appeals\n   * @param pageOptionsDto the page options\n   * @returns the page of appeals\n   */\n  async getUserAppeals(user: any, pageOptionsDto: PageOptionsDto): Promise> {\n    const dbUser = await this.userRepository.findOne({\n      where: { id: user.id },\n      relations: ['appeals']\n    });\n\n    if (!dbUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    const itemCount: number = dbUser.appeals.length;\n    const entities: Appeal[] = dbUser.appeals;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  /**\n   * Accepts a post's appeal\n   * @param postId the post id\n   * @returns the appeal\n   */\n  async acceptPostAppeal(postId: string): Promise {\n    const post = await this.postRepository.findOne({\n      where: { id: postId },\n      relations: ['appeals', 'postedBy']\n    });\n\n    if (!post) {\n      throw new BadRequestException('Post not found');\n    }\n\n    if (!post.appeals.some((appeal) => appeal.status === ReportStatus.PendingReview)) {\n      throw new BadRequestException('Post has not been appealed');\n    }\n\n    const appeal = post.appeals\n      .map((appeal) => {\n        if (appeal.status === ReportStatus.PendingReview) {\n          return appeal;\n        }\n      })\n      .filter((appeal) => appeal !== undefined)[0];\n\n    appeal.status = ReportStatus.Accepted;\n\n    await this.postRepository.update(postId, { isTakenDown: false });\n\n    return this.appealRepository.save(appeal);\n  }\n\n  /**\n   * Rejects a post's appeal\n   * @param postId the post id\n   * @returns the appeal\n   */\n  async rejectPostAppeal(postId: string): Promise {\n    const post = await this.postRepository.findOne({\n      where: { id: postId },\n      relations: ['appeals', 'postedBy']\n    });\n\n    if (!post) {\n      throw new BadRequestException('Post not found');\n    }\n\n    if (!post.appeals.some((appeal) => appeal.status === ReportStatus.PendingReview)) {\n      throw new BadRequestException('Post has not been appealed');\n    }\n\n    const appeal = post.appeals\n      .map((appeal) => {\n        if (appeal.status === ReportStatus.PendingReview) {\n          return appeal;\n        }\n      })\n      .filter((appeal) => appeal !== undefined)[0];\n\n    appeal.status = ReportStatus.Rejected;\n\n    return this.appealRepository.save(appeal);\n  }\n\n  /**\n   * Gets the appeals for a post for an admin\n   * @param pageOptionsDto the page options\n   * @returns the page of appeals\n   */\n  async getPostAppeals(pageOptionsDto: PageOptionsDto): Promise> {\n    const appeals = await this.appealRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('Appeal.appealedPost', 'Post')\n      .leftJoinAndSelect('Post.postedBy', 'PostedBy')\n      .leftJoinAndSelect('Appeal.appealedBy', 'User')\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take)\n      .orderBy('Appeal.createdAt', pageOptionsDto.order)\n      .getManyAndCount()\n      .then((appealsAndCount) => {\n        return {\n          items: appealsAndCount[0],\n          itemsCount: appealsAndCount[0].length\n        };\n      });\n\n    const itemCount: number = appeals.itemsCount;\n    const entities: Appeal[] = appeals.items;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                captchaResult\n                            \n                            \n                                getCaptcha\n                            \n                            \n                                    Async\n                                loginUser\n                            \n                            \n                                signUpAdmin\n                            \n                            \n                                signUpUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        captchaResult\n                        \n                    \n                \n            \n            \n                \ncaptchaResult(res: Response, captchaResponse)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('captcha')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    captchaResponse\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCaptcha\n                        \n                    \n                \n            \n            \n                \ngetCaptcha(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('captcha')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginUser(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:144\n                \n            \n\n\n            \n                \n                    Route for login\nThe guard is used to protect the route, if the user is not authenticated, the route will not be accessible\nThe LocalAuthGuard will check if the user is authenticated using the local strategy\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the JWT access token for the user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signUpAdmin\n                        \n                    \n                \n            \n            \n                \nsignUpAdmin(body: SignUpUserDto, req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Post('admin/signup')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:115\n                \n            \n\n\n            \n                \n                    creating post route, the route will be admin/signup\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SignUpUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request body\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object itself\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object we will send back to the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        confirmation message or error message\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signUpUser\n                        \n                    \n                \n            \n            \n                \nsignUpUser(body: SignUpUserDto, req, res: Response, file)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:41\n                \n            \n\n\n            \n                \n                    We create a post route for the sign up, the route will be /user/signup\nWe use the @Body() decorator to get the body of the request and the body is a SignUpUserDto\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SignUpUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request body\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object itself\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object we will send back to the user\n\n                                    \n                                \n                                \n                                    file\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        confirmation message or error message\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Request,\n  Post,\n  Body,\n  Res,\n  HttpStatus,\n  UseGuards,\n  ForbiddenException,\n  UseInterceptors,\n  UploadedFile,\n  Get\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { Response } from 'express';\nimport { Role } from '../../constants/role.enum';\nimport { Roles } from '../../decorators/roles.decorator';\nimport { User } from '../user/entities/user.entity';\nimport { UserService } from '../user/user.service';\nimport { AuthService } from './auth.service';\nimport { SignUpUserDto } from './dto/user-signup.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { RolesGuard } from './guards/roles.guard';\n\n@Controller('auth')\nexport class AuthController {\n  //We inject the user servicec in the constructor\n  constructor(private userService: UserService, private authService: AuthService) {}\n\n  /**\n   * We create a post route for the sign up, the route will be /user/signup\n   * We use the @Body() decorator to get the body of the request and the body is a SignUpUserDto\n   * @param body the request body\n   * @param req the request object itself\n   * @param res the response object we will send back to the user\n   * @returns confirmation message or error message\n   */\n  @Post('signup')\n  @UseInterceptors(FileInterceptor('avatar'))\n  signUpUser(\n    @Body() body: SignUpUserDto,\n    @Request() req,\n    @Res() res: Response,\n    @UploadedFile() file\n  ) {\n    if (body.password !== body.confirmPassword) {\n      return res.status(HttpStatus.BAD_REQUEST).json({\n        message: 'Passwords do not match'\n      });\n    }\n\n    this.userService.findOneByEmail(body.email).then((user: User) => {\n      if (user) {\n        return res.status(HttpStatus.BAD_REQUEST).json({\n          message: 'User already exists'\n        });\n      }\n\n      if (!user) {\n        if (file) {\n          this.userService.createUserWithImage(body, file).then((user: User) => {\n            const { id, firstName, lastName, email, profilePictureUrl } = user;\n            return res\n              .status(HttpStatus.CREATED)\n              .json({ id, firstName, lastName, email, profilePictureUrl });\n          });\n        }\n\n        if (!file) {\n          this.userService.create(body).then((user: User) => {\n            const { id, firstName, lastName, email } = user;\n            return res.status(HttpStatus.CREATED).json({ id, firstName, lastName, email });\n          });\n        }\n      }\n    });\n  }\n\n  @Get('captcha')\n  getCaptcha(@Res() res: Response) {\n    this.authService\n      .getCaptcha()\n      .then((captcha) => {\n        return res.status(HttpStatus.OK).send(captcha);\n      })\n      .catch((err) => {\n        console.log(err);\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @Post('captcha')\n  captchaResult(@Res() res: Response, @Body() captchaResponse) {\n    this.authService\n      .captchaResult(captchaResponse)\n      .then((captcha) => {\n        return res.status(HttpStatus.OK).send(captcha);\n      })\n      .catch((err) => {\n        console.log(err);\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /** creating post route, the route will be admin/signup\n   * @param body the request body\n   * @param req the request object itself\n   * @param res the response object we will send back to the user\n   * @returns confirmation message or error message\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Post('admin/signup')\n  @Roles(Role.Admin)\n  signUpAdmin(@Body() body: SignUpUserDto, @Request() req, @Res() res: Response) {\n    if (body.password !== body.confirmPassword) {\n      return res.status(HttpStatus.BAD_REQUEST).json({\n        message: 'Passwords do not match'\n      });\n    }\n\n    this.userService.findOneByEmail(body.email).then((user: User) => {\n      if (user) {\n        return res.status(HttpStatus.BAD_REQUEST).json({\n          message: 'User already exists'\n        });\n      }\n    });\n\n    this.userService.createAdmin(body).then((user: User) => {\n      const { id, firstName, lastName, email } = user;\n      return res.status(HttpStatus.CREATED).json({ id, firstName, lastName, email });\n    });\n  }\n  /**\n   * Route for login\n   * The guard is used to protect the route, if the user is not authenticated, the route will not be accessible\n   * The LocalAuthGuard will check if the user is authenticated using the local strategy\n   * @param req The request object\n   * @returns the JWT access token for the user\n   */\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  async loginUser(@Request() req) {\n    const isBanned = await this.authService.isUserBanned(req.user);\n\n    if (!isBanned) {\n      return this.authService.login(req.user);\n    }\n\n    throw new ForbiddenException('User banned');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios';\nimport { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm/dist/typeorm.module';\nimport { User } from '../user/entities/user.entity';\nimport { UserModule } from '../user/user.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport jwtConfig from './constants';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\n\n@Module({\n  imports: [\n    HttpModule,\n    UserModule,\n    PassportModule,\n    JwtModule.register(jwtConfig),\n    TypeOrmModule.forFeature([User])\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                captchaResult\n                            \n                            \n                                    Async\n                                getCaptcha\n                            \n                            \n                                    Async\n                                isUserBanned\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateCaptchaResponse\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UserService, jwtService: JwtService, httpService: HttpService, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        captchaResult\n                        \n                    \n                \n            \n            \n                \n                    \n                    captchaResult(body: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCaptcha\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCaptcha()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        isUserBanned\n                        \n                    \n                \n            \n            \n                \n                    \n                    isUserBanned(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:52\n                \n            \n\n\n            \n                \n                    This method is called after the user is authenticated by the local strategy and returns the JWT token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the authenticated user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the JWT token\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateCaptchaResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateCaptchaResponse(gReCaptchaResponse: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    gReCaptchaResponse\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:27\n                \n            \n\n\n            \n                \n                    Validate the user using password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        email of the user\n\n                                    \n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        password input by the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the user details (excluding password) or null if the user is not found or has an invalid password\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { BadRequestException, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { EncryptionService } from '../../common/services/encryption.service';\nimport { Repository } from 'typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { UserService } from '../user/user.service';\nimport { ReCaptchaResponseDto } from './dto/captcha-response.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UserService,\n    private jwtService: JwtService,\n    private readonly httpService: HttpService,\n    @InjectRepository(User)\n    private usersRepository: Repository\n  ) {}\n\n  /**\n   * Validate the user using password\n   * @param email email of the user\n   * @param pass password input by the user\n   * @returns the user details (excluding password) or null if the user is not found or has an invalid password\n   */\n  async validateUser(email: string, pass: string): Promise {\n    const user = await this.usersRepository\n      .createQueryBuilder()\n      .select(['id', 'email', 'password', 'role', 'subscriptionPlan'])\n      .where('email = :email', { email: email })\n      .getRawOne();\n\n    if (!user) {\n      throw new BadRequestException('User not found');\n    }\n\n    const passwordsMatch = await new EncryptionService().comparePasswords(pass, user.password);\n\n    if (user && passwordsMatch) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  /**\n   * This method is called after the user is authenticated by the local strategy and returns the JWT token\n   * @param user the authenticated user\n   * @returns the JWT token\n   */\n  async login(user: any) {\n    const payload = {\n      email: user.email,\n      sub: user.id,\n      role: user.role,\n      subscriptionPlan: user.subscriptionPlan\n    };\n    return {\n      access_token: this.jwtService.sign(payload)\n    };\n  }\n\n  async isUserBanned(user: any) {\n    return this.usersService.isUserBanned(user.id).then((result) => {\n      return result;\n    });\n  }\n\n  async getCaptcha() {\n    const sitekey = process.env.RECAPTCHA_SITE_KEY;\n    return `  reCAPTCHA demo: Simple page         `;\n  }\n\n  async captchaResult(body: any) {\n    const captchaResponse = await this.validateCaptchaResponse(body['g-recaptcha-response']);\n    const response: ReCaptchaResponseDto = JSON.parse(JSON.stringify(captchaResponse));\n\n    if (response.success) {\n      return 'body { text-align: center; padding: 40px 0; background: #EBF0F5; } h1 { color: #88B04B; font-family: \"Nunito Sans\", \"Helvetica Neue\", sans-serif; font-weight: 900; font-size: 40px; margin-bottom: 10px; } p { color: #404F5E; font-family: \"Nunito Sans\", \"Helvetica Neue\", sans-serif; font-size: 20px; margin: 0; } i { color: #9ABC66; font-size: 100px; line-height: 200px; margin-left: -15px; } .card { background: white; padding: 60px; border-radius: 4px; box-shadow: 0 2px 3px #C8D0D8; display: inline-block; margin: 0 auto; }     ✓  Success Verification successful, you can now close this page   ';\n    } else {\n      throw new BadRequestException('Captcha failed');\n    }\n  }\n\n  async validateCaptchaResponse(gReCaptchaResponse: string) {\n    const secretKey = process.env.RECAPTCHA_SECRET_KEY;\n\n    const config = {\n      method: 'post',\n      maxBodyLength: Infinity,\n      url: `https://www.google.com/recaptcha/api/siteverify?response=${gReCaptchaResponse}&secret=${secretKey}`\n    };\n\n    return this.httpService\n      .axiosRef(config)\n      .then(function (response) {\n        return response.data;\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseEntity.html":{"url":"classes/BaseEntity.html","title":"class - BaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entities/base.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Base entity class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateDateColumn, UpdateDateColumn } from 'typeorm';\n\n/**\n * Base entity class\n * @description Base entity class for all entities\n */\nexport abstract class BaseEntity {\n  @CreateDateColumn()\n  createdAt: string;\n\n  @UpdateDateColumn()\n  updatedAt: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Block.html":{"url":"entities/Block.html","title":"entity - Block","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Block\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/block/entities/block.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                blockedUser\n                            \n                            \n                                blockingUser\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        blockedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.blockedBy, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/block/entities/block.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        blockingUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.blocks, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/block/entities/block.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/block/entities/block.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\n\n@Entity()\nexport class Block extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  //A block can only be done by one user but a user can have many blocks\n  @ManyToOne(() => User, (user) => user.blocks, {\n    onDelete: 'CASCADE'\n  })\n  blockingUser: User;\n\n  //A block can only be done by one user but a user can have many blocks\n  @ManyToOne(() => User, (user) => user.blockedBy, {\n    onDelete: 'CASCADE'\n  })\n  blockedUser: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BlockController.html":{"url":"controllers/BlockController.html","title":"controller - BlockController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BlockController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/block/block.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                block\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                blockUser\n                            \n                            \n                                unblockUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        blockUser\n                        \n                    \n                \n            \n            \n                \nblockUser(req, id: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('block-user/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/block/block.controller.ts:18\n                \n            \n\n\n            \n                \n                    Block a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user to block\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unblockUser\n                        \n                    \n                \n            \n            \n                \nunblockUser(req, id: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('unblock-user/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/block/block.controller.ts:37\n                \n            \n\n\n            \n                \n                    Unblock a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user to unblock\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UseGuards, Res, Request, Post, Param, HttpStatus } from '@nestjs/common';\nimport { Response } from 'express';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { BlockService } from './block.service';\n\n@Controller('block')\nexport class BlockController {\n  constructor(private blockService: BlockService) {}\n\n  /**\n   * Block a user\n   * @param req the request object\n   * @param id the id of the user to block\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('block-user/:id')\n  blockUser(@Request() req, @Param('id') id: string, @Res() res: Response) {\n    this.blockService\n      .blockUser(id, req.user)\n      .then((block) => {\n        return res.status(HttpStatus.OK).json(block);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Unblock a user\n   * @param req the request object\n   * @param id the id of the user to unblock\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('unblock-user/:id')\n  unblockUser(@Request() req, @Param('id') id: string, @Res() res: Response) {\n    this.blockService\n      .unblockUser(id, req.user)\n      .then((_) => {\n        return res.status(HttpStatus.OK).json({ message: 'User unblocked' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BlockModule.html":{"url":"modules/BlockModule.html","title":"module - BlockModule","body":"\n                   \n\n\n\n\n    Modules\n    BlockModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BlockModule\n\n\n\ncluster_BlockModule_providers\n\n\n\n\nBlockService\n\nBlockService\n\n\n\nBlockModule\n\nBlockModule\n\nBlockModule -->\n\nBlockService->BlockModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/block/block.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BlockService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BlockController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { BlockService } from './block.service';\nimport { BlockController } from './block.controller';\nimport { Block } from './entities/block.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Block, User])],\n  providers: [BlockService],\n  controllers: [BlockController]\n})\nexport class BlockModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BlockService.html":{"url":"injectables/BlockService.html","title":"injectable - BlockService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BlockService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/block/block.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                blockUser\n                            \n                            \n                                    Async\n                                unblockUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(blockRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/block/block.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        blockRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        blockUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    blockUser(id: string, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/block/block.service.ts:23\n                \n            \n\n\n            \n                \n                    Blocks a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user to be blocked\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user who is blocking the other user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        the block\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unblockUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    unblockUser(id: string, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/block/block.service.ts:62\n                \n            \n\n\n            \n                \n                    Unblocks a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user to be unblocked\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user who is unblocking the other user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the block\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeleteResult, Repository } from 'typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { Block } from './entities/block.entity';\n\n@Injectable()\nexport class BlockService {\n  constructor(\n    @InjectRepository(Block)\n    private blockRepository: Repository,\n\n    @InjectRepository(User)\n    private userRepository: Repository\n  ) {}\n\n  /**\n   * Blocks a user\n   * @param id the id of the user to be blocked\n   * @param user the user who is blocking the other user\n   * @returns the block\n   */\n  async blockUser(id: string, user: any): Promise {\n    const userToBeBlocked = await this.userRepository.findOneBy({ id: id });\n\n    if (!userToBeBlocked) {\n      throw new BadRequestException('User not found');\n    }\n\n    if (userToBeBlocked.id === user.id) {\n      throw new BadRequestException('You cannot block yourself');\n    }\n\n    const blockingUser = await this.userRepository.findOne({\n      where: { id: user.id },\n      relations: ['blocks', 'blocks.blockedUser']\n    });\n\n    if (!blockingUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    blockingUser.blocks.map((block) => {\n      if (block.blockedUser.id === userToBeBlocked.id) {\n        throw new BadRequestException('User already blocked');\n      }\n    });\n\n    const newBlock = new Block();\n    newBlock.blockedUser = userToBeBlocked;\n    newBlock.blockingUser = blockingUser;\n\n    return await this.blockRepository.save(newBlock);\n  }\n\n  /**\n   * Unblocks a user\n   * @param id the id of the user to be unblocked\n   * @param user the user who is unblocking the other user\n   * @returns the block\n   */\n  async unblockUser(id: string, user: any): Promise {\n    const userToBeUnblocked = await this.userRepository.findOneBy({ id: id });\n\n    if (!userToBeUnblocked) {\n      throw new BadRequestException('User not found');\n    }\n\n    if (userToBeUnblocked.id === user.id) {\n      throw new BadRequestException('You cannot unblock yourself');\n    }\n\n    const unblockingUser = await this.userRepository.findOne({\n      where: { id: user.id },\n      relations: ['blocks', 'blocks.blockedUser']\n    });\n\n    if (!unblockingUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    let userFound = false;\n    let blockId = '';\n\n    unblockingUser.blocks.map((block) => {\n      if (block.blockedUser.id === userToBeUnblocked.id) {\n        userFound = true;\n        blockId = block.id;\n      }\n    });\n\n    if (!userFound) {\n      throw new BadRequestException('User not blocked');\n    }\n\n    return await this.blockRepository.delete({ id: blockId });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Comment.html":{"url":"entities/Comment.html","title":"entity - Comment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/entities/comment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                id\n                            \n                            \n                                post\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.comments, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/comment.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/comment.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.comments, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/comment.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/comment.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from '../../user/entities/user.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Post } from './post.entity';\nimport { BaseEntity } from '../../../common/entities/base.entity';\n\n@Entity()\nexport class Comment extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  text: string;\n\n  //A comment can be made my one user but a user can have many comments\n  @ManyToOne(() => User, (user) => user.comments, {\n    onDelete: 'CASCADE'\n  })\n  author: User;\n\n  //A comment can be in one post but a post can have many comments\n  @ManyToOne(() => Post, (post) => post.comments, {\n    onDelete: 'CASCADE'\n  })\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateClueDto.html":{"url":"classes/CreateClueDto.html","title":"class - CreateClueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateClueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/event/dto/create-clue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsLatitude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/dto/create-clue.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsLongitude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/dto/create-clue.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/dto/create-clue.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsLatitude, IsLongitude, IsNotEmpty } from 'class-validator';\n\nexport class CreateClueDto {\n  @IsNotEmpty()\n  text: string;\n\n  @IsNotEmpty()\n  @IsLatitude()\n  latitude: number;\n\n  @IsNotEmpty()\n  @IsLongitude()\n  longitude: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/dto/comment-create.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MaxLength(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/comment-create.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, MaxLength } from 'class-validator';\n\nexport class CreateCommentDto {\n  @IsNotEmpty()\n  @MaxLength(100)\n  text: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEventDto.html":{"url":"classes/CreateEventDto.html","title":"class - CreateEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/event/dto/create-event.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                clues\n                            \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                goal\n                            \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                            \n                                name\n                            \n                            \n                                numberOfParticipants\n                            \n                            \n                                visibility\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        clues\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateClueDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/dto/create-event.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/dto/create-event.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/dto/create-event.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        goal\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateGoalDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/dto/create-event.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsLatitude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/dto/create-event.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsLongitude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/dto/create-event.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/dto/create-event.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        numberOfParticipants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)@Max(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/dto/create-event.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visibility\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Visibility\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Visibility)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/dto/create-event.dto.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsInt,\n  IsLatitude,\n  IsLongitude,\n  IsNotEmpty,\n  IsOptional,\n  Max,\n  Min\n} from 'class-validator';\nimport { Visibility } from '../../../constants/visibility.enum';\nimport { CreateClueDto } from './create-clue.dto';\nimport { CreateGoalDto } from './create-goal.dto';\n\nexport class CreateEventDto {\n  @IsNotEmpty()\n  name: string;\n\n  @IsNotEmpty()\n  description: string;\n\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  numberOfParticipants: number;\n\n  @IsNotEmpty()\n  @IsLatitude()\n  latitude: number;\n\n  @IsNotEmpty()\n  @IsLongitude()\n  longitude: number;\n\n  @IsEnum(Visibility)\n  @IsNotEmpty()\n  visibility: Visibility;\n\n  @IsNotEmpty()\n  @IsDate()\n  date: Date;\n\n  @IsNotEmpty()\n  goal: CreateGoalDto;\n\n  @IsArray()\n  @IsOptional()\n  clues: CreateClueDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateGoalDto.html":{"url":"classes/CreateGoalDto.html","title":"class - CreateGoalDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateGoalDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/event/dto/create-goal.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsLatitude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/dto/create-goal.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsLongitude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/dto/create-goal.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/dto/create-goal.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsLatitude, IsLongitude, IsNotEmpty } from 'class-validator';\n\nexport class CreateGoalDto {\n  @IsNotEmpty()\n  text: string;\n\n  @IsNotEmpty()\n  @IsLatitude()\n  latitude: number;\n\n  @IsNotEmpty()\n  @IsLongitude()\n  longitude: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMemoryDto.html":{"url":"classes/CreateMemoryDto.html","title":"class - CreateMemoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMemoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/memory/dto/memory-create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the DTO for creating a post\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                latitude\n                            \n                            \n                                location\n                            \n                            \n                                longitude\n                            \n                            \n                                visibility\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsLatitude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/memory/dto/memory-create.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/memory/dto/memory-create.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsLongitude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/memory/dto/memory-create.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visibility\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Visibility\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Visibility)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/memory/dto/memory-create.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsLatitude, IsLongitude, IsNotEmpty } from 'class-validator';\nimport { Visibility } from '../../../constants/visibility.enum';\n\n/**\n * This is the DTO for creating a post\n */\nexport class CreateMemoryDto {\n  @IsNotEmpty()\n  @IsLatitude()\n  latitude: number;\n\n  @IsNotEmpty()\n  @IsLongitude()\n  longitude: number;\n\n  @IsNotEmpty()\n  location: string;\n\n  @IsEnum(Visibility)\n  @IsNotEmpty()\n  visibility: Visibility;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/dto/post-create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the DTO for creating a post\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                caption\n                            \n                            \n                                imageUrl\n                            \n                            \n                                location\n                            \n                            \n                                tag\n                            \n                            \n                                type\n                            \n                            \n                                visibility\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        caption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/post-create.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/post-create.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/post-create.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/post-create.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/post-create.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visibility\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Visibility\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Visibility)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/post-create.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty } from 'class-validator';\nimport { Visibility } from '../../../constants/visibility.enum';\n\n/**\n * This is the DTO for creating a post\n */\nexport class CreatePostDto {\n  @IsNotEmpty()\n  caption: string;\n\n  imageUrl: string;\n\n  @IsNotEmpty()\n  tag: string;\n\n  @IsNotEmpty()\n  type: string;\n\n  @IsNotEmpty()\n  location: string;\n\n  @IsEnum(Visibility)\n  @IsNotEmpty()\n  visibility: Visibility;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateScrapBookDto.html":{"url":"classes/CreateScrapBookDto.html","title":"class - CreateScrapBookDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateScrapBookDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/dto/scrapbook-create.dts.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the DTO for creating a scrapbook\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                caption\n                            \n                            \n                                location\n                            \n                            \n                                posts\n                            \n                            \n                                visibility\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        caption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/scrapbook-create.dts.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/scrapbook-create.dts.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/scrapbook-create.dts.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visibility\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Visibility\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Visibility)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/scrapbook-create.dts.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty } from 'class-validator';\nimport { Visibility } from '../../../constants/visibility.enum';\nimport { Post } from '../entities/post.entity';\n\n/**\n * This is the DTO for creating a scrapbook\n */\nexport class CreateScrapBookDto {\n  @IsNotEmpty()\n  caption: string;\n\n  //Optional field\n  posts: Post[];\n\n  @IsNotEmpty()\n  location: string;\n\n  @IsEnum(Visibility)\n  @IsNotEmpty()\n  visibility: Visibility;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/encryption.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for encrypting and comparing passwords\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePasswords\n                            \n                            \n                                    Async\n                                encryptPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                    \n                    comparePasswords(password: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/encryption.service.ts:25\n                \n            \n\n\n            \n                \n                    Compares a password with a hashed password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the password to compare\n\n                                    \n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the hashed password to compare with\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        true if the passwords match, false otherwise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        encryptPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    encryptPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/encryption.service.ts:14\n                \n            \n\n\n            \n                \n                    Encrypts a password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the password to encrypt\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the encrypted password\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { hash, compare } from 'bcryptjs';\n\n/**\n * Service for encrypting and comparing passwords\n */\n@Injectable()\nexport class EncryptionService {\n  /**\n   * Encrypts a password\n   * @param password the password to encrypt\n   * @returns the encrypted password\n   */\n  async encryptPassword(password: string): Promise {\n    const SALT_FACTOR = 10;\n    return await hash(password, SALT_FACTOR);\n  }\n\n  /**\n   * Compares a password with a hashed password\n   * @param password the password to compare\n   * @param hashedPassword the hashed password to compare with\n   * @returns true if the passwords match, false otherwise\n   */\n  async comparePasswords(password: string, hashedPassword: string): Promise {\n    return await compare(password, hashedPassword);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Event.html":{"url":"entities/Event.html","title":"entity - Event","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Event\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/event/entities/event.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                clues\n                            \n                            \n                                creator\n                            \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                goal\n                            \n                            \n                                id\n                            \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                            \n                                name\n                            \n                            \n                                numberOfParticipants\n                            \n                            \n                                participants\n                            \n                            \n                                visibility\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        clues\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EventClue[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, eventClue => eventClue.event)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/event.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.eventsCreated)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/event.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/event.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/event.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        goal\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventGoal\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, goal => goal.event)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/event.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/event.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 8, scale: 6, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/event.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 8, scale: 6, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/event.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/event.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        numberOfParticipants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/event.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        participants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.eventsAttended)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/event.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visibility\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Visibility\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/event.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn\n} from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { Visibility } from '../../../constants/visibility.enum';\nimport { EventClue } from './eventClues.entity';\nimport { EventGoal } from './eventGoal.entity';\n\n@Entity()\nexport class Event extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  name: string;\n\n  @Column()\n  description: string;\n\n  @Column()\n  numberOfParticipants: number;\n\n  @Column({ type: 'decimal', precision: 8, scale: 6, default: 0 })\n  latitude: number;\n\n  @Column({ type: 'decimal', precision: 8, scale: 6, default: 0 })\n  longitude: number;\n\n  @Column()\n  visibility: Visibility;\n\n  @Column()\n  date: Date;\n\n  @OneToMany(() => EventClue, (eventClue) => eventClue.event)\n  clues: EventClue[];\n\n  @OneToOne(() => EventGoal, (goal) => goal.event)\n  @JoinColumn()\n  goal: EventGoal;\n\n  @ManyToOne(() => User, (user) => user.eventsCreated)\n  creator: User;\n\n  @ManyToMany(() => User, (user) => user.eventsAttended)\n  @JoinTable()\n  participants: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/EventClue.html":{"url":"entities/EventClue.html","title":"entity - EventClue","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  EventClue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/event/entities/eventClues.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                creator\n                            \n                            \n                                date\n                            \n                            \n                                event\n                            \n                            \n                                id\n                            \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.cluesCreated, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/eventClues.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/eventClues.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Event\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, event => event.clues, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/eventClues.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/eventClues.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 8, scale: 6, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/eventClues.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 8, scale: 6, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/eventClues.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/eventClues.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from '../../user/entities/user.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { BaseEntity } from '../../../common/entities/base.entity';\nimport { Event } from './event.entity';\n\n@Entity()\nexport class EventClue extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  text: string;\n\n  @Column()\n  date: Date;\n\n  @Column({ type: 'decimal', precision: 8, scale: 6, default: 0 })\n  latitude: number;\n\n  @Column({ type: 'decimal', precision: 8, scale: 6, default: 0 })\n  longitude: number;\n\n  @ManyToOne(() => Event, (event) => event.clues, {\n    onDelete: 'CASCADE'\n  })\n  event: Event;\n\n  @ManyToOne(() => User, (user) => user.cluesCreated, {\n    onDelete: 'CASCADE'\n  })\n  creator: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EventController.html":{"url":"controllers/EventController.html","title":"controller - EventController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EventController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/event/event.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                event\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createEvent\n                            \n                            \n                                deleteEventById\n                            \n                            \n                                getActiveEvents\n                            \n                            \n                                getEventById\n                            \n                            \n                                getJoinedEvents\n                            \n                            \n                                getProximityClues\n                            \n                            \n                                getProximityEvents\n                            \n                            \n                                getUserEvents\n                            \n                            \n                                joinEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createEvent\n                        \n                    \n                \n            \n            \n                \ncreateEvent(req, res: Response, body: CreateEventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('create-event')\n                \n            \n\n            \n                \n                    Defined in src/modules/event/event.controller.ts:36\n                \n            \n\n\n            \n                \n                    Create an event\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                CreateEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the body of the request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteEventById\n                        \n                    \n                \n            \n            \n                \ndeleteEventById(req, res: Response, eventId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/event/event.controller.ts:203\n                \n            \n\n\n            \n                \n                    Deletes an event by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getActiveEvents\n                        \n                    \n                \n            \n            \n                \ngetActiveEvents(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Get('active-events')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/event/event.controller.ts:163\n                \n            \n\n\n            \n                \n                    Gets the user's created events for admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEventById\n                        \n                    \n                \n            \n            \n                \ngetEventById(req, res: Response, eventId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/event/event.controller.ts:184\n                \n            \n\n\n            \n                \n                    Gets an event by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getJoinedEvents\n                        \n                    \n                \n            \n            \n                \ngetJoinedEvents(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('joined-events')\n                \n            \n\n            \n                \n                    Defined in src/modules/event/event.controller.ts:120\n                \n            \n\n\n            \n                \n                    Gets the user's joined events\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProximityClues\n                        \n                    \n                \n            \n            \n                \ngetProximityClues(req, res: Response, body: GetProximityEventsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('proximity-clues')\n                \n            \n\n            \n                \n                    Defined in src/modules/event/event.controller.ts:99\n                \n            \n\n\n            \n                \n                    Gets the clues of events that the user has joined\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                GetProximityEventsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the body of the request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProximityEvents\n                        \n                    \n                \n            \n            \n                \ngetProximityEvents(req, res: Response, body: GetProximityEventsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('proximity-events')\n                \n            \n\n            \n                \n                    Defined in src/modules/event/event.controller.ts:78\n                \n            \n\n\n            \n                \n                    Gets the events that the user has created\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                GetProximityEventsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the body of the request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserEvents\n                        \n                    \n                \n            \n            \n                \ngetUserEvents(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('user-events')\n                \n            \n\n            \n                \n                    Defined in src/modules/event/event.controller.ts:141\n                \n            \n\n\n            \n                \n                    Gets the user's created events\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        joinEvent\n                        \n                    \n                \n            \n            \n                \njoinEvent(req, res: Response, eventId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('join-event/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/event/event.controller.ts:57\n                \n            \n\n\n            \n                \n                    Join an event\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  UseGuards,\n  Res,\n  Request,\n  Post,\n  HttpStatus,\n  Body,\n  Get,\n  Param,\n  Delete,\n  Query\n} from '@nestjs/common';\nimport { Response } from 'express';\nimport { PageOptionsDto } from '../../common/dto/page-options.dto';\nimport { Role } from '../../constants/role.enum';\nimport { Roles } from '../../decorators/roles.decorator';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { CreateEventDto } from './dto/create-event.dto';\nimport { GetProximityEventsDto } from './dto/get-proximity-events.dto';\nimport { EventService } from './event.service';\n\n@Controller('event')\nexport class EventController {\n  constructor(private eventService: EventService) {}\n\n  /**\n   * Create an event\n   * @param req the request object\n   * @param res the response object\n   * @param body the body of the request\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('create-event')\n  createEvent(@Request() req, @Res() res: Response, @Body() body: CreateEventDto) {\n    this.eventService\n      .createEvent(req.user, body)\n      .then((event) => {\n        return res.status(HttpStatus.OK).json(event);\n      })\n      .catch((err) => {\n        console.log(err);\n\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Join an event\n   * @param req the request object\n   * @param res the response object\n   * @param eventId the id of the event\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('join-event/:id')\n  joinEvent(@Request() req, @Res() res: Response, @Param('id') eventId: string) {\n    this.eventService\n      .joinEvent(req.user, eventId)\n      .then((event) => {\n        return res.status(HttpStatus.OK).json(event);\n      })\n      .catch((err) => {\n        console.log(err);\n\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Gets the events that the user has created\n   * @param req the request object\n   * @param res the response object\n   * @param body the body of the request\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('proximity-events')\n  getProximityEvents(@Request() req, @Res() res: Response, @Body() body: GetProximityEventsDto) {\n    this.eventService\n      .getProximityEvents(req.user, body)\n      .then((events) => {\n        return res.status(HttpStatus.OK).json(events);\n      })\n      .catch((err) => {\n        console.log(err);\n\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Gets the clues of events that the user has joined\n   * @param req the request object\n   * @param res the response object\n   * @param body the body of the request\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('proximity-clues')\n  getProximityClues(@Request() req, @Res() res: Response, @Body() body: GetProximityEventsDto) {\n    this.eventService\n      .getProximityClues(req.user, body)\n      .then((clues) => {\n        return res.status(HttpStatus.OK).json(clues);\n      })\n      .catch((err) => {\n        console.log(err);\n\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Gets the user's joined events\n   * @param req the request object\n   * @param res the response object\n   * @param pageOptionsDto the page options\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('joined-events')\n  getJoinedEvents(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.eventService\n      .getJoinedEvents(req.user, pageOptionsDto)\n      .then((events) => {\n        return res.status(HttpStatus.OK).json(events);\n      })\n      .catch((err) => {\n        console.log(err);\n\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Gets the user's created events\n   * @param req the request object\n   * @param res the response object\n   * @param pageOptionsDto the page options\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('user-events')\n  getUserEvents(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.eventService\n      .getUserEvents(req.user, pageOptionsDto)\n      .then((events) => {\n        return res.status(HttpStatus.OK).json(events);\n      })\n      .catch((err) => {\n        console.log(err);\n\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Gets the user's created events for admins\n   * @param req the request object\n   * @param res the response object\n   * @param pageOptionsDto the page options\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Get('active-events')\n  @Roles(Role.Admin)\n  getActiveEvents(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.eventService\n      .getActiveEvents(pageOptionsDto)\n      .then((events) => {\n        return res.status(HttpStatus.OK).json(events);\n      })\n      .catch((err) => {\n        console.log(err);\n\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Gets an event by id\n   * @param req the request object\n   * @param res the response object\n   * @param eventId the id of the event\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('/:id')\n  getEventById(@Request() req, @Res() res: Response, @Param('id') eventId: string) {\n    this.eventService\n      .getEventById(eventId)\n      .then((event) => {\n        return res.status(HttpStatus.OK).json(event);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Deletes an event by id\n   * @param req the request object\n   * @param res the response object\n   * @param eventId the id of the event\n   */\n  @UseGuards(JwtAuthGuard)\n  @Delete('/:id')\n  deleteEventById(@Request() req, @Res() res: Response, @Param('id') eventId: string) {\n    this.eventService\n      .deleteEventById(req.user, eventId)\n      .then((_) => {\n        return res.status(HttpStatus.OK).json({ message: 'Event deleted' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/EventGoal.html":{"url":"entities/EventGoal.html","title":"entity - EventGoal","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  EventGoal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/event/entities/eventGoal.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                creator\n                            \n                            \n                                event\n                            \n                            \n                                id\n                            \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.goalsCreated, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/eventGoal.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Event\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, event => event.goal, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/eventGoal.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/eventGoal.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 8, scale: 6, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/eventGoal.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 8, scale: 6, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/eventGoal.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/entities/eventGoal.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from '../../user/entities/user.entity';\nimport { Column, Entity, ManyToOne, OneToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { BaseEntity } from '../../../common/entities/base.entity';\nimport { Event } from './event.entity';\n\n@Entity()\nexport class EventGoal extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  text: string;\n\n  @Column({ type: 'decimal', precision: 8, scale: 6, default: 0 })\n  latitude: number;\n\n  @Column({ type: 'decimal', precision: 8, scale: 6, default: 0 })\n  longitude: number;\n\n  @OneToOne(() => Event, (event) => event.goal, {\n    onDelete: 'CASCADE'\n  })\n  event: Event;\n\n  @ManyToOne(() => User, (user) => user.goalsCreated, {\n    onDelete: 'CASCADE'\n  })\n  creator: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventModule.html":{"url":"modules/EventModule.html","title":"module - EventModule","body":"\n                   \n\n\n\n\n    Modules\n    EventModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EventModule\n\n\n\ncluster_EventModule_providers\n\n\n\n\nEventService\n\nEventService\n\n\n\nEventModule\n\nEventModule\n\nEventModule -->\n\nEventService->EventModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/event/event.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EventController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { Event } from './entities/event.entity';\nimport { EventClue } from './entities/eventClues.entity';\nimport { EventGoal } from './entities/eventGoal.entity';\nimport { EventController } from './event.controller';\nimport { EventService } from './event.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Event, EventClue, EventGoal, User])],\n  controllers: [EventController],\n  providers: [EventService]\n})\nexport class EventModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventService.html":{"url":"injectables/EventService.html","title":"injectable - EventService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/event/event.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEvent\n                            \n                            \n                                    Async\n                                deleteEventById\n                            \n                            \n                                    Async\n                                getActiveEvents\n                            \n                            \n                                getCoordinatesRadius\n                            \n                            \n                                getEventById\n                            \n                            \n                                    Async\n                                getJoinedEvents\n                            \n                            \n                                    Async\n                                getProximityClues\n                            \n                            \n                                    Async\n                                getProximityEvents\n                            \n                            \n                                    Async\n                                getUserEvents\n                            \n                            \n                                    Async\n                                joinEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventRepository: Repository, eventGoalRepository: Repository, eventClueRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/event/event.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventGoalRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventClueRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    createEvent(user: User, createEventDto: CreateEventDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/event/event.service.ts:35\n                \n            \n\n\n            \n                \n                    Creates a new event\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user who is creating the event\n\n                                    \n                                \n                                \n                                    createEventDto\n                                    \n                                                CreateEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the event data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        the created event\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteEventById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteEventById(user: User, eventId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/event/event.service.ts:189\n                \n            \n\n\n            \n                \n                    Owner of event deletes the event\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user who created the event\n\n                                    \n                                \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the delete operation results\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getActiveEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    getActiveEvents(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/event/event.service.ts:298\n                \n            \n\n\n            \n                \n                    Gets list of currently active events\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        the active events\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCoordinatesRadius\n                        \n                    \n                \n            \n            \n                \ngetCoordinatesRadius(lat: number, lon: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/event/event.service.ts:278\n                \n            \n\n\n            \n                \n                    Gets the radius of 100m around the user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    lat\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the latitude of the user\n\n                                    \n                                \n                                \n                                    lon\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the longitude of the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEventById\n                        \n                    \n                \n            \n            \n                \ngetEventById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/event/event.service.ts:84\n                \n            \n\n\n            \n                \n                    Gets an Event by its id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        the event with the given id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getJoinedEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    getJoinedEvents(user: User, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/event/event.service.ts:212\n                \n            \n\n\n            \n                \n                    Gets the events that the user has joined\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user requesting the events\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        the events that the user has joined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProximityClues\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProximityClues(user: User, body: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/event/event.service.ts:160\n                \n            \n\n\n            \n                \n                    The user gets the clues for the event they are in\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user who is in the event\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the body of the request, containing the latitude and longitude of the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the clues that are within a 100m radius of the user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProximityEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProximityEvents(user: User, body: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/event/event.service.ts:97\n                \n            \n\n\n            \n                \n                    Gets the proximity events for a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user who is creating the event\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the body of the request, containing the latitude and longitude of the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        the events that are within a 100m radius of the user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserEvents\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserEvents(user: User, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/event/event.service.ts:245\n                \n            \n\n\n            \n                \n                    Gets the events that the user has created\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user requesting the events\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        the events that the user has created\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        joinEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    joinEvent(user: User, eventId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/event/event.service.ts:129\n                \n            \n\n\n            \n                \n                    A User Joins an Event\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user who is joining the event\n\n                                    \n                                \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        the event that the user joined\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PageMetaDto } from '../../common/dto/page-meta.dto';\nimport { PageOptionsDto } from '../../common/dto/page-options.dto';\nimport { PageDto } from '../../common/dto/page.dto';\nimport { DeleteResult, LessThan, MoreThan, Repository } from 'typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { CreateEventDto } from './dto/create-event.dto';\nimport { Event } from './entities/event.entity';\nimport { EventClue } from './entities/eventClues.entity';\nimport { EventGoal } from './entities/eventGoal.entity';\n\n@Injectable()\nexport class EventService {\n  constructor(\n    @InjectRepository(Event)\n    private eventRepository: Repository,\n\n    @InjectRepository(EventGoal)\n    private eventGoalRepository: Repository,\n\n    @InjectRepository(EventClue)\n    private eventClueRepository: Repository,\n\n    @InjectRepository(User)\n    private userRepository: Repository\n  ) {}\n\n  /**\n   * Creates a new event\n   * @param user the user who is creating the event\n   * @param createEventDto the event data\n   * @returns the created event\n   */\n  async createEvent(user: User, createEventDto: CreateEventDto): Promise {\n    const newEvent = new Event();\n    newEvent.name = createEventDto.name;\n    newEvent.description = createEventDto.description;\n    newEvent.numberOfParticipants = createEventDto.numberOfParticipants;\n    newEvent.latitude = createEventDto.latitude;\n    newEvent.longitude = createEventDto.longitude;\n    newEvent.visibility = createEventDto.visibility;\n    newEvent.date = createEventDto.date;\n    newEvent.creator = user;\n\n    const eventGoal = new EventGoal();\n    eventGoal.text = createEventDto.goal.text;\n    eventGoal.latitude = createEventDto.goal.latitude;\n    eventGoal.longitude = createEventDto.goal.longitude;\n    eventGoal.creator = user;\n\n    const dbEventGoal = await this.eventGoalRepository.save(eventGoal);\n    newEvent.goal = dbEventGoal;\n\n    const dbEvent = await this.eventRepository.save(newEvent);\n\n    dbEventGoal.event = dbEvent;\n\n    await this.eventGoalRepository.save(dbEventGoal);\n\n    for (let i = 0; i  {\n    return this.eventRepository.findOne({\n      where: { id },\n      relations: ['clues', 'goal', 'creator', 'participants']\n    });\n  }\n\n  /**\n   * Gets the proximity events for a user\n   * @param user the user who is creating the event\n   * @param body the body of the request, containing the latitude and longitude of the user\n   * @returns the events that are within a 100m radius of the user\n   */\n  async getProximityEvents(user: User, body: any): Promise {\n    const [minLat, maxLat, minLon, maxLon] = this.getCoordinatesRadius(\n      body.latitude,\n      body.longitude\n    );\n\n    return this.eventRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('Event.participants', 'Participants')\n      .leftJoinAndSelect('Event.clues', 'Clues')\n      .leftJoinAndSelect('Event.goal', 'Goal')\n      .leftJoinAndSelect('Event.creator', 'Creator')\n      .where({\n        longitude: MoreThan(minLon),\n        latitude: MoreThan(minLat)\n      })\n      .andWhere({\n        longitude: LessThan(maxLon),\n        latitude: LessThan(maxLat)\n      })\n      .andWhere({\n        date: MoreThan(new Date(Date.now() - 604800000))\n      })\n      .getMany();\n  }\n\n  /**\n   * A User Joins an Event\n   * @param user the user who is joining the event\n   * @param eventId the id of the event\n   * @returns the event that the user joined\n   */\n  async joinEvent(user: User, eventId: string): Promise {\n    const event = await this.eventRepository.findOne({\n      where: { id: eventId },\n      relations: ['clues', 'goal', 'creator', 'participants']\n    });\n\n    if (!event) {\n      throw new HttpException('Event not found', HttpStatus.NOT_FOUND);\n    }\n\n    if (event.participants.length >= event.numberOfParticipants) {\n      throw new HttpException('Event is full', HttpStatus.BAD_REQUEST);\n    }\n\n    if (event.participants.some((p) => p.id === user.id)) {\n      throw new HttpException('User already joined event', HttpStatus.BAD_REQUEST);\n    }\n\n    event.participants.push(user);\n\n    await this.eventRepository.save(event);\n\n    return event;\n  }\n\n  /**\n   * The user gets the clues for the event they are in\n   * @param user the user who is in the event\n   * @param body the body of the request, containing the latitude and longitude of the user\n   * @returns the clues that are within a 100m radius of the user\n   */\n  async getProximityClues(user: User, body: any): Promise {\n    const [minLat, maxLat, minLon, maxLon] = this.getCoordinatesRadius(\n      body.latitude,\n      body.longitude\n    );\n\n    return this.eventClueRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('EventClue.event', 'Event')\n      .leftJoinAndSelect('Event.participants', 'Participants')\n      .where({\n        longitude: MoreThan(minLon),\n        latitude: MoreThan(minLat)\n      })\n      .andWhere({\n        longitude: LessThan(maxLon),\n        latitude: LessThan(maxLat)\n      })\n      .andWhere({ date: MoreThan(new Date(Date.now() - 604800000)) })\n      .andWhere('Participants.id = :id', { id: user.id })\n      .getMany();\n  }\n\n  /**\n   * Owner of event deletes the event\n   * @param user the user who created the event\n   * @param eventId the id of the event\n   * @returns the delete operation results\n   */\n  async deleteEventById(user: User, eventId: string): Promise {\n    const event = await this.eventRepository.findOne({\n      where: { id: eventId },\n      relations: ['clues', 'goal', 'creator', 'participants']\n    });\n\n    if (!event) {\n      throw new HttpException('Event not found', HttpStatus.NOT_FOUND);\n    }\n\n    if (event.creator.id !== user.id) {\n      throw new HttpException('User is not creator of event', HttpStatus.BAD_REQUEST);\n    }\n\n    return this.eventRepository.delete({ id: eventId });\n  }\n\n  /**\n   * Gets the events that the user has joined\n   * @param user the user requesting the events\n   * @param pageOptionsDto the page options\n   * @returns the events that the user has joined\n   */\n  async getJoinedEvents(user: User, pageOptionsDto: PageOptionsDto): Promise> {\n    const queryResults = await this.eventRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('Event.creator', 'Creator')\n      .leftJoinAndSelect('Event.participants', 'Participants')\n      .leftJoinAndSelect('Event.clues', 'Clues')\n      .leftJoinAndSelect('Event.goal', 'Goal')\n      .where('Participants.id = :id', { id: user.id })\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take)\n      .orderBy('Event.createdAt', 'DESC')\n      .getManyAndCount()\n      .then((userEventsAndCount) => {\n        return {\n          items: userEventsAndCount[0],\n          itemsCount: userEventsAndCount[1]\n        };\n      });\n\n    const itemCount: number = queryResults.itemsCount;\n    const entities: Event[] = queryResults.items;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  /**\n   * Gets the events that the user has created\n   * @param user the user requesting the events\n   * @param pageOptionsDto the page options\n   * @returns the events that the user has created\n   */\n  async getUserEvents(user: User, pageOptionsDto: PageOptionsDto): Promise> {\n    const queryResults = await this.eventRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('Event.creator', 'Creator')\n      .leftJoinAndSelect('Event.participants', 'Participants')\n      .leftJoinAndSelect('Event.clues', 'Clues')\n      .leftJoinAndSelect('Event.goal', 'Goal')\n      .where('Creator.id = :id', { id: user.id })\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take)\n      .orderBy('Event.createdAt', 'DESC')\n      .getManyAndCount()\n      .then((userEventsAndCount) => {\n        return {\n          items: userEventsAndCount[0],\n          itemsCount: userEventsAndCount[1]\n        };\n      });\n\n    const itemCount: number = queryResults.itemsCount;\n    const entities: Event[] = queryResults.items;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  /**\n   * Gets the radius of 100m around the user\n   * @param lat the latitude of the user\n   * @param lon the longitude of the user\n   * @returns the coordinates of the square that is 100m around the user\n   */\n  getCoordinatesRadius(lat: number, lon: number): [number, number, number, number] {\n    const earthRadius = 6378137; // Earth's radius in meters\n    const radius = 100; // 100-meter radius\n\n    const latDiff = (radius / earthRadius) * (180 / Math.PI);\n    const lonDiff = ((radius / earthRadius) * (180 / Math.PI)) / Math.cos((lat * Math.PI) / 180);\n\n    const minLat = lat - latDiff;\n    const maxLat = lat + latDiff;\n    const minLon = lon - lonDiff;\n    const maxLon = lon + lonDiff;\n\n    return [minLat, maxLat, minLon, maxLon];\n  }\n\n  /**\n   * Gets list of currently active events\n   * @param pageOptionsDto the page options\n   * @returns the active events\n   */\n  async getActiveEvents(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryResults = await this.eventRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('Event.creator', 'Creator')\n      .leftJoinAndSelect('Event.participants', 'Participants')\n      .leftJoinAndSelect('Event.clues', 'Clues')\n      .leftJoinAndSelect('Event.goal', 'Goal')\n      .where({ date: MoreThan(new Date(Date.now() - 604800000)) })\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take)\n      .orderBy('Event.createdAt', 'DESC')\n      .getManyAndCount()\n      .then((userEventsAndCount) => {\n        return {\n          items: userEventsAndCount[0],\n          itemsCount: userEventsAndCount[1]\n        };\n      });\n\n    const itemCount: number = queryResults.itemsCount;\n    const entities: Event[] = queryResults.items;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FeedController.html":{"url":"controllers/FeedController.html","title":"controller - FeedController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FeedController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/feed/feed.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                feed\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getFeed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getFeed\n                        \n                    \n                \n            \n            \n                \ngetFeed(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/feed/feed.controller.ts:19\n                \n            \n\n\n            \n                \n                    Gets the feed\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpStatus, Res, UseGuards, Request, Query } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { Response } from 'express';\nimport { FeedService } from './feed.service';\nimport { PageOptionsDto } from '../../common/dto/page-options.dto';\n\n@Controller('feed')\nexport class FeedController {\n  constructor(private feedService: FeedService) {}\n\n  /**\n   * Gets the feed\n   * @param req the request object\n   * @param res the response object\n   * @param pageOptionsDto the page options\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  getFeed(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.feedService\n      .getFeed(req.user, pageOptionsDto)\n      .then((posts) => {\n        return res.status(HttpStatus.OK).json(posts);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FeedModule.html":{"url":"modules/FeedModule.html","title":"module - FeedModule","body":"\n                   \n\n\n\n\n    Modules\n    FeedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FeedModule\n\n\n\ncluster_FeedModule_providers\n\n\n\n\nFeedService\n\nFeedService\n\n\n\nFeedModule\n\nFeedModule\n\nFeedModule -->\n\nFeedService->FeedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/feed/feed.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FeedService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FeedController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { User } from '../user/entities/user.entity';\nimport { FeedController } from './feed.controller';\nimport { FeedService } from './feed.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Post, User])],\n  controllers: [FeedController],\n  providers: [FeedService]\n})\nexport class FeedModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FeedService.html":{"url":"injectables/FeedService.html","title":"injectable - FeedService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FeedService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/feed/feed.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getFeed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/feed/feed.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFeed\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFeed(user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/feed/feed.service.ts:28\n                \n            \n\n\n            \n                \n                    Gets the feed\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user requesting the feed\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        the feed\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PageMetaDto } from '../../common/dto/page-meta.dto';\nimport { PageOptionsDto } from '../../common/dto/page-options.dto';\nimport { PageDto } from '../../common/dto/page.dto';\nimport { Visibility } from '../../constants/visibility.enum';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { User } from '../user/entities/user.entity';\n\n@Injectable()\nexport class FeedService {\n  constructor(\n    @InjectRepository(Post)\n    private postRepository: Repository,\n\n    @InjectRepository(User)\n    private userRepository: Repository\n  ) {}\n\n  /**\n   * Gets the feed\n   * @description the feed is comprised of public posts and posts of the users that the user is following\n   * @param user the user requesting the feed\n   * @param pageOptionsDto the page options\n   * @returns the feed\n   */\n  async getFeed(user: any, pageOptionsDto: PageOptionsDto): Promise> {\n    const dbUser = await this.userRepository.findOne({\n      where: { id: user.id },\n      relations: [\n        'following',\n        'following.followed.posts',\n        'following.followed.posts.postedBy',\n        'following.followed.posts.likes',\n        'following.followed.posts.likes.likedBy',\n        'following.followed.posts.comments',\n        'following.followed.posts.comments.author'\n      ]\n    });\n\n    if (!dbUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    const publicPosts = await this.postRepository.find({\n      where: { visibility: Visibility.Public },\n      relations: ['postedBy', 'comments', 'likes', 'likes.likedBy', 'comments.author']\n    });\n\n    let posts = dbUser.following.map((user) => user.followed.posts)[0];\n\n    if (!posts) {\n      posts = [];\n    }\n\n    posts = posts\n      .concat(publicPosts)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n\n    const paginatedPosts = posts.slice(\n      (pageOptionsDto.page - 1) * pageOptionsDto.take,\n      pageOptionsDto.page * pageOptionsDto.take\n    );\n\n    const itemCount: number = posts.length;\n    const entities: Post[] = paginatedPosts;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseStorageService.html":{"url":"injectables/FirebaseStorageService.html","title":"injectable - FirebaseStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseStorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/firebase-storage.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Firebase Storage Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expiryDate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteAvatar\n                            \n                            \n                                    Async\n                                deleteMemoryImage\n                            \n                            \n                                    Async\n                                deletePostImage\n                            \n                            \n                                    Async\n                                getMemoryImageSignedURL\n                            \n                            \n                                    Async\n                                getPostImageSignedURL\n                            \n                            \n                                    Async\n                                getSignedURL\n                            \n                            \n                                    Async\n                                updateAvatar\n                            \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadMemoryImage\n                            \n                            \n                                    Async\n                                uploadPostImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAvatar(imageId: any, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:73\n                \n            \n\n\n            \n                \n                    Removes the avatar of a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    imageId\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the image to be removed\n\n                                    \n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteMemoryImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMemoryImage(imageId: any, userId: string, memoryId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:226\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageId\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePostImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePostImage(imageId: any, userId: string, postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageId\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMemoryImageSignedURL\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMemoryImageSignedURL(imageId: any, userId: string, memoryId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:180\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageId\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostImageSignedURL\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostImageSignedURL(imageId: any, userId: string, postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageId\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSignedURL\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSignedURL(userId: string, imageId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAvatar(image: any, previousImageId: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:50\n                \n            \n\n\n            \n                \n                    Update the user avatar\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the image to be uploaded\n\n                                    \n                                \n                                \n                                    previousImageId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the previous image\n\n                                    \n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the image id, url and expiry date of the new image\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(image: any, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:25\n                \n            \n\n\n            \n                \n                    Upload Avatar\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the image to be uploaded\n\n                                    \n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the image id, url and expiry date\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMemoryImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMemoryImage(image: any, userId: string, memoryId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPostImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPostImage(image: any, userId: string, postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:93\n                \n            \n\n\n            \n                \n                    Upload post image\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the image to be uploaded\n\n                                    \n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user\n\n                                    \n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the post\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the image id, url and expiry date\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expiryDate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Date.now() + 6 * 24 * 60 * 60 * 1000\n                    \n                \n                    \n                        \n                                Defined in src/common/services/firebase-storage.service.ts:16\n                        \n                    \n\n            \n                \n                    Expiry date for signed urls\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { bucket, storage } from './firebase-admin.service';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Injectable } from '@nestjs/common';\nimport { GetSignedUrlConfig } from '@google-cloud/storage';\n\n/**\n * Firebase Storage Service\n * @description This service is used to upload, delete and get signed urls for images\n */\n@Injectable()\nexport class FirebaseStorageService {\n  /**\n   * Expiry date for signed urls\n   * @description This is the expiry date for the signed urls, which is 6 days from now\n   */\n  expiryDate = Date.now() + 6 * 24 * 60 * 60 * 1000;\n\n  /**\n   * Upload Avatar\n   * @description This function is used to upload a new avatar image\n   * @param image the image to be uploaded\n   * @param userId the id of the user\n   * @returns the image id, url and expiry date\n   */\n  async uploadAvatar(image: any, userId: string) {\n    const imageId = uuidv4();\n\n    const file = bucket.file(`users/${userId}/avatars/${imageId}.png`);\n\n    await file.save(image);\n\n    const urlOptions: GetSignedUrlConfig = {\n      version: 'v4',\n      action: 'read',\n      expires: this.expiryDate\n    };\n\n    const [url] = await file.getSignedUrl(urlOptions);\n\n    return { imageId: imageId, url: url, expiryDate: this.expiryDate };\n  }\n\n  /**\n   * Update the user avatar\n   * @param image the image to be uploaded\n   * @param previousImageId the id of the previous image\n   * @param userId the id of the user\n   * @returns the image id, url and expiry date of the new image\n   */\n  async updateAvatar(image: any, previousImageId: string, userId: string) {\n    await this.deleteAvatar(previousImageId, userId);\n\n    const file = bucket.file(`users/${userId}/avatars/${previousImageId}.png`);\n\n    await file.save(image);\n\n    const urlOptions: GetSignedUrlConfig = {\n      version: 'v4',\n      action: 'read',\n      expires: this.expiryDate\n    };\n\n    const [url] = await file.getSignedUrl(urlOptions);\n\n    return { url: url, expiryDate: this.expiryDate };\n  }\n\n  /**\n   * Removes the avatar of a user\n   * @param imageId the id of the image to be removed\n   * @param userId the id of the user\n   */\n  async deleteAvatar(imageId: any, userId: string) {\n    const fileName = `users/${userId}/avatars/${imageId}.png`;\n\n    await storage\n      .bucket(process.env.FIREBASE_BUCKET_NAME)\n      .file(fileName)\n      .delete()\n      .catch((err) => {\n        throw err;\n      });\n  }\n\n  /**\n   * Upload post image\n   * @description This function is used to upload a new avatar image\n   * @param image the image to be uploaded\n   * @param userId the id of the user\n   * @param postId the id of the post\n   * @returns the image id, url and expiry date\n   */\n  async uploadPostImage(image: any, userId: string, postId: string) {\n    const imageId = uuidv4();\n\n    const file = bucket.file(`users/${userId}/posts/${postId}/${imageId}.png`);\n\n    await file.save(image);\n\n    const urlOptions: GetSignedUrlConfig = {\n      version: 'v4',\n      action: 'read',\n      expires: this.expiryDate\n    };\n\n    const [url] = await file.getSignedUrl(urlOptions);\n\n    return { imageId: imageId, url: url, expiryDate: this.expiryDate };\n  }\n\n  async deletePostImage(imageId: any, userId: string, postId: string) {\n    const fileName = `users/${userId}/posts/${postId}/${imageId}.png`;\n\n    await storage\n      .bucket(process.env.FIREBASE_BUCKET_NAME)\n      .file(fileName)\n      .delete()\n      .catch((err) => {\n        throw err;\n      });\n  }\n\n  async getSignedURL(userId: string, imageId: string) {\n    // The name of the object for which you want a signed URL\n    const fileName = `users/${userId}/avatars/${imageId}.png`;\n    let imageUrl = '';\n\n    await storage\n      .bucket(process.env.FIREBASE_BUCKET_NAME)\n      .file(fileName)\n      .exists()\n      .then(async (exists) => {\n        if (exists[0]) {\n          const urlOptions: GetSignedUrlConfig = {\n            version: 'v4',\n            action: 'read',\n            expires: this.expiryDate\n          };\n\n          // Get a signed URL that allows temporary access to the object\n          const [url] = await storage\n            .bucket(process.env.FIREBASE_BUCKET_NAME)\n            .file(fileName)\n            .getSignedUrl(urlOptions);\n\n          imageUrl = url;\n        }\n      });\n    return { url: imageUrl, expiryDate: this.expiryDate };\n  }\n\n  async getPostImageSignedURL(imageId: any, userId: string, postId: string) {\n    const fileName = `users/${userId}/posts/${postId}/${imageId}.png`;\n\n    let imageUrl = '';\n    await storage\n      .bucket(process.env.FIREBASE_BUCKET_NAME)\n      .file(fileName)\n      .exists()\n      .then(async (exists) => {\n        if (exists[0]) {\n          const urlOptions: GetSignedUrlConfig = {\n            version: 'v4',\n            action: 'read',\n            expires: this.expiryDate\n          };\n\n          // Get a signed URL that allows temporary access to the object\n          const [url] = await storage\n            .bucket(process.env.FIREBASE_BUCKET_NAME)\n            .file(fileName)\n            .getSignedUrl(urlOptions);\n\n          imageUrl = url;\n        }\n      });\n    return { url: imageUrl, expiryDate: this.expiryDate };\n  }\n\n  async getMemoryImageSignedURL(imageId: any, userId: string, memoryId: string) {\n    const fileName = `users/${userId}/memories/${memoryId}/${imageId}.png`;\n\n    let imageUrl = '';\n    await storage\n      .bucket(process.env.FIREBASE_BUCKET_NAME)\n      .file(fileName)\n      .exists()\n      .then(async (exists) => {\n        if (exists[0]) {\n          const urlOptions: GetSignedUrlConfig = {\n            version: 'v4',\n            action: 'read',\n            expires: this.expiryDate\n          };\n\n          // Get a signed URL that allows temporary access to the object\n          const [url] = await storage\n            .bucket(process.env.FIREBASE_BUCKET_NAME)\n            .file(fileName)\n            .getSignedUrl(urlOptions);\n\n          imageUrl = url;\n        }\n      });\n    return { url: imageUrl, expiryDate: this.expiryDate };\n  }\n\n  async uploadMemoryImage(image: any, userId: string, memoryId: string) {\n    const imageId = uuidv4();\n\n    const file = bucket.file(`users/${userId}/memories/${memoryId}/${imageId}.png`);\n\n    await file.save(image);\n\n    const urlOptions: GetSignedUrlConfig = {\n      version: 'v4',\n      action: 'read',\n      expires: this.expiryDate\n    };\n\n    const [url] = await file.getSignedUrl(urlOptions);\n\n    return { imageId: imageId, url: url, expiryDate: this.expiryDate };\n  }\n\n  async deleteMemoryImage(imageId: any, userId: string, memoryId: string) {\n    const fileName = `users/${userId}/memories/${memoryId}/${imageId}.png`;\n\n    await storage\n      .bucket(process.env.FIREBASE_BUCKET_NAME)\n      .file(fileName)\n      .delete()\n      .catch((err) => {\n        throw err;\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Follow.html":{"url":"entities/Follow.html","title":"entity - Follow","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Follow\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/follow/entities/follow.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                followed\n                            \n                            \n                                followedBy\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        followed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.followers, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.following, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\n\n@Entity()\nexport class Follow extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  //the user doing the following\n  @ManyToOne(() => User, (user) => user.following, {\n    onDelete: 'CASCADE'\n  })\n  followedBy: User;\n\n  //the user being followed\n  @ManyToOne(() => User, (user) => user.followers, {\n    onDelete: 'CASCADE'\n  })\n  followed: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FollowController.html":{"url":"controllers/FollowController.html","title":"controller - FollowController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FollowController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/follow/follow.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                follow\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                acceptFollow\n                            \n                            \n                                    Async\n                                getFollowers\n                            \n                            \n                                    Async\n                                getFollowing\n                            \n                            \n                                    Async\n                                getFollowRequestsReceived\n                            \n                            \n                                    Async\n                                getFollowRequestsSent\n                            \n                            \n                                    Async\n                                rejectFollow\n                            \n                            \n                                    Async\n                                requestFollow\n                            \n                            \n                                    Async\n                                unfollow\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        acceptFollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    acceptFollow(req, res: Response, requestId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch('accept-follow/:requestId')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:39\n                \n            \n\n\n            \n                \n                    Accepts a follow request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    requestId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the follow request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowers(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('followers')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:96\n                \n            \n\n\n            \n                \n                    Gets the followers of a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowing\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowing(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('following')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:119\n                \n            \n\n\n            \n                \n                    Gets the users a user is following\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowRequestsReceived\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowRequestsReceived(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('follow-requests-received')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:142\n                \n            \n\n\n            \n                \n                    Gets the follow requests received by a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowRequestsSent\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowRequestsSent(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('follow-requests-sent')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:165\n                \n            \n\n\n            \n                \n                    Gets the follow requests sent by a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        rejectFollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    rejectFollow(req, res: Response, requestId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch('reject-follow/:requestId')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:58\n                \n            \n\n\n            \n                \n                    Rejects a follow request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    requestId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the follow request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        requestFollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    requestFollow(req, res: Response, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('request-follow/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:20\n                \n            \n\n\n            \n                \n                    Sends a follow request to a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user to follow\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollow(req, res: Response, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete('unfollow/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:77\n                \n            \n\n\n            \n                \n                    Unfollows a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user to follow\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UseGuards, Res, Request, Post, HttpStatus } from '@nestjs/common';\nimport { Delete, Get, Param, Patch, Query } from '@nestjs/common/decorators';\nimport { Response } from 'express';\nimport { PageOptionsDto } from '../..//common/dto/page-options.dto';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { FollowService } from './follow.service';\n\n@Controller('follow')\nexport class FollowController {\n  constructor(private followService: FollowService) {}\n\n  /**\n   * Sends a follow request to a user\n   * @param req the request object\n   * @param res the response object\n   * @param id the id of the user to follow\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('request-follow/:id')\n  async requestFollow(@Request() req, @Res() res: Response, @Param('id') id: string) {\n    this.followService\n      .requestFollow(id, req.user)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json(result);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Accepts a follow request\n   * @param req the request object\n   * @param res the response object\n   * @param requestId the id of the follow request\n   */\n  @UseGuards(JwtAuthGuard)\n  @Patch('accept-follow/:requestId')\n  async acceptFollow(@Request() req, @Res() res: Response, @Param('requestId') requestId: string) {\n    this.followService\n      .acceptFollow(requestId, req.user)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json(result);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Rejects a follow request\n   * @param req the request object\n   * @param res the response object\n   * @param requestId the id of the follow request\n   */\n  @UseGuards(JwtAuthGuard)\n  @Patch('reject-follow/:requestId')\n  async rejectFollow(@Request() req, @Res() res: Response, @Param('requestId') requestId: string) {\n    this.followService\n      .rejectFollow(requestId, req.user)\n      .then((_) => {\n        return res.status(HttpStatus.OK).json({ message: 'Follow request rejected' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Unfollows a user\n   * @param req the request object\n   * @param res the response object\n   * @param id the id of the user to follow\n   */\n  @UseGuards(JwtAuthGuard)\n  @Delete('unfollow/:id')\n  async unfollow(@Request() req, @Res() res: Response, @Param('id') id: string) {\n    this.followService\n      .unfollow(id, req.user)\n      .then((_) => {\n        return res.status(HttpStatus.OK).json({ message: 'Unfollowed' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Gets the followers of a user\n   * @param req the request object\n   * @param res the response object\n   * @param pageOptionsDto the page options\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('followers')\n  async getFollowers(\n    @Request() req,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.followService\n      .getFollowers(req.user, pageOptionsDto)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json(result);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Gets the users a user is following\n   * @param req the request object\n   * @param res the response object\n   * @param pageOptionsDto the page options\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('following')\n  async getFollowing(\n    @Request() req,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.followService\n      .getFollowing(req.user, pageOptionsDto)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json(result);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Gets the follow requests received by a user\n   * @param req the request object\n   * @param res the response object\n   * @param pageOptionsDto the page options\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('follow-requests-received')\n  async getFollowRequestsReceived(\n    @Request() req,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.followService\n      .getFollowRequestsReceived(req.user, pageOptionsDto)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json(result);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Gets the follow requests sent by a user\n   * @param req the request object\n   * @param res the response object\n   * @param pageOptionsDto the page options\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('follow-requests-sent')\n  async getFollowRequestsSent(\n    @Request() req,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.followService\n      .getFollowRequestsSent(req.user, pageOptionsDto)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json(result);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FollowModule.html":{"url":"modules/FollowModule.html","title":"module - FollowModule","body":"\n                   \n\n\n\n\n    Modules\n    FollowModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FollowModule\n\n\n\ncluster_FollowModule_providers\n\n\n\n\nFollowService\n\nFollowService\n\n\n\nFollowModule\n\nFollowModule\n\nFollowModule -->\n\nFollowService->FollowModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/follow/follow.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FollowService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FollowController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { FollowRequest } from './entities/follow-request.entity';\nimport { Follow } from './entities/follow.entity';\nimport { FollowController } from './follow.controller';\nimport { FollowService } from './follow.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Follow, FollowRequest])],\n  controllers: [FollowController],\n  providers: [FollowService]\n})\nexport class FollowModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/FollowRequest.html":{"url":"entities/FollowRequest.html","title":"entity - FollowRequest","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  FollowRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/follow/entities/follow-request.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                requestedBy\n                            \n                            \n                                requestedUser\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow-request.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        requestedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.followRequestsSent, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow-request.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        requestedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.followRequestsReceived, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow-request.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FollowStatus\n\n                    \n                \n                \n                    \n                        Default value : FollowStatus.Pending\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow-request.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { FollowStatus } from '../../../constants/follow-status.enum';\n\n@Entity()\nexport class FollowRequest extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ default: FollowStatus.Pending })\n  status: FollowStatus = FollowStatus.Pending;\n\n  //the user doing the following\n  @ManyToOne(() => User, (user) => user.followRequestsSent, {\n    onDelete: 'CASCADE'\n  })\n  requestedBy: User;\n\n  //the user being followed\n  @ManyToOne(() => User, (user) => user.followRequestsReceived, {\n    onDelete: 'CASCADE'\n  })\n  requestedUser: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FollowService.html":{"url":"injectables/FollowService.html","title":"injectable - FollowService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FollowService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/follow/follow.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                acceptFollow\n                            \n                            \n                                    Async\n                                getFollowers\n                            \n                            \n                                    Async\n                                getFollowing\n                            \n                            \n                                    Async\n                                getFollowRequestsReceived\n                            \n                            \n                                    Async\n                                getFollowRequestsSent\n                            \n                            \n                                    Async\n                                rejectFollow\n                            \n                            \n                                    Async\n                                requestFollow\n                            \n                            \n                                    Async\n                                unfollow\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, followRequestsRepository: Repository, followsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/follow/follow.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        followRequestsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        followsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        acceptFollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    acceptFollow(id: string, userToBeFollowed: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:91\n                \n            \n\n\n            \n                \n                    Accepts a follow request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the follow request\n\n                                    \n                                \n                                \n                                    userToBeFollowed\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user to be followed\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        the follow request\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowers(user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:185\n                \n            \n\n\n            \n                \n                    Gets the followers of a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user to get the followers for\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        the followers\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowing\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowing(user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:213\n                \n            \n\n\n            \n                \n                    Gets the following of a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user to get the following for\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        the following\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowRequestsReceived\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowRequestsReceived(user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:241\n                \n            \n\n\n            \n                \n                    Gets the follow requests received by a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user to get the follow requests for\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        the follow requests\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowRequestsSent\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowRequestsSent(user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:268\n                \n            \n\n\n            \n                \n                    Gets the follow requests sent by a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user to get the follow requests for\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        the follow requests\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        rejectFollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    rejectFollow(id: string, userToBeFollowed: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:148\n                \n            \n\n\n            \n                \n                    Rejects a follow request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the follow request\n\n                                    \n                                \n                                \n                                    userToBeFollowed\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user to be followed\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the follow request\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        requestFollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    requestFollow(id: string, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:31\n                \n            \n\n\n            \n                \n                    The follow requests sent by the user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user to follow\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user requesting to follow\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the follow request\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollow(id: string, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:295\n                \n            \n\n\n            \n                \n                    Unfollows a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user to unfollow\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user requesting the unfollow\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the follow request\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, ForbiddenException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PageMetaDto } from '../../common/dto/page-meta.dto';\nimport { PageOptionsDto } from '../../common/dto/page-options.dto';\nimport { PageDto } from '../../common/dto/page.dto';\nimport { FollowStatus } from '../../constants/follow-status.enum';\nimport { DeleteResult, Repository, UpdateResult } from 'typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { FollowRequest } from './entities/follow-request.entity';\nimport { Follow } from './entities/follow.entity';\n\n@Injectable()\nexport class FollowService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n\n    @InjectRepository(FollowRequest)\n    private followRequestsRepository: Repository,\n\n    @InjectRepository(Follow)\n    private followsRepository: Repository\n  ) {}\n\n  /**\n   * The follow requests sent by the user\n   * @param id the id of the user to follow\n   * @param user the user requesting to follow\n   * @returns the follow request\n   */\n  async requestFollow(id: string, user: any): Promise {\n    const userToBeFollowed = await this.usersRepository.findOneBy({ id: id });\n\n    const userRequestingFollow = await this.usersRepository.findOne({\n      where: { id: user.id },\n      relations: [\n        'following',\n        'following.followed',\n        'followRequestsSent',\n        'followRequestsSent.requestedUser',\n        'blockedBy.blockingUser'\n      ]\n    });\n\n    if (!userToBeFollowed) {\n      throw new BadRequestException('User not found');\n    }\n\n    if (!userRequestingFollow) {\n      throw new BadRequestException('User not found');\n    }\n\n    if (userToBeFollowed.id === userRequestingFollow.id) {\n      throw new BadRequestException('You cannot follow yourself');\n    }\n\n    userRequestingFollow.blockedBy.map((block) => {\n      if (block.blockingUser.id === userToBeFollowed.id) {\n        throw new BadRequestException('You have blocked by this user');\n      }\n    });\n\n    userRequestingFollow.followRequestsSent.map((followRequest) => {\n      if (\n        followRequest.requestedUser.id === userToBeFollowed.id &&\n        followRequest.status === FollowStatus.Pending\n      ) {\n        throw new BadRequestException('You already request to follow this user');\n      }\n    });\n\n    userRequestingFollow.following.map((follow) => {\n      if (follow.followed.id === userToBeFollowed.id) {\n        throw new BadRequestException('You are already following this user');\n      }\n    });\n\n    const followRequest = new FollowRequest();\n    followRequest.requestedBy = user;\n    followRequest.requestedUser = userToBeFollowed;\n\n    return await this.followRequestsRepository.save(followRequest);\n  }\n\n  /**\n   * Accepts a follow request\n   * @param id the id of the follow request\n   * @param userToBeFollowed the user to be followed\n   * @returns the follow request\n   */\n  async acceptFollow(id: string, userToBeFollowed: any): Promise {\n    const followRequest = await this.followRequestsRepository.findOne({\n      where: { id: id },\n      relations: ['requestedBy', 'requestedUser']\n    });\n\n    if (!followRequest) {\n      throw new BadRequestException('Follow request not found');\n    }\n\n    if (followRequest.requestedUser.id !== userToBeFollowed.id) {\n      throw new ForbiddenException('You cannot accept this follow request');\n    }\n\n    if (!followRequest.requestedBy) {\n      throw new BadRequestException('Follow request is no longer valid');\n    }\n\n    if (followRequest.status === FollowStatus.Accepted) {\n      throw new BadRequestException('This follow request has already been accepted');\n    }\n\n    if (followRequest.status === FollowStatus.Rejected) {\n      throw new BadRequestException('This follow request has been rejected');\n    }\n\n    await this.followRequestsRepository.update(followRequest.id, { status: FollowStatus.Accepted });\n\n    const follow = new Follow();\n    follow.followedBy = followRequest.requestedBy;\n    follow.followed = followRequest.requestedUser;\n\n    const followedBy = await this.usersRepository.findOne({\n      where: { id: follow.followedBy.id }\n    });\n\n    followedBy.followingCount = followedBy.followingCount + 1;\n\n    await this.usersRepository.save(followedBy);\n\n    const followed = await this.usersRepository.findOne({\n      where: { id: follow.followed.id }\n    });\n\n    followed.followersCount = followed.followersCount + 1;\n\n    await this.usersRepository.save(followed);\n\n    return await this.followsRepository.save(follow);\n  }\n\n  /**\n   * Rejects a follow request\n   * @param id the id of the follow request\n   * @param userToBeFollowed the user to be followed\n   * @returns the follow request\n   */\n  async rejectFollow(id: string, userToBeFollowed: any): Promise {\n    const followRequest = await this.followRequestsRepository.findOne({\n      where: { id: id },\n      relations: ['requestedBy', 'requestedUser']\n    });\n\n    if (!followRequest) {\n      throw new BadRequestException('Follow request not found');\n    }\n\n    if (followRequest.requestedUser.id !== userToBeFollowed.id) {\n      throw new ForbiddenException('You cannot reject this follow request');\n    }\n\n    if (!followRequest.requestedBy) {\n      throw new BadRequestException('Follow request is no longer valid');\n    }\n\n    if (followRequest.status === FollowStatus.Accepted) {\n      throw new BadRequestException('This follow request has been accepted');\n    }\n\n    if (followRequest.status === FollowStatus.Rejected) {\n      throw new BadRequestException('This follow request has already been rejected');\n    }\n\n    return this.followRequestsRepository.update(followRequest.id, {\n      status: FollowStatus.Rejected\n    });\n  }\n\n  /**\n   * Gets the followers of a user\n   * @param user the user to get the followers for\n   * @param pageOptionsDto the page options\n   * @returns the followers\n   */\n  async getFollowers(user: any, pageOptionsDto: PageOptionsDto): Promise> {\n    const dbUser = await this.usersRepository.findOne({\n      where: { id: user.id },\n      relations: ['followers', 'followers.followedBy']\n    });\n\n    if (!dbUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    const users = dbUser.followers.map((follow) => {\n      return follow.followedBy;\n    });\n\n    const itemCount: number = users.length;\n    const entities: User[] = users;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  /**\n   * Gets the following of a user\n   * @param user the user to get the following for\n   * @param pageOptionsDto the page options\n   * @returns the following\n   */\n  async getFollowing(user: any, pageOptionsDto: PageOptionsDto): Promise> {\n    const dbUser = await this.usersRepository.findOne({\n      where: { id: user.id },\n      relations: ['following', 'following.followed']\n    });\n\n    if (!dbUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    const users = dbUser.following.map((follow) => {\n      return follow.followed;\n    });\n\n    const itemCount: number = users.length;\n    const entities: User[] = users;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  /**\n   * Gets the follow requests received by a user\n   * @param user the user to get the follow requests for\n   * @param pageOptionsDto the page options\n   * @returns the follow requests\n   */\n  async getFollowRequestsReceived(\n    user: any,\n    pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const dbUser = await this.usersRepository.findOne({\n      where: { id: user.id },\n      relations: ['followRequestsReceived', 'followRequestsReceived.requestedBy']\n    });\n\n    if (!dbUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    const itemCount: number = dbUser.followRequestsReceived.length;\n    const entities: FollowRequest[] = dbUser.followRequestsReceived;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  /**\n   * Gets the follow requests sent by a user\n   * @param user the user to get the follow requests for\n   * @param pageOptionsDto the page options\n   * @returns the follow requests\n   */\n  async getFollowRequestsSent(\n    user: any,\n    pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const dbUser = await this.usersRepository.findOne({\n      where: { id: user.id },\n      relations: ['followRequestsSent', 'followRequestsSent.requestedUser']\n    });\n\n    if (!dbUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    const itemCount: number = dbUser.followRequestsSent.length;\n    const entities: FollowRequest[] = dbUser.followRequestsSent;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  /**\n   * Unfollows a user\n   * @param id the id of the user to unfollow\n   * @param user the user requesting the unfollow\n   * @returns the follow request\n   */\n  async unfollow(id: string, user: any): Promise {\n    const userToBeUnfollowed = await this.usersRepository.findOneBy({ id: id });\n    const userRequestingUnfollow = await this.usersRepository.findOne({\n      where: { id: user.id },\n      relations: ['following', 'following.followed']\n    });\n\n    if (!userToBeUnfollowed) {\n      throw new BadRequestException('User not found');\n    }\n\n    if (!userRequestingUnfollow) {\n      throw new BadRequestException('User not found');\n    }\n\n    if (userToBeUnfollowed.id === userRequestingUnfollow.id) {\n      throw new BadRequestException('You cannot unfollow yourself');\n    }\n\n    let isFollowing = false;\n    let followId = '';\n\n    userRequestingUnfollow.following.map((follow) => {\n      if (follow.followed.id === userToBeUnfollowed.id) {\n        isFollowing = true;\n        followId = follow.id;\n      }\n    });\n\n    if (!isFollowing) {\n      throw new BadRequestException('You are not following this user');\n    }\n\n    userToBeUnfollowed.followersCount = userToBeUnfollowed.followersCount - 1;\n    userRequestingUnfollow.followingCount = userRequestingUnfollow.followingCount - 1;\n\n    await this.usersRepository.save(userToBeUnfollowed);\n    await this.usersRepository.save(userRequestingUnfollow);\n\n    return this.followsRepository.delete(followId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProximityEventsDto.html":{"url":"classes/GetProximityEventsDto.html","title":"class - GetProximityEventsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProximityEventsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/event/dto/get-proximity-events.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the DTO for creating a post\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsLatitude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/dto/get-proximity-events.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsLongitude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/event/dto/get-proximity-events.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsLatitude, IsLongitude, IsNotEmpty } from 'class-validator';\n\n/**\n * This is the DTO for creating a post\n */\nexport class GetProximityEventsDto {\n  @IsNotEmpty()\n  @IsLatitude()\n  latitude: number;\n\n  @IsNotEmpty()\n  @IsLongitude()\n  longitude: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProximityMemoryDto.html":{"url":"classes/GetProximityMemoryDto.html","title":"class - GetProximityMemoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProximityMemoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/memory/dto/get-proximity-memory.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the DTO for creating a post\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsLatitude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/memory/dto/get-proximity-memory.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsLongitude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/memory/dto/get-proximity-memory.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsLatitude, IsLongitude, IsNotEmpty } from 'class-validator';\n\n/**\n * This is the DTO for creating a post\n */\nexport class GetProximityMemoryDto {\n  @IsNotEmpty()\n  @IsLatitude()\n  latitude: number;\n\n  @IsNotEmpty()\n  @IsLongitude()\n  longitude: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategies/jwt.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport jwtConfig from '../constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      //Extract the token from the authorization header\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      //Ensure that the token has not expired\n      ignoreExpiration: false,\n      //Use the secret to verify the token\n      secretOrKey: jwtConfig.secret\n    });\n  }\n\n  //Invoked after Passport has verified the token\n  async validate(payload: any) {\n    return {\n      id: payload.sub,\n      email: payload.email,\n      role: payload.role,\n      subscriptionPlan: payload.subscriptionPlan\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Like.html":{"url":"entities/Like.html","title":"entity - Like","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Like\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/entities/post-like.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                likedBy\n                            \n                            \n                                likedPost\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post-like.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.likes, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post-like.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likedPost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.likes, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post-like.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { User } from '../../user/entities/user.entity';\nimport { Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Post } from './post.entity';\n\n@Entity()\nexport class Like extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @ManyToOne(() => Post, (post) => post.likes, {\n    onDelete: 'CASCADE'\n  })\n  likedPost: Post;\n\n  //A like can only be liked by one user but a user can have many likes\n  @ManyToOne(() => User, (user) => user.likes, {\n    onDelete: 'CASCADE'\n  })\n  likedBy: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/local.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Local strategy for passport\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/local.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategies/local.strategy.ts:21\n                \n            \n\n\n            \n                \n                    Validates the user using password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        email of the user\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        password input by the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the user details or throws an UnauthorizedException if the user is not found or has an invalid password\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\n\n/**\n * Local strategy for passport\n */\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  /**\n   * Validates the user using password\n   * @param email email of the user\n   * @param password password input by the user\n   * @returns the user details or throws an UnauthorizedException if the user is not found or has an invalid password\n   */\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Memory.html":{"url":"entities/Memory.html","title":"entity - Memory","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Memory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/memory/entities/memory.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                imageExpiryDate\n                            \n                            \n                                imageId\n                            \n                            \n                                imageUrl\n                            \n                            \n                                latitude\n                            \n                            \n                                location\n                            \n                            \n                                longitude\n                            \n                            \n                                user\n                            \n                            \n                                visibility\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/memory/entities/memory.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageExpiryDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/memory/entities/memory.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/memory/entities/memory.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'longtext'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/memory/entities/memory.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 8, scale: 6, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/memory/entities/memory.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/memory/entities/memory.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 8, scale: 6, default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/memory/entities/memory.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.memories, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/memory/entities/memory.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visibility\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Visibility\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/memory/entities/memory.entity.ts:21\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from '../../user/entities/user.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { BaseEntity } from '../../../common/entities/base.entity';\nimport { Visibility } from '../../../constants/visibility.enum';\n\n@Entity()\nexport class Memory extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  location: string;\n\n  @Column({ type: 'decimal', precision: 8, scale: 6, default: 0 })\n  latitude: number;\n\n  @Column({ type: 'decimal', precision: 8, scale: 6, default: 0 })\n  longitude: number;\n\n  @Column()\n  visibility: Visibility;\n\n  @Column({ type: 'longtext' })\n  imageUrl: string = '';\n\n  @Column({ default: '' })\n  imageId: string = '';\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  imageExpiryDate: Date;\n\n  //A memory can be made my one user but a user can have many memories\n  @ManyToOne(() => User, (user) => user.memories, {\n    onDelete: 'CASCADE'\n  })\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MemoryController.html":{"url":"controllers/MemoryController.html","title":"controller - MemoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MemoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/memory/memory.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                memory\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createPost\n                            \n                            \n                                deleteMemoryById\n                            \n                            \n                                getMemoryById\n                            \n                            \n                                getProximityMemories\n                            \n                            \n                                getUserMemories\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createPost\n                        \n                    \n                \n            \n            \n                \ncreatePost(body: CreateMemoryDto, req, res: Response, file)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('create')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/memory/memory.controller.ts:39\n                \n            \n\n\n            \n                \n                    Creates a memory\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateMemoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the body of the request\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    file\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the file uploaded\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        the created memory\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteMemoryById\n                        \n                    \n                \n            \n            \n                \ndeleteMemoryById(id: string, req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/memory/memory.controller.ts:134\n                \n            \n\n\n            \n                \n                    Deletes the memory by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the memory\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMemoryById\n                        \n                    \n                \n            \n            \n                \ngetMemoryById(id: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/memory/memory.controller.ts:113\n                \n            \n\n\n            \n                \n                    Gets the memory by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the memory\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProximityMemories\n                        \n                    \n                \n            \n            \n                \ngetProximityMemories(body: GetProximityMemoryDto, req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('proximity-memories')\n                \n            \n\n            \n                \n                    Defined in src/modules/memory/memory.controller.ts:69\n                \n            \n\n\n            \n                \n                    Gets the nearby memories of the user sending the request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                GetProximityMemoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the body of the request\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserMemories\n                        \n                    \n                \n            \n            \n                \ngetUserMemories(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('user-memories')\n                \n            \n\n            \n                \n                    Defined in src/modules/memory/memory.controller.ts:95\n                \n            \n\n\n            \n                \n                    Gets the memories of the user sending the request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpStatus,\n  Param,\n  Post,\n  Query,\n  Request,\n  Res,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { Response } from 'express';\nimport { PageOptionsDto } from '../../common/dto/page-options.dto';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { GetProximityMemoryDto } from './dto/get-proximity-memory.dto';\nimport { CreateMemoryDto } from './dto/memory-create.dto';\nimport { MemoryService } from './memory.service';\n\n@Controller('memory')\nexport class MemoryController {\n  constructor(private memoryService: MemoryService) {}\n\n  /**\n   * Creates a memory\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   * @param file the file uploaded\n   * @returns the created memory\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('create')\n  @UseInterceptors(FileInterceptor('image'))\n  createPost(\n    @Body() body: CreateMemoryDto,\n    @Request() req,\n    @Res() res: Response,\n    @UploadedFile() file\n  ) {\n    if (!file) {\n      return res.status(HttpStatus.BAD_REQUEST).json({ message: 'Image is required' });\n    }\n    this.memoryService\n      .createMemory(req.user, body, file)\n      .then((memory) => {\n        return res.status(HttpStatus.OK).json(memory);\n      })\n      .catch((err) => {\n        console.log(err);\n\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Gets the nearby memories of the user sending the request\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   * @param pageOptionsDto the page options\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('proximity-memories')\n  getProximityMemories(\n    @Body() body: GetProximityMemoryDto,\n    @Request() req,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.memoryService\n      .getProximityMemories(req.user, body, pageOptionsDto)\n      .then((memory) => {\n        return res.status(HttpStatus.OK).json(memory);\n      })\n      .catch((err) => {\n        console.log(err);\n\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Gets the memories of the user sending the request\n   * @param req the request object\n   * @param res the response object\n   * @param pageOptionsDto the page options\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('user-memories')\n  getUserMemories(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.memoryService\n      .getUserMemories(req.user, pageOptionsDto)\n      .then((memories) => {\n        return res.status(HttpStatus.OK).json(memories);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Gets the memory by id\n   * @param id the id of the memory\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('/:id')\n  getMemoryById(@Param('id') id: string, @Res() res: Response) {\n    this.memoryService\n      .getMemoryById(id)\n      .then((memory) => {\n        return res.status(HttpStatus.OK).json(memory);\n      })\n      .catch((err) => {\n        console.log(err);\n\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Deletes the memory by id\n   * @param id the id of the memory\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Delete('/:id')\n  deleteMemoryById(@Param('id') id: string, @Request() req, @Res() res: Response) {\n    this.memoryService\n      .deleteMemoryById(req.user, id)\n      .then((memory) => {\n        return res.status(HttpStatus.OK).json(memory);\n      })\n      .catch((err) => {\n        console.log(err);\n\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MemoryModule.html":{"url":"modules/MemoryModule.html","title":"module - MemoryModule","body":"\n                   \n\n\n\n\n    Modules\n    MemoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MemoryModule\n\n\n\ncluster_MemoryModule_providers\n\n\n\n\nMemoryService\n\nMemoryService\n\n\n\nMemoryModule\n\nMemoryModule\n\nMemoryModule -->\n\nMemoryService->MemoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/memory/memory.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MemoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MemoryController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Memory } from './entities/memory.entity';\nimport { MemoryController } from './memory.controller';\nimport { MemoryService } from './memory.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Memory])],\n  controllers: [MemoryController],\n  providers: [MemoryService]\n})\nexport class MemoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MemoryService.html":{"url":"injectables/MemoryService.html","title":"injectable - MemoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MemoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/memory/memory.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMemory\n                            \n                            \n                                    Async\n                                deleteMemoryById\n                            \n                            \n                                getCoordinatesRadius\n                            \n                            \n                                    Async\n                                getMemoryById\n                            \n                            \n                                    Async\n                                getProximityMemories\n                            \n                            \n                                    Async\n                                getUserMemories\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(memoryRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/memory/memory.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        memoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMemory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMemory(user: User, memory: CreateMemoryDto, image: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/memory/memory.service.ts:27\n                \n            \n\n\n            \n                \n                    Creates a memory\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user who created the memory\n\n                                    \n                                \n                                \n                                    memory\n                                    \n                                                CreateMemoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the memory to be created\n\n                                    \n                                \n                                \n                                    image\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the image to be uploaded\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        the created memory\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteMemoryById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMemoryById(user: any, memoryId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/memory/memory.service.ts:172\n                \n            \n\n\n            \n                \n                    Deletes a memory by its id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user who created the memory\n\n                                    \n                                \n                                \n                                    memoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the memory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the deleted operation results\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCoordinatesRadius\n                        \n                    \n                \n            \n            \n                \ngetCoordinatesRadius(lat: number, lon: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/memory/memory.service.ts:112\n                \n            \n\n\n            \n                \n                    Gets the coordinates of a 10m radius\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    lat\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the latitude of the user\n\n                                    \n                                \n                                \n                                    lon\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the longitude of the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMemoryById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMemoryById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/memory/memory.service.ts:132\n                \n            \n\n\n            \n                \n                    Gets a memory by its id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the memory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        the memory\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProximityMemories\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProximityMemories(user: User, body: GetProximityMemoryDto, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/memory/memory.service.ts:66\n                \n            \n\n\n            \n                \n                    Gets the nearby memories of the user sending the request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user who created the memory\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                GetProximityMemoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the body of the request\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        the memories\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserMemories\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserMemories(user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/memory/memory.service.ts:193\n                \n            \n\n\n            \n                \n                    Gets the memories of the user sending the request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user who created the memory\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        the memories\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FirebaseStorageService } from '../../common/services/firebase-storage.service';\nimport { DeleteResult, LessThan, MoreThan, Repository } from 'typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { GetProximityMemoryDto } from './dto/get-proximity-memory.dto';\nimport { CreateMemoryDto } from './dto/memory-create.dto';\nimport { Memory } from './entities/memory.entity';\nimport { PageMetaDto } from '../../common/dto/page-meta.dto';\nimport { PageOptionsDto } from '../../common/dto/page-options.dto';\nimport { PageDto } from '../../common/dto/page.dto';\n\n@Injectable()\nexport class MemoryService {\n  constructor(\n    @InjectRepository(Memory)\n    private memoryRepository: Repository\n  ) {}\n\n  /**\n   * Creates a memory\n   * @param user the user who created the memory\n   * @param memory the memory to be created\n   * @param image the image to be uploaded\n   * @returns the created memory\n   */\n  async createMemory(user: User, memory: CreateMemoryDto, image: any): Promise {\n    const newMemory = new Memory();\n    newMemory.location = memory.location;\n    newMemory.latitude = memory.latitude;\n    newMemory.longitude = memory.longitude;\n    newMemory.location = memory.location;\n    newMemory.visibility = memory.visibility;\n    newMemory.user = user;\n\n    const savedMemory = await this.memoryRepository.save(newMemory);\n    const { imageId, url, expiryDate } = await new FirebaseStorageService().uploadMemoryImage(\n      image.buffer,\n      user.id,\n      savedMemory.id\n    );\n\n    await this.memoryRepository\n      .createQueryBuilder()\n      .update(Memory)\n      .set({\n        imageId: imageId,\n        imageUrl: url,\n        imageExpiryDate: new Date(expiryDate)\n      })\n      .where('id = :id', { id: savedMemory.id })\n      .execute();\n\n    return this.memoryRepository.findOneBy({ id: savedMemory.id }).then((memory) => {\n      return memory;\n    });\n  }\n\n  /**\n   * Gets the nearby memories of the user sending the request\n   * @param user the user who created the memory\n   * @param body the body of the request\n   * @param pageOptionsDto the page options\n   * @returns the memories\n   */\n  async getProximityMemories(\n    user: User,\n    body: GetProximityMemoryDto,\n    pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const [minLat, maxLat, minLon, maxLon] = this.getCoordinatesRadius(\n      body.latitude,\n      body.longitude\n    );\n\n    const queryResults = await this.memoryRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('Memory.user', 'User')\n      .where({\n        longitude: MoreThan(minLon),\n        latitude: MoreThan(minLat)\n      })\n      .andWhere({\n        longitude: LessThan(maxLon),\n        latitude: LessThan(maxLat)\n      })\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take)\n      .orderBy('Memory.createdAt', pageOptionsDto.order)\n      .getManyAndCount()\n      .then((userMemoriesAndCount) => {\n        return {\n          items: userMemoriesAndCount[0],\n          itemsCount: userMemoriesAndCount[1]\n        };\n      });\n\n    const itemCount: number = queryResults.itemsCount;\n    const entities: Memory[] = queryResults.items;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  /**\n   * Gets the coordinates of a 10m radius\n   * @param lat the latitude of the user\n   * @param lon the longitude of the user\n   * @returns the coordinates of the radius\n   */\n  getCoordinatesRadius(lat: number, lon: number): [number, number, number, number] {\n    const earthRadius = 6378137; // Earth's radius in meters\n    const radius = 10; // 5-meter radius\n\n    const latDiff = (radius / earthRadius) * (180 / Math.PI);\n    const lonDiff = ((radius / earthRadius) * (180 / Math.PI)) / Math.cos((lat * Math.PI) / 180);\n\n    const minLat = lat - latDiff;\n    const maxLat = lat + latDiff;\n    const minLon = lon - lonDiff;\n    const maxLon = lon + lonDiff;\n\n    return [minLat, maxLat, minLon, maxLon];\n  }\n\n  /**\n   * Gets a memory by its id\n   * @param id the id of the memory\n   * @returns the memory\n   */\n  async getMemoryById(id: string): Promise {\n    const memory = await this.memoryRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('Memory.user', 'User')\n      .where('Memory.id = :id', { id: id })\n      .getOne();\n\n    if (!memory) {\n      throw new HttpException('Memory not found', HttpStatus.NOT_FOUND);\n    }\n\n    if (memory.imageId) {\n      if (memory.imageId && memory.imageExpiryDate  {\n    const dbMemory = await this.getMemoryById(memoryId).then((memory) => {\n      return memory;\n    });\n\n    if (!dbMemory) {\n      throw new HttpException('Memory does not exist', HttpStatus.NO_CONTENT);\n    }\n\n    if (dbMemory.imageId) {\n      await new FirebaseStorageService().deleteMemoryImage(dbMemory.imageId, user.id, dbMemory.id);\n    }\n    return await this.memoryRepository.delete({ id: memoryId });\n  }\n\n  /**\n   * Gets the memories of the user sending the request\n   * @param user the user who created the memory\n   * @param pageOptionsDto the page options\n   * @returns the memories\n   */\n  async getUserMemories(user: any, pageOptionsDto: PageOptionsDto): Promise> {\n    const queryResults = await this.memoryRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('Memory.user', 'User')\n      .where('User.id = :id', { id: user.id })\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take)\n      .orderBy('Memory.createdAt', 'DESC')\n      .getManyAndCount()\n      .then((userPostsAndCount) => {\n        return {\n          items: userPostsAndCount[0],\n          itemsCount: userPostsAndCount[1]\n        };\n      });\n\n    const itemCount: number = queryResults.itemsCount;\n    const entities: Memory[] = queryResults.items;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationController.html":{"url":"controllers/NotificationController.html","title":"controller - NotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notification/notification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                notification\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendNotificationToAll\n                            \n                            \n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendNotificationToAll\n                        \n                    \n                \n            \n            \n                \nsendNotificationToAll(req, res: Response, body: SendNotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Post('send')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/notification/notification.controller.ts:42\n                \n            \n\n\n            \n                \n                    Send a notification to users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                SendNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the body of the request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signup\n                        \n                    \n                \n            \n            \n                \nsignup(req, res: Response, fcmToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('signup/:fcmToken')\n                \n            \n\n            \n                \n                    Defined in src/modules/notification/notification.controller.ts:22\n                \n            \n\n\n            \n                \n                    Sign up a user to receive notifications\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    fcmToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the fcm token\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UseGuards, Post, Res, Param, Request, HttpStatus, Body } from '@nestjs/common';\nimport { Response } from 'express';\nimport { Role } from '../../constants/role.enum';\nimport { Roles } from '../../decorators/roles.decorator';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { SendNotificationDto } from './dto/send-message.dto';\nimport { NotificationService } from './notification.service';\n\n@Controller('notification')\nexport class NotificationController {\n  constructor(private notificationService: NotificationService) {}\n\n  /**\n   * Sign up a user to receive notifications\n   * @param req the request object\n   * @param res the response object\n   * @param fcmToken the fcm token\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('signup/:fcmToken')\n  signup(@Request() req, @Res() res: Response, @Param('fcmToken') fcmToken: string) {\n    this.notificationService\n      .signup(req.user, fcmToken)\n      .then(() => {\n        return res.status(HttpStatus.OK).json({ message: 'FCM token saved' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Send a notification to users\n   * @param req the request object\n   * @param res the response object\n   * @param body the body of the request\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Post('send')\n  @Roles(Role.Admin)\n  sendNotificationToAll(@Request() req, @Res() res: Response, @Body() body: SendNotificationDto) {\n    this.notificationService\n      .sendNotification(body)\n      .then(() => {\n        return res.status(HttpStatus.OK).json({ message: 'Notification sent' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationModule.html":{"url":"modules/NotificationModule.html","title":"module - NotificationModule","body":"\n                   \n\n\n\n\n    Modules\n    NotificationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_NotificationModule\n\n\n\ncluster_NotificationModule_exports\n\n\n\ncluster_NotificationModule_providers\n\n\n\n\nNotificationService \n\nNotificationService \n\n\n\nNotificationModule\n\nNotificationModule\n\nNotificationService  -->\n\nNotificationModule->NotificationService \n\n\n\n\n\nNotificationService\n\nNotificationService\n\nNotificationModule -->\n\nNotificationService->NotificationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/notification/notification.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NotificationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NotificationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NotificationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { NotificationController } from './notification.controller';\nimport { NotificationService } from './notification.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [NotificationController],\n  providers: [NotificationService],\n  exports: [NotificationService]\n})\nexport class NotificationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notification/notification.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendNotification\n                            \n                            \n                                    Async\n                                sendNotificationToAll\n                            \n                            \n                                    Async\n                                sendNotificationToCelebrities\n                            \n                            \n                                    Async\n                                sendNotificationToInfluencers\n                            \n                            \n                                    Async\n                                sendNotificationToOne\n                            \n                            \n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/notification/notification.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendNotification(sendNotificationDto: SendNotificationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notification/notification.service.ts:33\n                \n            \n\n\n            \n                \n                    Sends a notification\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sendNotificationDto\n                                    \n                                                SendNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the notification to be sent\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        result of the operation\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendNotificationToAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendNotificationToAll(title: string, body: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notification/notification.service.ts:170\n                \n            \n\n\n            \n                \n                    Sends a notification to all users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        result of the operation\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendNotificationToCelebrities\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendNotificationToCelebrities(title: string, body: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notification/notification.service.ts:66\n                \n            \n\n\n            \n                \n                    Sends a notification celebrity\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        result of the operation\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendNotificationToInfluencers\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendNotificationToInfluencers(title: string, body: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notification/notification.service.ts:118\n                \n            \n\n\n            \n                \n                    Sends a notification to influencers\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        result of the operation\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendNotificationToOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendNotificationToOne(title: string, body: string, userId)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notification/notification.service.ts:220\n                \n            \n\n\n            \n                \n                    Sends a notification to one user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        result of the operation\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signup\n                        \n                    \n                \n            \n            \n                \nsignup(user: any, fcmToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notification/notification.service.ts:24\n                \n            \n\n\n            \n                \n                    Adds the fcm token to the user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user to be signed up\n\n                                    \n                                \n                                \n                                    fcmToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the fcm token to be saved\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the operation result\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Not, Repository, UpdateResult } from 'typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { messaging } from '../../common/services/firebase-admin.service';\nimport { SendNotificationDto } from './dto/send-message.dto';\nimport { NotificationTargetGroup } from '../../constants/notification-target-group.enum';\nimport { NotificationPreference } from '../../constants/notification-preference.enum';\nimport { Role } from '../../constants/role.enum';\n\n@Injectable()\nexport class NotificationService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository\n  ) {}\n\n  /**\n   * Adds the fcm token to the user\n   * @param user the user to be signed up\n   * @param fcmToken the fcm token to be saved\n   * @returns the operation result\n   */\n  signup(user: any, fcmToken: string): Promise {\n    return this.usersRepository.update(user.id, { fcmToken: fcmToken });\n  }\n\n  /**\n   * Sends a notification\n   * @param sendNotificationDto the notification to be sent\n   * @returns result of the operation\n   */\n  async sendNotification(sendNotificationDto: SendNotificationDto): Promise {\n    if (sendNotificationDto.targetGroup === NotificationTargetGroup.SingleUser) {\n      if (!sendNotificationDto.targetUserId) {\n        throw new BadRequestException('Target User ID is required');\n      }\n      return await this.sendNotificationToOne(\n        sendNotificationDto.title,\n        sendNotificationDto.body,\n        sendNotificationDto.targetUserId\n      );\n    }\n    if (sendNotificationDto.targetGroup === NotificationTargetGroup.All) {\n      return await this.sendNotificationToAll(sendNotificationDto.title, sendNotificationDto.body);\n    }\n    if (sendNotificationDto.targetGroup === NotificationTargetGroup.Celebrity) {\n      return await this.sendNotificationToCelebrities(\n        sendNotificationDto.title,\n        sendNotificationDto.body\n      );\n    }\n    if (sendNotificationDto.targetGroup === NotificationTargetGroup.Influencers) {\n      return await this.sendNotificationToInfluencers(\n        sendNotificationDto.title,\n        sendNotificationDto.body\n      );\n    }\n  }\n\n  /**\n   * Sends a notification celebrity\n   * @param sendNotificationDto the notification to be sent\n   * @returns result of the operation\n   */\n  async sendNotificationToCelebrities(title: string, body: string): Promise {\n    const usersToBeNotified = await this.usersRepository.find({\n      where: [\n        {\n          fcmToken: Not(''),\n          role: Role.Celebrity,\n          notificationPreference: NotificationPreference.SelectedGroup\n        },\n        {\n          fcmToken: Not(''),\n          role: Role.Celebrity,\n          notificationPreference: NotificationPreference.All\n        }\n      ]\n    });\n\n    if (usersToBeNotified.length === 0) {\n      throw new BadRequestException('No users to be notified');\n    }\n\n    const fcmTokens = usersToBeNotified.map((user) => {\n      return user.fcmToken;\n    });\n\n    if (usersToBeNotified.length == 1) {\n      const payload = {\n        notification: {\n          title: title,\n          body: body\n        },\n        token: fcmTokens[0]\n      };\n\n      return messaging.send(payload);\n    }\n\n    const payload = {\n      notification: {\n        title: title,\n        body: body\n      },\n      tokens: fcmTokens\n    };\n\n    return messaging.sendMulticast(payload);\n  }\n\n  /**\n   * Sends a notification to influencers\n   * @param sendNotificationDto the notification to be sent\n   * @returns result of the operation\n   */\n  async sendNotificationToInfluencers(title: string, body: string): Promise {\n    const usersToBeNotified = await this.usersRepository.find({\n      where: [\n        {\n          fcmToken: Not(''),\n          role: Role.Influencer,\n          notificationPreference: NotificationPreference.SelectedGroup\n        },\n        {\n          fcmToken: Not(''),\n          role: Role.Influencer,\n          notificationPreference: NotificationPreference.All\n        }\n      ]\n    });\n\n    if (usersToBeNotified.length === 0) {\n      throw new BadRequestException('No users to be notified');\n    }\n\n    const fcmTokens = usersToBeNotified.map((user) => {\n      return user.fcmToken;\n    });\n\n    if (usersToBeNotified.length == 1) {\n      const payload = {\n        notification: {\n          title: title,\n          body: body\n        },\n        token: fcmTokens[0]\n      };\n\n      return messaging.send(payload);\n    }\n\n    const payload = {\n      notification: {\n        title: title,\n        body: body\n      },\n      tokens: fcmTokens\n    };\n\n    return messaging.sendMulticast(payload);\n  }\n\n  /**\n   * Sends a notification to all users\n   * @param sendNotificationDto the notification to be sent\n   * @returns result of the operation\n   */\n  async sendNotificationToAll(title: string, body: string): Promise {\n    const usersToBeNotified = await this.usersRepository.find({\n      where: [\n        {\n          fcmToken: Not(''),\n          notificationPreference: NotificationPreference.Broadcast\n        },\n        {\n          fcmToken: Not(''),\n          notificationPreference: NotificationPreference.All\n        }\n      ]\n    });\n\n    if (usersToBeNotified.length === 0) {\n      throw new BadRequestException('No users to be notified');\n    }\n\n    const fcmTokens = usersToBeNotified.map((user) => {\n      return user.fcmToken;\n    });\n\n    if (usersToBeNotified.length == 1) {\n      const payload = {\n        notification: {\n          title: title,\n          body: body\n        },\n        token: fcmTokens[0]\n      };\n\n      return messaging.send(payload);\n    }\n\n    const payload = {\n      notification: {\n        title: title,\n        body: body\n      },\n      tokens: fcmTokens\n    };\n\n    return messaging.sendMulticast(payload);\n  }\n\n  /**\n   * Sends a notification to one user\n   * @param sendNotificationDto the notification to be sent\n   * @returns result of the operation\n   */\n  async sendNotificationToOne(title: string, body: string, userId): Promise {\n    const userToBeNotified = await this.usersRepository.findOne({\n      where: {\n        id: userId,\n        fcmToken: Not(''),\n        notificationPreference: Not(NotificationPreference.None)\n      }\n    });\n\n    if (!userToBeNotified) {\n      throw new BadRequestException('No user to be notified');\n    }\n\n    const payload = {\n      notification: {\n        title: title,\n        body: body\n      },\n      token: userToBeNotified.fcmToken\n    };\n\n    return messaging.send(payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDto.html":{"url":"classes/PageDto.html","title":"class - PageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/page.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PageDto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/common/dto/page.dto.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray } from 'class-validator';\nimport { PageMetaDto } from './page-meta.dto';\n\n/**\n * PageDto\n * @description Data transfer object for paginated data\n */\nexport class PageDto {\n  @IsArray()\n  readonly data: T[];\n\n  readonly meta: PageMetaDto;\n\n  constructor(data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageMetaDto.html":{"url":"classes/PageMetaDto.html","title":"class - PageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/page-meta.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PageMetaDto is a class that represents the metadata of a paginated list.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                            \n                                    Readonly\n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaDtoParameters)\n                    \n                \n                        \n                            \n                                Defined in src/common/dto/page-meta.dto.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaDtoParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-meta.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-meta.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-meta.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-meta.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-meta.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-meta.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageMetaDtoParameters } from './page-meta-parameters.dto';\n\n/**\n * PageMetaDto is a class that represents the metadata of a paginated list.\n */\nexport class PageMetaDto {\n  readonly page: number;\n  readonly take: number;\n  readonly itemCount: number;\n  readonly pageCount: number;\n  readonly hasPreviousPage: boolean;\n  readonly hasNextPage: boolean;\n\n  constructor({ pageOptionsDto, itemCount }: PageMetaDtoParameters) {\n    this.page = pageOptionsDto.page;\n    this.take = pageOptionsDto.take;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.take);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageMetaDtoParameters.html":{"url":"interfaces/PageMetaDtoParameters.html","title":"interface - PageMetaDtoParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageMetaDtoParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/page-meta-parameters.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PageMetaDtoParameters\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PageOptionsDto } from './page-options.dto';\n\n/**\n * PageMetaDtoParameters\n * @description Page meta parameters, used to generate page meta\n */\nexport interface PageMetaDtoParameters {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageOptionsDto.html":{"url":"classes/PageOptionsDto.html","title":"class - PageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/page-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PageOptionsDto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                order\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order\n\n                    \n                \n                \n                    \n                        Default value : Order.ASC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Order)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-options.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-options.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)@Max(50)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-options.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dto/page-options.dto.ts:37\n                                \n                            \n                    \n                        \n\n                                \n                                \n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { IsEnum, IsInt, IsOptional, Max, Min } from 'class-validator';\nimport { Order } from '../../constants/order.enum';\n\n/**\n * PageOptionsDto\n * @description Page options DTO, used for pagination and is passed by the frontend\n * @description The default values are set to 1, 10 and ASC\n */\nexport class PageOptionsDto {\n  /**\n   * @description The order of the results\n   */\n  @IsEnum(Order)\n  @IsOptional()\n  readonly order?: Order = Order.ASC;\n\n  /**\n   * @description The page number\n   */\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  /**\n   * @description The number of results per page\n   */\n  @IsInt()\n  @Min(1)\n  @Max(50)\n  @IsOptional()\n  readonly take?: number = 10;\n\n  /**\n   * @description The number of results to skip\n   */\n  get skip(): number {\n    return (this.page - 1) * this.take;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PaymentController.html":{"url":"controllers/PaymentController.html","title":"controller - PaymentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PaymentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/payment/payment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                payment\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                invoicingWebHook\n                            \n                            \n                                    Async\n                                paymentCancel\n                            \n                            \n                                    Async\n                                paymentSuccess\n                            \n                            \n                                    Async\n                                subscribe\n                            \n                            \n                                    Async\n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        invoicingWebHook\n                        \n                    \n                \n            \n            \n                \n                    \n                    invoicingWebHook(req: RawBodyRequest, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('invoicing-webhook')\n                \n            \n\n            \n                \n                    Defined in src/modules/payment/payment.controller.ts:109\n                \n            \n\n\n            \n                \n                    Receive the webhook from stripe\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            RawBodyRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paymentCancel\n                        \n                    \n                \n            \n            \n                \n                    \n                    paymentCancel(req, res: Response, sessionId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('cancel')\n                \n            \n\n            \n                \n                    Defined in src/modules/payment/payment.controller.ts:88\n                \n            \n\n\n            \n                \n                    Redirects to the cancel page\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    sessionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the session id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paymentSuccess\n                        \n                    \n                \n            \n            \n                \n                    \n                    paymentSuccess(req, res: Response, sessionId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('success')\n                \n            \n\n            \n                \n                    Defined in src/modules/payment/payment.controller.ts:63\n                \n            \n\n\n            \n                \n                    Redirects to the success page\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    sessionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the session id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                    \n                    subscribe(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('subscribe')\n                \n            \n\n            \n                \n                    Defined in src/modules/payment/payment.controller.ts:27\n                \n            \n\n\n            \n                \n                    Subscribe a user to a subscription plan\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unsubscribe\n                        \n                    \n                \n            \n            \n                \n                    \n                    unsubscribe(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('unsubscribe')\n                \n            \n\n            \n                \n                    Defined in src/modules/payment/payment.controller.ts:45\n                \n            \n\n\n            \n                \n                    Unsubscribe a user from a subscription plan\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  UseGuards,\n  Res,\n  Request,\n  Post,\n  HttpStatus,\n  RawBodyRequest,\n  Req\n} from '@nestjs/common';\nimport { Get, Query } from '@nestjs/common/decorators';\nimport { Response } from 'express';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { PaymentService } from './payment.service';\n\n@Controller('payment')\nexport class PaymentController {\n  constructor(private readonly paymentService: PaymentService) {}\n\n  /**\n   * Subscribe a user to a subscription plan\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('subscribe')\n  async subscribe(@Request() req, @Res() res: Response) {\n    this.paymentService\n      .subscribe(req.user)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json({ message: 'Payment success', url: result });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Unsubscribe a user from a subscription plan\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('unsubscribe')\n  async unsubscribe(@Request() req, @Res() res: Response) {\n    this.paymentService\n      .unsubscribe(req.user)\n      .then(() => {\n        return res.status(HttpStatus.OK).json({ message: 'Success' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Redirects to the success page\n   * @param req the request object\n   * @param res the response object\n   * @param sessionId the session id\n   */\n  @Get('success')\n  async paymentSuccess(\n    @Request() req,\n    @Res() res: Response,\n    @Query('session_id') sessionId: string\n  ) {\n    this.paymentService\n      .paymentSuccess(sessionId)\n      .then(() => {\n        return res.send(\n          'body { text-align: center; padding: 40px 0; background: #EBF0F5; } h1 { color: #88B04B; font-family: \"Nunito Sans\", \"Helvetica Neue\", sans-serif; font-weight: 900; font-size: 40px; margin-bottom: 10px; } p { color: #404F5E; font-family: \"Nunito Sans\", \"Helvetica Neue\", sans-serif; font-size: 20px; margin: 0; } i { color: #9ABC66; font-size: 100px; line-height: 200px; margin-left: -15px; } .card { background: white; padding: 60px; border-radius: 4px; box-shadow: 0 2px 3px #C8D0D8; display: inline-block; margin: 0 auto; }     ✓  Success You have subscribed successfully, you can now close this page   '\n        );\n      })\n      .catch((err) => {\n        console.log(err);\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Redirects to the cancel page\n   * @param req the request object\n   * @param res the response object\n   * @param sessionId the session id\n   */\n  @Get('cancel')\n  async paymentCancel(\n    @Request() req,\n    @Res() res: Response,\n    @Query('session_id') sessionId: string\n  ) {\n    this.paymentService\n      .paymentCancel(sessionId)\n      .then(() => {\n        return res.status(HttpStatus.OK).json({ message: 'Payment Failed' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Receive the webhook from stripe\n   * @param req the request object\n   * @param res the response object\n   */\n  @Post('invoicing-webhook')\n  async invoicingWebHook(@Req() req: RawBodyRequest, @Res() res: Response) {\n    this.paymentService\n      .invoicingWebHook(req.headers['stripe-signature'], req.rawBody)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json({ message: result });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentModule.html":{"url":"modules/PaymentModule.html","title":"module - PaymentModule","body":"\n                   \n\n\n\n\n    Modules\n    PaymentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PaymentModule\n\n\n\ncluster_PaymentModule_providers\n\n\n\ncluster_PaymentModule_imports\n\n\n\n\nNotificationModule\n\nNotificationModule\n\n\n\nPaymentModule\n\nPaymentModule\n\nPaymentModule -->\n\nNotificationModule->PaymentModule\n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/payment/payment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaymentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PaymentController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            NotificationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { NotificationModule } from '../notification/notification.module';\nimport { User } from '../user/entities/user.entity';\nimport { PaymentController } from './payment.controller';\nimport { PaymentService } from './payment.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), NotificationModule],\n  controllers: [PaymentController],\n  providers: [PaymentService]\n})\nexport class PaymentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaymentService.html":{"url":"injectables/PaymentService.html","title":"injectable - PaymentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaymentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/payment/payment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                endpointSecret\n                            \n                            \n                                    Private\n                                stripe\n                            \n                            \n                                    Private\n                                url\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                invoicingWebHook\n                            \n                            \n                                    Async\n                                paymentCancel\n                            \n                            \n                                    Async\n                                paymentSuccess\n                            \n                            \n                                    Async\n                                subscribe\n                            \n                            \n                                    Async\n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, notificationService: NotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/payment/payment.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notificationService\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        invoicingWebHook\n                        \n                    \n                \n            \n            \n                \n                    \n                    invoicingWebHook(stripeSignature: any, body: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/payment/payment.service.ts:153\n                \n            \n\n\n            \n                \n                    Listens to events on the Strip server and updates the user's subscription plan\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    stripeSignature\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the stripe signature\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request body\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the operation result\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paymentCancel\n                        \n                    \n                \n            \n            \n                \n                    \n                    paymentCancel(sessionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/payment/payment.service.ts:135\n                \n            \n\n\n            \n                \n                    Update a user's subscription plan\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sessionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the checkout session id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the operation result\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paymentSuccess\n                        \n                    \n                \n            \n            \n                \n                    \n                    paymentSuccess(sessionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/payment/payment.service.ts:118\n                \n            \n\n\n            \n                \n                    Update a user's subscription plan\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sessionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the checkout session id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the operation result\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                    \n                    subscribe(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/payment/payment.service.ts:32\n                \n            \n\n\n            \n                \n                    Subscribe a user to a subscription plan\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User to subscribe\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the checkout session url\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unsubscribe\n                        \n                    \n                \n            \n            \n                \n                    \n                    unsubscribe(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/payment/payment.service.ts:84\n                \n            \n\n\n            \n                \n                    Unsubscribe a user from a subscription plan\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User to unsubscribe\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the updated user\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        endpointSecret\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env?.STRIPE_WEBHOOK_SECRET\n                    \n                \n                    \n                        \n                                Defined in src/modules/payment/payment.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stripe\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Stripe(process.env?.STRIPE_TEST_KEY, {\n    apiVersion: '2022-11-15'\n  })\n                    \n                \n                    \n                        \n                                Defined in src/modules/payment/payment.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'atlas-backend-xtkhgxenvq-el.a.run.app'\n                    \n                \n                    \n                        \n                                Defined in src/modules/payment/payment.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, NotFoundException } from '@nestjs/common';\nimport Stripe from 'stripe';\nimport * as dotenv from 'dotenv';\nimport { User } from '../user/entities/user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, UpdateResult } from 'typeorm';\nimport { SubscriptionPlan } from '../../constants/subscription-plan.enum';\nimport { NotificationService } from '../notification/notification.service';\ndotenv.config();\n\n@Injectable()\nexport class PaymentService {\n  private stripe = new Stripe(process.env?.STRIPE_TEST_KEY, {\n    apiVersion: '2022-11-15'\n  });\n\n  private endpointSecret = process.env?.STRIPE_WEBHOOK_SECRET;\n\n  private url = 'atlas-backend-xtkhgxenvq-el.a.run.app';\n\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository,\n    private readonly notificationService: NotificationService\n  ) {}\n\n  /**\n   * Subscribe a user to a subscription plan\n   * @param user User to subscribe\n   * @returns the checkout session url\n   */\n  async subscribe(user: User): Promise {\n    const dbUser = await this.userRepository.findOne({ where: { id: user.id } });\n\n    if (!dbUser) {\n      throw new NotFoundException('User not found');\n    }\n\n    let newUser = false;\n    let customer: Stripe.Customer;\n\n    if (dbUser.subscriptionPlan === SubscriptionPlan.Basic && dbUser.hasStripAccount === false) {\n      customer = await this.stripe.customers.create({\n        email: dbUser.email,\n        name: `${dbUser.firstName} ${dbUser.lastName}`,\n        phone: dbUser.phoneNumber\n      });\n\n      newUser = true;\n\n      await this.userRepository.update(dbUser.id, {\n        stripeCustomerId: customer.id,\n        hasStripAccount: true\n      });\n    }\n\n    if (dbUser.subscriptionPlan === SubscriptionPlan.Premium && dbUser.hasStripAccount === true) {\n      throw new BadRequestException('User already has an active subscription');\n    }\n\n    const session = await this.stripe.checkout.sessions.create({\n      mode: 'subscription',\n      payment_method_types: ['card'],\n      customer: newUser ? customer.id : dbUser.stripeCustomerId,\n      currency: 'aed',\n      line_items: [\n        {\n          price: 'price_1MThM0B4qQTC27uczOVeMOlz',\n          quantity: 1\n        }\n      ],\n      success_url: `https://${this.url}:443/payment/success?session_id={CHECKOUT_SESSION_ID}`,\n      cancel_url: `https://${this.url}:443/payment/cancel?session_id={CHECKOUT_SESSION_ID}`\n    });\n\n    return session.url;\n  }\n\n  /**\n   * Unsubscribe a user from a subscription plan\n   * @param user User to unsubscribe\n   * @returns the updated user\n   */\n  async unsubscribe(user: User): Promise {\n    const dbUser = await this.userRepository.findOne({ where: { id: user.id } });\n\n    if (!dbUser) {\n      throw new NotFoundException('User not found');\n    }\n\n    if (\n      !(dbUser.subscriptionPlan === SubscriptionPlan.Premium && dbUser.hasStripAccount === true)\n    ) {\n      throw new BadRequestException(\"User doesn't have an active subscription\");\n    }\n\n    const subscriptions = await this.stripe.subscriptions.list({\n      customer: dbUser.stripeCustomerId\n    });\n\n    for (let i = 0; i  {\n    const session = await this.stripe.checkout.sessions.retrieve(sessionId);\n    const customer = await this.stripe.customers.retrieve(session.customer as string);\n\n    return this.userRepository\n      .createQueryBuilder()\n      .update(User)\n      .set({ subscriptionPlan: SubscriptionPlan.Premium })\n      .where('stripeCustomerId = :stripeCustomerId', { stripeCustomerId: customer.id })\n      .execute();\n  }\n\n  /**\n   * Update a user's subscription plan\n   * @param sessionId the checkout session id\n   * @returns the operation result\n   */\n  async paymentCancel(sessionId: string): Promise {\n    const session = await this.stripe.checkout.sessions.retrieve(sessionId);\n    const customer = await this.stripe.customers.retrieve(session.customer as string);\n\n    return this.userRepository\n      .createQueryBuilder()\n      .update(User)\n      .set({ subscriptionPlan: SubscriptionPlan.Basic })\n      .where('stripeCustomerId = :stripeCustomerId', { stripeCustomerId: customer.id })\n      .execute();\n  }\n\n  /**\n   * Listens to events on the Strip server and updates the user's subscription plan\n   * @param stripeSignature the stripe signature\n   * @param body the request body\n   * @returns the operation result\n   */\n  async invoicingWebHook(stripeSignature: any, body: any) {\n    let event;\n    try {\n      event = this.stripe.webhooks.constructEvent(body, stripeSignature, this.endpointSecret);\n    } catch (err) {\n      return new BadRequestException(`Webhook Error: ${err.message}`);\n    }\n\n    switch (event.type) {\n      case 'invoice.payment_succeeded':\n        const paymentSuccessedEvent = event.data.object;\n\n        const successCustomer = await this.stripe.customers.retrieve(\n          paymentSuccessedEvent.customer as string\n        );\n\n        const successUser = await this.userRepository.findOne({\n          where: { stripeCustomerId: successCustomer.id }\n        });\n\n        if (!successUser) {\n          return;\n        }\n\n        this.userRepository.update(successUser.id, { subscriptionPlan: SubscriptionPlan.Premium });\n\n        this.notificationService\n          .sendNotificationToOne('Payment Successful', 'Thank you for your payment', successUser.id)\n          .catch((err) => {\n            console.log(err);\n          });\n        break;\n      case 'invoice.payment_failed':\n        const paymentFailedEvent = event.data.object;\n\n        const failCustomer = await this.stripe.customers.retrieve(\n          paymentFailedEvent.customer as string\n        );\n\n        const failUser = await this.userRepository.findOne({\n          where: { stripeCustomerId: failCustomer.id }\n        });\n\n        if (!failUser) {\n          return;\n        }\n\n        this.userRepository.update(failUser.id, { subscriptionPlan: SubscriptionPlan.Basic });\n\n        this.notificationService\n          .sendNotificationToOne(\n            'Payment Unsuccessful',\n            'There was an error in your payment',\n            failUser.id\n          )\n          .catch((err) => {\n            console.log(err);\n          });\n        break;\n      case 'customer.subscription.deleted':\n        const subscriptionDeletedEvent = event.data.object;\n\n        const deletedCustomer = await this.stripe.customers.retrieve(\n          subscriptionDeletedEvent.customer as string\n        );\n\n        const deletedUser = await this.userRepository.findOne({\n          where: { stripeCustomerId: deletedCustomer.id }\n        });\n\n        if (!deletedUser) {\n          return;\n        }\n\n        this.userRepository.update(deletedUser.id, { subscriptionPlan: SubscriptionPlan.Basic });\n\n        this.notificationService\n          .sendNotificationToOne(\n            'Unsubscribed Successfully',\n            'We are sorry to see you go',\n            deletedUser.id\n          )\n          .catch((err) => {\n            console.log(err);\n          });\n        break;\n      default:\n        console.log(`Unhandled event type ${event.type}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/entities/post.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class is the class that represents the User table in the database\nThis is how we interact with the database table in the application\nNo need for SQL quesries\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                appeals\n                            \n                            \n                                caption\n                            \n                            \n                                comments\n                            \n                            \n                                id\n                            \n                            \n                                imageExpiryDate\n                            \n                            \n                                imageId\n                            \n                            \n                                imageUrl\n                            \n                            \n                                isTakenDown\n                            \n                            \n                                likes\n                            \n                            \n                                likesCount\n                            \n                            \n                                location\n                            \n                            \n                                postedBy\n                            \n                            \n                                reportsAgainst\n                            \n                            \n                                scrapbook\n                            \n                            \n                                tag\n                            \n                            \n                                type\n                            \n                            \n                                visibility\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        appeals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Appeal[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, appeal => appeal.appealedPost)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        caption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.post)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageExpiryDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'longtext'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTakenDown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Like[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, like => like.likedPost)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likesCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportsAgainst\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PostReport[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, postReport => postReport.reportedPost)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scrapbook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Scrapbook\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, scrapbook => scrapbook.posts)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visibility\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Visibility\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne, OneToMany, AfterLoad } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { Visibility } from '../../../constants/visibility.enum';\nimport { Scrapbook } from './scrapbook.entity';\nimport { Like } from './post-like.entity';\nimport { Comment } from './comment.entity';\nimport { PostReport } from '../../report/entities/post-report.entity';\nimport { FirebaseStorageService } from '../../../common/services/firebase-storage.service';\nimport { Appeal } from '../../appeals/entities/appeal.entity';\n\n/**\n * User Entity Class is the class that represents the User table in the database\n * This is how we interact with the database table in the application\n * No need for SQL quesries\n */\n@Entity()\nexport class Post extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  caption: string;\n\n  @Column()\n  tag: string;\n\n  @Column()\n  type: string;\n\n  @Column()\n  location: string;\n\n  @Column()\n  visibility: Visibility;\n\n  @Column({ default: false })\n  isTakenDown: boolean = false;\n\n  @Column({ type: 'longtext' })\n  imageUrl: string = '';\n\n  @Column({ default: '' })\n  imageId: string = '';\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  imageExpiryDate: Date;\n\n  @Column({ default: 0 })\n  likesCount: number = 0;\n\n  //A post can only be posted by one user but a user can have many posts\n  @ManyToOne(() => User, (user) => user.posts, {\n    onDelete: 'CASCADE'\n  })\n  postedBy: User;\n\n  //A user can be reported by many users\n  @OneToMany(() => PostReport, (postReport) => postReport.reportedPost)\n  reportsAgainst: PostReport[];\n\n  //A post can only be part of one scrapbook but a scrapbook can have many posts\n  @ManyToOne(() => Scrapbook, (scrapbook) => scrapbook.posts)\n  scrapbook: Scrapbook;\n\n  @OneToMany(() => Comment, (comment) => comment.post)\n  comments: Comment[];\n\n  //A post can have many appeals\n  @OneToMany(() => Appeal, (appeal) => appeal.appealedPost)\n  appeals: Appeal[];\n\n  //A post can have many likes\n  @OneToMany(() => Like, (like) => like.likedPost)\n  likes: Like[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostAnalyticResposneDto.html":{"url":"classes/PostAnalyticResposneDto.html","title":"class - PostAnalyticResposneDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostAnalyticResposneDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/analytics/dto/post-analytic-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                appealCount\n                            \n                            \n                                commentCount\n                            \n                            \n                                createdAt\n                            \n                            \n                                interactionCount\n                            \n                            \n                                isPartOfScrapbook\n                            \n                            \n                                isTakenDown\n                            \n                            \n                                likeCount\n                            \n                            \n                                reportCount\n                            \n                            \n                                scrapbookId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        appealCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commentCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interactionCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPartOfScrapbook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTakenDown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likeCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scrapbookId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsDate, IsNotEmpty, IsNumber, IsOptional, IsUUID, Min } from 'class-validator';\n\nexport class PostAnalyticResposneDto {\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  commentCount: number;\n\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  likeCount: number;\n\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  interactionCount: number;\n\n  @IsBoolean()\n  @IsNotEmpty()\n  isTakenDown: boolean;\n\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  reportCount: number;\n\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  appealCount: number;\n\n  @IsDate()\n  @IsNotEmpty()\n  createdAt: Date;\n\n  @IsBoolean()\n  @IsNotEmpty()\n  isPartOfScrapbook: boolean;\n\n  @IsOptional()\n  @IsUUID()\n  scrapbookId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_PostModule_exports\n\n\n\n\nPostService \n\nPostService \n\n\n\nPostModule\n\nPostModule\n\nPostService  -->\n\nPostModule->PostService \n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PostController } from './post.controller';\nimport { Post } from './entities/post.entity';\nimport { PostService } from './post.service';\nimport { Scrapbook } from './entities/scrapbook.entity';\nimport { Comment } from './entities/comment.entity';\nimport { User } from '../user/entities/user.entity';\nimport { Like } from './entities/post-like.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Post, Scrapbook, User, Comment, Like])],\n  controllers: [PostController],\n  providers: [PostService],\n  exports: [PostService]\n})\nexport class PostModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PostReport.html":{"url":"entities/PostReport.html","title":"entity - PostReport","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PostReport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/report/entities/post-report.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class is the class that represents the User table in the database\nThis is how we interact with the database table in the application\nNo need for SQL quesries\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                reason\n                            \n                            \n                                reportedBy\n                            \n                            \n                                reportedPost\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/post-report.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReportReason\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/post-report.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.reportedPosts, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/post-report.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportedPost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.reportsAgainst, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/post-report.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ReportStatus.PendingReview\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/post-report.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from '../../post/entities/post.entity';\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { ReportStatus } from '../../../constants/report-status.enum';\nimport { BaseEntity } from '../../../common/entities/base.entity';\nimport { ReportReason } from '../../../constants/report-reason.enum';\n\n/**\n * User Entity Class is the class that represents the User table in the database\n * This is how we interact with the database table in the application\n * No need for SQL quesries\n */\n@Entity()\nexport class PostReport extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ default: ReportStatus.PendingReview })\n  status: string = ReportStatus.PendingReview;\n\n  @Column()\n  reason: ReportReason;\n\n  //A Report can only report one post but a post can be in many reports\n  @ManyToOne(() => Post, (post) => post.reportsAgainst, {\n    onDelete: 'CASCADE'\n  })\n  reportedPost: Post;\n\n  //A Report can only be posted by one user but a user can have many Reports\n  @ManyToOne(() => User, (user) => user.reportedPosts, {\n    onDelete: 'CASCADE'\n  })\n  reportedBy: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReCaptchaResponseDto.html":{"url":"classes/ReCaptchaResponseDto.html","title":"class - ReCaptchaResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReCaptchaResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/captcha-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                challenge_ts\n                            \n                            \n                                hostname\n                            \n                            \n                                success\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        challenge_ts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/captcha-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hostname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/captcha-response.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/captcha-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ReCaptchaResponseDto {\n  success: boolean;\n\n  challenge_ts: string;\n\n  hostname: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReportController.html":{"url":"controllers/ReportController.html","title":"controller - ReportController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReportController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/report/report.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                report\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                banPost\n                            \n                            \n                                banUser\n                            \n                            \n                                getPostReports\n                            \n                            \n                                getReportedPosts\n                            \n                            \n                                getReportedUsers\n                            \n                            \n                                getUserReports\n                            \n                            \n                                reportPost\n                            \n                            \n                                reportUser\n                            \n                            \n                                unbanPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        banPost\n                        \n                    \n                \n            \n            \n                \nbanPost(req, postId, reportId, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Post('ban-post/:postId/:reportId')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:136\n                \n            \n\n\n            \n                \n                    Bans a post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    postId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    reportId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        banUser\n                        \n                    \n                \n            \n            \n                \nbanUser(req, userId, reportId, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Post('ban-user/:userId/:reportId')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:111\n                \n            \n\n\n            \n                \n                    Bans a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    userId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    reportId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostReports\n                        \n                    \n                \n            \n            \n                \ngetPostReports(req, params, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('post-reports/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:62\n                \n            \n\n\n            \n                \n                    Get the reports of a post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the parameters (the id of the reported post)\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReportedPosts\n                        \n                    \n                \n            \n            \n                \ngetReportedPosts(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Get('reported-posts')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:181\n                \n            \n\n\n            \n                \n                    Gets the reported posts for admin\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReportedUsers\n                        \n                    \n                \n            \n            \n                \ngetReportedUsers(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Get('reported-users')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:201\n                \n            \n\n\n            \n                \n                    GEts the reported users for admin\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserReports\n                        \n                    \n                \n            \n            \n                \ngetUserReports(req, params, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('user-reports/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:86\n                \n            \n\n\n            \n                \n                    Get the reports of a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the parameters (the id of the reported user)\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportPost\n                        \n                    \n                \n            \n            \n                \nreportPost(body: ReportDto, req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('report-post')\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:24\n                \n            \n\n\n            \n                \n                    Report a post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                ReportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the body of the request\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportUser\n                        \n                    \n                \n            \n            \n                \nreportUser(body: ReportDto, req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('report-user')\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:43\n                \n            \n\n\n            \n                \n                    Report a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                ReportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the body of the request\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unbanPost\n                        \n                    \n                \n            \n            \n                \nunbanPost(req, params, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Post('unban-post/:id')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:161\n                \n            \n\n\n            \n                \n                    Unbans a post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the parameters (the id of the user to be unbanned)\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UseGuards, Res, Request, Post, Body, HttpStatus } from '@nestjs/common';\nimport { Get, Param, Query } from '@nestjs/common/decorators';\nimport { Response } from 'express';\nimport { PageOptionsDto } from '../../common/dto/page-options.dto';\nimport { Role } from '../../constants/role.enum';\nimport { Roles } from '../../decorators/roles.decorator';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { ReportDto } from './dto/report.dto';\nimport { ReportService } from './report.service';\n\n@Controller('report')\nexport class ReportController {\n  constructor(private reportService: ReportService) {}\n\n  /**\n   * Report a post\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('report-post')\n  reportPost(@Body() body: ReportDto, @Request() req, @Res() res: Response) {\n    this.reportService\n      .reportPost(req.user, body)\n      .then((report) => {\n        return res.status(HttpStatus.OK).json(report);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Report a user\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('report-user')\n  reportUser(@Body() body: ReportDto, @Request() req, @Res() res: Response) {\n    this.reportService\n      .reportUser(req.user, body)\n      .then((report) => {\n        return res.status(HttpStatus.OK).json(report);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Get the reports of a post\n   * @param req the request object\n   * @param params the parameters (the id of the reported post)\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('post-reports/:id')\n  getPostReports(\n    @Request() req,\n    @Param() params,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.reportService\n      .getPostReports(params.id, pageOptionsDto)\n      .then((reports) => {\n        return res.status(HttpStatus.OK).json(reports);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Get the reports of a user\n   * @param req the request object\n   * @param params the parameters (the id of the reported user)\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('user-reports/:id')\n  getUserReports(\n    @Request() req,\n    @Param() params,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.reportService\n      .getUserReports(params.id, pageOptionsDto)\n      .then((reports) => {\n        return res.status(HttpStatus.OK).json(reports);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Bans a user\n   * @param req the request object\n   * @param params the parameters (the id of the user to be banned)\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Post('ban-user/:userId/:reportId')\n  @Roles(Role.Admin)\n  banUser(\n    @Request() req,\n    @Param('userId') userId,\n    @Param('reportId') reportId,\n    @Res() res: Response\n  ) {\n    this.reportService\n      .banUser(userId, reportId)\n      .then((reports) => {\n        return res.status(HttpStatus.OK).json(reports);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Bans a post\n   * @param req the request object\n   * @param params the parameters (the id of the post to be banned)\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Post('ban-post/:postId/:reportId')\n  @Roles(Role.Admin)\n  banPost(\n    @Request() req,\n    @Param('postId') postId,\n    @Param('reportId') reportId,\n    @Res() res: Response\n  ) {\n    this.reportService\n      .banPost(postId, reportId)\n      .then(() => {\n        return res.status(HttpStatus.OK).json({ 'message': 'Post banned' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Unbans a post\n   * @param req the request object\n   * @param params the parameters (the id of the user to be unbanned)\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Post('unban-post/:id')\n  @Roles(Role.Admin)\n  unbanPost(@Request() req, @Param() params, @Res() res: Response) {\n    this.reportService\n      .unbanPost(params.id)\n      .then(() => {\n        return res.status(HttpStatus.OK).json({ 'message': 'Post unbanned' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Gets the reported posts for admin\n   * @param req the request object\n   * @param res the response object\n   * @param pageOptionsDto the page options\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Get('reported-posts')\n  @Roles(Role.Admin)\n  getReportedPosts(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.reportService\n      .getReportedPosts(pageOptionsDto)\n      .then((posts) => {\n        return res.status(HttpStatus.OK).json(posts);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * GEts the reported users for admin\n   * @param req the request object\n   * @param res the response object\n   * @param pageOptionsDto the page options\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Get('reported-users')\n  @Roles(Role.Admin)\n  getReportedUsers(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.reportService\n      .getReportedUsers(pageOptionsDto)\n      .then((posts) => {\n        return res.status(HttpStatus.OK).json(posts);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReportDto.html":{"url":"classes/ReportDto.html","title":"class - ReportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/report/dto/report.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the DTO for creating a reports for both user and post\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                reason\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/dto/report.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReportReason\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ReportReason)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/dto/report.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty } from 'class-validator';\nimport { ReportReason } from '../../../constants/report-reason.enum';\n\n/**\n * This is the DTO for creating a reports for both user and post\n */\nexport class ReportDto {\n  @IsNotEmpty()\n  id: string;\n\n  @IsEnum(ReportReason)\n  @IsNotEmpty()\n  reason: ReportReason;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReportModule.html":{"url":"modules/ReportModule.html","title":"module - ReportModule","body":"\n                   \n\n\n\n\n    Modules\n    ReportModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ReportModule\n\n\n\ncluster_ReportModule_providers\n\n\n\n\nReportService\n\nReportService\n\n\n\nReportModule\n\nReportModule\n\nReportModule -->\n\nReportService->ReportModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/report/report.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ReportService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReportController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { User } from '../user/entities/user.entity';\nimport { PostReport } from './entities/post-report.entity';\nimport { UserBan } from './entities/user-ban.entity';\nimport { UserReport } from './entities/user-report.entity';\nimport { ReportController } from './report.controller';\nimport { ReportService } from './report.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserReport, PostReport, Post, User, UserBan])],\n  controllers: [ReportController],\n  providers: [ReportService]\n})\nexport class ReportModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReportService.html":{"url":"injectables/ReportService.html","title":"injectable - ReportService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReportService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/report/report.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                banPost\n                            \n                            \n                                    Async\n                                banUser\n                            \n                            \n                                    Async\n                                getPostReports\n                            \n                            \n                                    Async\n                                getReportedPosts\n                            \n                            \n                                    Async\n                                getReportedUsers\n                            \n                            \n                                    Async\n                                getUserReports\n                            \n                            \n                                    Async\n                                reportPost\n                            \n                            \n                                    Async\n                                reportUser\n                            \n                            \n                                    Async\n                                unbanPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userReportsRepository: Repository, postReportsRepository: Repository, postRepository: Repository, userRepository: Repository, userBanRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/report/report.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userReportsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postReportsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userBanRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        banPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    banPost(postId: string, reportId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:259\n                \n            \n\n\n            \n                \n                    Ban the post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the post to ban\n\n                                    \n                                \n                                \n                                    reportId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the report\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the update result\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        banUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    banUser(userId: string, reportId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:220\n                \n            \n\n\n            \n                \n                    Bans a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user to ban\n\n                                    \n                                \n                                \n                                    reportId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the report\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the ban\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostReports\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostReports(id: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:157\n                \n            \n\n\n            \n                \n                    Gets all post reports\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the post to get reports for\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        the reports\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReportedPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReportedPosts(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:315\n                \n            \n\n\n            \n                \n                    Gets all reported posts\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        the reported posts\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReportedUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReportedUsers(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:348\n                \n            \n\n\n            \n                \n                    Gets all reported users\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        the reported users\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserReports\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserReports(id: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:189\n                \n            \n\n\n            \n                \n                    Gets all user reports\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user to get reports for\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the page options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        the reports\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reportPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reportPost(user: any, body: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:39\n                \n            \n\n\n            \n                \n                    Reports a post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user who is reporting the post\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the body of the request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the report\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reportUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    reportUser(user: any, body: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:102\n                \n            \n\n\n            \n                \n                    Reports a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user who is reporting the user\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the body of the request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the report\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unbanPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    unbanPost(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:293\n                \n            \n\n\n            \n                \n                    unban the post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the update result\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PageMetaDto } from '../../common/dto/page-meta.dto';\nimport { PageOptionsDto } from '../../common/dto/page-options.dto';\nimport { PageDto } from '../../common/dto/page.dto';\nimport { ReportStatus } from '../../constants/report-status.enum';\nimport { Repository, UpdateResult } from 'typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { User } from '../user/entities/user.entity';\nimport { PostReport } from './entities/post-report.entity';\nimport { UserBan } from './entities/user-ban.entity';\nimport { UserReport } from './entities/user-report.entity';\n\n@Injectable()\nexport class ReportService {\n  constructor(\n    @InjectRepository(UserReport)\n    private userReportsRepository: Repository,\n\n    @InjectRepository(PostReport)\n    private postReportsRepository: Repository,\n\n    @InjectRepository(Post)\n    private postRepository: Repository,\n\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    @InjectRepository(UserBan)\n    private userBanRepository: Repository\n  ) {}\n\n  /**\n   * Reports a post\n   * @param user the user who is reporting the post\n   * @param body the body of the request\n   * @returns the report\n   */\n  async reportPost(user: any, body: any): Promise {\n    const newReport = new PostReport();\n    newReport.reportedBy = user;\n\n    // Find the post to report\n    const post = await this.postRepository.findOne({\n      where: { id: body.id },\n      relations: ['postedBy']\n    });\n\n    // If the post doesn't exist, throw an error\n    if (!post) {\n      throw new HttpException('Post not found', HttpStatus.NO_CONTENT);\n    }\n\n    if (post.postedBy.id === user.id) {\n      throw new HttpException('You cannot report your own post', HttpStatus.BAD_REQUEST);\n    }\n\n    // If the post has already been reported and is still pending response, throw an error\n    const userReportedPosts = await this.userRepository\n      .findOne({\n        where: { id: user.id },\n        relations: [\n          'reportedPosts',\n          'reportedPosts.reportedPost',\n          'reportedPosts.reportedPost.postedBy'\n        ]\n      })\n      .then((user) => {\n        if (!user) {\n          throw new BadRequestException('User not found');\n        }\n        return user.reportedPosts.map((reports) => {\n          if ((reports.status = ReportStatus.PendingReview)) {\n            return reports.reportedPost;\n          }\n        });\n      });\n\n    const postAlreadyReported = userReportedPosts.map((reportedPost) => {\n      if (!reportedPost) {\n        return false;\n      }\n      return reportedPost.id === post.id;\n    });\n\n    if (postAlreadyReported.includes(true)) {\n      throw new HttpException('You have already reported this post', HttpStatus.BAD_REQUEST);\n    }\n\n    newReport.reportedPost = post;\n    newReport.reason = body.reason;\n\n    return this.postReportsRepository.save(newReport);\n  }\n\n  /**\n   * Reports a user\n   * @param user the user who is reporting the user\n   * @param body the body of the request\n   * @returns the report\n   */\n  async reportUser(user: any, body: any): Promise {\n    const newReport = new UserReport();\n    newReport.reportedBy = user;\n\n    // Find the user to report\n    const userToBeReported = await this.userRepository.findOne({\n      where: { id: body.id }\n    });\n\n    // If the user doesn't exist, throw an error\n    if (!userToBeReported) {\n      throw new HttpException('User not found', HttpStatus.NO_CONTENT);\n    }\n\n    if (userToBeReported.id === user.id) {\n      throw new HttpException('You cannot report yourself', HttpStatus.BAD_REQUEST);\n    }\n\n    // If the user has already been reported and is still pending response, throw an error\n    const userReportedUsers = await this.userRepository\n      .findOne({\n        where: { id: user.id },\n        relations: ['reportedUsers', 'reportedUsers.reportedUser']\n      })\n      .then((user) => {\n        if (!user) {\n          throw new BadRequestException('User not found');\n        }\n        return user.reportedUsers.map((reports) => {\n          if ((reports.status = ReportStatus.PendingReview)) {\n            return reports.reportedUser;\n          }\n        });\n      });\n\n    const usersAlreadyReported = userReportedUsers.map((reportedUser) => {\n      return reportedUser.id === userToBeReported.id;\n    });\n\n    if (usersAlreadyReported.includes(true)) {\n      throw new HttpException('You have already reported this user', HttpStatus.BAD_REQUEST);\n    }\n\n    newReport.reportedUser = userToBeReported;\n    newReport.reason = body.reason;\n\n    return this.userReportsRepository.save(newReport);\n  }\n\n  /**\n   * Gets all post reports\n   * @param id the id of the post to get reports for\n   * @param pageOptionsDto the page options\n   * @returns the reports\n   */\n  async getPostReports(id: string, pageOptionsDto: PageOptionsDto): Promise> {\n    const queryResults = await this.postReportsRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('PostReport.reportedPost', 'Post')\n      .leftJoinAndSelect('PostReport.reportedBy', 'ReportedBy')\n      .leftJoinAndSelect('Post.postedBy', 'PostedBy')\n      .where('PostReport.reportedPost.id = :id', { id: id })\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take)\n      .orderBy('PostReport.createdAt', pageOptionsDto.order)\n      .getManyAndCount()\n      .then((postReportsAndCount) => {\n        return {\n          items: postReportsAndCount[0],\n          itemsCount: postReportsAndCount[1]\n        };\n      });\n\n    const itemCount: number = queryResults.itemsCount;\n    const entities: PostReport[] = queryResults.items;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  /**\n   * Gets all user reports\n   * @param id the id of the user to get reports for\n   * @param pageOptionsDto the page options\n   * @returns the reports\n   */\n  async getUserReports(id: string, pageOptionsDto: PageOptionsDto): Promise> {\n    const queryResults = await this.userReportsRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('UserReport.reportedUser', 'User')\n      .leftJoinAndSelect('UserReport.reportedBy', 'ReportedBy')\n      .where('UserReport.reportedUser.id = :id', { id: id })\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take)\n      .orderBy('UserReport.createdAt', pageOptionsDto.order)\n      .getManyAndCount()\n      .then((userReportsAndCount) => {\n        return {\n          items: userReportsAndCount[0],\n          itemsCount: userReportsAndCount[1]\n        };\n      });\n\n    const itemCount: number = queryResults.itemsCount;\n    const entities: UserReport[] = queryResults.items;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  /**\n   * Bans a user\n   * @param userId the id of the user to ban\n   * @param reportId the id of the report\n   * @returns the ban\n   */\n  async banUser(userId: string, reportId: string): Promise {\n    const newBan = new UserBan();\n\n    // Find the user to ban\n    const user = await this.userRepository.findOne({\n      where: { id: userId }\n    });\n\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NO_CONTENT);\n    }\n\n    const millisecondsInAWeek = 604800000;\n    newBan.bannedUser = user;\n    newBan.startDate = new Date(Date.now());\n    newBan.endDate = new Date(Date.now() + millisecondsInAWeek); //Ban for 1 week\n\n    const report = await this.userReportsRepository.findOne({\n      where: { id: reportId }\n    });\n\n    if (!report) {\n      throw new HttpException('Report not found', HttpStatus.NO_CONTENT);\n    }\n\n    report.status = ReportStatus.Accepted;\n    await this.userReportsRepository.save(report);\n\n    await this.userRepository.update(userId, { isBanned: true });\n\n    return this.userBanRepository.save(newBan);\n  }\n\n  /**\n   * Ban the post\n   * @param postId the id of the post to ban\n   * @param reportId the id of the report\n   * @returns the update result\n   */\n  async banPost(postId: string, reportId: string): Promise {\n    const post = await this.postRepository.findOne({\n      where: { id: postId },\n      relations: ['postedBy']\n    });\n\n    if (!post) {\n      throw new HttpException('Post not found', HttpStatus.NO_CONTENT);\n    }\n\n    const report = await this.postReportsRepository.findOne({\n      where: { id: reportId }\n    });\n\n    if (!report) {\n      throw new HttpException('Report not found', HttpStatus.NO_CONTENT);\n    }\n\n    report.status = ReportStatus.Accepted;\n    await this.postReportsRepository.save(report);\n\n    return this.postRepository\n      .createQueryBuilder()\n      .update(Post)\n      .set({ isTakenDown: true })\n      .where('id = :id', { id: post.id })\n      .execute();\n  }\n\n  /**\n   * unban the post\n   * @param postId the id of the post to unban\n   * @returns the update result\n   */\n  async unbanPost(id: string): Promise {\n    const post = await this.postRepository.findOne({\n      where: { id: id }\n    });\n\n    if (!post) {\n      throw new HttpException('Post not found', HttpStatus.NO_CONTENT);\n    }\n\n    return this.postRepository\n      .createQueryBuilder()\n      .update(Post)\n      .set({ isTakenDown: false })\n      .where('id = :id', { id: post.id })\n      .execute();\n  }\n\n  /**\n   * Gets all reported posts\n   * @param pageOptionsDto the page options\n   * @returns the reported posts\n   */\n  async getReportedPosts(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryResults = await this.postReportsRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('PostReport.reportedPost', 'Post')\n      .leftJoinAndSelect('PostReport.reportedBy', 'ReportedBy')\n      .leftJoinAndSelect('Post.postedBy', 'postedBy')\n      .where('PostReport.status = :status', { status: ReportStatus.PendingReview })\n      .groupBy('Post.id')\n      .addGroupBy('PostReport.reason')\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take)\n      .orderBy('Post.createdAt', pageOptionsDto.order)\n      .getManyAndCount()\n      .then((postsAndCount) => {\n        return {\n          items: postsAndCount[0],\n          itemsCount: postsAndCount[0].length\n        };\n      });\n\n    const itemCount: number = queryResults.itemsCount;\n    const entities: PostReport[] = queryResults.items;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  /**\n   * Gets all reported users\n   * @param pageOptionsDto the page options\n   * @returns the reported users\n   */\n  async getReportedUsers(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryResults = await this.userReportsRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('UserReport.reportedUser', 'User')\n      .leftJoinAndSelect('UserReport.reportedBy', 'ReportedBy')\n      .where('UserReport.status = :status', { status: ReportStatus.PendingReview })\n      .groupBy('User.id')\n      .addGroupBy('UserReport.reason')\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take)\n      .orderBy('User.createdAt', pageOptionsDto.order)\n      .getManyAndCount()\n      .then((usersAndCount) => {\n        return {\n          items: usersAndCount[0],\n          itemsCount: usersAndCount[0].length\n        };\n      });\n\n    const itemCount: number = queryResults.itemsCount;\n    const entities: UserReport[] = queryResults.items;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/roles.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guards/roles.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '../../../constants/role.enum';\nimport { ROLES_KEY } from '../../../decorators/roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass()\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    const { user } = context.switchToHttp().getRequest();\n\n    return requiredRoles.some((role) => user.role?.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Scrapbook.html":{"url":"entities/Scrapbook.html","title":"entity - Scrapbook","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Scrapbook\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/entities/scrapbook.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class is the class that represents the User table in the database\nThis is how we interact with the database table in the application\nNo need for SQL quesries\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                caption\n                            \n                            \n                                id\n                            \n                            \n                                location\n                            \n                            \n                                posts\n                            \n                            \n                                user\n                            \n                            \n                                visibility\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        caption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/scrapbook.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/scrapbook.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/scrapbook.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.scrapbook)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/scrapbook.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.scrapbooks, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/scrapbook.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visibility\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Visibility\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/scrapbook.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne, OneToMany } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { Visibility } from '../../../constants/visibility.enum';\nimport { Post } from './post.entity';\n\n/**\n * User Entity Class is the class that represents the User table in the database\n * This is how we interact with the database table in the application\n * No need for SQL quesries\n */\n@Entity()\nexport class Scrapbook extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  caption: string;\n\n  @Column()\n  location: string;\n\n  @Column()\n  visibility: Visibility;\n\n  //A scrapbook can only be posted by one user but a user can have many scrapbook\n  @ManyToOne(() => User, (user) => user.scrapbooks, {\n    onDelete: 'CASCADE'\n  })\n  user: User;\n\n  //A scrapbook can have many posts\n  @OneToMany(() => Post, (post) => post.scrapbook)\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendNotificationDto.html":{"url":"classes/SendNotificationDto.html","title":"class - SendNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notification/dto/send-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                            \n                                targetGroup\n                            \n                            \n                                targetUserId\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notification/dto/send-message.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationTargetGroup\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(NotificationTargetGroup)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notification/dto/send-message.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetUserId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notification/dto/send-message.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notification/dto/send-message.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty, IsOptional, IsUUID } from 'class-validator';\nimport { NotificationTargetGroup } from '../../../constants/notification-target-group.enum';\n\nexport class SendNotificationDto {\n  @IsNotEmpty()\n  title: string;\n\n  @IsNotEmpty()\n  body: string;\n\n  @IsEnum(NotificationTargetGroup)\n  targetGroup: NotificationTargetGroup;\n\n  @IsOptional()\n  @IsUUID()\n  targetUserId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpUserDto.html":{"url":"classes/SignUpUserDto.html","title":"class - SignUpUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/user-signup.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the DTO for the user sign up,\nthis is the data that the user will send to the server in the body of the request.\nThe annotation above each property is used to validate the data that the user sends.\nNest Validates it automatically and if the data is not valid it will throw an error.\nIsNotEmpty check that the string is not empty.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                confirmPassword\n                            \n                            \n                                dateOfBirth\n                            \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateOfBirth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPhoneNumber('AE')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsPhoneNumber } from 'class-validator';\n\n/**\n * This is the DTO for the user sign up,\n * this is the data that the user will send to the server in the body of the request.\n * The annotation above each property is used to validate the data that the user sends.\n * Nest Validates it automatically and if the data is not valid it will throw an error.\n * IsNotEmpty check that the string is not empty.\n */\n\nexport class SignUpUserDto {\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsEmail()\n  email: string;\n\n  @IsNotEmpty()\n  username: string;\n\n  @IsNotEmpty()\n  password: string;\n\n  @IsNotEmpty()\n  confirmPassword: string;\n\n  @IsPhoneNumber('AE')\n  phoneNumber: string;\n\n  address: string;\n\n  @IsNotEmpty()\n  dateOfBirth: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteCustomer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCustomer(customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/stripe.service.ts:19\n                \n            \n\n\n            \n                \n                    Delete a customer from Stripe\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the customer\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stripe\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Stripe(process.env?.STRIPE_TEST_KEY, {\n    apiVersion: '2022-11-15'\n  })\n                    \n                \n                    \n                        \n                                Defined in src/common/services/stripe.service.ts:11\n                        \n                    \n\n            \n                \n                    Stripe instance\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import * as dotenv from 'dotenv';\ndotenv.config();\nimport Stripe from 'stripe';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class StripeService {\n  /**\n   * Stripe instance\n   */\n  private stripe = new Stripe(process.env?.STRIPE_TEST_KEY, {\n    apiVersion: '2022-11-15'\n  });\n\n  /**\n   * Delete a customer from Stripe\n   * @param customerId the id of the customer\n   */\n  async deleteCustomer(customerId: string): Promise {\n    await this.stripe.customers.del(customerId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/SubscriptionsGuard.html":{"url":"guards/SubscriptionsGuard.html","title":"guard - SubscriptionsGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    SubscriptionsGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/auth/guards/subscriptions.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/subscriptions.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guards/subscriptions.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { SubscriptionPlan } from '../../../constants/subscription-plan.enum';\nimport { SUBSCRIPTION_PLANS_KEY } from '../../../decorators/subscription.decorator';\n\n@Injectable()\nexport class SubscriptionsGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredSubscriptions = this.reflector.getAllAndOverride(\n      SUBSCRIPTION_PLANS_KEY,\n      [context.getHandler(), context.getClass()]\n    );\n\n    if (!requiredSubscriptions) {\n      return true;\n    }\n    const { user } = context.switchToHttp().getRequest();\n    return requiredSubscriptions.some((subscriptionPlan) =>\n      user.subscriptionPlan?.includes(subscriptionPlan)\n    );\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nTasksService\n\nTasksService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/tasks/tasks.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { Post } from '../post/entities/post.entity';\nimport { TasksService } from './tasks.service';\nimport { UserBan } from '../report/entities/user-ban.entity';\nimport { Memory } from '../memory/entities/memory.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Post, UserBan, Memory])],\n  providers: [TasksService]\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tasks/tasks.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This service is used to run bulk tasks requiring a lot of processing power\nThis will run once everyday at 12:00:00 AM server time\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                removeExpiredBans\n                            \n                            \n                                    Async\n                                updateUserMemoryURLs\n                            \n                            \n                                    Async\n                                updateUserPostURLs\n                            \n                            \n                                    Async\n                                updateUserProfileURLs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, postRepository: Repository, userBanRepository: Repository, memoryRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/tasks/tasks.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userBanRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        memoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeExpiredBans\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeExpiredBans()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_MINUTE)\n                \n            \n\n            \n                \n                    Defined in src/modules/tasks/tasks.service.ts:115\n                \n            \n\n\n            \n                \n                    Runs at the specified interval\nRemoves the bans on users whose ban has expired\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserMemoryURLs\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserMemoryURLs()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_MINUTE)\n                \n            \n\n            \n                \n                    Defined in src/modules/tasks/tasks.service.ts:139\n                \n            \n\n\n            \n                \n                    Runs at the specified interval\nUpdates the memory picture URL for all posts whose picture will expire tomorrow\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserPostURLs\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserPostURLs()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_MINUTE)\n                \n            \n\n            \n                \n                    Defined in src/modules/tasks/tasks.service.ts:76\n                \n            \n\n\n            \n                \n                    Runs at the specified interval\nUpdates the post picture URL for all posts whose picture will expire tomorrow\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserProfileURLs\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserProfileURLs()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_MINUTE)\n                \n            \n\n            \n                \n                    Defined in src/modules/tasks/tasks.service.ts:37\n                \n            \n\n\n            \n                \n                    Runs at the specified interval\nUpdates the profile picture URL for all users whose profile picture will expire tomorrow\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FirebaseStorageService } from '../../common/services/firebase-storage.service';\nimport { BanStatus } from '../../constants/ban-status.enum';\nimport { Repository, Not, LessThan } from 'typeorm';\nimport { Memory } from '../memory/entities/memory.entity';\nimport { Post } from '../post/entities/post.entity';\nimport { UserBan } from '../report/entities/user-ban.entity';\nimport { User } from '../user/entities/user.entity';\n\n/**\n * This service is used to run bulk tasks requiring a lot of processing power\n * This will run once everyday at 12:00:00 AM server time\n */\n@Injectable()\nexport class TasksService {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    @InjectRepository(Post)\n    private postRepository: Repository,\n\n    @InjectRepository(UserBan)\n    private userBanRepository: Repository,\n\n    @InjectRepository(Memory)\n    private memoryRepository: Repository\n  ) {}\n\n  /**\n   * Runs at the specified interval\n   * Updates the profile picture URL for all users whose profile picture will expire tomorrow\n   */\n  @Cron(CronExpression.EVERY_MINUTE)\n  async updateUserProfileURLs() {\n    const tomorrow = new Date(Date.now());\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    await this.userRepository\n      .find({\n        where: {\n          profilePictureId: Not(''),\n          profilePictureExpiryDate: LessThan(tomorrow)\n        }\n      })\n      .then(async (users) => {\n        console.log(users.length);\n\n        for (let i = 0; i  {\n        for (let i = 0; i  {\n        for (let i = 0; i  {\n        for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserBioDto.html":{"url":"classes/UpdateUserBioDto.html","title":"class - UpdateUserBioDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserBioDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/bio-update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                to check for valid date while updating dates\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bio\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MaxLength(100)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/bio-update.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, MaxLength } from 'class-validator';\n/**\n * to check for valid date while updating dates\n */\nexport class UpdateUserBioDto {\n  @IsNotEmpty()\n  @MaxLength(100)\n  @IsString()\n  bio: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDateOfBirthDto.html":{"url":"classes/UpdateUserDateOfBirthDto.html","title":"class - UpdateUserDateOfBirthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDateOfBirthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/dateofbirth-update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                to check for valid date while updating dates\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dateOfBirth\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dateOfBirth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/dateofbirth-update.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n/**\n * to check for valid date while updating dates\n */\nexport class UpdateUserDateOfBirthDto {\n  @IsNotEmpty()\n  dateOfBirth: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserEmailDto.html":{"url":"classes/UpdateUserEmailDto.html","title":"class - UpdateUserEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/email-update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                to check for valid email while updating emails\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/email-update.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail } from 'class-validator';\n/**\n * to check for valid email while updating emails\n */\nexport class UpdateUserEmailDto {\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserPasswordDto.html":{"url":"classes/UpdateUserPasswordDto.html","title":"class - UpdateUserPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/password-update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmPassword\n                            \n                            \n                                currentPassword\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(8)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/password-update.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/password-update.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(8)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/password-update.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, MinLength } from 'class-validator';\n\nexport class UpdateUserPasswordDto {\n  @IsNotEmpty()\n  currentPassword: string;\n\n  @MinLength(8)\n  @IsNotEmpty()\n  password: string;\n\n  @MinLength(8)\n  @IsNotEmpty()\n  confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserPhoneNumberDto.html":{"url":"classes/UpdateUserPhoneNumberDto.html","title":"class - UpdateUserPhoneNumberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserPhoneNumberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/phone-update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                to check for valid date while updating dates\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPhoneNumber('AE')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/phone-update.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsPhoneNumber } from 'class-validator';\n/**\n * to check for valid date while updating dates\n */\nexport class UpdateUserPhoneNumberDto {\n  @IsPhoneNumber('AE')\n  phoneNumber: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class is the class that represents the User table in the database\nThis is how we interact with the database table in the application\nNo need for SQL queries\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                appeals\n                            \n                            \n                                bans\n                            \n                            \n                                bio\n                            \n                            \n                                blockedBy\n                            \n                            \n                                blocks\n                            \n                            \n                                cluesCreated\n                            \n                            \n                                comments\n                            \n                            \n                                dateOfBirth\n                            \n                            \n                                email\n                            \n                            \n                                eventsAttended\n                            \n                            \n                                eventsCreated\n                            \n                            \n                                fcmToken\n                            \n                            \n                                firstName\n                            \n                            \n                                followers\n                            \n                            \n                                followersCount\n                            \n                            \n                                following\n                            \n                            \n                                followingCount\n                            \n                            \n                                followRequestsReceived\n                            \n                            \n                                followRequestsSent\n                            \n                            \n                                gender\n                            \n                            \n                                goalsCreated\n                            \n                            \n                                hasStripAccount\n                            \n                            \n                                id\n                            \n                            \n                                isBanned\n                            \n                            \n                                lastName\n                            \n                            \n                                likes\n                            \n                            \n                                memories\n                            \n                            \n                                notificationPreference\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                posts\n                            \n                            \n                                profilePictureExpiryDate\n                            \n                            \n                                profilePictureId\n                            \n                            \n                                profilePictureUrl\n                            \n                            \n                                reportedPosts\n                            \n                            \n                                reportedUsers\n                            \n                            \n                                reportsAgainst\n                            \n                            \n                                role\n                            \n                            \n                                scrapbooks\n                            \n                            \n                                stripeCustomerId\n                            \n                            \n                                subscriptionPlan\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        appeals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Appeal[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, appeal => appeal.appealedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bans\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserBan[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, userBan => userBan.bannedUser)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        blockedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Block[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, block => block.blockedUser)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:144\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        blocks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Block[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, block => block.blockingUser)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:140\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cluesCreated\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EventClue[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, clue => clue.creator)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:180\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:132\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateOfBirth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventsAttended\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Event[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, event => event.participants)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:176\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventsCreated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Event[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, event => event.creator)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:172\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fcmToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Follow[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, follow => follow.followed)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:152\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followersCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        following\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Follow[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, follow => follow.followedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:148\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followingCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followRequestsReceived\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FollowRequest[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, followRequest => followRequest.requestedUser)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:160\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followRequestsSent\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FollowRequest[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, followRequest => followRequest.requestedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Gender\n\n                    \n                \n                \n                    \n                        Default value : Gender.Undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        goalsCreated\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EventGoal[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, goal => goal.creator)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:184\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasStripAccount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isBanned\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Like[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, like => like.likedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:164\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        memories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Memory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, memory => memory.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:168\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notificationPreference\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationPreference\n\n                    \n                \n                \n                    \n                        Default value : NotificationPreference.All\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.postedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profilePictureExpiryDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profilePictureId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profilePictureUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'longtext'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportedPosts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PostReport[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, postReport => postReport.reportedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:117\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportedUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserReport[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, userReport => userReport.reportedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportsAgainst\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserReport[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, userReport => userReport.reportedUser)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scrapbooks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Scrapbook[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, scrapbook => scrapbook.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stripeCustomerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subscriptionPlan\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SubscriptionPlan\n\n                    \n                \n                \n                    \n                        Default value : SubscriptionPlan.Basic\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:51\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  BeforeInsert,\n  OneToMany,\n  ManyToMany\n} from 'typeorm';\nimport { EncryptionService } from '../../../common/services/encryption.service';\nimport { Role } from '../../../constants/role.enum';\nimport { Post } from '../../post/entities/post.entity';\nimport { Scrapbook } from '../../post/entities/scrapbook.entity';\nimport { Comment } from '../../post/entities/comment.entity';\nimport { PostReport } from '../../report/entities/post-report.entity';\nimport { UserReport } from '../../report/entities/user-report.entity';\nimport { Gender } from '../../../constants/gender.enum';\nimport { UserBan } from '../../report/entities/user-ban.entity';\nimport { Appeal } from '../../appeals/entities/appeal.entity';\nimport { Block } from '../../block/entities/block.entity';\nimport { Follow } from '../../../modules/follow/entities/follow.entity';\nimport { FollowRequest } from '../../../modules/follow/entities/follow-request.entity';\nimport { NotificationPreference } from '../../../constants/notification-preference.enum';\nimport { Like } from '../../post/entities/post-like.entity';\nimport { SubscriptionPlan } from '../../../constants/subscription-plan.enum';\nimport { Memory } from '../../memory/entities/memory.entity';\nimport { Event } from '../../../modules/event/entities/event.entity';\nimport { EventClue } from '../../../modules/event/entities/eventClues.entity';\nimport { EventGoal } from '../../../modules/event/entities/eventGoal.entity';\n\n/**\n * User Entity Class is the class that represents the User table in the database\n * This is how we interact with the database table in the application\n * No need for SQL queries\n */\n@Entity()\nexport class User extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column()\n  email: string;\n\n  @Column()\n  username: string;\n\n  @Column({ select: false })\n  password: string;\n\n  @Column()\n  phoneNumber: string;\n\n  @Column({ default: '' })\n  address: string = '';\n\n  @Column()\n  dateOfBirth: Date;\n\n  @Column()\n  role: Role;\n\n  @Column({ type: 'longtext' })\n  profilePictureUrl: string = '';\n\n  @Column({ default: '' })\n  profilePictureId: string = '';\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  profilePictureExpiryDate: Date;\n\n  @Column({ default: Gender.Undefined })\n  gender: Gender = Gender.Undefined;\n\n  @Column({ default: '' })\n  fcmToken: string = '';\n\n  @Column({ default: NotificationPreference.All })\n  notificationPreference: NotificationPreference = NotificationPreference.All;\n\n  @Column({ default: false })\n  isBanned: boolean = false;\n\n  @Column({ default: false })\n  hasStripAccount: boolean = false;\n\n  @Column({ default: '' })\n  stripeCustomerId: string = '';\n\n  @Column({ default: SubscriptionPlan.Basic })\n  subscriptionPlan: SubscriptionPlan = SubscriptionPlan.Basic;\n\n  @Column({ default: 0 })\n  followersCount: number = 0;\n\n  @Column({ default: 0 })\n  followingCount: number = 0;\n\n  @Column({ default: '' })\n  bio: string = '';\n\n  //A user can have many posts\n  @OneToMany(() => Post, (post) => post.postedBy)\n  posts: Post[];\n\n  //A user can have many posts\n  @OneToMany(() => Scrapbook, (scrapbook) => scrapbook.user)\n  scrapbooks: Scrapbook[];\n\n  //A user can report many posts\n  @OneToMany(() => PostReport, (postReport) => postReport.reportedBy)\n  reportedPosts: PostReport[];\n\n  //A user can report many users\n  @OneToMany(() => UserReport, (userReport) => userReport.reportedBy)\n  reportedUsers: UserReport[];\n\n  //A user can be reported by many users\n  @OneToMany(() => UserReport, (userReport) => userReport.reportedUser)\n  reportsAgainst: UserReport[];\n\n  @OneToMany(() => UserBan, (userBan) => userBan.bannedUser)\n  bans: UserBan[];\n\n  //A user can make many comments\n  @OneToMany(() => Comment, (comment) => comment.author)\n  comments: Comment[];\n\n  //A user can make many appeals\n  @OneToMany(() => Appeal, (appeal) => appeal.appealedBy)\n  appeals: Appeal[];\n\n  //A user can block many users\n  @OneToMany(() => Block, (block) => block.blockingUser)\n  blocks: Block[];\n\n  //A user can be blocked by many users\n  @OneToMany(() => Block, (block) => block.blockedUser)\n  blockedBy: Block[];\n\n  //A user can follow many users\n  @OneToMany(() => Follow, (follow) => follow.followedBy)\n  following: Follow[];\n\n  //A user can be followed by many users\n  @OneToMany(() => Follow, (follow) => follow.followed)\n  followers: Follow[];\n\n  //A user can send many follow requests\n  @OneToMany(() => FollowRequest, (followRequest) => followRequest.requestedBy)\n  followRequestsSent: FollowRequest[];\n\n  //A user can receive many follow requests\n  @OneToMany(() => FollowRequest, (followRequest) => followRequest.requestedUser)\n  followRequestsReceived: FollowRequest[];\n\n  //A user can have many likes\n  @OneToMany(() => Like, (like) => like.likedBy)\n  likes: Like[];\n\n  //A user can make many memories\n  @OneToMany(() => Memory, (memory) => memory.user)\n  memories: Memory[];\n\n  //A user can make many events\n  @OneToMany(() => Event, (event) => event.creator)\n  eventsCreated: Event[];\n\n  //A user can attend many events\n  @ManyToMany(() => Event, (event) => event.participants)\n  eventsAttended: Event[];\n\n  //A user can make many clues\n  @OneToMany(() => EventClue, (clue) => clue.creator)\n  cluesCreated: EventClue[];\n\n  //A user can make many goals\n  @OneToMany(() => EventGoal, (goal) => goal.creator)\n  goalsCreated: EventGoal[];\n\n  //This is a hook that will be executed before the user is inserted in the database\n  @BeforeInsert()\n  emailToLowerCase() {\n    this.email = this.email.toLowerCase();\n  }\n\n  @BeforeInsert()\n  async hashPassword() {\n    this.password = await new EncryptionService().encryptPassword(this.password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserBan.html":{"url":"entities/UserBan.html","title":"entity - UserBan","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserBan\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/report/entities/user-ban.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class is the class that represents the User table in the database\nThis is how we interact with the database table in the application\nNo need for SQL quesries\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bannedUser\n                            \n                            \n                                endDate\n                            \n                            \n                                id\n                            \n                            \n                                startDate\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bannedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.bans, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-ban.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-ban.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-ban.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-ban.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : BanStatus.Active\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-ban.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { BanStatus } from '../../../constants/ban-status.enum';\nimport { BaseEntity } from '../../../common/entities/base.entity';\n\n/**\n * User Entity Class is the class that represents the User table in the database\n * This is how we interact with the database table in the application\n * No need for SQL quesries\n */\n@Entity()\nexport class UserBan extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ default: BanStatus.Active })\n  status: string = BanStatus.Active;\n\n  @Column()\n  startDate: Date;\n\n  @Column()\n  endDate: Date;\n\n  //A user can be banned multiple times\n  @ManyToOne(() => User, (user) => user.bans, {\n    onDelete: 'CASCADE'\n  })\n  bannedUser: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserController } from './user.controller';\nimport { User } from './entities/user.entity';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService]\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserReport.html":{"url":"entities/UserReport.html","title":"entity - UserReport","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserReport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/report/entities/user-report.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class is the class that represents the User table in the database\nThis is how we interact with the database table in the application\nNo need for SQL queries\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                reason\n                            \n                            \n                                reportedBy\n                            \n                            \n                                reportedUser\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-report.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReportReason\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-report.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.reportedUsers, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-report.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.reportsAgainst, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-report.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ReportStatus.PendingReview\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-report.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ReportStatus } from '../../../constants/report-status.enum';\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { BaseEntity } from '../../../common/entities/base.entity';\nimport { ReportReason } from '../../../constants/report-reason.enum';\n\n/**\n * User Entity Class is the class that represents the User table in the database\n * This is how we interact with the database table in the application\n * No need for SQL queries\n */\n@Entity()\nexport class UserReport extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ default: ReportStatus.PendingReview })\n  status: string = ReportStatus.PendingReview;\n\n  @Column()\n  reason: ReportReason;\n\n  //A Report can only report one user but a user can be in many reports\n  @ManyToOne(() => User, (user) => user.reportsAgainst, {\n    onDelete: 'CASCADE'\n  })\n  reportedUser: User;\n\n  //A Report can only be posted by one user but a user can have many Reports\n  @ManyToOne(() => User, (user) => user.reportedUsers, {\n    onDelete: 'CASCADE'\n  })\n  reportedBy: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                migrations/1672082558971-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672082558971\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672082713679-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672082713679\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672133224744-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672133224744\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672166137042-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672166137042\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672251740346-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672251740346\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672388811259-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672388811259\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672399737695-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672399737695\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672417201262-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672417201262\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672417384470-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672417384470\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672576067204-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672576067204\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672585305519-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672585305519\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672600378154-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672600378154\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672678196724-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672678196724\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672744437528-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672744437528\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672760070076-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672760070076\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672832148243-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672832148243\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672833410692-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672833410692\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673022319464-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673022319464\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673025398979-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673025398979\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673027114310-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673027114310\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673177373733-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673177373733\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673337064308-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673337064308\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673770456243-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673770456243\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673847605869-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673847605869\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673974513613-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673974513613\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674121256550-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674121256550\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674198387677-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674198387677\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674453163372-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674453163372\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674486373359-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674486373359\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674487677914-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674487677914\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674493007150-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674493007150\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674544597118-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674544597118\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1675177507147-$npm_config_name.ts\n            \n            class\n            $npmConfigName1675177507147\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1676616826310-$npm_config_name.ts\n            \n            class\n            $npmConfigName1676616826310\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1676624523857-$npm_config_name.ts\n            \n            class\n            $npmConfigName1676624523857\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1676644288779-$npm_config_name.ts\n            \n            class\n            $npmConfigName1676644288779\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1676990992500-$npm_config_name.ts\n            \n            class\n            $npmConfigName1676990992500\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1676993098020-$npm_config_name.ts\n            \n            class\n            $npmConfigName1676993098020\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1678774445242-$npm_config_name.ts\n            \n            class\n            $npmConfigName1678774445242\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1678779028547-$npm_config_name.ts\n            \n            class\n            $npmConfigName1678779028547\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1678779204584-$npm_config_name.ts\n            \n            class\n            $npmConfigName1678779204584\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1678780013678-$npm_config_name.ts\n            \n            class\n            $npmConfigName1678780013678\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1678780110507-$npm_config_name.ts\n            \n            class\n            $npmConfigName1678780110507\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1678975542609-$npm_config_name.ts\n            \n            class\n            $npmConfigName1678975542609\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/dto/page-meta-parameters.dto.ts\n            \n            interface\n            PageMetaDtoParameters\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/common/dto/page-meta.dto.ts\n            \n            class\n            PageMetaDto\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/common/dto/page-options.dto.ts\n            \n            class\n            PageOptionsDto\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/common/dto/page.dto.ts\n            \n            class\n            PageDto\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/common/entities/base.entity.ts\n            \n            class\n            BaseEntity\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/common/services/encryption.service.ts\n            \n            injectable\n            EncryptionService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/services/firebase-admin.service.ts\n            \n            variable\n            bucket\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/services/firebase-admin.service.ts\n            \n            variable\n            firebaseConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/services/firebase-admin.service.ts\n            \n            variable\n            messaging\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/services/firebase-admin.service.ts\n            \n            variable\n            serviceAccount\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/services/firebase-admin.service.ts\n            \n            variable\n            storage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/services/firebase-storage.service.ts\n            \n            injectable\n            FirebaseStorageService\n            \n                50 %\n                (6/12)\n            \n        \n        \n            \n                \n                src/common/services/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/subscription.decorator.ts\n            \n            variable\n            SUBSCRIPTION_PLANS_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/decorators/subscription.decorator.ts\n            \n            variable\n            SubscriptionPlans\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/analytics/analytics.controller.ts\n            \n            controller\n            AnalyticsController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/modules/analytics/analytics.service.ts\n            \n            injectable\n            AnalyticsService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/modules/analytics/dto/post-analytic-response.dto.ts\n            \n            class\n            PostAnalyticResposneDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/appeals/appeals.controller.ts\n            \n            controller\n            AppealsController\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/modules/appeals/appeals.service.ts\n            \n            injectable\n            AppealsService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/modules/appeals/dto/appeal.dto.ts\n            \n            class\n            AppealDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/appeals/entities/appeal.entity.ts\n            \n            entity\n            Appeal\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                25 %\n                (2/8)\n            \n        \n        \n            \n                \n                src/modules/auth/constants.ts\n            \n            variable\n            jwtConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/captcha-response.dto.ts\n            \n            class\n            ReCaptchaResponseDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/user-signup.dto.ts\n            \n            class\n            SignUpUserDto\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/subscriptions.guard.ts\n            \n            guard\n            SubscriptionsGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/modules/block/block.controller.ts\n            \n            controller\n            BlockController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/modules/block/block.service.ts\n            \n            injectable\n            BlockService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/modules/block/entities/block.entity.ts\n            \n            entity\n            Block\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/event/dto/create-clue.dto.ts\n            \n            class\n            CreateClueDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/event/dto/create-event.dto.ts\n            \n            class\n            CreateEventDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/event/dto/create-goal.dto.ts\n            \n            class\n            CreateGoalDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/event/dto/get-proximity-events.dto.ts\n            \n            class\n            GetProximityEventsDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/modules/event/entities/event.entity.ts\n            \n            entity\n            Event\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/event/entities/eventClues.entity.ts\n            \n            entity\n            EventClue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/event/entities/eventGoal.entity.ts\n            \n            entity\n            EventGoal\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/event/event.controller.ts\n            \n            controller\n            EventController\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/modules/event/event.service.ts\n            \n            injectable\n            EventService\n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                src/modules/feed/feed.controller.ts\n            \n            controller\n            FeedController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/feed/feed.service.ts\n            \n            injectable\n            FeedService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/modules/follow/entities/follow-request.entity.ts\n            \n            entity\n            FollowRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/follow/entities/follow.entity.ts\n            \n            entity\n            Follow\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/follow/follow.controller.ts\n            \n            controller\n            FollowController\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/modules/follow/follow.service.ts\n            \n            injectable\n            FollowService\n            \n                80 %\n                (8/10)\n            \n        \n        \n            \n                \n                src/modules/memory/dto/get-proximity-memory.dto.ts\n            \n            class\n            GetProximityMemoryDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/modules/memory/dto/memory-create.dto.ts\n            \n            class\n            CreateMemoryDto\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/modules/memory/entities/memory.entity.ts\n            \n            entity\n            Memory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/memory/memory.controller.ts\n            \n            controller\n            MemoryController\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/modules/memory/memory.service.ts\n            \n            injectable\n            MemoryService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/modules/notification/dto/send-message.dto.ts\n            \n            class\n            SendNotificationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/notification/notification.controller.ts\n            \n            controller\n            NotificationController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/modules/notification/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/modules/payment/payment.controller.ts\n            \n            controller\n            PaymentController\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/modules/payment/payment.service.ts\n            \n            injectable\n            PaymentService\n            \n                50 %\n                (5/10)\n            \n        \n        \n            \n                \n                src/modules/post/dto/comment-create.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/post/dto/post-create.dto.ts\n            \n            class\n            CreatePostDto\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/modules/post/dto/scrapbook-create.dts.ts\n            \n            class\n            CreateScrapBookDto\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/modules/post/entities/comment.entity.ts\n            \n            entity\n            Comment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/post/entities/post-like.entity.ts\n            \n            entity\n            Like\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/post/entities/post.entity.ts\n            \n            entity\n            Post\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/post/entities/scrapbook.entity.ts\n            \n            entity\n            Scrapbook\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                94 %\n                (17/18)\n            \n        \n        \n            \n                \n                src/modules/post/post.service.ts\n            \n            injectable\n            PostService\n            \n                85 %\n                (17/20)\n            \n        \n        \n            \n                \n                src/modules/report/dto/report.dto.ts\n            \n            class\n            ReportDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/modules/report/entities/post-report.entity.ts\n            \n            entity\n            PostReport\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/report/entities/user-ban.entity.ts\n            \n            entity\n            UserBan\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/report/entities/user-report.entity.ts\n            \n            entity\n            UserReport\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/report/report.controller.ts\n            \n            controller\n            ReportController\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/modules/report/report.service.ts\n            \n            injectable\n            ReportService\n            \n                81 %\n                (9/11)\n            \n        \n        \n            \n                \n                src/modules/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/modules/user/dto/bio-update.dto.ts\n            \n            class\n            UpdateUserBioDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/user/dto/dateofbirth-update.dto.ts\n            \n            class\n            UpdateUserDateOfBirthDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/user/dto/email-update.dto.ts\n            \n            class\n            UpdateUserEmailDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/user/dto/password-update.dto.ts\n            \n            class\n            UpdateUserPasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/user/dto/phone-update.dto.ts\n            \n            class\n            UpdateUserPhoneNumberDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                85 %\n                (18/21)\n            \n        \n        \n            \n                \n                src/modules/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                89 %\n                (26/29)\n            \n        \n        \n            \n                \n                typeOrm.config.ts\n            \n            variable\n            configService\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/axios : ^2.0.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.1\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/schedule : ^2.1.0\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            axios : ^1.3.4\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            firebase : ^9.15.0\n        \n            firebase-admin : ^11.4.1\n        \n            mysql2 : ^2.3.3\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            stripe : ^11.7.0\n        \n            typeorm : ^0.3.11\n        \n            uuid : ^9.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BanStatus   (src/.../ban-status.enum.ts)\n                        \n                        \n                            FollowStatus   (src/.../follow-status.enum.ts)\n                        \n                        \n                            Gender   (src/.../gender.enum.ts)\n                        \n                        \n                            NotificationPreference   (src/.../notification-preference.enum.ts)\n                        \n                        \n                            NotificationTargetGroup   (src/.../notification-target-group.enum.ts)\n                        \n                        \n                            Order   (src/.../order.enum.ts)\n                        \n                        \n                            ReportReason   (src/.../report-reason.enum.ts)\n                        \n                        \n                            ReportStatus   (src/.../report-status.enum.ts)\n                        \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                        \n                            SubscriptionPlan   (src/.../subscription-plan.enum.ts)\n                        \n                        \n                            Visibility   (src/.../visibility.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants/ban-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        BanStatus\n                    \n                \n                        \n                            \n                                 Active\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 Expired\n                            \n                        \n                        \n                            \n                                Value : expired\n                            \n                        \n            \n        \n\n    src/constants/follow-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        FollowStatus\n                    \n                \n                        \n                            \n                                 Pending\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 Accepted\n                            \n                        \n                        \n                            \n                                Value : accepted\n                            \n                        \n                        \n                            \n                                 Rejected\n                            \n                        \n                        \n                            \n                                Value : rejected\n                            \n                        \n            \n        \n\n    src/constants/gender.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Gender\n                    \n                \n                        \n                            \n                                 Male\n                            \n                        \n                        \n                            \n                                Value : male\n                            \n                        \n                        \n                            \n                                 Female\n                            \n                        \n                        \n                            \n                                Value : female\n                            \n                        \n                        \n                            \n                                 Other\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n                        \n                            \n                                 Undefined\n                            \n                        \n                        \n                            \n                                Value : undefined\n                            \n                        \n            \n        \n\n    src/constants/notification-preference.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NotificationPreference\n                    \n                \n                        \n                            \n                                 All\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n                        \n                            \n                                 SelectedGroup\n                            \n                        \n                        \n                            \n                                Value : selectedGroup\n                            \n                        \n                        \n                            \n                                 Broadcast\n                            \n                        \n                        \n                            \n                                Value : broadcast\n                            \n                        \n            \n        \n\n    src/constants/notification-target-group.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NotificationTargetGroup\n                    \n                \n                        \n                            \n                                 All\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n                        \n                            \n                                 SingleUser\n                            \n                        \n                        \n                            \n                                Value : singleUser\n                            \n                        \n                        \n                            \n                                 Influencers\n                            \n                        \n                        \n                            \n                                Value : influencers\n                            \n                        \n                        \n                            \n                                 Celebrity\n                            \n                        \n                        \n                            \n                                Value : celebrity\n                            \n                        \n            \n        \n\n    src/constants/order.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Order\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/constants/report-reason.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ReportReason\n                    \n                \n                        \n                            \n                                 Spam\n                            \n                        \n                        \n                            \n                                Value : spam\n                            \n                        \n                        \n                            \n                                 Inappropriate\n                            \n                        \n                        \n                            \n                                Value : inappropriate\n                            \n                        \n                        \n                            \n                                 BullyingOrHarrassement\n                            \n                        \n                        \n                            \n                                Value : bullying or harrassement\n                            \n                        \n            \n        \n\n    src/constants/report-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ReportStatus\n                    \n                \n                        \n                            \n                                 Accepted\n                            \n                        \n                        \n                            \n                                Value : accepted\n                            \n                        \n                        \n                            \n                                 Rejected\n                            \n                        \n                        \n                            \n                                Value : rejected\n                            \n                        \n                        \n                            \n                                 PendingReview\n                            \n                        \n                        \n                            \n                                Value : pending review\n                            \n                        \n            \n        \n\n    src/constants/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 Standard\n                            \n                        \n                        \n                            \n                                Value : standard\n                            \n                        \n                        \n                            \n                                 Celebrity\n                            \n                        \n                        \n                            \n                                Value : celebrity\n                            \n                        \n                        \n                            \n                                 Influencer\n                            \n                        \n                        \n                            \n                                Value : influencer\n                            \n                        \n                        \n                            \n                                 Professional\n                            \n                        \n                        \n                            \n                                Value : professional\n                            \n                        \n            \n        \n\n    src/constants/subscription-plan.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        SubscriptionPlan\n                    \n                \n                        \n                            \n                                 Basic\n                            \n                        \n                        \n                            \n                                Value : Basic\n                            \n                        \n                        \n                            \n                                 Premium\n                            \n                        \n                        \n                            \n                                Value : Premium\n                            \n                        \n            \n        \n\n    src/constants/visibility.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Visibility\n                    \n                \n                        \n                            \n                                 Public\n                            \n                        \n                        \n                            \n                                Value : public\n                            \n                        \n                        \n                            \n                                 Private\n                            \n                        \n                        \n                            \n                                Value : private\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nServer and Build Status\n\n\n\nRunning The Server\nPrerequisites\n\nMySQL Server with a database named Atlas\nDefine the env variables\nRunning the migrations to create the database\n\nEnv Variables\nThe list of Envs:\n\nDatabase Host\nDatabase Name\nDatabase Username\nDatabase Password\nSecret\nSession Driver\nFirebase Type\nFirebase Project ID\nFirebase Bucket ID\nFirebase Private Key\nStripe Test Key\nStripe Webhook Secret\nPort\nreCaptcha Site Key\nreCaptcha Secret Key\n\nMigrations Run\nnpm run typeorm:run-migrations\nNormal Mode\nnpm run start\nDeveloper Mode\nnpm run start:dev\nLoad Tests Run\nThe artillery package must be installed first as it is a global package\nnpm install -g artillery\nartillery run test/load_testing/test.json\nUnit and Integration Test Run\nnpm run test\nUsed Repos\n\nhttps://github.com/NarHakobyan/awesome-nest-boilerplate, used for file structure\nhttps://github.com/jmcdo29/testing-nestjs, used for testing structure\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AnalyticsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppealsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BlockModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FeedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FollowModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MemoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReportModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AnalyticsModule\n\n\n\ncluster_AnalyticsModule_providers\n\n\n\ncluster_AppealsModule\n\n\n\ncluster_AppealsModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BlockModule\n\n\n\ncluster_BlockModule_providers\n\n\n\ncluster_EventModule\n\n\n\ncluster_EventModule_providers\n\n\n\ncluster_FeedModule\n\n\n\ncluster_FeedModule_providers\n\n\n\ncluster_FollowModule\n\n\n\ncluster_FollowModule_providers\n\n\n\ncluster_MemoryModule\n\n\n\ncluster_MemoryModule_providers\n\n\n\ncluster_NotificationModule\n\n\n\ncluster_NotificationModule_exports\n\n\n\ncluster_NotificationModule_providers\n\n\n\ncluster_PaymentModule\n\n\n\ncluster_PaymentModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_exports\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_ReportModule\n\n\n\ncluster_ReportModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAnalyticsService\n\nAnalyticsService\n\n\n\nAnalyticsModule\n\nAnalyticsModule\n\nAnalyticsModule -->\n\nAnalyticsService->AnalyticsModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnalyticsModule->AppModule\n\n\n\n\n\nAppealsService\n\nAppealsService\n\n\n\nAppealsModule\n\nAppealsModule\n\nAppealsModule -->\n\nAppealsService->AppealsModule\n\n\n\nAppModule -->\n\nAppealsModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nBlockModule\n\nBlockModule\n\nAppModule -->\n\nBlockModule->AppModule\n\n\n\n\n\nEventModule\n\nEventModule\n\nAppModule -->\n\nEventModule->AppModule\n\n\n\n\n\nFeedModule\n\nFeedModule\n\nAppModule -->\n\nFeedModule->AppModule\n\n\n\n\n\nFollowModule\n\nFollowModule\n\nAppModule -->\n\nFollowModule->AppModule\n\n\n\n\n\nMemoryModule\n\nMemoryModule\n\nAppModule -->\n\nMemoryModule->AppModule\n\n\n\n\n\nNotificationModule\n\nNotificationModule\n\n\n\nPaymentModule\n\nPaymentModule\n\nPaymentModule -->\n\nNotificationModule->PaymentModule\n\n\n\nAppModule -->\n\nNotificationModule->AppModule\n\n\n\n\n\nNotificationService \n\nNotificationService \n\nNotificationService  -->\n\nNotificationModule->NotificationService \n\n\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nPostService \n\nPostService \n\nPostService  -->\n\nPostModule->PostService \n\n\n\n\n\nReportModule\n\nReportModule\n\nAppModule -->\n\nReportModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\nAppModule -->\n\nLocalStrategy->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nBlockService\n\nBlockService\n\nBlockModule -->\n\nBlockService->BlockModule\n\n\n\n\n\nEventService\n\nEventService\n\nEventModule -->\n\nEventService->EventModule\n\n\n\n\n\nFeedService\n\nFeedService\n\nFeedModule -->\n\nFeedService->FeedModule\n\n\n\n\n\nFollowService\n\nFollowService\n\nFollowModule -->\n\nFollowService->FollowModule\n\n\n\n\n\nMemoryService\n\nMemoryService\n\nMemoryModule -->\n\nMemoryService->MemoryModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nNotificationModule -->\n\nNotificationService->NotificationModule\n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nReportService\n\nReportService\n\nReportModule -->\n\nReportService->ReportModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        15 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    13 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    16 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    22 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    68 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bucket   (src/.../firebase-admin.service.ts)\n                        \n                        \n                            configService   (typeOrm.config.ts)\n                        \n                        \n                            firebaseConfig   (src/.../firebase-admin.service.ts)\n                        \n                        \n                            jwtConfig   (src/.../constants.ts)\n                        \n                        \n                            messaging   (src/.../firebase-admin.service.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            serviceAccount   (src/.../firebase-admin.service.ts)\n                        \n                        \n                            storage   (src/.../firebase-admin.service.ts)\n                        \n                        \n                            SUBSCRIPTION_PLANS_KEY   (src/.../subscription.decorator.ts)\n                        \n                        \n                            SubscriptionPlans   (src/.../subscription.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/services/firebase-admin.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bucket\n                        \n                    \n                \n            \n                \n                    \n                        Default value : getStorage().bucket()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firebaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  credential: credential.cert(serviceAccount),\n  storageBucket: 'atlas-6183a.appspot.com'\n}\n                    \n                \n\n            \n                \n                    This is the firebase config for the firebase project\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messaging\n                        \n                    \n                \n            \n                \n                    \n                        Default value : getMessaging()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serviceAccount\n                        \n                    \n                \n            \n                \n                    \n                        Default value : JSON.parse(process.env?.FIREBASE_PRIVATE_KEY.toString())\n                    \n                \n\n            \n                \n                    This is the service account key for the firebase project\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : getStorage()\n                    \n                \n\n            \n                \n                    Export the firebase admin storage and messaging\n\n                \n            \n\n        \n    \n\n    typeOrm.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ConfigService()\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env?.SECRET,\n  signOptions: { expiresIn: '2h' }\n}\n                    \n                \n\n\n        \n    \n\n    src/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n            \n                \n                    Roles Decorator\n\n                \n            \n\n        \n    \n\n    src/decorators/subscription.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SUBSCRIPTION_PLANS_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'subscription_plans'\n                    \n                \n\n            \n                \n                    Subscription Plans Decorator\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SubscriptionPlans\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...subscription_plans: SubscriptionPlan[]) =>\n  SetMetadata(SUBSCRIPTION_PLANS_KEY, subscription_plans)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
