var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/$npmConfigName1672082558971.html",[0,0.232,1,3.506]],["body/classes/$npmConfigName1672082558971.html",[0,0.283,1,6.385,2,1.015,3,0.108,4,0.108,5,0.096,6,7.003,7,1.495,8,1.918,9,2.171,10,0.246,11,0.836,12,1.156,13,1.012,14,2.364,15,1.528,16,1.918,17,1.872,18,0.387,19,0.009,20,0.496,21,1.146,22,1.092,23,0.445,24,1.532,25,1.966,26,2.521,27,2.707,28,0.96,29,0.934,30,0.986,31,1.712,32,1.966,33,1.532,34,0.108,35,0.852,36,0.096,37,1.334,38,1.966,39,1.619,40,0.986,41,1.694,42,4.082,43,2.041,44,1.571,45,1.694,46,1.694,47,0.007,48,0.007]],["title/classes/$npmConfigName1672082713679.html",[0,0.232,49,3.506]],["body/classes/$npmConfigName1672082713679.html",[0,0.263,2,0.944,3,0.1,4,0.1,5,0.089,7,1.39,8,1.829,9,2.096,10,0.229,11,0.798,12,1.129,13,0.965,14,2.318,15,1.498,16,1.829,17,1.785,18,0.373,19,0.009,20,0.461,21,1.065,22,1.015,23,0.43,24,1.424,25,1.875,26,2.486,28,0.915,29,0.891,30,0.94,31,1.665,32,1.875,33,1.424,34,0.1,35,0.792,36,0.089,37,1.612,38,2.375,39,1.956,40,1.191,41,2.072,42,3.893,43,2.965,44,2.283,45,2.072,46,2.072,47,0.007,48,0.007,49,6.209,50,6.81,51,3.264,52,3.893,53,4.05]],["title/classes/$npmConfigName1672133224744.html",[0,0.232,54,3.506]],["body/classes/$npmConfigName1672133224744.html",[0,0.25,2,0.898,3,0.095,4,0.095,5,0.085,7,1.322,8,1.77,9,2.044,10,0.218,11,0.772,12,1.111,13,0.933,14,2.285,15,1.477,16,1.77,17,1.727,18,0.389,19,0.009,20,0.438,21,1.529,22,0.966,23,0.42,24,1.355,25,1.814,26,2.462,28,0.885,29,0.862,30,0.909,31,1.633,32,1.814,33,1.355,34,0.095,35,0.754,36,0.085,37,1.482,38,1.814,39,1.798,41,1.498,43,3.119,44,2.549,45,1.498,47,0.006,48,0.006,54,6.087,55,6.676,56,3.287,57,2.692,58,1.672,59,2.485,60,3.766,61,4.244,62,2.692,63,2.8,64,1.605,65,3.326,66,3.105,67,3.105,68,3.778,69,3.105,70,2.692,71,5.547,72,2.692,73,3.368,74,2.692,75,2.31,76,5.547,77,3.092,78,2.31,79,2.485,80,2.092,81,2.988,82,2.692]],["title/classes/$npmConfigName1672166137042.html",[0,0.232,83,3.506]],["body/classes/$npmConfigName1672166137042.html",[0,0.28,2,1.004,3,0.107,4,0.107,5,0.095,7,1.478,8,1.904,9,2.159,10,0.243,11,0.83,12,1.152,13,1.004,14,2.357,15,1.523,16,1.904,17,1.858,18,0.385,19,0.009,20,0.49,21,1.459,22,1.08,23,0.443,24,1.515,25,1.952,26,2.515,27,2.677,28,0.953,29,0.927,30,0.978,31,1.705,32,1.952,33,1.515,34,0.107,35,0.843,36,0.095,37,1.325,38,1.952,39,1.607,43,2.599,44,2.001,47,0.007,48,0.007,52,4.052,58,1.495,67,5.225,83,6.357,84,6.973]],["title/classes/$npmConfigName1672251740346.html",[0,0.232,85,3.506]],["body/classes/$npmConfigName1672251740346.html",[0,0.236,2,0.846,3,0.09,4,0.09,5,0.08,7,1.246,8,1.7,9,1.983,10,0.205,11,0.741,12,1.089,13,0.897,14,2.246,15,1.451,16,1.7,17,1.659,18,0.353,19,0.009,20,0.413,21,1.483,22,0.91,23,0.407,24,1.277,25,1.743,26,2.432,28,0.851,29,0.828,30,0.874,31,1.593,32,1.743,33,1.277,34,0.09,35,0.71,36,0.08,37,1.628,38,2.302,39,1.974,41,2.193,43,2.641,44,2.458,45,2.193,46,1.412,47,0.006,48,0.006,57,2.538,58,1.632,59,2.342,60,3.618,61,4.118,62,2.538,63,3.062,64,1.542,65,3.637,66,2.927,69,2.927,70,2.538,72,2.538,73,3.675,74,2.538,75,2.971,77,3.633,78,2.971,79,2.342,80,2.69,81,3.511,82,2.538,85,5.941,86,6.517,87,3.304,88,3.765,89,3.793,90,6.066,91,5.329,92,6.044,93,4.43]],["title/classes/$npmConfigName1672388811259.html",[0,0.232,94,3.506]],["body/classes/$npmConfigName1672388811259.html",[0,0.207,2,0.743,3,0.079,4,0.079,5,0.07,7,1.095,8,1.554,9,1.851,10,0.18,11,0.678,12,1.039,13,0.82,14,2.156,15,1.394,16,1.554,17,1.516,18,0.33,19,0.009,20,0.363,21,0.839,22,0.8,23,0.38,24,1.122,25,1.593,26,2.363,28,0.778,29,0.757,30,0.799,31,1.507,32,1.593,33,1.122,34,0.079,35,0.624,36,0.07,37,1.707,38,2.447,39,2.071,40,1.01,41,2.443,43,2.683,44,2.456,45,2.443,46,1.761,47,0.006,48,0.006,57,3.165,58,1.544,63,3.111,64,1.784,65,4.053,72,3.165,73,3.948,74,3.165,75,3.435,77,3.96,78,3.435,79,2.921,80,3.111,81,3.827,82,3.165,94,5.618,95,6.162,96,3.893,97,4.887,98,2.716,99,4.12,100,6.162,101,4.887,102,6.163,103,4.871,104,4.871,105,3.433,106,4.871,107,4.871,108,3.433]],["title/classes/$npmConfigName1672399737695.html",[0,0.232,109,3.506]],["body/classes/$npmConfigName1672399737695.html",[0,0.237,2,0.851,3,0.091,4,0.091,5,0.081,7,1.253,8,1.707,9,1.989,10,0.206,11,0.744,12,1.091,13,0.9,14,2.25,15,1.454,16,1.707,17,1.666,18,0.354,19,0.009,20,0.416,21,1.308,22,0.915,23,0.408,24,1.285,25,1.749,26,2.435,28,0.854,29,0.831,30,0.877,31,1.597,32,1.749,33,1.285,34,0.091,35,0.715,36,0.081,37,1.671,38,2.462,39,2.027,41,2.361,43,2.329,44,2.189,45,2.361,46,1.934,47,0.006,48,0.006,52,3.632,58,1.636,63,2.701,65,3.208,73,3.519,75,2.983,77,3.642,78,2.983,80,2.701,81,3.519,97,5.593,98,3.642,102,5.547,104,5.35,105,3.929,109,5.955,110,6.532,111,4.455,112,6.084,113,2.944,114,3.323,115,5.35,116,3.116]],["title/classes/$npmConfigName1672417201262.html",[0,0.232,117,3.506]],["body/classes/$npmConfigName1672417201262.html",[0,0.247,2,0.887,3,0.094,4,0.094,5,0.084,7,1.306,8,1.755,9,2.032,10,0.215,11,0.765,12,1.106,13,0.926,14,2.277,15,1.472,16,1.755,17,1.713,18,0.362,19,0.009,20,0.433,21,1.001,22,0.954,23,0.417,24,1.339,25,1.799,26,2.456,28,0.878,29,0.855,30,0.902,31,1.625,32,1.799,33,1.339,34,0.094,35,0.745,36,0.084,37,1.645,38,2.424,39,1.996,40,1.089,41,2.401,44,1.844,45,2.401,46,1.989,47,0.006,48,0.006,63,2.778,65,3.299,73,3.579,75,3.067,77,3.704,78,3.067,79,2.455,80,2.778,81,3.579,87,3.463,101,5.269,102,5.665,107,5.502,108,4.094,117,6.057,118,6.644,119,6.214,120,5.502]],["title/classes/$npmConfigName1672417384470.html",[0,0.232,121,3.506]],["body/classes/$npmConfigName1672417384470.html",[0,0.279,2,1.001,3,0.107,4,0.107,5,0.095,7,1.475,8,1.901,9,2.157,10,0.243,11,0.829,12,1.151,13,1.003,14,2.355,15,1.522,16,1.901,17,1.855,18,0.384,19,0.009,20,0.489,21,1.457,22,1.077,23,0.443,24,1.512,25,1.949,26,2.514,27,2.671,28,0.951,29,0.926,30,0.977,31,1.704,32,1.949,33,1.512,34,0.107,35,0.841,36,0.095,37,1.323,38,1.949,39,1.605,43,2.595,44,1.998,47,0.007,48,0.007,52,4.046,98,3.884,101,4.727,113,3.464,114,3.91,121,6.352,122,6.967]],["title/classes/$npmConfigName1672576067204.html",[0,0.232,123,3.506]],["body/classes/$npmConfigName1672576067204.html",[0,0.261,2,0.934,3,0.099,4,0.099,5,0.088,7,1.375,8,1.816,9,2.085,10,0.226,11,0.792,12,1.126,13,0.958,14,2.311,15,1.494,16,1.816,17,1.772,18,0.371,19,0.009,20,0.456,21,1.392,22,1.004,23,0.428,24,1.409,25,1.862,26,2.481,28,0.909,29,0.885,30,0.933,31,1.658,32,1.862,33,1.409,34,0.099,35,0.784,36,0.088,37,1.505,38,1.862,39,1.826,41,1.558,43,1.877,44,2.363,45,1.558,47,0.007,48,0.007,56,3.419,57,2.8,63,2.176,64,1.648,65,3.414,72,2.8,73,3.435,74,2.8,75,2.403,77,3.174,78,2.403,79,2.584,80,2.176,81,3.067,82,2.8,98,2.403,123,6.183,124,6.782,125,6.183,126,3.93,127,4.31,128,6.457,129,4.31,130,5.694,131,5.694]],["title/classes/$npmConfigName1672585305519.html",[0,0.232,132,3.506]],["body/classes/$npmConfigName1672585305519.html",[0,0.283,2,1.015,3,0.108,4,0.108,5,0.096,7,1.495,8,1.918,9,2.171,10,0.246,11,0.836,12,1.156,13,1.012,14,2.364,15,1.528,16,1.918,17,1.872,18,0.387,19,0.009,20,0.496,21,1.146,22,1.092,23,0.445,24,1.532,25,1.966,26,2.521,27,2.707,28,0.96,29,0.934,30,0.986,31,1.712,32,1.966,33,1.532,34,0.108,35,0.852,36,0.096,37,1.334,38,1.966,39,1.619,41,1.694,44,1.571,45,1.694,46,1.694,47,0.007,48,0.007,58,1.506,132,6.385,133,7.003,134,4.082,135,3.717]],["title/classes/$npmConfigName1672600378154.html",[0,0.232,136,3.506]],["body/classes/$npmConfigName1672600378154.html",[0,0.283,2,1.015,3,0.108,4,0.108,5,0.096,7,1.495,8,1.918,9,2.171,10,0.246,11,0.836,12,1.156,13,1.012,14,2.364,15,1.528,16,1.918,17,1.872,18,0.387,19,0.009,20,0.496,21,1.146,22,1.092,23,0.445,24,1.532,25,1.966,26,2.521,27,2.707,28,0.96,29,0.934,30,0.986,31,1.712,32,1.966,33,1.532,34,0.108,35,0.852,36,0.096,37,1.334,38,1.966,39,1.619,40,0.986,41,1.694,43,2.041,44,1.571,45,1.694,46,1.694,47,0.007,48,0.007,136,6.385,137,7.003,138,5.085]],["title/classes/$npmConfigName1672678196724.html",[0,0.232,139,3.506]],["body/classes/$npmConfigName1672678196724.html",[0,0.271,2,0.97,3,0.103,4,0.103,5,0.092,7,1.429,8,1.863,9,2.125,10,0.235,11,0.812,12,1.14,13,0.983,14,2.336,15,1.51,16,1.863,17,1.818,18,0.379,19,0.009,20,0.474,21,1.428,22,1.044,23,0.436,24,1.465,25,1.91,26,2.5,28,0.932,29,0.908,30,0.957,31,1.684,32,1.91,33,1.465,34,0.103,35,0.815,36,0.092,37,1.528,38,2.251,39,1.854,40,0.957,41,1.62,43,2.543,44,2.178,45,1.62,46,1.62,47,0.007,48,0.007,52,3.965,56,3.554,58,1.463,134,3.965,135,3.554,138,5.823,139,6.277,140,6.885,141,3.042]],["title/classes/$npmConfigName1672744437528.html",[0,0.232,142,3.506]],["body/classes/$npmConfigName1672744437528.html",[0,0.279,2,0.999,3,0.106,4,0.106,5,0.095,7,1.471,8,1.899,9,2.154,10,0.242,11,0.828,12,1.15,13,1.002,14,2.354,15,1.521,16,1.899,17,1.853,18,0.384,19,0.009,20,0.488,21,1.455,22,1.075,23,0.442,24,1.508,25,1.946,26,2.513,27,2.665,28,0.95,29,0.925,30,0.976,31,1.702,32,1.946,33,1.508,34,0.106,35,0.839,36,0.095,37,1.321,38,1.946,39,1.602,40,0.976,41,1.667,43,2.008,44,1.546,45,1.667,46,1.667,47,0.007,48,0.007,142,6.347,143,6.961,144,5.033,145,4.612,146,4.612,147,4.612,148,4.612,149,4.612,150,4.612]],["title/classes/$npmConfigName1672760070076.html",[0,0.232,151,3.506]],["body/classes/$npmConfigName1672760070076.html",[0,0.266,2,0.952,3,0.101,4,0.101,5,0.09,7,1.402,8,1.84,9,2.104,10,0.231,11,0.802,12,1.133,13,0.97,14,2.323,15,1.501,16,1.84,17,1.795,18,0.375,19,0.009,20,0.465,21,1.671,22,1.024,23,0.432,24,1.437,25,1.885,26,2.49,28,0.92,29,0.896,30,0.945,31,1.671,32,1.885,33,1.437,34,0.101,35,0.799,36,0.09,37,1.516,38,2.234,39,1.84,40,1.12,41,1.588,43,2.511,44,2.157,45,1.588,46,1.588,47,0.007,48,0.007,52,3.915,56,3.485,144,5.779,145,4.394,146,4.394,147,4.394,148,4.394,149,4.394,150,4.394,151,6.23,152,6.833,153,5.257,154,3.716,155,3.716]],["title/classes/$npmConfigName1672832148243.html",[0,0.232,156,3.506]],["body/classes/$npmConfigName1672832148243.html",[0,0.254,2,0.909,3,0.097,4,0.097,5,0.086,7,1.338,8,1.784,9,2.057,10,0.22,11,0.778,12,1.116,13,0.941,14,2.293,15,1.482,16,1.784,17,1.741,18,0.366,19,0.009,20,0.444,21,1.641,22,0.977,23,0.422,24,1.372,25,1.829,26,2.468,28,0.893,29,0.869,30,0.917,31,1.641,32,1.829,33,1.372,34,0.097,35,0.763,36,0.086,37,1.654,38,2.437,39,2.007,41,2.425,43,2.435,44,2.249,45,2.425,46,2.425,47,0.007,48,0.007,58,1.867,67,5.027,87,3.548,154,3.548,155,3.548,156,6.117,157,6.709,158,5.098,159,5.592,160,3.825]],["title/classes/$npmConfigName1672833410692.html",[0,0.232,161,3.506]],["body/classes/$npmConfigName1672833410692.html",[0,0.28,2,1.004,3,0.107,4,0.107,5,0.095,7,1.478,8,1.904,9,2.159,10,0.243,11,0.83,12,1.152,13,1.004,14,2.357,15,1.523,16,1.904,17,1.858,18,0.385,19,0.009,20,0.49,21,1.459,22,1.08,23,0.443,24,1.515,25,1.952,26,2.515,27,2.677,28,0.953,29,0.927,30,0.978,31,1.705,32,1.952,33,1.515,34,0.107,35,0.843,36,0.095,37,1.325,38,1.952,39,1.607,44,2.001,47,0.007,48,0.007,52,4.052,58,1.495,134,4.734,135,4.734,161,6.357,162,6.973,163,2.889]],["title/classes/$npmConfigName1673022319464.html",[0,0.232,164,3.506]],["body/classes/$npmConfigName1673022319464.html",[0,0.25,2,0.898,3,0.095,4,0.095,5,0.085,7,1.322,8,1.77,9,2.044,10,0.218,11,0.772,12,1.111,13,0.933,14,2.285,15,1.477,16,1.77,17,1.727,18,0.364,19,0.009,20,0.438,21,1.013,22,0.966,23,0.42,24,1.355,25,1.814,26,2.462,28,0.885,29,0.862,30,0.909,31,1.633,32,1.814,33,1.355,34,0.095,35,0.754,36,0.085,37,1.59,38,2.183,39,1.928,41,2.005,43,1.804,44,2.238,45,2.005,47,0.006,48,0.006,51,3.105,57,2.692,63,2.8,64,1.605,65,3.749,72,2.692,73,3.75,74,2.692,75,3.092,77,3.722,78,3.092,79,2.485,80,2.8,81,3.597,82,2.692,116,3.287,164,6.087,165,6.676,166,4.295,167,3.105,168,5.547,169,3.326,170,5.547,171,5.547]],["title/classes/$npmConfigName1673025398979.html",[0,0.232,172,3.506]],["body/classes/$npmConfigName1673025398979.html",[0,0.27,2,0.968,3,0.103,4,0.103,5,0.092,7,1.426,8,1.861,9,2.122,10,0.235,11,0.811,12,1.139,13,0.982,14,2.334,15,1.509,16,1.861,17,1.816,18,0.378,19,0.009,20,0.473,21,1.587,22,1.042,23,0.436,24,1.462,25,1.907,26,2.499,28,0.931,29,0.906,30,0.956,31,1.682,32,1.907,33,1.462,34,0.103,35,0.813,36,0.092,37,1.527,38,2.249,39,1.852,41,2.108,44,1.955,45,2.108,46,2.108,47,0.007,48,0.007,56,3.546,59,3.497,60,3.959,61,4.406,62,3.789,63,2.257,166,4.125,172,6.272,173,6.879]],["title/classes/$npmConfigName1673027114310.html",[0,0.232,174,3.506]],["body/classes/$npmConfigName1673027114310.html",[0,0.239,2,0.856,3,0.091,4,0.091,5,0.081,7,1.261,8,1.714,9,1.995,10,0.208,11,0.747,12,1.093,13,0.904,14,2.253,15,1.456,16,1.714,17,1.672,18,0.356,19,0.009,20,0.418,21,0.966,22,0.921,23,0.41,24,1.292,25,1.756,26,2.438,28,0.857,29,0.835,30,0.881,31,1.601,32,1.756,33,1.292,34,0.091,35,0.719,36,0.081,37,1.632,38,2.404,39,1.98,41,2.367,45,2.367,47,0.006,48,0.006,63,3.306,73,3.962,75,3.65,77,4.099,78,3.65,80,3.306,81,3.806,87,3.342,97,5.193,112,5.371,115,6.548,116,5.193,166,3.926,169,3.221,171,6.548,174,5.97,175,6.548,176,2.8]],["title/classes/$npmConfigName1673177373733.html",[0,0.232,177,3.506]],["body/classes/$npmConfigName1673177373733.html",[0,0.233,2,0.836,3,0.089,4,0.089,5,0.079,7,1.232,8,1.687,9,1.972,10,0.203,11,0.736,12,1.084,13,0.89,14,2.238,15,1.446,16,1.687,17,1.646,18,0.351,19,0.009,20,0.409,21,1.756,22,0.9,23,0.405,24,1.263,25,1.729,26,2.426,28,0.844,29,0.822,30,0.867,31,1.586,32,1.729,33,1.263,34,0.089,35,0.702,36,0.079,37,1.695,38,2.498,39,2.057,41,2.536,44,2.351,45,2.536,46,2.536,47,0.006,48,0.006,59,4.206,60,4.762,61,5.037,62,4.558,63,3.044,97,5.144,101,5.144,125,5.913,177,5.913,178,6.485,179,3.862]],["title/classes/$npmConfigName1673337064308.html",[0,0.232,180,3.506]],["body/classes/$npmConfigName1673337064308.html",[0,0.28,2,1.004,3,0.107,4,0.107,5,0.095,7,1.478,8,1.904,9,2.159,10,0.243,11,0.83,12,1.152,13,1.004,14,2.357,15,1.523,16,1.904,17,1.858,18,0.385,19,0.009,20,0.49,21,1.459,22,1.08,23,0.443,24,1.515,25,1.952,26,2.515,27,2.677,28,0.953,29,0.927,30,0.978,31,1.705,32,1.952,33,1.515,34,0.107,35,0.843,36,0.095,37,1.325,38,1.952,39,1.607,40,0.978,43,2.599,44,2.001,47,0.007,48,0.007,52,4.052,180,6.357,181,6.973,182,6.357]],["title/classes/$npmConfigName1673770456243.html",[0,0.232,183,3.506]],["body/classes/$npmConfigName1673770456243.html",[0,0.24,2,0.861,3,0.092,4,0.092,5,0.082,7,1.268,8,1.72,9,2.001,10,0.209,11,0.75,12,1.095,13,0.908,14,2.257,15,1.459,16,1.72,17,1.679,18,0.357,19,0.009,20,0.421,21,1.605,22,0.926,23,0.411,24,1.3,25,1.763,26,2.441,28,0.861,29,0.838,30,0.884,31,1.605,32,1.763,33,1.3,34,0.092,35,0.723,36,0.082,37,1.57,38,2.146,39,1.905,41,1.949,43,2.665,44,2.468,45,1.949,47,0.006,48,0.006,51,2.978,57,2.582,59,2.383,60,3.661,61,4.155,62,2.582,63,3.09,64,1.561,65,3.67,72,2.582,73,3.697,74,2.582,75,3.006,77,3.659,78,3.006,79,2.383,80,2.722,81,3.298,82,2.582,98,2.216,113,2.978,114,3.362,116,3.152,167,2.978,176,2.072,183,5.984,184,6.564,185,4.243,186,2.829,187,6.115,188,5.393,189,6.115,190,5.393]],["title/classes/$npmConfigName1673847605869.html",[0,0.232,191,3.506]],["body/classes/$npmConfigName1673847605869.html",[0,0.246,2,0.881,3,0.094,4,0.094,5,0.084,7,1.298,8,1.748,9,2.026,10,0.214,11,0.762,12,1.104,13,0.922,14,2.273,15,1.469,16,1.748,17,1.706,18,0.361,19,0.009,20,0.431,21,1.515,22,0.948,23,0.416,24,1.331,25,1.792,26,2.453,28,0.875,29,0.851,30,0.898,31,1.621,32,1.792,33,1.331,34,0.094,35,0.74,36,0.084,37,1.581,38,2.167,39,1.918,41,1.981,44,2.319,45,1.981,47,0.006,48,0.006,51,3.049,57,2.644,59,2.44,60,3.72,61,4.206,62,2.644,63,3.128,64,1.586,65,3.714,72,2.644,73,3.727,74,2.644,75,3.055,77,3.695,78,3.055,79,3.285,80,2.766,81,3.571,82,2.644,191,6.043,192,6.628,193,4.442,194,5.48,195,5.48,196,5.48,197,5.48]],["title/classes/$npmConfigName1673974513613.html",[0,0.232,198,3.506]],["body/classes/$npmConfigName1673974513613.html",[0,0.21,2,0.752,3,0.08,4,0.08,5,0.071,7,1.108,8,1.567,9,1.863,10,0.182,11,0.683,12,1.043,13,0.827,14,2.165,15,1.399,16,1.567,17,1.529,18,0.332,19,0.009,20,0.368,21,1.659,22,0.809,23,0.382,24,1.136,25,1.606,26,2.369,28,0.784,29,0.763,30,0.805,31,1.515,32,1.606,33,1.136,34,0.08,35,0.632,36,0.071,37,1.665,38,2.33,39,2.019,41,2.239,43,1.512,44,2.49,45,2.239,47,0.006,48,0.006,57,3.192,59,2.945,60,4.206,61,4.607,62,3.192,63,3.426,64,1.793,65,4.069,72,3.192,73,3.958,74,3.192,75,3.454,77,3.972,78,3.454,79,3.714,80,3.128,81,3.839,82,3.192,98,1.937,113,2.603,179,3.474,198,5.648,199,6.195,200,4.23,201,4.912,202,4.912,203,6.786,204,4.912,205,4.912,206,4.912,207,4.912,208,4.912,209,4.912]],["title/classes/$npmConfigName1674121256550.html",[0,0.232,210,3.506]],["body/classes/$npmConfigName1674121256550.html",[0,0.282,2,1.01,3,0.107,4,0.107,5,0.096,7,1.488,8,1.912,9,2.166,10,0.245,11,0.834,12,1.154,13,1.009,14,2.361,15,1.526,16,1.912,17,1.866,18,0.386,19,0.009,20,0.494,21,1.466,22,1.087,23,0.445,24,1.525,25,1.96,26,2.518,27,2.695,28,0.957,29,0.932,30,0.983,31,1.709,32,1.96,33,1.525,34,0.107,35,0.848,36,0.096,37,1.33,38,1.96,39,1.614,40,0.983,41,1.686,43,2.031,44,1.564,45,1.686,46,1.686,47,0.007,48,0.007,210,6.374,211,6.991,212,5.07]],["title/classes/$npmConfigName1674198387677.html",[0,0.232,213,3.506]],["body/classes/$npmConfigName1674198387677.html",[0,0.283,2,1.013,3,0.108,4,0.108,5,0.096,7,1.492,8,1.915,9,2.168,10,0.246,11,0.835,12,1.155,13,1.01,14,2.363,15,1.527,16,1.915,17,1.869,18,0.386,19,0.009,20,0.495,21,1.468,22,1.089,23,0.445,24,1.529,25,1.963,26,2.519,27,2.701,28,0.958,29,0.933,30,0.984,31,1.711,32,1.963,33,1.529,34,0.108,35,0.85,36,0.096,37,1.332,38,1.963,39,1.616,40,0.984,41,1.69,43,2.036,44,1.567,45,1.69,46,1.69,47,0.007,48,0.007,213,6.379,214,6.997,215,5.078]],["title/classes/$npmConfigName1674453163372.html",[0,0.232,216,3.506]],["body/classes/$npmConfigName1674453163372.html",[0,0.282,2,1.01,3,0.107,4,0.107,5,0.096,7,1.488,8,1.912,9,2.166,10,0.245,11,0.834,12,1.154,13,1.009,14,2.361,15,1.526,16,1.912,17,1.866,18,0.386,19,0.009,20,0.494,21,1.466,22,1.087,23,0.445,24,1.525,25,1.96,26,2.518,27,2.695,28,0.957,29,0.932,30,0.983,31,1.709,32,1.96,33,1.525,34,0.107,35,0.848,36,0.096,37,1.33,38,1.96,39,1.614,40,0.983,41,1.686,44,1.564,45,1.686,46,1.686,47,0.007,48,0.007,135,3.7,163,2.908,216,6.374,217,6.991,218,5.07]],["title/classes/$npmConfigName1674486373359.html",[0,0.232,219,3.506]],["body/classes/$npmConfigName1674486373359.html",[0,0.249,2,0.892,3,0.095,4,0.095,5,0.085,7,1.314,8,1.762,9,2.038,10,0.216,11,0.768,12,1.109,13,0.93,14,2.281,15,1.474,16,1.762,17,1.72,18,0.363,19,0.009,20,0.436,21,1.524,22,0.96,23,0.418,24,1.347,25,1.806,26,2.459,28,0.882,29,0.858,30,0.906,31,1.629,32,1.806,33,1.347,34,0.095,35,0.749,36,0.085,37,1.587,38,2.178,39,1.925,41,1.997,44,2.328,45,1.997,47,0.006,48,0.006,51,3.086,57,2.676,59,2.47,60,3.75,61,4.231,62,2.676,63,3.147,64,1.599,65,3.737,72,2.676,73,3.742,74,2.676,75,3.08,77,3.713,78,3.08,79,2.47,80,2.789,81,3.358,82,2.676,116,3.267,176,2.147,219,6.072,220,6.66,221,6.265,222,5.524,223,6.265,224,5.524]],["title/classes/$npmConfigName1674487677914.html",[0,0.232,225,3.506]],["body/classes/$npmConfigName1674487677914.html",[0,0.282,2,1.01,3,0.107,4,0.107,5,0.096,7,1.488,8,1.912,9,2.166,10,0.245,11,0.834,12,1.154,13,1.009,14,2.361,15,1.526,16,1.912,17,1.866,18,0.386,19,0.009,20,0.494,21,1.466,22,1.087,23,0.445,24,1.525,25,1.96,26,2.518,27,2.695,28,0.957,29,0.932,30,0.983,31,1.709,32,1.96,33,1.525,34,0.107,35,0.848,36,0.096,37,1.33,38,1.96,39,1.614,41,1.686,44,1.564,45,1.686,46,1.686,47,0.007,48,0.007,58,1.502,163,2.908,225,6.374,226,6.991,227,5.995,228,5.29]],["title/classes/$npmConfigName1674493007150.html",[0,0.232,229,3.506]],["body/classes/$npmConfigName1674493007150.html",[0,0.109,2,0.389,3,0.041,4,0.041,5,0.037,7,0.573,8,0.944,9,1.233,10,0.094,11,0.411,12,0.772,13,0.498,14,1.66,15,1.073,16,0.944,17,0.921,18,0.22,19,0.008,20,0.19,21,0.439,22,0.418,23,0.253,24,0.587,25,0.967,26,1.947,28,0.472,29,0.46,30,0.485,31,1.069,32,0.967,33,0.587,34,0.041,35,0.327,36,0.037,37,1.754,38,2.584,39,2.127,41,2.7,45,2.7,47,0.003,48,0.003,58,1.095,63,3.772,71,2.958,73,4.257,75,4.165,76,4.373,77,4.405,78,4.165,79,4.479,80,3.772,81,4.177,88,2.526,89,2.105,91,4.373,97,3.468,100,4.373,101,4.559,103,4.373,106,4.373,119,2.958,120,4.373,125,3.987,130,2.958,131,4.373,166,2.622,168,2.958,170,4.373,176,3.511,185,2.622,188,2.958,190,4.373,193,3.583,194,2.958,195,2.958,196,4.373,197,4.373,200,3.583,201,2.958,202,2.958,203,5.748,204,2.958,205,2.958,206,4.373,207,4.373,208,4.373,209,4.373,222,2.958,224,4.373,229,3.987,230,4.373,231,2.036]],["title/classes/$npmConfigName1674544597118.html",[0,0.232,232,3.506]],["body/classes/$npmConfigName1674544597118.html",[0,0.262,2,0.938,3,0.1,4,0.1,5,0.089,7,1.381,8,1.822,9,2.089,10,0.227,11,0.794,12,1.127,13,0.961,14,2.314,15,1.495,16,1.822,17,1.777,18,0.372,19,0.009,20,0.458,21,1.661,22,1.009,23,0.429,24,1.415,25,1.867,26,2.483,28,0.911,29,0.887,30,0.936,31,1.661,32,1.867,33,1.415,34,0.1,35,0.787,36,0.089,37,1.609,38,2.371,39,1.952,40,1.189,41,2.309,43,2.486,44,2.141,45,2.309,46,2.309,47,0.007,48,0.007,51,3.243,135,3.433,163,2.699,232,6.193,233,6.793,234,5.206,235,5.206,236,4.829,237,4.329]],["title/controllers/AnalyticsController.html",[238,1.674,239,3.252]],["body/controllers/AnalyticsController.html",[0,0.293,3,0.112,4,0.112,5,0.099,10,0.254,12,0.773,13,1.033,18,0.282,19,0.009,23,0.325,28,0.773,29,0.752,30,0.794,34,0.163,36,0.099,47,0.007,48,0.007,169,4.25,238,2.108,239,5.192,240,1.995,241,4.842,242,3.019,243,4.842,244,5.597,245,4.842,246,4.56,247,4.095,248,1.368,249,5.491,250,5.491,251,3.827,252,3.446,253,2.903,254,2.797,255,3.019,256,2.797,257,1.213,258,2.7,259,3.146,260,3.019,261,5.051,262,4.842,263,2.903,264,5.491,265,2.797,266,3.019,267,5.491,268,4.842,269,4.095,270,5.491,271,5.491,272,5.491,273,2.336,274,5.491,275,2.903,276,3.146,277,3.019,278,3.019]],["title/modules/AnalyticsModule.html",[279,1.463,280,3.05]],["body/modules/AnalyticsModule.html",[0,0.315,3,0.12,4,0.12,5,0.107,19,0.009,34,0.175,36,0.107,40,1.054,47,0.007,48,0.007,58,1.306,239,5.896,240,2.649,257,1.306,261,5.704,262,5.214,279,2.447,280,6.038,281,2.632,282,3.246,283,5.214,284,5.214,285,3.464,286,2.809,287,2.809,288,5.912,289,3.584,290,2.907,291,2.148,292,2.907,293,1.663,294,5.912,295,2.907,296,4.753]],["title/injectables/AnalyticsService.html",[261,2.881,297,1.086]],["body/injectables/AnalyticsService.html",[0,0.229,3,0.087,4,0.087,5,0.078,10,0.199,12,0.832,13,0.877,15,1.23,18,0.304,19,0.01,20,0.631,23,0.35,28,0.832,29,0.81,30,0.62,31,1.275,34,0.165,35,0.688,36,0.078,37,0.84,40,0.855,47,0.006,48,0.006,53,2.109,58,1.61,59,3.126,64,1.095,88,2.185,134,3.539,163,2.358,169,3.855,243,3.783,244,4.753,247,3.012,257,0.948,261,3.906,273,1.44,291,1.559,292,2.109,293,1.207,297,1.473,298,1.744,299,3.783,300,2.632,301,3.783,302,4.453,303,4.246,304,4.29,305,4.135,306,5.912,307,4.29,308,2.358,309,2.358,310,2.692,311,4.409,312,3.783,313,3.449,314,4.29,315,3,316,2.907,317,2.358,318,3.85,319,3.449,320,2.834,321,3,322,3.199,323,2.834,324,2.834,325,3.783,326,4.29,327,3.449,328,2.568,329,2.809,330,3.053,331,3.199,332,4.29,333,3.783,334,3.783,335,3.783,336,5.966,337,4.29,338,5.214,339,4.29,340,5.214,341,3.783,342,5.966,343,3.783,344,2.568,345,2.268,346,5.214,347,3.783,348,4.29,349,4.29,350,4.29,351,4.29,352,4.29,353,4.29,354,4.29,355,4.29,356,4.29,357,4.29,358,4.29]],["title/modules/AppModule.html",[279,1.463,359,3.252]],["body/modules/AppModule.html",[0,0.176,3,0.067,4,0.067,5,0.06,12,0.466,18,0.17,19,0.01,22,0.68,34,0.182,36,0.06,39,0.785,40,0.71,47,0.005,48,0.005,58,1.084,88,2.501,166,2.595,185,2.595,193,2.699,200,2.699,240,1.202,257,0.731,279,1.647,280,5.067,281,1.473,282,2.185,285,2.332,286,1.572,287,1.572,289,2.413,290,1.626,291,1.202,295,2.877,344,2.939,345,2.595,359,6.699,360,2.917,361,2.917,362,2.917,363,5.067,364,5.067,365,5.067,366,5.067,367,5.067,368,4.787,369,5.067,370,5.067,371,5.067,372,5.067,373,4.787,374,5.067,375,4.787,376,3.308,377,3.308,378,5.853,379,5.56,380,2.917,381,3.308,382,3.308,383,3.308,384,3.308,385,3.308,386,3.308,387,3.308,388,3.308,389,2.699,390,3.308,391,3.081,392,3.081,393,4.909,394,3.308,395,2.812,396,2.186,397,3.308,398,3.308,399,3.308,400,3.308,401,2.917,402,3.081,403,2.917,404,2.467,405,3.308,406,3.308,407,3.308,408,3.308,409,3.308,410,2.467,411,3.308,412,3.308,413,2.66,414,3.308,415,3.308,416,3.308,417,3.308,418,2.66,419,3.308,420,4.909,421,2.66,422,3.308,423,3.081,424,4.909,425,3.308,426,2.917,427,3.308,428,3.308,429,3.308,430,2.66,431,3.308,432,2.076,433,3.308,434,3.308,435,1.345,436,3.308,437,3.308,438,2.917,439,2.917,440,7.245,441,3.308,442,3.308,443,3.308,444,2.917,445,2.917,446,3.308,447,3.308,448,3.308,449,3.308,450,2.917]],["title/injectables/AppService.html",[297,1.086,374,3.05]],["body/injectables/AppService.html",[0,0.345,3,0.132,4,0.132,5,0.117,10,0.3,13,1.143,19,0.009,20,0.719,23,0.383,30,0.936,34,0.132,36,0.117,47,0.008,48,0.008,257,1.43,273,2.173,297,1.919,298,2.632,374,5.388,451,5.71,452,8.511,453,6.475,454,6.475,455,6.475]],["title/entities/Appeal.html",[185,2.306,456,1.463]],["body/entities/Appeal.html",[0,0.244,3,0.093,4,0.093,5,0.083,10,0.212,11,0.759,18,0.414,19,0.01,20,0.753,21,1.335,22,0.943,23,0.477,34,0.164,35,0.736,36,0.083,40,1.212,46,2.571,47,0.006,48,0.006,58,1.852,64,1.788,98,3.443,141,2.746,167,4.628,176,3.446,185,4.359,186,5.062,248,2.01,292,2.255,293,1.291,324,3.031,435,1.865,456,2.077,457,4.045,458,7.004,459,7.004,460,3.272,461,6.189,462,3.964,463,4.588,464,5.458,465,4.588,466,3.153,467,4.588,468,4.588,469,4.898,470,2.879,471,4.588,472,4.588,473,2.845,474,2.337,475,3.703,476,2.337,477,3.031,478,4.976,479,2.628,480,3.421,481,2.042,482,3.705,483,3.546]],["title/classes/AppealDto.html",[0,0.232,484,3.05]],["body/classes/AppealDto.html",[0,0.403,2,1.2,3,0.128,4,0.128,5,0.114,10,0.291,11,0.928,18,0.389,19,0.009,20,0.786,23,0.448,34,0.128,36,0.114,47,0.008,48,0.008,167,5.364,169,4.292,248,1.885,484,5.291,485,5.539,486,4.74,487,6.281,488,6.281,489,2.887]],["title/controllers/AppealsController.html",[238,1.674,490,3.252]],["body/controllers/AppealsController.html",[0,0.139,3,0.053,4,0.053,5,0.047,10,0.121,12,0.93,13,0.608,18,0.339,19,0.01,23,0.391,28,0.93,29,0.905,30,0.955,34,0.149,36,0.047,40,0.593,42,1.565,47,0.004,48,0.004,53,1.285,58,1.525,169,3.888,185,3.492,238,1.003,240,0.95,242,1.437,246,4.805,247,4.44,248,1.645,251,4.559,252,4.145,253,1.382,254,4.158,255,1.437,256,4.253,257,0.577,258,1.285,259,1.497,260,1.437,263,1.382,265,1.331,266,4.042,273,2.616,275,3.492,276,3.784,277,3.631,278,3.631,310,1.64,324,4.724,484,4.007,490,3.058,491,2.305,492,3.615,493,3.615,494,4.461,495,3.615,496,3.615,497,3.296,498,2.613,499,2.613,500,4.1,501,2.613,502,3.296,503,1.984,504,5.272,505,2.613,506,4.013,507,2.613,508,2.613,509,2.613,510,2.613,511,2.101,512,4.1,513,2.613,514,2.613,515,2.101,516,2.613,517,2.613,518,2.613,519,2.613,520,3.296,521,2.305,522,2.613,523,2.613,524,4.275,525,2.101,526,3.786,527,1.285,528,1.437,529,1.828,530,3.596,531,2.101,532,3.343,533,2.305,534,2.305,535,2.613,536,2.613,537,2.305,538,6.604,539,2.613,540,6.224,541,6.224,542,2.305,543,4.1,544,3.773,545,2.613,546,4.461,547,2.305,548,2.305,549,2.613,550,2.305,551,3.296,552,2.305,553,2.101,554,2.101,555,2.613,556,2.613,557,2.613,558,2.305,559,2.613,560,2.613]],["title/modules/AppealsModule.html",[279,1.463,363,3.05]],["body/modules/AppealsModule.html",[0,0.305,3,0.116,4,0.116,5,0.104,19,0.009,34,0.178,36,0.104,40,1.033,47,0.007,48,0.007,58,1.578,185,3.025,240,2.596,257,1.264,279,2.397,281,2.547,282,3.181,285,3.394,286,2.718,287,2.718,289,3.512,290,2.813,291,2.079,292,2.813,293,1.61,295,2.813,363,5.989,389,3.928,391,3.591,490,5.81,532,5.658,533,5.046,561,5.046,562,5.046,563,5.722,564,5.722,565,5.046,566,4.268,567,5.722]],["title/injectables/AppealsService.html",[297,1.086,532,2.881]],["body/injectables/AppealsService.html",[0,0.127,3,0.048,4,0.048,5,0.043,10,0.111,12,0.938,13,0.566,15,1.483,16,0.671,18,0.343,19,0.01,20,0.666,23,0.395,28,0.938,29,0.914,30,0.918,31,1.642,34,0.155,35,0.383,36,0.043,37,1.305,40,0.964,47,0.004,48,0.004,58,1.682,64,1.52,134,1.429,169,3.525,185,4.026,186,2.395,257,0.527,273,2.457,291,0.867,292,1.173,293,0.671,297,0.951,298,0.97,300,1.699,302,4.252,303,2.992,305,3.334,308,1.312,309,1.312,315,1.669,316,2.677,317,1.312,318,3.777,319,4.378,320,3.935,321,4.165,322,1.78,324,4.405,327,3.068,328,2.854,329,3.553,330,3.415,331,2.846,333,2.105,334,6.107,341,2.105,345,1.262,347,2.105,389,1.312,391,1.498,435,1.938,464,4.204,469,4.165,477,1.577,479,1.368,484,3.809,492,3.365,493,3.365,494,4.204,495,3.365,496,3.365,506,3.931,524,2.52,527,1.876,528,1.312,532,2.521,534,2.105,547,3.365,550,3.365,552,2.105,558,3.365,565,2.105,566,1.78,568,2.105,569,3.816,570,2.387,571,4.204,572,2.387,573,3.816,574,2.387,575,3.816,576,2.387,577,2.387,578,2.387,579,3.816,580,2.387,581,2.387,582,4.63,583,1.669,584,1.498,585,1.78,586,1.78,587,2.387,588,2.105,589,2.387,590,2.387,591,3.565,592,4.767,593,6.667,594,1.577,595,4.767,596,1.368,597,2.387,598,3.365,599,4.204,600,1.669,601,2.387,602,2.105,603,2.387,604,2.105,605,2.105,606,2.387,607,2.387,608,2.387,609,2.387,610,2.105,611,2.387,612,2.387,613,2.387,614,2.387,615,4.196,616,2.731,617,3.555,618,2.846,619,1.669,620,1.498,621,2.387,622,2.387,623,3.816,624,3.816,625,3.816,626,2.387,627,3.816,628,2.387,629,2.387,630,1.78,631,2.387,632,2.105,633,2.387,634,2.105,635,2.105,636,2.387,637,2.105,638,2.105,639,2.387,640,2.105,641,2.387,642,2.105,643,2.387,644,2.387,645,2.387]],["title/controllers/AuthController.html",[238,1.674,646,3.252]],["body/controllers/AuthController.html",[0,0.145,3,0.055,4,0.055,5,0.121,10,0.126,12,0.729,13,0.626,15,0.942,17,1.158,18,0.217,19,0.01,23,0.307,28,0.729,29,0.71,30,0.969,34,0.16,36,0.049,37,0.531,40,1.249,42,1.623,47,0.004,48,0.004,53,1.333,58,1.399,64,1.712,144,3.147,218,3.147,238,1.041,240,0.985,242,1.491,246,4.324,247,3.788,248,1.29,251,4.257,253,1.434,254,3.566,255,1.491,256,4.15,257,0.599,258,1.333,260,2.32,263,2.231,265,1.381,266,2.32,273,2.429,277,4.324,293,0.763,300,1.207,310,1.702,316,1.333,318,2.687,329,1.288,330,1.135,418,3.392,450,2.391,503,1.651,504,4.771,524,4.413,529,1.896,530,2.648,544,2.022,594,2.788,646,3.147,647,2.391,648,2.711,649,4.22,650,4.22,651,5.18,652,2.711,653,2.711,654,2.711,655,8.064,656,3.721,657,3.147,658,2.648,659,4.22,660,5.154,661,4.22,662,3.863,663,2.951,664,3.392,665,3.147,666,3.147,667,1.896,668,3.147,669,3.721,670,2.951,671,2.711,672,5.546,673,2.711,674,2.711,675,3.147,676,4.22,677,5.845,678,4.699,679,5.845,680,5.845,681,4.359,682,2.711,683,2.711,684,2.711,685,4.22,686,3.721,687,4.22,688,4.22,689,4.22,690,2.391,691,2.391,692,3.721,693,2.391,694,2.18,695,3.623,696,2.391,697,3.251,698,2.18,699,2.711,700,2.711,701,2.711,702,2.711,703,2.711,704,2.711,705,2.711,706,2.711,707,2.711,708,4.22,709,4.22,710,5.845,711,3.721,712,3.721,713,4.22,714,3.721,715,2.711,716,2.711,717,5.392,718,5.392,719,4.015,720,2.711,721,2.711,722,2.711,723,4.22,724,2.711,725,2.711,726,2.711,727,2.711,728,2.711,729,2.711,730,2.711,731,2.711,732,2.711,733,2.18]],["title/modules/AuthModule.html",[279,1.463,364,3.05]],["body/modules/AuthModule.html",[0,0.271,3,0.103,4,0.103,5,0.092,19,0.009,34,0.179,36,0.092,40,0.736,47,0.007,48,0.007,240,2.41,257,1.125,279,2.226,281,2.267,282,2.953,285,3.151,286,2.419,287,2.419,289,3.261,290,2.504,293,1.433,295,3.261,364,6.234,373,5.489,375,5.489,646,5.501,697,5.565,698,4.094,734,4.491,735,4.491,736,4.491,737,5.093,738,5.81,739,5.093,740,4.947,741,5.093,742,4.094,743,6.633,744,3.365,745,5.093,746,5.093,747,5.093,748,3.798,749,4.491,750,5.093,751,5.093,752,5.093,753,3.365]],["title/injectables/AuthService.html",[297,1.086,697,2.737]],["body/injectables/AuthService.html",[0,0.196,3,0.075,4,0.075,5,0.066,10,0.17,12,0.958,13,0.786,15,1.469,18,0.35,19,0.01,20,0.701,23,0.403,28,0.958,29,0.932,30,1.12,31,1.142,34,0.157,35,0.589,36,0.066,37,1.037,40,1.282,44,1.837,47,0.005,48,0.005,53,2.604,254,3.166,257,0.811,273,2.421,291,1.334,293,1.033,297,1.32,298,1.492,300,2.358,302,3.74,308,2.018,309,2.018,316,3.055,317,2.018,318,3.127,325,3.237,328,2.197,329,1.744,330,2.218,432,5.149,503,1.688,591,3.72,620,2.304,630,2.738,656,4.671,660,5.999,664,4.258,665,3.95,666,3.95,667,3.704,668,5.074,670,4.758,695,4.758,696,3.237,697,3.324,719,4.837,742,2.951,754,3.237,755,5.297,756,5.297,757,3.671,758,7.748,759,4.996,760,3.671,761,5.297,762,5.297,763,3.671,764,5.297,765,3.671,766,5.297,767,5.297,768,5.297,769,6.803,770,3.671,771,3.95,772,4.671,773,4.671,774,5.297,775,4.671,776,2.567,777,3.671,778,3.671,779,3.671,780,3.671,781,3.671,782,5.297,783,3.671,784,3.671,785,5.48,786,2.951,787,3.671,788,3.671,789,3.671,790,3.671,791,3.671]],["title/classes/BaseEntity.html",[0,0.232,473,2.004]],["body/classes/BaseEntity.html",[0,0.442,2,1.147,3,0.122,4,0.122,5,0.109,10,0.278,11,0.903,18,0.378,19,0.009,20,0.774,23,0.436,34,0.122,35,0.963,36,0.109,47,0.008,48,0.008,59,4.208,62,4.56,248,1.834,435,2.441,456,2.671,473,3.383,503,2.346,792,5.295,793,7.96,794,7.96,795,6.004,796,7.96,797,6.004,798,6.004]],["title/entities/Block.html",[193,2.397,456,1.463]],["body/entities/Block.html",[0,0.282,3,0.107,4,0.107,5,0.096,10,0.245,11,0.834,18,0.386,19,0.009,20,0.634,23,0.445,34,0.153,35,0.848,36,0.096,40,1.305,47,0.007,48,0.007,64,1.917,176,3.644,193,4.359,248,1.871,293,1.488,435,2.151,456,2.281,460,3.594,462,4.192,466,3.463,473,3.125,474,2.695,475,3.972,476,2.695,481,2.355,482,4.07,483,3.895,799,4.665,800,7.512,801,6.624,802,6.798,803,5.29,804,6.798,805,5.29,806,5.29,807,6.798,808,5.466]],["title/controllers/BlockController.html",[238,1.674,809,3.252]],["body/controllers/BlockController.html",[0,0.253,3,0.096,4,0.096,5,0.086,10,0.219,12,0.89,13,0.939,18,0.325,19,0.01,20,0.76,23,0.374,28,0.89,29,0.867,30,0.914,34,0.154,36,0.086,40,0.685,47,0.006,48,0.006,58,1.047,64,2.078,193,2.605,238,1.819,240,1.722,242,2.605,246,4.701,247,4.235,248,1.576,251,4.176,252,3.969,253,2.505,254,2.414,255,2.605,256,2.414,257,1.047,258,2.329,259,2.714,260,2.605,263,2.505,265,2.414,266,3.477,269,4.717,273,2.549,275,3.344,276,3.623,277,3.914,278,3.477,553,5.085,809,4.717,810,4.178,811,5.577,812,5.577,813,4.738,814,4.738,815,7.596,816,4.738,817,4.738,818,4.738,819,4.738,820,4.704,821,4.178,822,4.738,823,4.738,824,4.738,825,6.324,826,4.178,827,4.738,828,4.738,829,4.738,830,4.738,831,4.178,832,4.178,833,3.13,834,4.738]],["title/modules/BlockModule.html",[279,1.463,365,3.05]],["body/modules/BlockModule.html",[0,0.315,3,0.12,4,0.12,5,0.107,19,0.009,34,0.175,36,0.107,40,1.054,47,0.007,48,0.007,193,3.25,240,2.649,257,1.306,279,2.447,281,2.632,282,3.246,285,3.464,286,2.809,287,2.809,289,3.584,290,2.907,291,2.148,293,1.663,295,2.907,365,6.038,809,5.896,820,5.704,821,5.214,835,5.214,836,5.214,837,5.912,838,5.912,839,5.214,840,5.912]],["title/injectables/BlockService.html",[297,1.086,820,2.881]],["body/injectables/BlockService.html",[0,0.206,3,0.079,4,0.079,5,0.07,10,0.179,12,0.901,13,0.817,15,1.391,18,0.329,19,0.01,20,0.714,23,0.379,28,0.901,29,0.877,30,0.796,31,1.503,34,0.15,35,0.621,36,0.07,37,1.498,40,1.138,47,0.006,48,0.006,64,2.089,193,3.52,257,0.856,273,1.847,291,1.407,293,1.09,297,1.371,298,1.575,300,2.45,302,4.328,303,4.019,308,2.129,309,2.129,316,2.706,317,2.129,318,3.385,320,3.637,328,4.174,329,3.822,330,3.427,331,4.105,344,2.319,345,2.048,591,4.174,594,2.559,619,3.85,620,4.803,801,5.646,808,4.425,811,4.854,812,4.854,820,3.637,826,4.854,831,4.854,839,3.416,841,3.416,842,3.873,843,3.873,844,5.504,845,3.873,846,3.873,847,3.416,848,3.873,849,6.403,850,5.504,851,5.504,852,4.425,853,5.504,854,3.873,855,5.504,856,4.854,857,3.873,858,3.873,859,3.873,860,3.873,861,5.504,862,5.504,863,3.873,864,5.504,865,6.403,866,6.403,867,3.873,868,3.873,869,3.873]],["title/entities/Comment.html",[166,2.306,456,1.463]],["body/entities/Comment.html",[0,0.271,3,0.103,4,0.103,5,0.092,10,0.235,11,0.812,18,0.401,19,0.009,20,0.728,23,0.462,34,0.159,35,0.815,36,0.092,40,1.239,46,2.348,47,0.007,48,0.007,58,1.946,64,1.881,166,4.128,167,4.868,176,3.589,248,1.945,293,1.429,323,4.376,435,2.066,456,2.222,460,3.502,462,4.128,466,3.374,473,3.044,474,2.589,475,3.896,476,2.589,481,2.262,482,3.965,483,3.795,870,4.481,871,6.498,872,6.623,873,5.081,874,5.081,875,6.623,876,5.081,877,5.081,878,4.085,879,5.081]],["title/classes/CreateCommentDto.html",[0,0.232,880,3.252]],["body/classes/CreateCommentDto.html",[0,0.409,2,1.23,3,0.131,4,0.131,5,0.117,10,0.298,11,0.942,18,0.331,19,0.009,20,0.716,23,0.381,34,0.131,36,0.117,47,0.008,48,0.008,167,5.421,248,1.604,486,4.221,489,2.96,880,5.726,881,6.771,882,5.177,883,6.439,884,6.439,885,6.439,886,6.439]],["title/classes/CreatePostDto.html",[0,0.232,887,3.252]],["body/classes/CreatePostDto.html",[0,0.361,2,1.004,3,0.107,4,0.107,5,0.095,10,0.243,11,0.83,18,0.448,19,0.009,20,0.821,23,0.496,34,0.138,36,0.095,47,0.007,48,0.007,58,1.495,66,4.947,67,4.947,68,6.02,69,4.947,70,4.8,248,2.039,486,4.836,489,2.415,503,1.675,675,5.048,882,4.224,887,5.048,888,7.515,889,4.734,890,5.254,891,5.254,892,5.254,893,5.254,894,5.254,895,4.633,896,5.254,897,3.675,898,3.919,899,4.633]],["title/classes/CreateScrapBookDto.html",[0,0.232,900,3.252]],["body/classes/CreateScrapBookDto.html",[0,0.372,2,1.054,3,0.112,4,0.112,5,0.1,10,0.256,11,0.857,18,0.414,19,0.009,20,0.751,23,0.476,29,0.756,34,0.156,36,0.1,47,0.007,48,0.007,58,1.692,66,5.062,69,5.062,70,4.861,88,3.557,248,1.909,486,4.665,489,2.536,503,1.759,596,4.389,675,5.208,889,4.884,895,4.865,897,3.859,898,4.115,899,4.865,900,5.208,901,7.325,902,4.865,903,5.518,904,5.518,905,5.518,906,5.518,907,4.865,908,5.518]],["title/injectables/EncryptionService.html",[297,1.086,776,3.05]],["body/injectables/EncryptionService.html",[0,0.253,3,0.096,4,0.096,5,0.086,10,0.22,12,0.891,13,0.94,15,1.481,18,0.325,19,0.009,20,0.798,23,0.375,28,0.891,29,0.868,30,1.099,31,1.639,34,0.129,36,0.086,37,1.239,47,0.006,48,0.006,254,3.63,257,1.049,273,2.125,297,1.578,298,1.93,318,2.182,344,3.791,345,3.348,432,5.653,439,5.585,503,2.271,711,6.704,712,5.585,776,4.429,909,4.187,910,4.723,911,6.333,912,6.333,913,6.333,914,6.333,915,6.333,916,7.92,917,4.748,918,6.333,919,7.602,920,7.92,921,6.333,922,6.333,923,4.748,924,6.333,925,6.333,926,4.748,927,4.187,928,6.333,929,3.817,930,4.748,931,4.748]],["title/controllers/FeedController.html",[238,1.674,932,3.252]],["body/controllers/FeedController.html",[0,0.287,3,0.109,4,0.109,5,0.098,10,0.25,12,0.759,13,1.021,18,0.277,19,0.009,23,0.319,28,0.759,29,0.738,30,0.779,34,0.168,36,0.098,47,0.007,48,0.007,238,2.069,240,1.958,242,2.963,244,5.531,245,4.752,246,4.534,247,4.067,248,1.343,251,3.782,252,3.382,253,2.849,255,2.963,256,2.745,257,1.19,258,2.649,259,3.087,260,2.963,263,2.849,265,2.745,266,2.963,268,4.752,273,2.308,275,2.849,276,3.087,277,2.963,278,2.963,506,4.123,526,4.545,527,2.649,528,2.963,932,5.13,933,4.752,934,5.389,935,5.389,936,5.389,937,5.007,938,4.752,939,5.389,940,5.389,941,5.389,942,4.333,943,4.333]],["title/modules/FeedModule.html",[279,1.463,366,3.05]],["body/modules/FeedModule.html",[0,0.315,3,0.12,4,0.12,5,0.107,19,0.009,34,0.175,36,0.107,40,1.054,47,0.007,48,0.007,58,1.306,240,2.649,257,1.306,279,2.447,281,2.632,282,3.246,285,3.464,286,2.809,287,2.809,289,3.584,290,2.907,291,2.148,292,2.907,293,1.663,295,2.907,296,4.753,366,6.038,932,5.896,937,5.704,938,5.214,944,5.214,945,5.214,946,5.912,947,5.912]],["title/injectables/FeedService.html",[297,1.086,937,2.881]],["body/injectables/FeedService.html",[0,0.231,3,0.088,4,0.088,5,0.078,10,0.201,12,0.839,13,0.884,15,1.237,18,0.306,19,0.01,23,0.353,28,0.839,29,0.816,30,0.627,31,1.285,34,0.171,35,0.696,36,0.078,37,1.166,40,0.861,47,0.006,48,0.006,58,1.316,64,1.107,70,3.413,257,0.958,273,1.456,291,1.576,292,2.133,293,1.22,297,1.484,298,1.764,300,2.652,301,3.825,302,4.467,303,4.271,305,4.167,308,2.385,309,2.385,315,3.034,316,2.929,317,2.385,318,3.646,320,3.937,321,3.034,323,2.866,328,2.597,329,2.061,330,3.215,435,1.764,506,3.931,527,2.929,528,2.385,582,4.597,583,3.034,584,2.723,585,3.235,591,2.597,596,3.899,604,3.825,605,3.825,615,3.937,616,2.485,617,3.235,618,4.444,619,3.034,620,2.723,898,3.235,937,3.937,948,3.825,949,5.958,950,4.338,951,5.958,952,4.338,953,2.866,954,4.338,955,4.338,956,4.338,957,4.338,958,4.338,959,4.338,960,4.338,961,4.338,962,4.338,963,3.235,964,4.338,965,4.338,966,4.338,967,4.338,968,4.338,969,4.338,970,4.338,971,5.958,972,4.338,973,5.254,974,2.597,975,5.254,976,4.338]],["title/injectables/FirebaseStorageService.html",[297,1.086,977,2.881]],["body/injectables/FirebaseStorageService.html",[0,0.124,3,0.047,4,0.047,5,0.097,10,0.108,11,0.458,12,0.965,13,0.554,15,1.507,18,0.339,19,0.01,20,0.817,21,0.501,22,0.478,23,0.406,28,0.928,29,0.904,30,1.023,34,0.109,36,0.042,37,1.503,40,0.907,47,0.004,48,0.004,63,1.663,64,1.854,67,4.147,80,2.085,81,2.792,89,5.232,158,6.079,169,3.742,254,2.993,257,0.513,273,1.972,275,1.975,297,0.931,298,0.945,318,3.759,329,1.775,330,1.961,503,2,504,2.939,658,2.345,667,4.11,669,3.294,714,4.73,910,3.493,977,2.468,978,5.279,979,2.05,980,3.765,981,5.69,982,6.859,983,3.736,984,3.736,985,3.736,986,3.736,987,3.736,988,3.736,989,3.736,990,3.736,991,2.325,992,3.736,993,2.325,994,3.736,995,2.325,996,3.736,997,2.325,998,3.736,999,5.364,1000,2.325,1001,5.876,1002,8.115,1003,5.364,1004,3.736,1005,6.218,1006,6.596,1007,3.949,1008,3.736,1009,2.325,1010,5.364,1011,3.736,1012,2.325,1013,3.736,1014,4.684,1015,3.736,1016,5.364,1017,3.736,1018,2.325,1019,6.596,1020,5.364,1021,1.869,1022,2.05,1023,6.276,1024,4.684,1025,2.05,1026,6.276,1027,2.325,1028,2.325,1029,2.325,1030,2.325,1031,2.325,1032,2.05,1033,2.325,1034,4.684,1035,5.876,1036,5.182,1037,5.876,1038,5.876,1039,7.264,1040,4.684,1041,2.325,1042,2.325,1043,5.364,1044,3.736,1045,6.276,1046,6.276,1047,3.294,1048,2.325,1049,3.736,1050,2.325,1051,3.294,1052,3.736,1053,3.736,1054,3.736,1055,3.736]],["title/entities/Follow.html",[200,2.397,456,1.463]],["body/entities/Follow.html",[0,0.287,3,0.109,4,0.109,5,0.098,10,0.25,11,0.844,18,0.389,19,0.009,20,0.642,23,0.448,34,0.154,35,0.864,36,0.098,40,1.298,47,0.007,48,0.007,64,1.934,176,3.669,200,3.782,248,1.888,293,1.516,435,2.191,456,2.308,460,3.637,462,4.221,466,3.504,473,3.162,474,2.745,475,4.006,476,2.745,481,2.399,953,3.561,1056,4.752,1057,6.418,1058,7.578,1059,6.066,1060,5.389,1061,6.879,1062,5.389,1063,5.389,1064,4.752,1065,4.752]],["title/controllers/FollowController.html",[238,1.674,1066,3.252]],["body/controllers/FollowController.html",[0,0.14,3,0.053,4,0.053,5,0.047,10,0.121,12,1.008,13,0.61,15,1.558,18,0.368,19,0.01,20,0.728,23,0.424,28,1.008,29,0.981,30,1.035,34,0.134,36,0.047,47,0.004,48,0.004,58,0.579,64,1.688,80,1.167,200,3.636,238,1.007,240,0.953,242,1.442,246,4.842,247,4.383,248,1.783,251,4.49,253,1.386,254,1.336,255,1.442,256,3.369,257,0.579,258,1.289,259,1.502,260,1.442,263,1.386,265,1.336,266,3.935,269,3.066,273,2.741,275,3.785,276,4.101,277,4.14,278,3.935,502,2.108,506,4.142,520,2.108,525,2.108,526,4.119,527,1.289,528,1.442,542,2.312,548,2.312,553,4.615,832,3.625,833,2.716,953,1.733,1066,3.066,1067,2.312,1068,3.625,1069,4.471,1070,4.471,1071,4.471,1072,4.471,1073,3.625,1074,3.625,1075,4.471,1076,2.622,1077,6.614,1078,2.622,1079,5.74,1080,2.622,1081,2.622,1082,2.622,1083,2.622,1084,2.622,1085,2.622,1086,2.622,1087,2.622,1088,4.111,1089,5.832,1090,5.07,1091,2.622,1092,2.622,1093,4.471,1094,2.622,1095,2.622,1096,2.622,1097,2.622,1098,2.622,1099,2.622,1100,4.111,1101,2.622,1102,2.622,1103,2.622,1104,2.622,1105,2.108,1106,3.35,1107,2.312,1108,2.622,1109,2.622,1110,2.622,1111,7.159,1112,2.312,1113,5.832,1114,6.614,1115,2.622,1116,4.111,1117,2.622,1118,2.622,1119,2.622,1120,2.108,1121,2.622,1122,2.622,1123,2.312,1124,2.622,1125,2.108,1126,2.622,1127,2.622,1128,2.622,1129,2.622,1130,4.111,1131,2.622,1132,2.622]],["title/modules/FollowModule.html",[279,1.463,367,3.05]],["body/modules/FollowModule.html",[0,0.31,3,0.118,4,0.118,5,0.105,19,0.009,34,0.177,36,0.105,40,0.84,47,0.007,48,0.007,200,3.965,240,2.62,257,1.283,279,2.42,281,2.586,282,3.21,285,3.426,286,2.759,287,2.759,289,3.545,290,2.855,291,2.111,293,1.634,295,2.855,367,6.012,402,4.526,404,4.332,753,3.838,1066,5.849,1106,5.679,1107,5.122,1133,5.122,1134,5.122,1135,5.808,1136,5.122,1137,5.122,1138,5.808]],["title/entities/FollowRequest.html",[402,2.737,456,1.463]],["body/entities/FollowRequest.html",[0,0.266,3,0.101,4,0.101,5,0.09,10,0.231,11,0.802,18,0.398,19,0.009,20,0.61,21,1.41,22,1.024,23,0.459,34,0.157,35,0.799,36,0.09,40,1.285,46,2.084,47,0.007,48,0.007,64,1.863,98,3.588,141,2.983,176,3.562,248,1.93,293,1.402,402,4.104,435,2.026,456,2.194,460,3.457,462,4.097,466,3.331,470,3.127,473,3.006,474,2.538,475,3.859,476,2.538,479,2.855,481,2.218,953,3.292,1057,4.006,1064,4.394,1065,4.394,1139,7.096,1140,4.394,1141,6.436,1142,6.436,1143,4.983,1144,6.539,1145,4.983,1146,6.539,1147,4.983,1148,5.868,1149,6.436,1150,4.983,1151,4.983]],["title/injectables/FollowService.html",[297,1.086,1106,2.881]],["body/injectables/FollowService.html",[0,0.105,3,0.04,4,0.04,5,0.036,10,0.092,12,0.94,13,0.486,15,1.492,18,0.343,19,0.01,20,0.673,23,0.395,28,0.94,29,0.915,30,0.931,31,1.656,34,0.14,35,0.317,36,0.036,37,1.439,40,1.145,47,0.003,48,0.003,64,2.003,98,1.609,200,3.883,256,3.598,257,0.437,273,2.31,291,0.718,293,0.556,297,0.816,298,0.804,300,1.457,302,3.785,308,1.087,309,1.087,316,2.059,317,1.087,318,3.812,320,4.256,328,3.482,329,3.875,330,3.569,331,4.025,344,1.184,345,1.045,402,4.193,404,1.474,435,1.98,479,1.133,502,1.589,506,3.993,520,1.589,527,1.609,528,1.087,582,4.65,583,1.383,584,1.241,585,1.474,591,4.122,594,3.218,615,4.256,616,2.79,617,3.632,618,4.804,620,4.043,690,1.743,759,2.632,847,1.743,852,2.632,953,3.566,1068,2.886,1069,2.886,1070,2.886,1071,3.694,1072,3.694,1073,2.886,1074,2.886,1075,3.694,1106,2.163,1112,2.886,1120,2.632,1123,2.886,1125,1.589,1136,1.743,1137,1.743,1141,2.886,1142,2.886,1148,1.589,1149,1.743,1152,1.743,1153,1.743,1154,4.189,1155,4.189,1156,1.977,1157,3.273,1158,6.681,1159,1.977,1160,3.273,1161,1.977,1162,3.273,1163,1.977,1164,1.977,1165,1.977,1166,1.977,1167,1.977,1168,3.273,1169,1.977,1170,1.977,1171,1.977,1172,1.743,1173,1.474,1174,1.977,1175,1.977,1176,3.273,1177,3.273,1178,5.128,1179,4.189,1180,2.886,1181,3.273,1182,5.397,1183,1.977,1184,1.977,1185,4.189,1186,5.397,1187,1.977,1188,3.273,1189,4.294,1190,2.886,1191,1.977,1192,3.273,1193,4.87,1194,3.273,1195,3.273,1196,2.289,1197,4.189,1198,4.87,1199,2.886,1200,4.189,1201,3.273,1202,2.886,1203,2.886,1204,1.977,1205,1.977,1206,3.218,1207,1.977,1208,3.273,1209,1.977,1210,1.743,1211,1.977,1212,1.977,1213,1.977,1214,1.977,1215,1.977,1216,3.273,1217,3.273,1218,3.273,1219,1.977,1220,4.189,1221,3.273,1222,1.977,1223,1.977,1224,1.977]],["title/injectables/JwtAuthGuard.html",[258,2.144,297,1.086]],["body/injectables/JwtAuthGuard.html",[0,0.356,3,0.136,4,0.136,5,0.121,19,0.009,34,0.159,36,0.121,47,0.008,48,0.008,257,1.476,258,3.858,297,1.955,298,2.716,481,2.974,744,4.414,1225,5.891,1226,5.371,1227,5.891,1228,6.68]],["title/injectables/JwtStrategy.html",[297,1.086,738,3.05]],["body/injectables/JwtStrategy.html",[0,0.295,3,0.112,4,0.112,5,0.1,10,0.256,12,0.779,13,1.038,15,1.394,18,0.284,19,0.009,23,0.414,28,0.779,29,0.758,30,0.799,34,0.164,36,0.1,47,0.007,48,0.007,53,2.719,64,1.412,257,1.222,273,1.856,297,1.742,298,2.248,300,3.414,345,2.924,418,4.446,481,2.462,666,4.125,667,3.868,668,4.125,670,5.636,719,3.311,738,4.891,744,3.654,748,4.125,749,4.877,771,5.216,786,4.446,1229,4.877,1230,5.531,1231,6.994,1232,5.531,1233,5.531,1234,5.622,1235,4.877,1236,4.877,1237,4.877,1238,5.531,1239,5.531,1240,5.531,1241,5.531,1242,5.531,1243,5.531,1244,4.446,1245,5.531,1246,4.877,1247,5.531,1248,5.531,1249,5.531,1250,5.531,1251,5.531,1252,5.531,1253,5.531,1254,5.531]],["title/entities/Like.html",[456,1.833]],["body/entities/Like.html",[0,0.283,3,0.108,4,0.108,5,0.096,10,0.246,11,0.835,18,0.386,19,0.009,20,0.635,23,0.445,34,0.161,35,0.85,36,0.096,40,1.25,47,0.007,48,0.007,58,1.855,64,1.919,176,3.647,248,1.873,293,1.492,435,2.156,456,2.285,460,3.6,462,4.195,466,3.468,473,3.129,474,2.701,475,3.976,476,2.701,481,2.361,482,3.174,483,3.038,878,4.263,963,3.955,1255,6.997,1256,4.676,1257,7.52,1258,7.52,1259,5.303,1260,6.808,1261,5.303,1262,6.808,1263,5.303,1264,5.303]],["title/injectables/LocalAuthGuard.html",[297,1.086,662,3.252]],["body/injectables/LocalAuthGuard.html",[0,0.356,3,0.136,4,0.136,5,0.121,19,0.009,34,0.159,36,0.121,47,0.008,48,0.008,257,1.476,297,1.955,298,2.716,481,2.974,662,5.853,744,4.414,1226,5.371,1227,5.891,1265,5.891,1266,6.68]],["title/injectables/LocalStrategy.html",[297,1.086,375,2.881]],["body/injectables/LocalStrategy.html",[0,0.256,3,0.097,4,0.097,5,0.087,10,0.222,12,0.898,13,0.946,15,1.302,18,0.328,19,0.009,20,0.762,23,0.377,28,0.898,29,0.874,30,0.922,31,1.375,34,0.155,36,0.087,37,0.939,40,1.278,47,0.007,48,0.007,254,3.248,257,1.06,265,2.444,273,1.61,297,1.589,298,1.95,300,2.135,318,2.205,329,2.279,330,2.008,375,4.213,432,5.478,481,2.135,503,2.032,591,3.817,664,5.127,665,5.342,666,5.342,697,5.128,698,3.856,719,4.758,744,3.169,771,4.756,772,5.623,773,5.623,775,5.623,1234,5.759,1235,4.23,1236,4.23,1237,4.23,1267,4.23,1268,4.797,1269,4.797,1270,6.377,1271,4.797,1272,5.623,1273,6.377,1274,7.634,1275,4.797,1276,4.797]],["title/controllers/NotificationController.html",[238,1.674,1277,3.252]],["body/controllers/NotificationController.html",[0,0.241,3,0.092,4,0.092,5,0.082,10,0.21,12,0.863,13,0.91,18,0.315,19,0.01,20,0.649,23,0.363,28,0.863,29,0.84,30,0.886,34,0.17,36,0.082,42,2.709,47,0.006,48,0.006,53,2.224,58,0.999,212,5.56,238,1.737,240,1.644,242,2.488,246,4.657,247,4.185,248,1.528,251,4.099,252,3.848,253,2.392,254,2.305,255,2.488,256,2.305,257,0.999,258,2.224,259,2.592,260,2.488,263,2.392,265,2.305,266,3.824,273,2.502,275,3.242,276,3.513,277,4.099,278,3.371,310,2.84,524,4.12,529,3.165,530,3.848,531,3.638,544,3.375,670,3.165,833,4.051,1093,3.99,1277,4.573,1278,3.99,1279,5.407,1280,5.407,1281,5.407,1282,4.525,1283,5.214,1284,4.525,1285,4.525,1286,4.525,1287,4.525,1288,4.525,1289,3.99,1290,3.99,1291,4.365,1292,3.99,1293,4.525,1294,4.525,1295,4.525,1296,4.525,1297,5.407,1298,4.525,1299,4.525,1300,4.525,1301,4.525,1302,4.525,1303,4.525]],["title/modules/NotificationModule.html",[279,1.463,368,2.881]],["body/modules/NotificationModule.html",[0,0.311,3,0.119,4,0.119,5,0.106,19,0.009,34,0.172,36,0.106,40,0.844,47,0.007,48,0.007,240,2.629,257,1.289,279,2.427,281,2.599,282,3.22,285,3.437,286,2.773,287,2.773,289,3.556,290,2.87,291,2.121,293,1.642,295,2.87,368,5.765,740,5.395,753,3.857,1277,5.863,1291,5.67,1292,5.148,1304,5.148,1305,5.148,1306,5.148,1307,5.838,1308,5.838]],["title/injectables/NotificationService.html",[297,1.086,1291,2.737]],["body/injectables/NotificationService.html",[0,0.136,3,0.052,4,0.052,5,0.046,10,0.119,12,0.964,13,0.598,15,1.464,18,0.352,19,0.01,20,0.806,23,0.405,28,0.964,29,0.939,30,0.946,31,1.672,34,0.148,35,0.41,36,0.046,37,1.389,40,0.819,47,0.004,48,0.004,53,3.029,64,1.029,89,3.554,163,2.743,212,5.782,215,5.294,257,0.565,273,2.701,291,0.93,293,0.72,297,1.005,298,1.04,300,1.795,302,3.113,308,1.407,309,1.407,310,1.606,316,1.258,317,1.407,318,3.66,329,2.927,330,2.58,524,4.552,670,3.96,759,3.242,786,5.507,974,2.987,1022,2.256,1153,2.256,1173,1.908,1178,2.256,1206,3.297,1279,6.04,1280,3.555,1281,3.555,1283,4.309,1289,2.256,1290,2.256,1291,2.531,1309,2.256,1310,4.032,1311,4.032,1312,4.032,1313,3.555,1314,2.558,1315,4.032,1316,2.558,1317,4.032,1318,2.558,1319,7.285,1320,4.032,1321,2.558,1322,4.032,1323,2.558,1324,4.032,1325,2.558,1326,4.032,1327,2.558,1328,2.057,1329,2.057,1330,2.057,1331,3.242,1332,2.057,1333,2.256,1334,2.256,1335,2.558,1336,5.663,1337,2.558,1338,4.032,1339,2.558,1340,2.558,1341,2.558,1342,4.99,1343,5.663,1344,2.558,1345,2.558,1346,2.558,1347,2.558,1348,2.558,1349,2.558,1350,4.99,1351,4.99,1352,4.032,1353,4.032,1354,4.4,1355,6.545,1356,5.663,1357,5.663,1358,6.545,1359,4.99,1360,4.99,1361,4.99,1362,5.663,1363,4.99,1364,4.99,1365,4.032,1366,2.558,1367,4.032,1368,2.558,1369,2.558]],["title/classes/PageDto.html",[0,0.232,584,2.737]],["body/classes/PageDto.html",[0,0.373,2,1.059,3,0.113,4,0.113,5,0.1,10,0.257,11,0.859,12,0.78,18,0.394,19,0.009,23,0.454,28,0.78,29,0.76,34,0.142,36,0.1,47,0.007,48,0.007,248,1.381,300,2.468,489,2.548,503,2.232,504,3.479,582,5.086,583,3.877,584,5.062,1370,4.889,1371,5.942,1372,7.607,1373,6.434,1374,7.004,1375,8.319,1376,7.004,1377,7.678,1378,5.544,1379,4.135,1380,5.544,1381,4.889,1382,5.544,1383,5.544]],["title/classes/PageMetaDto.html",[0,0.232,582,2.611]],["body/classes/PageMetaDto.html",[0,0.384,2,0.926,3,0.098,4,0.098,5,0.088,10,0.225,11,0.788,12,0.682,18,0.429,19,0.009,23,0.495,28,0.682,29,0.664,34,0.098,36,0.088,47,0.007,48,0.007,300,2.858,503,1.545,506,2.303,527,4.173,582,4.589,615,5.269,616,4.863,973,4.274,974,2.902,975,4.274,1371,6.313,1373,3.615,1379,5.717,1381,5.662,1384,4.274,1385,4.03,1386,5.662,1387,6.421,1388,7.2,1389,7.2,1390,7.2,1391,6.349,1392,4.847,1393,5.717,1394,6.421,1395,5.361,1396,4.847,1397,4.847,1398,4.847,1399,4.847,1400,4.847,1401,4.847,1402,6.349,1403,5.662,1404,4.847,1405,4.847,1406,4.847,1407,4.847,1408,4.847]],["title/interfaces/PageMetaDtoParameters.html",[1393,3.252,1409,3.252]],["body/interfaces/PageMetaDtoParameters.html",[3,0.125,4,0.125,5,0.111,10,0.284,11,0.915,18,0.383,19,0.009,28,0.863,34,0.125,36,0.111,47,0.008,48,0.008,503,2.376,506,4.226,527,3.014,528,3.371,615,5.522,616,4.603,658,3.848,1373,5.991,1379,5.991,1393,6.233,1409,4.573,1410,6.132,1411,5.407,1412,6.132]],["title/classes/PageOptionsDto.html",[0,0.232,506,2.072]],["body/classes/PageOptionsDto.html",[0,0.33,2,0.878,3,0.093,4,0.093,5,0.083,10,0.213,11,0.76,18,0.36,19,0.01,21,1.618,22,1.44,23,0.444,29,1.106,30,0.664,34,0.126,36,0.083,47,0.008,48,0.006,248,1.747,273,1.542,438,4.053,489,2.113,503,2.629,506,3.565,527,3.851,616,4.869,658,2.885,889,3.215,897,3.215,929,5.637,974,4.492,1371,5.944,1379,6.019,1391,6.182,1402,4.053,1403,4.053,1413,4.053,1414,7.274,1415,6.197,1416,7.504,1417,6.197,1418,4.597,1419,4.597,1420,4.597,1421,4.597,1422,4.597,1423,4.597,1424,4.597,1425,4.597,1426,7.011,1427,6.033,1428,4.597,1429,4.053,1430,4.597,1431,4.597,1432,4.597,1433,4.597,1434,4.597,1435,3.696,1436,4.053,1437,4.597,1438,6.197,1439,4.597,1440,4.597]],["title/controllers/PaymentController.html",[238,1.674,1441,3.252]],["body/controllers/PaymentController.html",[0,0.185,3,0.071,4,0.071,5,0.063,10,0.161,12,0.994,13,0.756,15,1.55,18,0.363,19,0.01,20,0.688,23,0.418,28,0.994,29,0.967,30,1.02,34,0.143,36,0.063,47,0.005,48,0.005,58,0.768,238,1.335,240,1.264,242,1.912,246,4.828,247,4.37,248,1.759,251,4.515,253,1.839,255,1.912,256,3.069,257,0.768,258,1.71,259,1.992,260,1.912,263,1.839,265,1.772,266,2.8,273,2.719,275,3.733,276,4.045,277,4.455,278,3.881,526,2.298,785,5.313,833,4.664,1005,3.798,1105,2.796,1113,5.313,1371,2.432,1441,3.798,1442,3.067,1443,6.225,1444,4.491,1445,5.313,1446,5.313,1447,4.491,1448,4.491,1449,3.478,1450,6.633,1451,5.093,1452,5.093,1453,3.478,1454,3.478,1455,6.504,1456,5.093,1457,3.478,1458,3.478,1459,5.093,1460,3.478,1461,3.478,1462,3.478,1463,3.478,1464,3.478,1465,3.478,1466,3.478,1467,3.981,1468,3.067,1469,3.478,1470,3.478,1471,3.478,1472,7.06,1473,3.478,1474,6.025,1475,3.478,1476,3.478,1477,3.478,1478,5.093,1479,3.067,1480,3.067,1481,3.478,1482,3.478,1483,3.478,1484,3.478,1485,3.478]],["title/modules/PaymentModule.html",[279,1.463,369,3.05]],["body/modules/PaymentModule.html",[0,0.308,3,0.117,4,0.117,5,0.105,19,0.009,34,0.174,36,0.105,40,0.835,47,0.007,48,0.007,240,2.612,257,1.277,279,2.412,281,2.573,282,3.2,285,3.415,286,2.746,287,2.746,289,3.534,290,2.841,291,2.1,293,1.626,295,3.534,368,5.672,369,6.154,753,3.819,1441,5.836,1467,5.672,1468,5.096,1486,5.096,1487,5.779,1488,5.096,1489,5.779,1490,5.779,1491,5.779]],["title/injectables/PaymentService.html",[297,1.086,1467,2.881]],["body/injectables/PaymentService.html",[0,0.13,3,0.05,4,0.05,5,0.044,10,0.113,11,0.476,12,0.947,13,0.576,15,1.432,18,0.359,19,0.01,20,0.702,21,1.189,22,0.994,23,0.426,28,0.903,29,0.879,30,0.87,31,1.45,34,0.142,35,0.391,36,0.044,37,1.576,40,1.04,47,0.004,48,0.004,64,0.991,126,3.122,163,1.341,234,1.961,235,5.612,236,4.782,257,0.539,273,2.257,275,2.557,278,1.341,291,0.887,293,0.686,297,0.967,298,0.992,300,1.729,302,3.032,303,2.437,308,1.341,309,1.341,316,3.7,317,1.341,318,3.734,328,2.325,329,2.62,330,2.816,344,3.301,345,2.053,524,2.557,591,2.325,594,1.612,618,4.113,619,4.21,620,1.531,630,2.896,667,1.706,681,2.896,719,1.461,974,1.461,1005,3.607,1047,2.151,1173,1.82,1291,4.221,1297,4.265,1313,3.424,1371,1.706,1435,3.122,1443,4.265,1444,3.424,1445,3.424,1446,3.424,1447,3.424,1448,3.424,1455,3.424,1467,2.566,1479,2.151,1480,3.424,1492,2.151,1493,4.837,1494,4.84,1495,2.151,1496,3.883,1497,3.883,1498,2.44,1499,3.883,1500,2.44,1501,2.44,1502,3.883,1503,2.44,1504,3.883,1505,2.44,1506,3.883,1507,2.44,1508,3.424,1509,3.424,1510,3.424,1511,3.122,1512,3.424,1513,2.44,1514,3.883,1515,2.44,1516,3.424,1517,2.151,1518,2.151,1519,2.44,1520,2.151,1521,3.883,1522,4.837,1523,6.412,1524,2.44,1525,4.837,1526,4.863,1527,4.837,1528,2.44,1529,2.44,1530,2.44,1531,2.44,1532,2.44,1533,2.44,1534,2.44,1535,5.514,1536,5.514,1537,4.837,1538,4.837,1539,2.44,1540,2.44,1541,2.44,1542,2.44,1543,3.883,1544,2.44,1545,2.44,1546,2.44,1547,2.44,1548,2.44,1549,2.44,1550,2.44,1551,2.44,1552,2.44,1553,2.44,1554,2.44,1555,2.44,1556,2.151,1557,2.44,1558,2.44,1559,3.883,1560,3.883,1561,3.122,1562,3.883,1563,3.883,1564,3.424,1565,4.837,1566,2.44,1567,2.44,1568,2.44,1569,2.44,1570,2.44,1571,2.44,1572,3.883,1573,4.837,1574,2.44,1575,2.44,1576,4.837,1577,2.44,1578,4.837,1579,2.44,1580,3.883,1581,2.44,1582,2.44,1583,2.44,1584,2.44,1585,2.44,1586,2.44,1587,4.837,1588,4.837,1589,2.44,1590,2.44,1591,2.44,1592,2.44,1593,3.883,1594,2.44,1595,2.44,1596,2.44,1597,2.44,1598,2.44,1599,2.44,1600,2.44,1601,2.44,1602,3.883,1603,2.44,1604,2.44,1605,2.44,1606,2.151,1607,2.44,1608,2.44,1609,2.44,1610,2.44,1611,2.44]],["title/entities/Post.html",[58,0.963,456,1.463]],["body/entities/Post.html",[0,0.352,3,0.06,4,0.06,5,0.054,10,0.138,11,0.556,18,0.444,19,0.01,20,0.767,21,1.648,22,1.261,23,0.498,34,0.158,35,0.477,36,0.054,39,1.457,40,1.176,46,2.664,47,0.005,48,0.005,58,1.598,64,1.4,66,3.625,67,3.625,68,4.411,69,3.625,70,3.987,88,4.037,134,3.285,154,3.378,155,3.378,158,4.411,159,4.839,160,3.641,163,3.373,166,3.679,176,2.082,185,3.679,227,4.839,248,2.098,293,0.836,321,3.837,322,4.092,323,3.625,324,4.054,345,3.244,389,3.825,391,1.866,410,2.217,423,3.851,435,1.208,456,2.059,460,2.395,462,2.395,466,2.307,470,3.444,473,2.082,474,1.514,475,2.901,476,1.514,481,1.323,482,2.711,483,3.784,503,0.947,566,2.217,596,2.595,600,2.079,616,2.595,963,4.576,977,1.964,1007,2.711,1206,1.964,1329,2.39,1385,2.843,1395,3.168,1612,2.621,1613,2.993,1614,2.993,1615,2.993,1616,2.993,1617,2.993,1618,4.933,1619,4.529,1620,2.973,1621,2.973,1622,4.529,1623,2.973,1624,2.973,1625,3.994,1626,2.973,1627,2.973,1628,2.973,1629,2.973,1630,4.529,1631,2.973,1632,2.973,1633,2.973,1634,4.529,1635,2.973,1636,4.529,1637,2.973,1638,4.529,1639,2.973,1640,2.973,1641,2.973,1642,2.973,1643,5.31,1644,2.621,1645,2.621,1646,2.973,1647,2.973,1648,2.39,1649,2.621,1650,2.217,1651,2.973]],["title/classes/PostAnalyticResposneDto.html",[0,0.232,311,3.252]],["body/classes/PostAnalyticResposneDto.html",[0,0.332,2,0.885,3,0.094,4,0.094,5,0.084,10,0.215,11,0.764,18,0.437,19,0.009,20,0.581,23,0.504,34,0.094,36,0.084,47,0.006,48,0.006,59,3.722,90,6.208,134,4.214,248,2.121,311,4.647,313,6.917,336,6.208,338,6.208,340,6.208,342,6.208,346,6.208,486,4.68,489,2.13,616,4.929,1007,3.73,1395,5.265,1427,5.009,1429,4.086,1652,7.586,1653,4.086,1654,7.04,1655,7.855,1656,4.634,1657,4.634,1658,4.634,1659,4.634,1660,4.634,1661,6.231,1662,4.634,1663,4.634,1664,4.634,1665,4.634,1666,4.086,1667,4.634,1668,7.04,1669,6.231,1670,8.09,1671,5.494,1672,7.855]],["title/controllers/PostController.html",[238,1.674,1673,3.252]],["body/controllers/PostController.html",[0,0.085,3,0.032,4,0.032,5,0.094,10,0.074,12,1.005,13,0.405,18,0.367,19,0.01,20,0.717,23,0.422,28,1.005,29,0.978,30,1.111,34,0.129,36,0.029,40,0.612,47,0.003,48,0.003,58,1.228,64,1.081,70,1.562,80,0.708,88,3.119,89,1.711,169,3.709,238,0.611,240,0.578,242,0.875,246,4.866,247,4.455,248,1.779,251,4.542,252,4.481,253,0.841,254,3.879,255,0.875,256,4.065,257,0.351,258,0.782,259,0.911,260,0.875,263,1.441,265,0.81,266,3.925,269,3.876,273,2.737,275,3.709,276,4.019,277,3.925,278,3.856,308,0.875,312,1.403,323,1.801,329,0.756,330,1.497,503,1.519,504,4.867,506,3.856,511,1.279,515,2.191,524,3.709,525,1.279,526,3.149,527,0.782,528,0.875,551,1.279,554,2.191,596,2.427,691,1.403,692,2.404,693,1.403,694,1.279,833,1.051,880,3.16,887,3.16,898,1.187,900,3.16,942,2.875,943,2.875,1606,1.403,1673,2.033,1674,1.403,1675,3.576,1676,2.726,1677,3.576,1678,2.726,1679,2.726,1680,2.726,1681,2.726,1682,3.576,1683,3.576,1684,2.726,1685,2.726,1686,2.726,1687,2.726,1688,2.726,1689,2.726,1690,1.591,1691,1.591,1692,1.591,1693,3.576,1694,1.591,1695,6.568,1696,1.591,1697,4.237,1698,1.591,1699,2.726,1700,1.591,1701,1.591,1702,1.591,1703,1.591,1704,1.591,1705,1.591,1706,2.726,1707,1.591,1708,4.237,1709,1.591,1710,1.591,1711,1.591,1712,1.591,1713,1.591,1714,2.726,1715,1.591,1716,1.591,1717,2.726,1718,4.237,1719,1.591,1720,2.726,1721,1.591,1722,1.591,1723,1.591,1724,4.237,1725,1.591,1726,1.591,1727,1.591,1728,2.726,1729,1.591,1730,1.591,1731,3.736,1732,1.591,1733,1.591,1734,1.591,1735,1.591,1736,1.591,1737,1.591,1738,1.591,1739,2.404,1740,1.591,1741,1.591,1742,1.591,1743,1.591,1744,2.726,1745,1.591,1746,1.591,1747,2.667,1748,1.403,1749,1.591,1750,1.591,1751,1.591,1752,1.591,1753,1.591,1754,6.349,1755,7.015,1756,1.591,1757,5.862,1758,1.591,1759,1.591,1760,1.591,1761,1.591,1762,1.591,1763,1.591,1764,1.591,1765,2.726,1766,1.591,1767,1.591,1768,1.591,1769,1.591,1770,1.591,1771,1.591,1772,1.591,1773,1.591,1774,1.591,1775,1.591,1776,1.591,1777,1.591,1778,1.591,1779,1.591,1780,1.591,1781,1.591,1782,1.591,1783,1.591,1784,1.591,1785,1.591,1786,1.591,1787,1.591,1788,2.726,1789,2.726,1790,1.591,1791,1.591,1792,1.591,1793,1.591,1794,1.591,1795,1.591,1796,1.591,1797,1.591,1798,1.591,1799,1.591]],["title/modules/PostModule.html",[279,1.463,370,3.05]],["body/modules/PostModule.html",[0,0.294,3,0.112,4,0.112,5,0.1,19,0.009,34,0.179,36,0.1,40,1.009,47,0.007,48,0.007,58,1.219,88,3.557,166,3.692,240,2.537,257,1.219,279,2.343,281,2.456,282,3.109,285,3.317,286,2.621,287,2.621,289,3.433,290,2.712,291,2.005,293,1.552,295,2.712,296,4.436,370,6.027,410,4.115,740,5.208,907,4.865,1673,5.714,1747,6.688,1748,4.865,1800,4.865,1801,4.865,1802,4.865,1803,5.518,1804,5.518,1805,5.518,1806,5.518,1807,4.436]],["title/entities/PostReport.html",[389,2.397,456,1.463]],["body/entities/PostReport.html",[0,0.409,3,0.088,4,0.088,5,0.078,10,0.201,11,0.731,18,0.394,19,0.009,20,0.684,21,1.285,22,0.891,23,0.454,34,0.161,35,0.696,36,0.078,39,1.739,40,1.25,46,2.335,47,0.006,48,0.006,58,1.828,64,1.737,98,3.345,99,5.075,141,2.597,176,3.367,186,4.271,248,1.913,292,2.133,293,1.22,389,3.275,423,4.598,435,1.764,456,2.458,460,3.15,462,3.873,466,3.035,469,4.759,470,2.723,473,2.739,474,2.21,475,3.598,476,2.21,477,2.866,478,4.79,479,2.485,480,3.235,481,1.931,482,3.567,483,3.413,503,1.383,602,5.254,1385,3.739,1613,3.937,1614,3.937,1615,3.937,1616,3.937,1617,3.937,1650,3.235,1808,6.995,1809,3.488,1810,5.471,1811,6.001,1812,4.338,1813,4.338,1814,5.958,1815,4.338,1816,4.338,1817,4.338,1818,4.759,1819,4.444]],["title/controllers/ReportController.html",[238,1.674,1820,3.252]],["body/controllers/ReportController.html",[0,0.106,3,0.04,4,0.04,5,0.036,10,0.092,12,0.942,13,0.488,18,0.344,19,0.01,23,0.396,28,1.095,29,0.917,30,0.968,34,0.14,36,0.036,40,1.065,42,1.191,47,0.003,48,0.003,53,0.978,58,1.699,64,1.648,89,2.64,169,2.224,238,0.764,240,0.723,242,1.093,246,4.814,247,4.444,248,1.668,251,4.585,252,4.202,253,1.052,254,4.207,255,1.093,256,4.207,257,0.439,258,0.978,259,1.139,260,1.093,263,1.052,265,1.013,266,4.116,273,2.637,275,3.54,276,3.836,277,3.89,278,3.681,310,1.248,497,2.645,503,1.968,504,5.258,506,3.962,511,1.599,515,1.599,521,1.754,524,3.894,526,3.577,527,0.978,528,1.093,529,1.391,530,3.661,531,1.599,537,1.754,544,4.038,546,1.754,551,1.599,554,1.599,596,1.139,600,3.419,733,3.382,833,2.174,942,2.645,943,2.645,1105,1.599,1206,1.314,1695,6.602,1818,3.787,1819,3.646,1820,2.453,1821,1.754,1822,3.71,1823,3.71,1824,3.71,1825,2.901,1826,2.901,1827,3.71,1828,2.901,1829,2.901,1830,1.989,1831,5.694,1832,3.29,1833,1.989,1834,1.989,1835,3.93,1836,1.989,1837,1.989,1838,1.989,1839,1.989,1840,4.888,1841,1.989,1842,1.989,1843,3.29,1844,1.989,1845,1.989,1846,1.989,1847,1.989,1848,1.989,1849,1.989,1850,1.989,1851,4.604,1852,3.29,1853,1.989,1854,1.989,1855,1.989,1856,1.989,1857,1.989,1858,1.989,1859,1.989,1860,3.29,1861,4.207,1862,1.989,1863,2.779,1864,1.754,1865,1.989,1866,3.29,1867,6.696,1868,1.989,1869,3.29,1870,3.29,1871,1.989,1872,1.989,1873,1.989,1874,4.207,1875,4.207,1876,1.989,1877,3.29,1878,1.989,1879,1.989,1880,3.29,1881,1.754,1882,1.989,1883,1.754,1884,1.989,1885,1.989,1886,1.989,1887,1.989,1888,3.29,1889,1.989,1890,1.754,1891,1.989,1892,1.754]],["title/classes/ReportDto.html",[0,0.232,1851,3.252]],["body/classes/ReportDto.html",[0,0.388,2,1.126,3,0.12,4,0.12,5,0.107,10,0.273,11,0.893,18,0.374,19,0.009,20,0.679,23,0.431,34,0.148,36,0.107,40,1.052,47,0.007,48,0.007,58,1.608,64,2.015,99,5.889,186,4.956,248,1.814,480,4.398,486,4.533,489,2.711,503,1.88,586,4.398,675,5.429,889,5.091,897,4.124,1819,5.429,1851,5.429,1893,5.2,1894,7.28,1895,5.897,1896,5.897,1897,5.897,1898,5.897]],["title/modules/ReportModule.html",[279,1.463,371,3.05]],["body/modules/ReportModule.html",[0,0.299,3,0.114,4,0.114,5,0.102,19,0.009,34,0.179,36,0.102,40,1.02,47,0.007,48,0.007,58,1.559,240,2.564,257,1.239,279,2.368,281,2.498,282,3.142,285,3.353,286,2.666,287,2.666,289,3.47,290,2.759,291,2.039,292,2.759,293,1.579,295,2.759,371,5.96,389,3.88,391,4.429,392,3.522,395,4.043,396,3.707,1807,4.511,1820,5.758,1863,5.631,1864,4.948,1899,4.948,1900,4.948,1901,5.611,1902,6.223,1903,5.611,1904,5.611]],["title/injectables/ReportService.html",[297,1.086,1863,2.881]],["body/injectables/ReportService.html",[0,0.091,3,0.035,4,0.035,5,0.031,10,0.079,12,0.919,13,0.43,15,1.479,18,0.335,19,0.01,20,0.729,23,0.386,28,0.919,29,0.894,30,0.912,31,1.635,34,0.14,35,0.274,36,0.031,37,1.447,40,1.083,47,0.003,48,0.003,58,1.61,64,2.024,89,1.817,98,2.182,113,1.913,134,1.733,169,1.53,218,1.273,247,1.475,253,0.903,257,0.377,273,2.597,291,0.62,292,0.839,293,0.48,297,0.721,298,0.694,300,1.289,302,4.066,303,2.365,305,2.635,308,0.939,309,0.939,315,1.194,316,2.442,317,0.939,318,3.809,319,3.03,320,2.932,321,3.104,327,1.372,328,2.657,329,3.56,330,3.386,335,2.552,344,1.733,345,1.53,389,2.44,391,1.817,392,2.785,395,1.658,396,1.128,435,1.804,469,3.104,477,1.128,479,0.978,497,2.327,506,3.819,524,2.854,527,1.423,528,0.939,571,3.323,582,4.486,583,1.194,584,1.071,585,1.273,586,1.273,588,1.505,591,3.775,594,2.932,598,2.552,599,2.552,600,3.104,615,3.998,616,2.543,617,3.31,619,2.024,620,1.817,630,4.025,632,2.552,634,3.914,635,3.914,637,3.914,638,3.914,640,3.914,642,3.914,681,3.31,852,1.372,974,1.022,1173,1.273,1435,2.327,1556,2.552,1561,2.327,1564,2.552,1807,1.372,1810,3.568,1811,1.505,1818,4.232,1822,2.552,1823,2.552,1824,2.552,1825,2.552,1826,2.552,1827,2.552,1828,2.552,1829,2.552,1831,5.336,1863,1.913,1881,2.552,1883,2.552,1890,2.552,1892,2.552,1902,2.552,1905,1.505,1906,1.707,1907,3.323,1908,1.707,1909,2.895,1910,1.707,1911,1.707,1912,2.895,1913,1.707,1914,1.707,1915,1.707,1916,2.895,1917,1.707,1918,2.895,1919,1.707,1920,2.895,1921,1.707,1922,2.895,1923,1.707,1924,1.707,1925,1.707,1926,1.505,1927,2.895,1928,2.895,1929,3.323,1930,2.895,1931,3.768,1932,5.753,1933,4.438,1934,4.438,1935,2.895,1936,1.707,1937,2.895,1938,1.505,1939,1.707,1940,1.707,1941,2.895,1942,1.707,1943,2.895,1944,1.707,1945,1.707,1946,1.707,1947,1.707,1948,3.768,1949,1.707,1950,1.707,1951,2.895,1952,2.895,1953,1.707,1954,3.768,1955,2.895,1956,2.895,1957,1.707,1958,1.505,1959,1.707,1960,1.707,1961,1.707,1962,1.707,1963,1.707,1964,1.707,1965,1.707,1966,1.707,1967,1.707,1968,4.438,1969,2.895,1970,2.895,1971,2.895,1972,1.707,1973,1.707,1974,1.707,1975,1.707,1976,1.707,1977,4.438,1978,4.438,1979,2.895,1980,2.895,1981,2.895,1982,1.707,1983,1.707,1984,1.707,1985,1.707,1986,1.707,1987,1.707,1988,2.552,1989,2.895,1990,1.707,1991,1.707,1992,1.707,1993,2.552,1994,1.707,1995,1.707,1996,1.707,1997,2.895,1998,1.707,1999,1.707,2000,1.707,2001,1.707,2002,1.707,2003,2.895,2004,2.895,2005,2.895,2006,1.707,2007,1.707,2008,1.707,2009,1.707,2010,1.707,2011,1.707,2012,1.707,2013,1.707,2014,1.707,2015,1.707,2016,1.707,2017,1.707,2018,1.707,2019,1.707]],["title/guards/RolesGuard.html",[530,2.737,657,3.252]],["body/guards/RolesGuard.html",[0,0.293,3,0.112,4,0.112,5,0.099,8,1.545,10,0.254,12,0.98,13,1.033,18,0.358,19,0.009,23,0.412,28,0.98,29,0.954,30,0.794,34,0.163,36,0.099,40,0.794,47,0.007,48,0.007,53,2.7,257,1.213,265,2.797,273,2.336,297,1.734,300,2.445,310,3.446,318,3.2,344,3.287,529,3.841,530,4.369,1395,4.869,2020,5.491,2021,4.842,2022,8.038,2023,5.491,2024,8.475,2025,5.491,2026,6.962,2027,8.038,2028,5.491,2029,5.491,2030,4.842,2031,4.415,2032,6.962,2033,5.491,2034,5.491,2035,5.491,2036,5.491,2037,5.491,2038,5.491]],["title/entities/Scrapbook.html",[88,2.222,456,1.463]],["body/entities/Scrapbook.html",[0,0.414,3,0.091,4,0.091,5,0.081,10,0.208,11,0.749,18,0.412,19,0.009,20,0.748,23,0.475,34,0.158,35,0.721,36,0.081,39,1.766,40,1.279,46,2.615,47,0.006,48,0.006,58,1.771,64,1.77,66,4.582,69,4.582,70,4.595,88,3.961,176,2.807,248,1.998,293,1.266,343,5.386,423,4.668,435,1.829,456,2.496,460,2.378,462,3.229,466,3.111,473,2.807,474,2.292,475,3.229,476,2.292,481,2.003,482,2.693,483,3.499,503,1.434,596,4.261,878,3.617,1385,3.833,1613,4.035,1614,4.035,1615,4.035,1616,4.035,1617,4.035,1618,3.617,1643,4.91,1645,3.967,1650,3.355,2039,3.967,2040,4.498,2041,4.498,2042,4.498,2043,4.498,2044,6.107,2045,4.498,2046,4.498]],["title/classes/SendNotificationDto.html",[0,0.232,1283,3.05]],["body/classes/SendNotificationDto.html",[0,0.377,2,1.077,3,0.115,4,0.115,5,0.102,10,0.261,11,0.868,18,0.417,19,0.009,20,0.796,23,0.48,34,0.144,36,0.102,47,0.007,48,0.007,248,2.022,486,4.596,489,2.592,524,4.091,897,3.943,1283,4.951,1319,6.823,1330,6.221,1331,4.533,1332,4.533,1333,4.972,1427,5.691,1666,4.972,1671,6.242,2047,7.372,2048,4.972,2049,7.738,2050,7.738,2051,5.639,2052,7.079,2053,5.639,2054,5.639,2055,5.639]],["title/classes/SignUpUserDto.html",[0,0.232,672,3.252]],["body/classes/SignUpUserDto.html",[0,0.317,2,0.825,3,0.088,4,0.088,5,0.078,10,0.2,11,0.729,17,1.631,18,0.431,19,0.009,20,0.832,23,0.496,34,0.088,36,0.078,40,1.145,47,0.006,48,0.006,182,5.46,248,2.06,256,3.027,329,2.823,430,5.46,432,4.263,444,5.24,486,4.84,489,1.987,503,1.378,524,3.142,658,3.73,663,4.156,672,4.432,678,4.778,681,4.432,686,5.24,717,5.46,718,5.46,719,4.066,771,4.432,889,4.156,1007,3.558,1196,4.156,1272,5.24,1372,6.987,2056,7.486,2057,3.811,2058,5.24,2059,5.943,2060,5.943,2061,5.943,2062,5.943,2063,5.943,2064,5.24,2065,5.943,2066,5.989,2067,5.46,2068,5.46,2069,4.322,2070,4.322,2071,4.322,2072,5.989,2073,4.322,2074,4.322,2075,4.322,2076,4.322,2077,5.24,2078,4.322,2079,4.322,2080,3.811]],["title/injectables/StripeService.html",[297,1.086,2081,3.506]],["body/injectables/StripeService.html",[0,0.303,3,0.116,4,0.116,5,0.103,10,0.264,11,0.874,12,0.801,13,1.057,15,1.413,18,0.293,19,0.009,20,0.725,21,1.228,22,1.17,23,0.421,28,0.801,29,0.78,30,0.823,31,1.536,34,0.158,36,0.103,37,1.114,47,0.007,48,0.007,257,1.258,297,1.774,298,2.315,316,3.821,330,2.982,1494,6.741,1508,6.281,1509,6.281,1510,6.281,1511,5.726,1512,6.281,1516,6.281,1520,5.021,2081,5.726,2082,5.021,2083,7.123,2084,7.123,2085,5.694,2086,5.694,2087,5.694,2088,5.694]],["title/modules/TasksModule.html",[279,1.463,372,3.05]],["body/modules/TasksModule.html",[0,0.317,3,0.121,4,0.121,5,0.108,19,0.009,34,0.176,36,0.108,40,0.859,47,0.008,48,0.008,58,1.616,257,1.313,279,2.454,281,2.646,282,3.256,285,3.475,286,2.823,287,2.823,289,3.596,290,2.921,291,2.159,292,2.921,293,1.672,295,2.921,372,6.045,395,4.19,396,3.926,753,3.926,2089,5.24,2090,5.24,2091,6.045,2092,5.943,2093,5.943,2094,4.778]],["title/injectables/TasksService.html",[297,1.086,2091,3.05]],["body/injectables/TasksService.html",[0,0.214,3,0.081,4,0.081,5,0.073,10,0.186,12,0.564,13,0.837,15,1.445,18,0.206,19,0.01,23,0.419,28,0.564,29,0.549,30,0.943,34,0.168,35,0.643,36,0.073,37,0.784,40,0.579,47,0.006,48,0.006,58,1.245,153,3.222,163,3.586,248,1.625,257,0.885,291,1.456,292,1.97,293,1.127,297,1.405,298,1.629,300,2.51,302,4.596,303,3.539,305,4.562,309,2.203,315,2.803,316,3.207,317,2.203,318,1.842,330,1.678,395,2.296,396,2.648,413,3.222,445,6.242,479,2.296,503,1.277,596,2.296,658,3.539,910,4.205,974,2.399,977,2.648,978,2.989,1005,4.865,1051,3.534,1206,4.677,1244,3.222,1495,3.534,1561,3.222,1648,3.222,1739,3.534,1835,3.222,1907,5.753,1926,3.534,1929,3.534,1988,3.534,1993,3.534,2058,4.972,2091,3.943,2094,3.222,2095,3.534,2096,5.639,2097,5.639,2098,5.639,2099,5.639,2100,5.639,2101,5.639,2102,5.639,2103,5.639,2104,5.639,2105,5.639,2106,6.524,2107,6.524,2108,7.079,2109,4.008,2110,7.079,2111,4.008,2112,7.079,2113,7.079,2114,7.079,2115,7.079,2116,4.008,2117,6.524,2118,7.738,2119,6.524,2120,7.079,2121,4.008,2122,7.079,2123,4.008,2124,4.008,2125,3.222,2126,3.534,2127,4.008,2128,4.008,2129,3.534,2130,4.008,2131,4.008]],["title/classes/UpdateUserDateOfBirthDto.html",[0,0.232,2132,3.506]],["body/classes/UpdateUserDateOfBirthDto.html",[0,0.401,2,1.19,3,0.127,4,0.127,5,0.113,10,0.289,11,0.924,18,0.32,19,0.009,23,0.369,34,0.127,36,0.113,47,0.008,48,0.008,248,1.552,486,4.447,489,2.864,503,1.986,663,5.265,1007,5.031,1196,5.265,2067,6.504,2132,6.052,2133,6.638,2134,4.358,2135,6.052,2136,6.638,2137,5.009]],["title/classes/UpdateUserEmailDto.html",[0,0.232,2138,3.506]],["body/classes/UpdateUserEmailDto.html",[0,0.401,2,1.19,3,0.127,4,0.127,5,0.113,10,0.289,11,0.924,18,0.32,19,0.009,20,0.702,23,0.369,34,0.127,36,0.113,47,0.008,48,0.008,248,1.552,489,2.864,503,1.986,663,5.265,719,5.15,1196,5.265,2072,7.134,2134,4.358,2135,6.052,2137,5.009,2138,6.052,2139,6.638,2140,7.528]],["title/classes/UpdateUserPasseordDto.html",[0,0.232,2141,3.506]],["body/classes/UpdateUserPasseordDto.html",[0,0.39,2,1.138,3,0.121,4,0.121,5,0.108,10,0.276,11,0.899,18,0.408,19,0.009,20,0.807,23,0.469,34,0.121,36,0.108,47,0.008,48,0.008,248,1.976,432,4.979,486,4.671,489,2.739,2066,6.995,2134,4.167,2141,5.889,2142,7.297,2143,7.933,2144,7.326,2145,5.958,2146,5.958,2147,5.958,2148,5.958,2149,7.326]],["title/classes/UpdateUserPhoneNumberDto.html",[0,0.232,2150,3.506]],["body/classes/UpdateUserPhoneNumberDto.html",[0,0.401,2,1.19,3,0.127,4,0.127,5,0.113,10,0.289,11,0.924,18,0.32,19,0.009,20,0.702,23,0.369,34,0.127,36,0.113,47,0.008,48,0.008,248,1.552,489,2.864,503,1.986,663,5.265,1007,4.507,1196,5.265,2068,6.504,2077,6.638,2080,5.494,2134,4.358,2135,6.052,2136,6.638,2137,5.009,2150,6.052,2151,6.638]],["title/entities/User.html",[40,0.63,456,1.463]],["body/entities/User.html",[0,0.277,3,0.037,4,0.037,5,0.033,10,0.085,11,0.379,15,0.335,18,0.439,19,0.01,20,0.756,21,1.712,22,1.38,23,0.503,34,0.159,35,0.296,36,0.033,37,0.361,39,1.107,40,1.164,46,2.626,47,0.003,48,0.003,53,2.762,58,1.241,64,1.018,88,2.862,138,4.19,141,2.387,144,2.973,153,3.205,154,2.304,155,2.304,160,2.484,166,2.97,182,3.205,185,2.97,193,3.883,200,4.031,212,2.973,215,4.19,218,2.973,234,3.205,235,3.205,236,4.19,248,2.117,292,0.907,322,2.973,323,3.082,324,3.082,330,0.772,345,3.552,389,3.089,391,1.939,392,4.331,395,3.219,396,1.219,401,1.627,402,4.331,403,1.627,404,1.376,410,1.376,423,3.259,430,3.205,432,2.502,435,0.75,456,1.565,466,1.574,470,4.083,473,1.42,474,0.94,476,0.94,481,0.821,483,4.201,503,0.588,566,1.376,596,3.219,600,1.29,610,2.725,678,1.483,717,3.205,718,3.205,719,2.387,776,1.29,808,3.205,856,1.627,953,2.634,963,3.478,977,1.219,1007,2.792,1057,1.483,1059,1.627,1089,2.725,1125,3.205,1180,3.516,1189,2.725,1190,2.725,1202,2.725,1203,2.725,1206,3.712,1210,3.516,1329,1.483,1334,1.627,1354,3.516,1385,1.939,1395,3.262,1518,1.627,1526,3.516,1613,2.041,1614,2.041,1615,2.041,1616,2.041,1617,2.041,1618,5.986,1625,2.725,1643,6.143,1644,1.627,1648,1.483,1649,1.627,1731,3.516,1818,2.161,1835,3.205,1938,3.516,1958,3.516,2067,3.205,2068,3.205,2094,2.484,2129,3.516,2152,1.627,2153,3.987,2154,1.845,2155,3.09,2156,1.845,2157,3.09,2158,1.845,2159,3.09,2160,1.845,2161,3.09,2162,1.845,2163,3.09,2164,1.845,2165,1.845,2166,1.845,2167,1.845,2168,1.845,2169,1.845,2170,1.845,2171,1.845,2172,1.845,2173,3.987,2174,1.845,2175,1.845,2176,1.845,2177,1.845,2178,1.845,2179,3.09,2180,1.845,2181,1.845,2182,1.845,2183,1.845,2184,1.845,2185,1.845,2186,1.845,2187,1.845,2188,1.845,2189,3.09,2190,1.845,2191,3.09,2192,1.845,2193,3.09,2194,1.845,2195,1.845,2196,3.09,2197,1.845,2198,1.845,2199,1.845,2200,1.845,2201,3.987,2202,1.845,2203,1.845,2204,1.845,2205,1.845,2206,1.845,2207,1.845,2208,1.845,2209,1.845,2210,1.845,2211,1.845,2212,3.09,2213,1.845,2214,1.845,2215,1.845,2216,1.845,2217,1.845,2218,1.845,2219,1.845,2220,1.845,2221,1.845,2222,1.845,2223,1.845]],["title/entities/UserBan.html",[395,2.498,456,1.463]],["body/entities/UserBan.html",[0,0.419,3,0.094,4,0.094,5,0.084,10,0.215,11,0.765,18,0.404,19,0.009,20,0.703,21,1.345,22,0.954,23,0.465,34,0.153,35,0.745,36,0.084,39,1.789,40,1.255,46,2.58,47,0.006,48,0.006,64,1.798,98,3.464,127,6.214,129,6.214,141,2.779,176,2.868,248,1.958,293,1.306,395,3.575,423,4.729,435,1.887,456,2.528,460,2.455,462,3.299,466,3.178,470,2.914,473,2.868,474,2.365,475,3.299,476,2.365,479,2.66,481,2.067,503,1.48,733,3.733,1007,4.51,1385,3.916,1613,4.122,1614,4.122,1615,4.122,1616,4.122,1617,4.122,2125,3.733,2224,6.508,2225,4.094,2226,7.047,2227,6.239,2228,4.643,2229,4.643,2230,4.643,2231,4.643,2232,7.047,2233,4.643,2234,4.643,2235,4.643,2236,4.643]],["title/modules/UserModule.html",[279,1.463,373,2.881]],["body/modules/UserModule.html",[0,0.311,3,0.119,4,0.119,5,0.106,19,0.009,34,0.172,36,0.106,40,0.844,47,0.007,48,0.007,240,2.629,257,1.289,279,2.427,281,2.599,282,3.22,285,3.437,286,2.773,287,2.773,289,3.556,290,2.87,291,2.121,295,2.87,373,5.765,695,6.319,740,5.395,753,3.857,2237,5.148,2238,5.148,2239,5.148,2240,5.838,2241,6.932,2242,5.838,2243,5.838,2244,5.838]],["title/entities/UserReport.html",[392,2.737,456,1.463]],["body/entities/UserReport.html",[0,0.411,3,0.089,4,0.089,5,0.079,10,0.203,11,0.736,18,0.396,19,0.009,20,0.686,21,1.293,22,0.9,23,0.456,34,0.157,35,0.702,36,0.079,39,1.746,40,1.295,46,2.344,47,0.006,48,0.006,64,1.745,98,3.362,99,5.1,141,2.622,176,3.381,186,4.292,248,1.919,293,1.232,392,3.764,423,4.616,435,1.78,456,2.468,460,3.17,462,3.889,466,3.055,469,4.783,470,2.748,473,2.756,474,2.231,475,3.616,476,2.231,477,2.893,478,4.821,479,2.509,480,3.266,481,1.95,482,3.59,483,3.436,503,1.396,1385,3.764,1613,3.962,1614,3.962,1615,3.962,1616,3.962,1617,3.962,1650,3.266,1809,3.521,1810,5.498,1818,4.783,1819,4.472,2224,6.396,2245,6.838,2246,4.379,2247,4.379,2248,5.997,2249,4.379,2250,5.997,2251,4.379,2252,4.379]],["title/coverage.html",[2253,5.273]],["body/coverage.html",[0,0.476,1,1.845,5,0.042,6,2.023,7,2.436,18,0.118,19,0.009,39,0.545,40,0.332,42,1.374,47,0.004,48,0.004,49,1.845,50,2.023,54,1.845,55,2.023,58,0.507,83,1.845,84,2.023,85,1.845,86,2.023,88,1.169,94,1.845,95,2.023,109,1.845,110,2.023,117,1.845,118,2.023,121,1.845,122,2.023,123,1.845,124,2.023,132,1.845,133,2.023,136,1.845,137,2.023,139,1.845,140,2.023,142,1.845,143,2.023,151,1.845,152,2.023,156,1.845,157,2.023,161,1.845,162,2.023,163,5.003,164,1.845,165,2.023,166,1.213,172,1.845,173,2.023,174,1.845,175,2.023,177,1.845,178,2.023,180,1.845,181,2.023,183,1.845,184,2.023,185,1.213,191,1.845,192,2.023,193,1.261,198,1.845,199,2.023,200,1.261,210,1.845,211,2.023,213,1.845,214,2.023,216,1.845,217,2.023,219,1.845,220,2.023,225,1.845,226,2.023,229,1.845,230,2.023,232,1.845,233,2.023,238,2.839,239,1.711,241,2.023,258,1.128,261,1.516,297,2.047,299,2.023,311,1.711,313,1.845,330,0.961,374,1.605,375,1.516,379,1.845,389,1.261,392,1.44,395,1.315,402,1.44,426,6.214,451,2.023,456,2.528,457,2.023,473,1.055,484,1.605,485,2.023,490,1.711,491,2.023,506,1.09,527,2.282,530,1.44,532,1.516,568,2.023,582,1.374,584,1.44,646,1.711,647,2.023,657,1.711,662,1.711,672,1.711,695,1.605,697,1.44,738,1.605,748,1.711,754,2.023,776,1.605,792,2.023,799,2.023,809,1.711,810,2.023,820,1.516,841,2.023,870,2.023,880,1.711,881,2.023,882,2.972,887,1.711,888,2.023,900,1.711,901,2.023,902,2.023,909,2.023,929,1.845,932,1.711,933,2.023,937,1.516,948,2.023,977,1.516,978,4.653,979,2.023,981,1.845,1021,1.845,1032,2.023,1056,2.023,1066,1.711,1067,2.023,1106,1.516,1139,2.023,1140,2.023,1152,2.023,1225,2.023,1226,2.972,1229,2.023,1255,2.023,1256,2.023,1265,2.023,1267,2.023,1277,1.711,1278,2.023,1283,1.605,1291,1.44,1309,2.023,1328,1.845,1370,2.023,1373,1.711,1384,2.023,1393,1.711,1409,1.711,1411,2.023,1413,2.023,1441,1.711,1442,2.023,1467,1.516,1492,2.023,1612,2.023,1652,2.023,1653,2.023,1673,1.711,1674,2.023,1747,1.711,1808,2.023,1809,2.972,1820,1.711,1821,2.023,1851,1.711,1863,1.516,1893,2.023,1905,2.023,2021,2.023,2031,1.845,2039,2.023,2047,2.023,2048,2.023,2056,2.023,2057,2.023,2081,1.845,2082,2.023,2091,1.605,2095,2.023,2132,1.845,2133,2.023,2134,3.723,2138,1.845,2139,2.023,2141,1.845,2142,2.023,2150,1.845,2151,2.023,2152,2.023,2224,2.972,2225,2.023,2241,2.023,2253,2.023,2254,2.295,2255,2.295,2256,2.295,2257,8.703,2258,5.324,2259,4.643,2260,4.643,2261,2.023,2262,2.295,2263,3.697,2264,3.697,2265,7.234,2266,2.295,2267,5.148,2268,7.861,2269,2.023,2270,7.047,2271,2.023,2272,2.295,2273,2.295,2274,6.826,2275,3.26,2276,2.023,2277,2.023,2278,4.643,2279,3.697,2280,2.295,2281,3.697,2282,2.295,2283,2.295,2284,2.295,2285,2.295,2286,2.023,2287,2.295,2288,2.295,2289,2.295,2290,2.295,2291,2.295,2292,2.295,2293,2.295,2294,2.295,2295,2.023,2296,2.295,2297,2.295,2298,2.295,2299,2.295,2300,2.295,2301,2.295,2302,3.697,2303,2.295,2304,2.295,2305,2.295,2306,2.295,2307,4.643,2308,4.643,2309,2.295,2310,2.295,2311,2.295,2312,2.295,2313,2.023,2314,2.295]],["title/dependencies.html",[282,2.338,2315,3.2]],["body/dependencies.html",[0,0.384,19,0.01,35,0.929,47,0.007,48,0.007,257,1.28,263,3.063,282,2.579,291,2.105,380,5.109,413,4.658,489,2.663,665,4.321,668,4.321,694,4.658,742,4.658,744,3.828,927,5.109,980,5.789,1025,5.109,1234,6.298,1386,5.109,1494,4.658,2030,5.109,2316,8.428,2317,5.794,2318,5.794,2319,5.794,2320,5.794,2321,5.794,2322,5.794,2323,5.794,2324,5.794,2325,5.794,2326,4.658,2327,5.794,2328,5.794,2329,5.794,2330,5.794,2331,5.794,2332,5.794,2333,5.794,2334,5.794,2335,5.794,2336,5.794,2337,5.794,2338,5.794,2339,5.794,2340,5.794]],["title/miscellaneous/enumerations.html",[2341,2.397,2342,4.632]],["body/miscellaneous/enumerations.html",[10,0.207,14,1.711,19,0.009,22,1.891,47,0.006,48,0.006,53,2.991,70,3.485,113,4.568,114,3.336,126,4.891,138,4.537,141,3.642,186,3.818,215,4.537,236,4.537,237,5.364,316,2.991,477,4.019,586,4.537,1120,5.965,1148,4.891,1172,3.944,1199,6.543,1244,4.891,1330,4.891,1331,4.891,1332,4.891,1414,5.364,1436,5.364,1517,3.944,2125,4.891,2126,3.944,2326,4.891,2341,2.955,2342,3.944,2343,4.472,2344,8.006,2345,4.472,2346,4.472,2347,6.083,2348,6.083,2349,6.083,2350,4.472,2351,6.083,2352,6.083,2353,4.472,2354,4.472,2355,6.083,2356,4.472,2357,4.472,2358,6.083,2359,6.083,2360,6.083,2361,6.083,2362,6.083,2363,6.083,2364,6.083,2365,7.42,2366,4.472,2367,6.083,2368,6.083,2369,6.083,2370,4.472,2371,4.472,2372,4.472,2373,4.472,2374,4.472,2375,6.083,2376,6.083,2377,6.083,2378,6.083,2379,4.472]],["title/miscellaneous/functions.html",[2341,2.397,2380,4.632]],["body/miscellaneous/functions.html",[10,0.324,19,0.008,47,0.008,48,0.008,2276,6.176,2277,7.492,2341,4.628,2380,6.176,2381,7.004]],["title/index.html",[10,0.168,2382,3.628,2383,3.628]],["body/index.html",[19,0.008,47,0.008,48,0.008,658,4.423,2064,6.214,2384,7.047,2385,7.047,2386,7.047,2387,7.047]],["title/modules.html",[281,2.662]],["body/modules.html",[19,0.008,47,0.008,48,0.008,280,4.167,281,2.652,359,4.443,363,4.167,364,4.167,365,4.167,366,4.167,367,4.167,368,3.937,369,4.167,370,4.167,371,4.167,372,4.167,373,3.937,2388,9.092,2389,9.092,2390,9.092,2391,9.092]],["title/overview.html",[2392,5.273]],["body/overview.html",[2,0.769,19,0.009,47,0.006,48,0.006,240,1.464,261,4.322,280,5.228,281,1.793,282,2.519,283,3.552,284,3.552,285,2.689,286,1.914,287,1.914,298,1.638,359,6.784,360,3.552,361,3.552,362,3.552,363,5.228,364,5.973,365,5.228,366,5.228,367,5.228,368,5.26,369,5.568,370,5.421,371,5.228,372,5.228,373,5.26,374,4.575,375,4.688,435,1.638,532,4.322,561,3.552,562,3.552,657,3.004,695,5.568,697,4.997,734,3.552,735,3.552,736,3.552,738,4.575,820,4.322,835,3.552,836,3.552,937,4.322,944,3.552,945,3.552,974,3.388,1106,4.322,1133,3.552,1134,3.552,1291,4.997,1304,3.552,1305,3.552,1306,3.552,1409,3.004,1467,4.322,1486,3.552,1488,3.552,1511,3.239,1747,5.938,1800,3.552,1801,3.552,1802,3.552,1863,4.322,1899,3.552,1900,3.552,2089,3.552,2090,3.552,2091,4.575,2237,3.552,2238,3.552,2239,3.552,2261,3.552,2295,3.552,2392,3.552,2393,4.029,2394,4.029]],["title/properties.html",[11,0.644,2315,3.2]],["body/properties.html",[11,0.851,19,0.009,47,0.008,48,0.008,503,2.212,871,6.121,1036,6.121,2395,6.941,2396,6.941,2397,6.941]],["title/miscellaneous/variables.html",[421,4.223,2341,2.397]],["body/miscellaneous/variables.html",[10,0.243,18,0.385,19,0.009,20,0.49,21,1.881,22,1.792,36,0.095,42,4.899,47,0.007,48,0.007,53,2.583,73,2.496,330,2.2,379,6.02,421,4.224,504,4.248,748,5.048,910,3.919,978,3.919,980,6.357,981,6.02,1021,5.442,1246,4.633,1328,6.02,2031,5.442,2267,7.388,2269,5.968,2271,5.968,2275,4.633,2286,4.633,2313,5.968,2326,4.224,2341,3.472,2398,8.183,2399,5.254,2400,6.768,2401,5.254,2402,5.254,2403,5.254,2404,5.254,2405,5.254,2406,5.254,2407,5.254,2408,6.768,2409,5.254,2410,5.254,2411,5.254,2412,5.254,2413,5.254,2414,5.254,2415,5.254,2416,5.254,2417,5.254]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":163,"title":{},"body":{"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674544597118.html":{},"injectables/AnalyticsService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2395,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":2334,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":2324,"title":{},"body":{"dependencies.html":{}}}],["0.3.11",{"_index":2340,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2323,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":2330,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2268,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2278,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2304,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2258,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2274,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2257,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2291,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2292,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2281,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2290,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":974,"title":{},"body":{"injectables/FeedService.html":{},"injectables/NotificationService.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["1.0.0",{"_index":2332,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":2270,"title":{},"body":{"coverage.html":{}}}],["1/10",{"_index":2287,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":2308,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2260,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":2264,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":2296,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":2294,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":2262,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":929,"title":{},"body":{"injectables/EncryptionService.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["10.0.1",{"_index":2318,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":2265,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":1017,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["11",{"_index":1511,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{},"overview.html":{}}}],["11.4.1",{"_index":2327,"title":{},"body":{"dependencies.html":{}}}],["11.7.0",{"_index":2339,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":2261,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["12:00:00",{"_index":2104,"title":{},"body":{"injectables/TasksService.html":{}}}],["13",{"_index":2393,"title":{},"body":{"overview.html":{}}}],["14",{"_index":2293,"title":{},"body":{"coverage.html":{}}}],["14/20",{"_index":2310,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":1512,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["192.168.1.175",{"_index":1514,"title":{},"body":{"injectables/PaymentService.html":{}}}],["2.1.0",{"_index":2319,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":2317,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":2329,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":2321,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":2289,"title":{},"body":{"coverage.html":{}}}],["2/5",{"_index":2285,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2295,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["20/28",{"_index":2312,"title":{},"body":{"coverage.html":{}}}],["2022",{"_index":1510,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["24",{"_index":1015,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["25",{"_index":2263,"title":{},"body":{"coverage.html":{}}}],["27",{"_index":2300,"title":{},"body":{"coverage.html":{}}}],["2h",{"_index":2416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":2336,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":2266,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":2283,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":2259,"title":{},"body":{"coverage.html":{}}}],["4.0.1",{"_index":2331,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":2306,"title":{},"body":{"coverage.html":{}}}],["4/9",{"_index":2273,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":2284,"title":{},"body":{"coverage.html":{}}}],["43",{"_index":2297,"title":{},"body":{"coverage.html":{}}}],["44",{"_index":2272,"title":{},"body":{"coverage.html":{}}}],["450d",{"_index":147,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{}}}],["48",{"_index":2394,"title":{},"body":{"overview.html":{}}}],["4bf8",{"_index":148,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{}}}],["5/18",{"_index":2301,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":2280,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":2307,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1014,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["60",{"_index":1016,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["604800000",{"_index":1990,"title":{},"body":{"injectables/ReportService.html":{}}}],["6183a.appspot.com",{"_index":2406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6183a.appspot.com/o/avatars%2favatars%2fdefaultimage.png?alt=media&token=4482a7ff",{"_index":146,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{}}}],["66",{"_index":2288,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":2338,"title":{},"body":{"dependencies.html":{}}}],["7/10",{"_index":2303,"title":{},"body":{"coverage.html":{}}}],["7/16",{"_index":2298,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":2302,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":2279,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":2282,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":2305,"title":{},"body":{"coverage.html":{}}}],["8b4a1a6ebbd2",{"_index":150,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{}}}],["9.0.0",{"_index":2316,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":2320,"title":{},"body":{"dependencies.html":{}}}],["9.15.0",{"_index":2325,"title":{},"body":{"dependencies.html":{}}}],["a4d7",{"_index":149,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{}}}],["above",{"_index":2060,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["abstract",{"_index":798,"title":{},"body":{"classes/BaseEntity.html":{}}}],["acceess",{"_index":419,"title":{},"body":{"modules/AppModule.html":{}}}],["accept",{"_index":502,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["accepted",{"_index":1199,"title":{},"body":{"injectables/FollowService.html":{},"miscellaneous/enumerations.html":{}}}],["acceptfollow",{"_index":1068,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["acceptfollow(@request",{"_index":1115,"title":{},"body":{"controllers/FollowController.html":{}}}],["acceptfollow(id",{"_index":1157,"title":{},"body":{"injectables/FollowService.html":{}}}],["acceptfollow(req",{"_index":1076,"title":{},"body":{"controllers/FollowController.html":{}}}],["acceptfollow(requestid",{"_index":1117,"title":{},"body":{"controllers/FollowController.html":{}}}],["acceptpostappeal",{"_index":492,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["acceptpostappeal(@request",{"_index":545,"title":{},"body":{"controllers/AppealsController.html":{}}}],["acceptpostappeal(postid",{"_index":547,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["acceptpostappeal(req",{"_index":498,"title":{},"body":{"controllers/AppealsController.html":{}}}],["access",{"_index":669,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FirebaseStorageService.html":{}}}],["access_token",{"_index":789,"title":{},"body":{"injectables/AuthService.html":{}}}],["accessible",{"_index":661,"title":{},"body":{"controllers/AuthController.html":{}}}],["accessors",{"_index":1415,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["account",{"_index":2411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["action",{"_index":81,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{},"injectables/FirebaseStorageService.html":{}}}],["active",{"_index":126,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"injectables/PaymentService.html":{},"miscellaneous/enumerations.html":{}}}],["add",{"_index":41,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{}}}],["addcomment",{"_index":1675,"title":{},"body":{"controllers/PostController.html":{}}}],["addcomment(body",{"_index":1690,"title":{},"body":{"controllers/PostController.html":{}}}],["addcomment(req.user",{"_index":1787,"title":{},"body":{"controllers/PostController.html":{}}}],["addgroupby('postreport.reason",{"_index":2008,"title":{},"body":{"injectables/ReportService.html":{}}}],["addgroupby('userreport.reason",{"_index":2015,"title":{},"body":{"injectables/ReportService.html":{}}}],["addposttoscrapbook",{"_index":1676,"title":{},"body":{"controllers/PostController.html":{}}}],["addposttoscrapbook(@request",{"_index":1773,"title":{},"body":{"controllers/PostController.html":{}}}],["addposttoscrapbook(req",{"_index":1694,"title":{},"body":{"controllers/PostController.html":{}}}],["addposttoscrapbook(req.user",{"_index":1774,"title":{},"body":{"controllers/PostController.html":{}}}],["address",{"_index":182,"title":{},"body":{"classes/$npmConfigName1673337064308.html":{},"classes/SignUpUserDto.html":{},"entities/User.html":{}}}],["adds",{"_index":1699,"title":{},"body":{"controllers/PostController.html":{}}}],["admin",{"_index":2326,"title":{},"body":{"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["admin.service",{"_index":1022,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/NotificationService.html":{}}}],["admin.service.ts",{"_index":2267,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin/signup",{"_index":676,"title":{},"body":{"controllers/AuthController.html":{}}}],["aed",{"_index":1545,"title":{},"body":{"injectables/PaymentService.html":{}}}],["afterload",{"_index":1644,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["allows",{"_index":1053,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["already",{"_index":594,"title":{},"body":{"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/BlockService.html":{},"injectables/FollowService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["analytic",{"_index":313,"title":{},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{},"coverage.html":{}}}],["analytics",{"_index":243,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{}}}],["analytics.controller",{"_index":294,"title":{},"body":{"modules/AnalyticsModule.html":{}}}],["analytics.service",{"_index":262,"title":{},"body":{"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{}}}],["analyticscontroller",{"_index":239,"title":{"controllers/AnalyticsController.html":{}},"body":{"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"coverage.html":{}}}],["analyticsmodule",{"_index":280,"title":{"modules/AnalyticsModule.html":{}},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["analyticsservice",{"_index":261,"title":{"injectables/AnalyticsService.html":{}},"body":{"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"coverage.html":{},"overview.html":{}}}],["annotation",{"_index":2059,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["apis",{"_index":1693,"title":{},"body":{"controllers/PostController.html":{}}}],["apiversion",{"_index":1509,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["app",{"_index":446,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":377,"title":{},"body":{"modules/AppModule.html":{}}}],["appeal",{"_index":185,"title":{"entities/Appeal.html":{}},"body":{"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1674493007150.html":{},"modules/AppModule.html":{},"entities/Appeal.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"entities/User.html":{},"coverage.html":{}}}],["appeal.appealedby",{"_index":2155,"title":{},"body":{"entities/User.html":{}}}],["appeal.appealedpost",{"_index":1619,"title":{},"body":{"entities/Post.html":{}}}],["appeal.status",{"_index":593,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appeal/:postid",{"_index":543,"title":{},"body":{"controllers/AppealsController.html":{}}}],["appeal/:postid')@roles(role.admin",{"_index":500,"title":{},"body":{"controllers/AppealsController.html":{}}}],["appealcount",{"_index":340,"title":{},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["appealdto",{"_index":484,"title":{"classes/AppealDto.html":{}},"body":{"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"coverage.html":{}}}],["appealed",{"_index":595,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appealedby",{"_index":458,"title":{},"body":{"entities/Appeal.html":{}}}],["appealedbyid",{"_index":188,"title":{},"body":{"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["appealedpost",{"_index":459,"title":{},"body":{"entities/Appeal.html":{}}}],["appealedpostid",{"_index":187,"title":{},"body":{"classes/$npmConfigName1673770456243.html":{}}}],["appealpost",{"_index":569,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appealpost(req.user",{"_index":539,"title":{},"body":{"controllers/AppealsController.html":{}}}],["appealpost(user",{"_index":575,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appealrepository",{"_index":573,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appeals",{"_index":324,"title":{},"body":{"injectables/AnalyticsService.html":{},"entities/Appeal.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["appeals')@roles(role.admin",{"_index":508,"title":{},"body":{"controllers/AppealsController.html":{}}}],["appeals.controller",{"_index":564,"title":{},"body":{"modules/AppealsModule.html":{}}}],["appeals.items",{"_index":645,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appeals.itemscount",{"_index":644,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appeals.service",{"_index":533,"title":{},"body":{"controllers/AppealsController.html":{},"modules/AppealsModule.html":{}}}],["appeals/:postid",{"_index":512,"title":{},"body":{"controllers/AppealsController.html":{}}}],["appeals/entities/appeal.entity",{"_index":1649,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["appealsandcount[0",{"_index":641,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appealsandcount[0].length",{"_index":643,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appealscontroller",{"_index":490,"title":{"controllers/AppealsController.html":{}},"body":{"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"coverage.html":{}}}],["appealsmodule",{"_index":363,"title":{"modules/AppealsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules.html":{},"overview.html":{}}}],["appealsservice",{"_index":532,"title":{"injectables/AppealsService.html":{}},"body":{"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"coverage.html":{},"overview.html":{}}}],["application",{"_index":1614,"title":{},"body":{"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["appmodule",{"_index":359,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":374,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["asc",{"_index":1436,"title":{},"body":{"classes/PageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["async",{"_index":15,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["atlas",{"_index":2405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth",{"_index":648,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":747,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":260,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["auth.guard.ts",{"_index":1226,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":698,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/guards/jwt",{"_index":259,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["auth/guards/roles.guard",{"_index":531,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/NotificationController.html":{},"controllers/ReportController.html":{}}}],["authcontroller",{"_index":646,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":660,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["authguard",{"_index":1227,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":1228,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":1266,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":364,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":871,"title":{},"body":{"entities/Comment.html":{},"properties.html":{}}}],["authorid",{"_index":168,"title":{},"body":{"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["authorization",{"_index":1239,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authorized",{"_index":332,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["authservice",{"_index":697,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":437,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":444,"title":{},"body":{"modules/AppModule.html":{},"classes/SignUpUserDto.html":{}}}],["avatar",{"_index":1001,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["await",{"_index":37,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["b",{"_index":605,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{}}}],["back",{"_index":679,"title":{},"body":{"controllers/AuthController.html":{}}}],["badrequestexception",{"_index":308,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"injectables/ReportService.html":{}}}],["badrequestexception(\"user",{"_index":1555,"title":{},"body":{"injectables/PaymentService.html":{}}}],["badrequestexception('follow",{"_index":1193,"title":{},"body":{"injectables/FollowService.html":{}}}],["badrequestexception('invalid",{"_index":1769,"title":{},"body":{"controllers/PostController.html":{}}}],["badrequestexception('no",{"_index":1356,"title":{},"body":{"injectables/NotificationService.html":{}}}],["badrequestexception('post",{"_index":334,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{}}}],["badrequestexception('target",{"_index":1339,"title":{},"body":{"injectables/NotificationService.html":{}}}],["badrequestexception('this",{"_index":1198,"title":{},"body":{"injectables/FollowService.html":{}}}],["badrequestexception('user",{"_index":620,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["badrequestexception('you",{"_index":331,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/BlockService.html":{},"injectables/FollowService.html":{}}}],["badrequestexception(`webhook",{"_index":1570,"title":{},"body":{"injectables/PaymentService.html":{}}}],["ban",{"_index":1988,"title":{},"body":{"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["ban.entity",{"_index":396,"title":{},"body":{"modules/AppModule.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["ban.entity.ts",{"_index":2225,"title":{},"body":{"entities/UserBan.html":{},"coverage.html":{}}}],["ban.entity.ts:14",{"_index":2230,"title":{},"body":{"entities/UserBan.html":{}}}],["ban.entity.ts:17",{"_index":2233,"title":{},"body":{"entities/UserBan.html":{}}}],["ban.entity.ts:20",{"_index":2231,"title":{},"body":{"entities/UserBan.html":{}}}],["ban.entity.ts:23",{"_index":2229,"title":{},"body":{"entities/UserBan.html":{}}}],["ban.entity.ts:29",{"_index":2228,"title":{},"body":{"entities/UserBan.html":{}}}],["banned",{"_index":733,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReportController.html":{},"entities/UserBan.html":{}}}],["banneduser",{"_index":2226,"title":{},"body":{"entities/UserBan.html":{}}}],["banneduserid",{"_index":130,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["banpost",{"_index":1822,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["banpost(postid",{"_index":1883,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["banpost(req",{"_index":1830,"title":{},"body":{"controllers/ReportController.html":{}}}],["bans",{"_index":1835,"title":{},"body":{"controllers/ReportController.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["banstatus",{"_index":2125,"title":{},"body":{"injectables/TasksService.html":{},"entities/UserBan.html":{},"miscellaneous/enumerations.html":{}}}],["banstatus.active",{"_index":2232,"title":{},"body":{"entities/UserBan.html":{}}}],["banuser",{"_index":1823,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["banuser(req",{"_index":1836,"title":{},"body":{"controllers/ReportController.html":{}}}],["banuser(userid",{"_index":1881,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["base",{"_index":793,"title":{},"body":{"classes/BaseEntity.html":{}}}],["baseentity",{"_index":473,"title":{"classes/BaseEntity.html":{}},"body":{"entities/Appeal.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["basic",{"_index":237,"title":{},"body":{"classes/$npmConfigName1674544597118.html":{},"miscellaneous/enumerations.html":{}}}],["bcryptjs",{"_index":927,"title":{},"body":{"injectables/EncryptionService.html":{},"dependencies.html":{}}}],["before",{"_index":2216,"title":{},"body":{"entities/User.html":{}}}],["beforeinsert",{"_index":2201,"title":{},"body":{"entities/User.html":{}}}],["being",{"_index":1065,"title":{},"body":{"entities/Follow.html":{},"entities/FollowRequest.html":{}}}],["block",{"_index":193,"title":{"entities/Block.html":{}},"body":{"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1674493007150.html":{},"modules/AppModule.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/User.html":{},"coverage.html":{}}}],["block.blockeduser",{"_index":2159,"title":{},"body":{"entities/User.html":{}}}],["block.blockeduser.id",{"_index":855,"title":{},"body":{"injectables/BlockService.html":{}}}],["block.blockinguser",{"_index":2161,"title":{},"body":{"entities/User.html":{}}}],["block.controller",{"_index":838,"title":{},"body":{"modules/BlockModule.html":{}}}],["block.id",{"_index":868,"title":{},"body":{"injectables/BlockService.html":{}}}],["block.service",{"_index":821,"title":{},"body":{"controllers/BlockController.html":{},"modules/BlockModule.html":{}}}],["block/entities/block.entity",{"_index":2207,"title":{},"body":{"entities/User.html":{}}}],["blockcontroller",{"_index":809,"title":{"controllers/BlockController.html":{}},"body":{"controllers/BlockController.html":{},"modules/BlockModule.html":{},"coverage.html":{}}}],["blocked",{"_index":856,"title":{},"body":{"injectables/BlockService.html":{},"entities/User.html":{}}}],["blockedby",{"_index":2153,"title":{},"body":{"entities/User.html":{}}}],["blockeduser",{"_index":800,"title":{},"body":{"entities/Block.html":{}}}],["blockeduserid",{"_index":195,"title":{},"body":{"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["blockid",{"_index":866,"title":{},"body":{"injectables/BlockService.html":{}}}],["blockinguser",{"_index":801,"title":{},"body":{"entities/Block.html":{},"injectables/BlockService.html":{}}}],["blockinguser.blocks.map((block",{"_index":854,"title":{},"body":{"injectables/BlockService.html":{}}}],["blockinguserid",{"_index":194,"title":{},"body":{"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["blockmodule",{"_index":365,"title":{"modules/BlockModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BlockModule.html":{},"modules.html":{},"overview.html":{}}}],["blockrepository",{"_index":844,"title":{},"body":{"injectables/BlockService.html":{}}}],["blocks",{"_index":808,"title":{},"body":{"entities/Block.html":{},"injectables/BlockService.html":{},"entities/User.html":{}}}],["blocks.blockeduser",{"_index":853,"title":{},"body":{"injectables/BlockService.html":{}}}],["blockservice",{"_index":820,"title":{"injectables/BlockService.html":{}},"body":{"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"coverage.html":{},"overview.html":{}}}],["blockuser",{"_index":811,"title":{},"body":{"controllers/BlockController.html":{},"injectables/BlockService.html":{}}}],["blockuser(@request",{"_index":824,"title":{},"body":{"controllers/BlockController.html":{}}}],["blockuser(id",{"_index":826,"title":{},"body":{"controllers/BlockController.html":{},"injectables/BlockService.html":{}}}],["blockuser(req",{"_index":813,"title":{},"body":{"controllers/BlockController.html":{}}}],["body",{"_index":524,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{}}}],["body).then((post",{"_index":1771,"title":{},"body":{"controllers/PostController.html":{}}}],["body.confirmpassword",{"_index":709,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.id",{"_index":1930,"title":{},"body":{"injectables/ReportService.html":{}}}],["body.password",{"_index":708,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.postid",{"_index":590,"title":{},"body":{"injectables/AppealsService.html":{}}}],["body.reason",{"_index":1952,"title":{},"body":{"injectables/ReportService.html":{}}}],["body.text",{"_index":612,"title":{},"body":{"injectables/AppealsService.html":{}}}],["boilerplate",{"_index":2387,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":1395,"title":{},"body":{"classes/PageMetaDto.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"guards/RolesGuard.html":{},"entities/User.html":{}}}],["bootstrap",{"_index":2277,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":1894,"title":{},"body":{"classes/ReportDto.html":{}}}],["break",{"_index":1588,"title":{},"body":{"injectables/PaymentService.html":{}}}],["broadcast",{"_index":2362,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["browse",{"_index":2391,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2388,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1021,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bucket(process.env.firebase_bucket_name",{"_index":1045,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["bucket.file(`users/${userid}/avatars/${imageid}.png",{"_index":1033,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["bucket.file(`users/${userid}/avatars/${previousimageid}.png",{"_index":1042,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["bucket.file(`users/${userid}/posts/${postid}/${imageid}.png",{"_index":1048,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["bulk",{"_index":2096,"title":{},"body":{"injectables/TasksService.html":{}}}],["bullying",{"_index":2371,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["bullyingorharrassement",{"_index":2370,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["called",{"_index":767,"title":{},"body":{"injectables/AuthService.html":{}}}],["canactivate",{"_index":2022,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":2026,"title":{},"body":{"guards/RolesGuard.html":{}}}],["cancel_url",{"_index":1552,"title":{},"body":{"injectables/PaymentService.html":{}}}],["caption",{"_index":66,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"entities/Post.html":{},"entities/Scrapbook.html":{}}}],["card",{"_index":1542,"title":{},"body":{"injectables/PaymentService.html":{}}}],["cascade",{"_index":176,"title":{},"body":{"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{},"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["case",{"_index":1573,"title":{},"body":{"injectables/PaymentService.html":{}}}],["catch",{"_index":1569,"title":{},"body":{"injectables/PaymentService.html":{}}}],["catch((err",{"_index":275,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["celebrity",{"_index":2365,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["change",{"_index":52,"title":{},"body":{"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673337064308.html":{}}}],["check",{"_index":663,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["class",{"_index":0,"title":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/AppealDto.html":{},"classes/BaseEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PostAnalyticResposneDto.html":{},"classes/ReportDto.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/AppealDto.html":{},"classes/BaseEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PostAnalyticResposneDto.html":{},"classes/ReportDto.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"overview.html":{}}}],["cloud/storage",{"_index":1028,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["cluster_analyticsmodule",{"_index":283,"title":{},"body":{"modules/AnalyticsModule.html":{},"overview.html":{}}}],["cluster_analyticsmodule_providers",{"_index":284,"title":{},"body":{"modules/AnalyticsModule.html":{},"overview.html":{}}}],["cluster_appealsmodule",{"_index":561,"title":{},"body":{"modules/AppealsModule.html":{},"overview.html":{}}}],["cluster_appealsmodule_providers",{"_index":562,"title":{},"body":{"modules/AppealsModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":360,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":362,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":361,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":734,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":735,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":737,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":736,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_blockmodule",{"_index":835,"title":{},"body":{"modules/BlockModule.html":{},"overview.html":{}}}],["cluster_blockmodule_providers",{"_index":836,"title":{},"body":{"modules/BlockModule.html":{},"overview.html":{}}}],["cluster_feedmodule",{"_index":944,"title":{},"body":{"modules/FeedModule.html":{},"overview.html":{}}}],["cluster_feedmodule_providers",{"_index":945,"title":{},"body":{"modules/FeedModule.html":{},"overview.html":{}}}],["cluster_followmodule",{"_index":1133,"title":{},"body":{"modules/FollowModule.html":{},"overview.html":{}}}],["cluster_followmodule_providers",{"_index":1134,"title":{},"body":{"modules/FollowModule.html":{},"overview.html":{}}}],["cluster_notificationmodule",{"_index":1304,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_notificationmodule_exports",{"_index":1305,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_notificationmodule_providers",{"_index":1306,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_paymentmodule",{"_index":1486,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_paymentmodule_imports",{"_index":1487,"title":{},"body":{"modules/PaymentModule.html":{}}}],["cluster_paymentmodule_providers",{"_index":1488,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":1800,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_exports",{"_index":1802,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_providers",{"_index":1801,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_reportmodule",{"_index":1899,"title":{},"body":{"modules/ReportModule.html":{},"overview.html":{}}}],["cluster_reportmodule_providers",{"_index":1900,"title":{},"body":{"modules/ReportModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":2089,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_providers",{"_index":2090,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":2237,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2238,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":2239,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":46,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674544597118.html":{},"entities/Appeal.html":{},"entities/Comment.html":{},"entities/FollowRequest.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["column({default",{"_index":470,"title":{},"body":{"entities/Appeal.html":{},"entities/FollowRequest.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["column({select",{"_index":2182,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":1625,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["comment",{"_index":166,"title":{"entities/Comment.html":{}},"body":{"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1674493007150.html":{},"modules/AppModule.html":{},"entities/Comment.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"entities/User.html":{},"coverage.html":{}}}],["comment.author",{"_index":2163,"title":{},"body":{"entities/User.html":{}}}],["comment.entity",{"_index":1647,"title":{},"body":{"entities/Post.html":{}}}],["comment.post",{"_index":1622,"title":{},"body":{"entities/Post.html":{}}}],["commentcount",{"_index":336,"title":{},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["commentid",{"_index":1708,"title":{},"body":{"controllers/PostController.html":{}}}],["comments",{"_index":323,"title":{},"body":{"injectables/AnalyticsService.html":{},"entities/Comment.html":{},"injectables/FeedService.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"entities/User.html":{}}}],["comments.author",{"_index":965,"title":{},"body":{"injectables/FeedService.html":{}}}],["comments/:id",{"_index":1718,"title":{},"body":{"controllers/PostController.html":{}}}],["common/entities/base.entity",{"_index":474,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["common/services/encryption.service",{"_index":2202,"title":{},"body":{"entities/User.html":{}}}],["common/services/firebase",{"_index":1329,"title":{},"body":{"injectables/NotificationService.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["compare",{"_index":920,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["compare(password",{"_index":931,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["comparepasswords",{"_index":913,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["comparepasswords(password",{"_index":915,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["compares",{"_index":918,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["comparing",{"_index":912,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["concat(publicposts",{"_index":968,"title":{},"body":{"injectables/FeedService.html":{}}}],["config",{"_index":2407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configmodule",{"_index":378,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":415,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":379,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('database_host",{"_index":429,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_name",{"_index":434,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_password",{"_index":433,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_username",{"_index":431,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":680,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmpassword",{"_index":2066,"title":{},"body":{"classes/SignUpUserDto.html":{},"classes/UpdateUserPasseordDto.html":{}}}],["console.log(`unhandled",{"_index":1611,"title":{},"body":{"injectables/PaymentService.html":{}}}],["console.log(err",{"_index":1587,"title":{},"body":{"injectables/PaymentService.html":{}}}],["console.log(users.length",{"_index":2131,"title":{},"body":{"injectables/TasksService.html":{}}}],["const",{"_index":318,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{}}}],["constants",{"_index":749,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["constants/ban",{"_index":2234,"title":{},"body":{"entities/UserBan.html":{}}}],["constants/follow",{"_index":1151,"title":{},"body":{"entities/FollowRequest.html":{}}}],["constants/gender.enum",{"_index":2206,"title":{},"body":{"entities/User.html":{}}}],["constants/notification",{"_index":2208,"title":{},"body":{"entities/User.html":{}}}],["constants/report",{"_index":478,"title":{},"body":{"entities/Appeal.html":{},"entities/PostReport.html":{},"entities/UserReport.html":{}}}],["constants/role.enum",{"_index":2203,"title":{},"body":{"entities/User.html":{}}}],["constants/subscription",{"_index":2210,"title":{},"body":{"entities/User.html":{}}}],["constants/visibility.enum",{"_index":1645,"title":{},"body":{"entities/Post.html":{},"entities/Scrapbook.html":{}}}],["constraint",{"_index":75,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["constructor",{"_index":300,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{}}}],["constructor(appealrepository",{"_index":570,"title":{},"body":{"injectables/AppealsService.html":{}}}],["constructor(authservice",{"_index":1268,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(blockrepository",{"_index":842,"title":{},"body":{"injectables/BlockService.html":{}}}],["constructor(data",{"_index":1374,"title":{},"body":{"classes/PageDto.html":{}}}],["constructor(postrepository",{"_index":301,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/FeedService.html":{}}}],["constructor(private",{"_index":265,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"guards/RolesGuard.html":{}}}],["constructor(reflector",{"_index":2023,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(undefined",{"_index":1392,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["constructor(userreportsrepository",{"_index":1906,"title":{},"body":{"injectables/ReportService.html":{}}}],["constructor(userrepository",{"_index":1495,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/TasksService.html":{}}}],["constructor(usersrepository",{"_index":1153,"title":{},"body":{"injectables/FollowService.html":{},"injectables/NotificationService.html":{}}}],["constructor(usersservice",{"_index":757,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":2029,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":2035,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":2034,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":2036,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":238,"title":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"coverage.html":{}}}],["controller('analytics",{"_index":264,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["controller('appeals",{"_index":535,"title":{},"body":{"controllers/AppealsController.html":{}}}],["controller('auth",{"_index":704,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('block",{"_index":822,"title":{},"body":{"controllers/BlockController.html":{}}}],["controller('feed",{"_index":939,"title":{},"body":{"controllers/FeedController.html":{}}}],["controller('follow",{"_index":1108,"title":{},"body":{"controllers/FollowController.html":{}}}],["controller('notification",{"_index":1293,"title":{},"body":{"controllers/NotificationController.html":{}}}],["controller('payment",{"_index":1469,"title":{},"body":{"controllers/PaymentController.html":{}}}],["controller('post",{"_index":1749,"title":{},"body":{"controllers/PostController.html":{}}}],["controller('report",{"_index":1865,"title":{},"body":{"controllers/ReportController.html":{}}}],["controllers",{"_index":240,"title":{},"body":{"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"controllers/ReportController.html":{},"modules/ReportModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":2253,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":685,"title":{},"body":{"controllers/AuthController.html":{}}}],["create.dto",{"_index":1744,"title":{},"body":{"controllers/PostController.html":{}}}],["create.dto.ts",{"_index":882,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"coverage.html":{}}}],["create.dto.ts:11",{"_index":891,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["create.dto.ts:14",{"_index":893,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["create.dto.ts:17",{"_index":894,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["create.dto.ts:20",{"_index":892,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["create.dto.ts:24",{"_index":896,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["create.dto.ts:6",{"_index":884,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["create.dto.ts:9",{"_index":890,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["create.dts",{"_index":1746,"title":{},"body":{"controllers/PostController.html":{}}}],["create.dts.ts",{"_index":902,"title":{},"body":{"classes/CreateScrapBookDto.html":{},"coverage.html":{}}}],["create.dts.ts:10",{"_index":903,"title":{},"body":{"classes/CreateScrapBookDto.html":{}}}],["create.dts.ts:13",{"_index":905,"title":{},"body":{"classes/CreateScrapBookDto.html":{}}}],["create.dts.ts:16",{"_index":904,"title":{},"body":{"classes/CreateScrapBookDto.html":{}}}],["create.dts.ts:20",{"_index":906,"title":{},"body":{"classes/CreateScrapBookDto.html":{}}}],["createcommentdto",{"_index":880,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["createdat",{"_index":59,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"injectables/AnalyticsService.html":{},"classes/BaseEntity.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["createdatecolumn",{"_index":794,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createpost",{"_index":1677,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost(body",{"_index":1700,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost(req.user",{"_index":1756,"title":{},"body":{"controllers/PostController.html":{}}}],["createpostdto",{"_index":887,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["createquerybuilder",{"_index":630,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["creates",{"_index":1706,"title":{},"body":{"controllers/PostController.html":{}}}],["createscrapbook",{"_index":1678,"title":{},"body":{"controllers/PostController.html":{}}}],["createscrapbook(@body",{"_index":1767,"title":{},"body":{"controllers/PostController.html":{}}}],["createscrapbook(body",{"_index":1703,"title":{},"body":{"controllers/PostController.html":{}}}],["createscrapbookdto",{"_index":900,"title":{"classes/CreateScrapBookDto.html":{}},"body":{"classes/CreateScrapBookDto.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["creating",{"_index":675,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"classes/ReportDto.html":{}}}],["credential",{"_index":2402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["credential.cert(serviceaccount",{"_index":2403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cron",{"_index":2123,"title":{},"body":{"injectables/TasksService.html":{}}}],["cron(cronexpression.every_day_at_midnight",{"_index":2110,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronexpression",{"_index":2124,"title":{},"body":{"injectables/TasksService.html":{}}}],["currency",{"_index":1544,"title":{},"body":{"injectables/PaymentService.html":{}}}],["current_timestamp",{"_index":155,"title":{},"body":{"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["current_timestamp(6",{"_index":61,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{}}}],["currentpassword",{"_index":2143,"title":{},"body":{"classes/UpdateUserPasseordDto.html":{}}}],["customer",{"_index":1523,"title":{},"body":{"injectables/PaymentService.html":{}}}],["customer.id",{"_index":1535,"title":{},"body":{"injectables/PaymentService.html":{}}}],["customer.subscription.deleted",{"_index":1598,"title":{},"body":{"injectables/PaymentService.html":{}}}],["customerid",{"_index":2086,"title":{},"body":{"injectables/StripeService.html":{}}}],["data",{"_index":1372,"title":{},"body":{"classes/PageDto.html":{},"classes/SignUpUserDto.html":{}}}],["database",{"_index":423,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["database_host",{"_index":427,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":1007,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{}}}],["date(a.createdat).gettime",{"_index":970,"title":{},"body":{"injectables/FeedService.html":{}}}],["date(b.createdat).gettime",{"_index":969,"title":{},"body":{"injectables/FeedService.html":{}}}],["date(date.now",{"_index":1993,"title":{},"body":{"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["date(post.createdat",{"_index":348,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["date.now",{"_index":1013,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["date.parse(a.createdat))[0].reason",{"_index":607,"title":{},"body":{"injectables/AppealsService.html":{}}}],["date.parse(b.createdat",{"_index":606,"title":{},"body":{"injectables/AppealsService.html":{}}}],["dateofbirth",{"_index":2067,"title":{},"body":{"classes/SignUpUserDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"entities/User.html":{}}}],["dates",{"_index":2136,"title":{},"body":{"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["datetime",{"_index":128,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{}}}],["datetime(6",{"_index":60,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{}}}],["days",{"_index":1030,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["dbuser",{"_index":618,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/PaymentService.html":{}}}],["dbuser.appeals",{"_index":622,"title":{},"body":{"injectables/AppealsService.html":{}}}],["dbuser.appeals.length",{"_index":621,"title":{},"body":{"injectables/AppealsService.html":{}}}],["dbuser.email",{"_index":1529,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dbuser.firstname",{"_index":1530,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dbuser.followers.map((follow",{"_index":1207,"title":{},"body":{"injectables/FollowService.html":{}}}],["dbuser.following.map((follow",{"_index":1209,"title":{},"body":{"injectables/FollowService.html":{}}}],["dbuser.following.map((user",{"_index":966,"title":{},"body":{"injectables/FeedService.html":{}}}],["dbuser.followrequestsreceived",{"_index":1213,"title":{},"body":{"injectables/FollowService.html":{}}}],["dbuser.followrequestsreceived.length",{"_index":1212,"title":{},"body":{"injectables/FollowService.html":{}}}],["dbuser.followrequestssent",{"_index":1215,"title":{},"body":{"injectables/FollowService.html":{}}}],["dbuser.followrequestssent.length",{"_index":1214,"title":{},"body":{"injectables/FollowService.html":{}}}],["dbuser.hasstripaccount",{"_index":1527,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dbuser.lastname",{"_index":1531,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dbuser.phonenumber",{"_index":1533,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dbuser.stripecustomerid",{"_index":1543,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dbuser.subscriptionplan",{"_index":1525,"title":{},"body":{"injectables/PaymentService.html":{}}}],["decorator",{"_index":688,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators",{"_index":248,"title":{},"body":{"controllers/AnalyticsController.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"controllers/FeedController.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"controllers/NotificationController.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/TasksService.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["default",{"_index":21,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"entities/Appeal.html":{},"injectables/FirebaseStorageService.html":{},"entities/FollowRequest.html":{},"classes/PageOptionsDto.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"injectables/StripeService.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":23,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["delete",{"_index":80,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"controllers/PostController.html":{}}}],["delete('/:id",{"_index":1762,"title":{},"body":{"controllers/PostController.html":{}}}],["delete('comment/:id",{"_index":1790,"title":{},"body":{"controllers/PostController.html":{}}}],["delete('unfollow/:id",{"_index":1121,"title":{},"body":{"controllers/FollowController.html":{}}}],["delete('unlike/:id",{"_index":1796,"title":{},"body":{"controllers/PostController.html":{}}}],["deleteavatar",{"_index":983,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["deleteavatar(imageid",{"_index":990,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["deletecomment",{"_index":1679,"title":{},"body":{"controllers/PostController.html":{}}}],["deletecomment(@request",{"_index":1791,"title":{},"body":{"controllers/PostController.html":{}}}],["deletecomment(req",{"_index":1707,"title":{},"body":{"controllers/PostController.html":{}}}],["deletecomment(req.user",{"_index":1792,"title":{},"body":{"controllers/PostController.html":{}}}],["deletecustomer",{"_index":2083,"title":{},"body":{"injectables/StripeService.html":{}}}],["deletecustomer(customerid",{"_index":2084,"title":{},"body":{"injectables/StripeService.html":{}}}],["deletedcustomer",{"_index":1600,"title":{},"body":{"injectables/PaymentService.html":{}}}],["deletedcustomer.id",{"_index":1603,"title":{},"body":{"injectables/PaymentService.html":{}}}],["deleteduser",{"_index":1602,"title":{},"body":{"injectables/PaymentService.html":{}}}],["deleteduser.id",{"_index":1610,"title":{},"body":{"injectables/PaymentService.html":{}}}],["deletepostbyid",{"_index":1680,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepostbyid(@request",{"_index":1763,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepostbyid(req",{"_index":1711,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepostbyid(req.user",{"_index":1764,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepostimage",{"_index":984,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["deletepostimage(imageid",{"_index":992,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["deleteresult",{"_index":847,"title":{},"body":{"injectables/BlockService.html":{},"injectables/FollowService.html":{}}}],["dependencies",{"_index":282,"title":{"dependencies.html":{}},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":2367,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["description",{"_index":503,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/LocalStrategy.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"entities/Scrapbook.html":{},"classes/SignUpUserDto.html":{},"injectables/TasksService.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"properties.html":{}}}],["details",{"_index":773,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["documentation",{"_index":2254,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":1556,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["doing",{"_index":1064,"title":{},"body":{"entities/Follow.html":{},"entities/FollowRequest.html":{}}}],["done",{"_index":807,"title":{},"body":{"entities/Block.html":{}}}],["dotenv",{"_index":1516,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["dotenv.config",{"_index":1520,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["down",{"_index":16,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"injectables/AppealsService.html":{}}}],["down(queryrunner",{"_index":25,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{}}}],["drop",{"_index":45,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{}}}],["dto",{"_index":889,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"classes/PageOptionsDto.html":{},"classes/ReportDto.html":{},"classes/SignUpUserDto.html":{}}}],["dto/appeal.dto",{"_index":534,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["dto/comment",{"_index":1743,"title":{},"body":{"controllers/PostController.html":{}}}],["dto/post",{"_index":312,"title":{},"body":{"injectables/AnalyticsService.html":{},"controllers/PostController.html":{}}}],["dto/report.dto",{"_index":1862,"title":{},"body":{"controllers/ReportController.html":{}}}],["dto/scrapbook",{"_index":1745,"title":{},"body":{"controllers/PostController.html":{}}}],["dto/send",{"_index":1289,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["dto/user",{"_index":699,"title":{},"body":{"controllers/AuthController.html":{}}}],["each",{"_index":2061,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["email",{"_index":719,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PaymentService.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserEmailDto.html":{},"entities/User.html":{}}}],["emails",{"_index":2140,"title":{},"body":{"classes/UpdateUserEmailDto.html":{}}}],["emailtolowercase",{"_index":2218,"title":{},"body":{"entities/User.html":{}}}],["empty",{"_index":2065,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["encrypt",{"_index":439,"title":{},"body":{"modules/AppModule.html":{},"injectables/EncryptionService.html":{}}}],["encrypted",{"_index":925,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encrypting",{"_index":911,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryptionservice",{"_index":776,"title":{"injectables/EncryptionService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/EncryptionService.html":{},"entities/User.html":{},"coverage.html":{}}}],["encryptionservice().comparepasswords(pass",{"_index":783,"title":{},"body":{"injectables/AuthService.html":{}}}],["encryptionservice().encryptpassword(this.password",{"_index":2223,"title":{},"body":{"entities/User.html":{}}}],["encryptpassword",{"_index":914,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryptpassword(password",{"_index":922,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encrypts",{"_index":924,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["enddate",{"_index":129,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"entities/UserBan.html":{}}}],["endpointsecret",{"_index":1493,"title":{},"body":{"injectables/PaymentService.html":{}}}],["engine=innodb",{"_index":74,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{}}}],["ensure",{"_index":1243,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["entities",{"_index":435,"title":{},"body":{"modules/AppModule.html":{},"entities/Appeal.html":{},"injectables/AppealsService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"entities/Comment.html":{},"injectables/FeedService.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"injectables/ReportService.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"overview.html":{}}}],["entities/appeal.entity",{"_index":565,"title":{},"body":{"modules/AppealsModule.html":{},"injectables/AppealsService.html":{}}}],["entities/block.entity",{"_index":839,"title":{},"body":{"modules/BlockModule.html":{},"injectables/BlockService.html":{}}}],["entities/comment.entity",{"_index":1806,"title":{},"body":{"modules/PostModule.html":{}}}],["entities/follow",{"_index":1136,"title":{},"body":{"modules/FollowModule.html":{},"injectables/FollowService.html":{}}}],["entities/follow.entity",{"_index":1137,"title":{},"body":{"modules/FollowModule.html":{},"injectables/FollowService.html":{}}}],["entities/post",{"_index":1807,"title":{},"body":{"modules/PostModule.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{}}}],["entities/post.entity",{"_index":907,"title":{},"body":{"classes/CreateScrapBookDto.html":{},"modules/PostModule.html":{}}}],["entities/scrapbook.entity",{"_index":1805,"title":{},"body":{"modules/PostModule.html":{}}}],["entities/user",{"_index":1902,"title":{},"body":{"modules/ReportModule.html":{},"injectables/ReportService.html":{}}}],["entities/user.entity",{"_index":2243,"title":{},"body":{"modules/UserModule.html":{}}}],["entity",{"_index":456,"title":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}},"body":{"entities/Appeal.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["enumerations",{"_index":2342,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":420,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":1047,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/PaymentService.html":{}}}],["err.message",{"_index":278,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["error",{"_index":681,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"classes/SignUpUserDto.html":{}}}],["event",{"_index":1565,"title":{},"body":{"injectables/PaymentService.html":{}}}],["event.data.object",{"_index":1576,"title":{},"body":{"injectables/PaymentService.html":{}}}],["event.type",{"_index":1572,"title":{},"body":{"injectables/PaymentService.html":{}}}],["everyday",{"_index":2103,"title":{},"body":{"injectables/TasksService.html":{}}}],["excluding",{"_index":774,"title":{},"body":{"injectables/AuthService.html":{}}}],["execute",{"_index":1564,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["executed",{"_index":2215,"title":{},"body":{"entities/User.html":{}}}],["executioncontext",{"_index":2027,"title":{},"body":{"guards/RolesGuard.html":{}}}],["exist",{"_index":335,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/ReportService.html":{}}}],["exists",{"_index":714,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FirebaseStorageService.html":{}}}],["exists[0",{"_index":1052,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["expire",{"_index":2119,"title":{},"body":{"injectables/TasksService.html":{}}}],["expired",{"_index":1244,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"miscellaneous/enumerations.html":{}}}],["expires",{"_index":1038,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["expiresin",{"_index":2415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiry",{"_index":1006,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["expirydate",{"_index":982,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["export",{"_index":36,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"miscellaneous/variables.html":{}}}],["exports",{"_index":740,"title":{},"body":{"modules/AuthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":263,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"dependencies.html":{}}}],["extends",{"_index":481,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["extract",{"_index":1238,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":1233,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1242,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failcustomer",{"_index":1591,"title":{},"body":{"injectables/PaymentService.html":{}}}],["failcustomer.id",{"_index":1594,"title":{},"body":{"injectables/PaymentService.html":{}}}],["failed",{"_index":1481,"title":{},"body":{"controllers/PaymentController.html":{}}}],["failuser",{"_index":1593,"title":{},"body":{"injectables/PaymentService.html":{}}}],["failuser.id",{"_index":1597,"title":{},"body":{"injectables/PaymentService.html":{}}}],["false",{"_index":345,"title":{},"body":{"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppealsService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"injectables/ReportService.html":{},"entities/User.html":{}}}],["fcm",{"_index":1299,"title":{},"body":{"controllers/NotificationController.html":{}}}],["fcmtoken",{"_index":212,"title":{},"body":{"classes/$npmConfigName1674121256550.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"entities/User.html":{}}}],["fcmtokens",{"_index":1358,"title":{},"body":{"injectables/NotificationService.html":{}}}],["fcmtokens[0",{"_index":1361,"title":{},"body":{"injectables/NotificationService.html":{}}}],["feed",{"_index":934,"title":{},"body":{"controllers/FeedController.html":{}}}],["feed.controller",{"_index":947,"title":{},"body":{"modules/FeedModule.html":{}}}],["feed.service",{"_index":938,"title":{},"body":{"controllers/FeedController.html":{},"modules/FeedModule.html":{}}}],["feedcontroller",{"_index":932,"title":{"controllers/FeedController.html":{}},"body":{"controllers/FeedController.html":{},"modules/FeedModule.html":{},"coverage.html":{}}}],["feedmodule",{"_index":366,"title":{"modules/FeedModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{},"modules.html":{},"overview.html":{}}}],["feedservice",{"_index":937,"title":{"injectables/FeedService.html":{}},"body":{"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"coverage.html":{},"overview.html":{}}}],["female",{"_index":2359,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["field",{"_index":908,"title":{},"body":{"classes/CreateScrapBookDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["file(filename",{"_index":1046,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["file).then((post",{"_index":1753,"title":{},"body":{"controllers/PostController.html":{}}}],["file).then((user",{"_index":716,"title":{},"body":{"controllers/AuthController.html":{}}}],["file.getsignedurl(urloptions",{"_index":1040,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["file.save(image",{"_index":1034,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["fileinterceptor",{"_index":693,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["filename",{"_index":1043,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["filter((appeal",{"_index":624,"title":{},"body":{"injectables/AppealsService.html":{}}}],["filter((report",{"_index":603,"title":{},"body":{"injectables/AppealsService.html":{}}}],["find",{"_index":1929,"title":{},"body":{"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["findone",{"_index":1937,"title":{},"body":{"injectables/ReportService.html":{}}}],["firebase",{"_index":980,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["firebaseconfig",{"_index":2269,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebasestorageservice",{"_index":977,"title":{"injectables/FirebaseStorageService.html":{}},"body":{"injectables/FirebaseStorageService.html":{},"entities/Post.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"coverage.html":{}}}],["firstname",{"_index":717,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignUpUserDto.html":{},"entities/User.html":{}}}],["fk_22b6df8103e450a49ea0f9ff939",{"_index":107,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672417201262.html":{}}}],["fk_276779da446413a0d79598d4fbd",{"_index":170,"title":{},"body":{"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_288f29161615bed72435a2f90ee",{"_index":223,"title":{},"body":{"classes/$npmConfigName1674486373359.html":{}}}],["fk_2d3711064572aa0203cba01242b",{"_index":120,"title":{},"body":{"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_2e595b9d3a37e4b72879dddb5ce",{"_index":106,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_37ecc4fc7d8451a768b704c43e0",{"_index":209,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_43cb4b8de8f8cfa4fd2857369c2",{"_index":131,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_48750d6b207c4bd82d30c5dd722",{"_index":224,"title":{},"body":{"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_7b9ec6db412ee31e791072faf29",{"_index":189,"title":{},"body":{"classes/$npmConfigName1673770456243.html":{}}}],["fk_7c5f8647272441265e4c2e61071",{"_index":208,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_929dcdf74558612cc6166981480",{"_index":103,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_94a85bb16d24033a2afdd5df060",{"_index":171,"title":{},"body":{"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{}}}],["fk_a9aad25ed05e8f5a9dffbc17a4a",{"_index":115,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1673027114310.html":{}}}],["fk_aea779e51a733247bccf1f61d9a",{"_index":104,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{}}}],["fk_b5db9533f87c9bc26bbb8ed3d06",{"_index":91,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_baa1c30b37f90c0df2e56257f16",{"_index":92,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{}}}],["fk_c2159058051b11b2f9bb1b36983",{"_index":206,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_c9a8df2f7cbbae1cda940694409",{"_index":197,"title":{},"body":{"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_cac6c15bcaa655e31e86e48f59a",{"_index":196,"title":{},"body":{"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_f4a9d59861c87ba252ead40d84d",{"_index":207,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_f975f729d8f811976339e642f1b",{"_index":190,"title":{},"body":{"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_fb7ffd0860cbcc5cf22c96d3c05",{"_index":76,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["folder",{"_index":442,"title":{},"body":{"modules/AppModule.html":{}}}],["follow",{"_index":200,"title":{"entities/Follow.html":{}},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{},"modules/AppModule.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"injectables/FollowService.html":{},"entities/User.html":{},"coverage.html":{}}}],["follow.controller",{"_index":1138,"title":{},"body":{"modules/FollowModule.html":{}}}],["follow.followed",{"_index":1203,"title":{},"body":{"injectables/FollowService.html":{},"entities/User.html":{}}}],["follow.followed.id",{"_index":1188,"title":{},"body":{"injectables/FollowService.html":{}}}],["follow.followedby",{"_index":1202,"title":{},"body":{"injectables/FollowService.html":{},"entities/User.html":{}}}],["follow.id",{"_index":1223,"title":{},"body":{"injectables/FollowService.html":{}}}],["follow.service",{"_index":1107,"title":{},"body":{"controllers/FollowController.html":{},"modules/FollowModule.html":{}}}],["follow/:id",{"_index":1100,"title":{},"body":{"controllers/FollowController.html":{}}}],["follow/:requestid",{"_index":1079,"title":{},"body":{"controllers/FollowController.html":{}}}],["follow_request",{"_index":203,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["followcontroller",{"_index":1066,"title":{"controllers/FollowController.html":{}},"body":{"controllers/FollowController.html":{},"modules/FollowModule.html":{},"coverage.html":{}}}],["followed",{"_index":1057,"title":{},"body":{"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/User.html":{}}}],["followedby",{"_index":1058,"title":{},"body":{"entities/Follow.html":{}}}],["followedbyid",{"_index":201,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["followedid",{"_index":202,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["followers",{"_index":1125,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{},"entities/User.html":{}}}],["followers.followedby",{"_index":1205,"title":{},"body":{"injectables/FollowService.html":{}}}],["followid",{"_index":1221,"title":{},"body":{"injectables/FollowService.html":{}}}],["following",{"_index":953,"title":{},"body":{"injectables/FeedService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/User.html":{}}}],["following.followed",{"_index":1179,"title":{},"body":{"injectables/FollowService.html":{}}}],["following.followed.posts",{"_index":954,"title":{},"body":{"injectables/FeedService.html":{}}}],["following.followed.posts.comments",{"_index":958,"title":{},"body":{"injectables/FeedService.html":{}}}],["following.followed.posts.comments.author",{"_index":959,"title":{},"body":{"injectables/FeedService.html":{}}}],["following.followed.posts.likes",{"_index":956,"title":{},"body":{"injectables/FeedService.html":{}}}],["following.followed.posts.likes.likedby",{"_index":957,"title":{},"body":{"injectables/FeedService.html":{}}}],["following.followed.posts.postedby",{"_index":955,"title":{},"body":{"injectables/FeedService.html":{}}}],["followmodule",{"_index":367,"title":{"modules/FollowModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FollowModule.html":{},"modules.html":{},"overview.html":{}}}],["followrequest",{"_index":402,"title":{"entities/FollowRequest.html":{}},"body":{"modules/AppModule.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/User.html":{},"coverage.html":{}}}],["followrequest.requestedby",{"_index":1189,"title":{},"body":{"injectables/FollowService.html":{},"entities/User.html":{}}}],["followrequest.requesteduser",{"_index":1190,"title":{},"body":{"injectables/FollowService.html":{},"entities/User.html":{}}}],["followrequest.requesteduser.id",{"_index":1185,"title":{},"body":{"injectables/FollowService.html":{}}}],["followrequest.status",{"_index":1186,"title":{},"body":{"injectables/FollowService.html":{}}}],["followrequestsreceived",{"_index":1210,"title":{},"body":{"injectables/FollowService.html":{},"entities/User.html":{}}}],["followrequestsreceived.requestedby",{"_index":1211,"title":{},"body":{"injectables/FollowService.html":{}}}],["followrequestsrepository",{"_index":1154,"title":{},"body":{"injectables/FollowService.html":{}}}],["followrequestssent",{"_index":1180,"title":{},"body":{"injectables/FollowService.html":{},"entities/User.html":{}}}],["followrequestssent.requesteduser",{"_index":1181,"title":{},"body":{"injectables/FollowService.html":{}}}],["followservice",{"_index":1106,"title":{"injectables/FollowService.html":{}},"body":{"controllers/FollowController.html":{},"modules/FollowModule.html":{},"injectables/FollowService.html":{},"coverage.html":{},"overview.html":{}}}],["followsrepository",{"_index":1155,"title":{},"body":{"injectables/FollowService.html":{}}}],["followstatus",{"_index":1148,"title":{},"body":{"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"miscellaneous/enumerations.html":{}}}],["followstatus.accepted",{"_index":1197,"title":{},"body":{"injectables/FollowService.html":{}}}],["followstatus.pending",{"_index":1149,"title":{},"body":{"entities/FollowRequest.html":{},"injectables/FollowService.html":{}}}],["followstatus.rejected",{"_index":1200,"title":{},"body":{"injectables/FollowService.html":{}}}],["forbiddenexception",{"_index":690,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FollowService.html":{}}}],["forbiddenexception('user",{"_index":732,"title":{},"body":{"controllers/AuthController.html":{}}}],["forbiddenexception('you",{"_index":1194,"title":{},"body":{"injectables/FollowService.html":{}}}],["foreign",{"_index":77,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["found",{"_index":591,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/LocalStrategy.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["frontend",{"_index":1433,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["function",{"_index":1032,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"coverage.html":{}}}],["functions",{"_index":2380,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":138,"title":{},"body":{"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["gender.undefined",{"_index":2173,"title":{},"body":{"entities/User.html":{}}}],["generate",{"_index":1412,"title":{},"body":{"interfaces/PageMetaDtoParameters.html":{}}}],["get('/:id",{"_index":1760,"title":{},"body":{"controllers/PostController.html":{}}}],["get('cancel",{"_index":1456,"title":{},"body":{"controllers/PaymentController.html":{}}}],["get('follow",{"_index":1130,"title":{},"body":{"controllers/FollowController.html":{}}}],["get('followers",{"_index":1126,"title":{},"body":{"controllers/FollowController.html":{}}}],["get('following",{"_index":1128,"title":{},"body":{"controllers/FollowController.html":{}}}],["get('post",{"_index":551,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["get('post/:id",{"_index":267,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["get('reported",{"_index":1888,"title":{},"body":{"controllers/ReportController.html":{}}}],["get('scrapbook/:id",{"_index":1783,"title":{},"body":{"controllers/PostController.html":{}}}],["get('scrapbook/user",{"_index":1780,"title":{},"body":{"controllers/PostController.html":{}}}],["get('success",{"_index":1459,"title":{},"body":{"controllers/PaymentController.html":{}}}],["get('user",{"_index":554,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["getfeed",{"_index":949,"title":{},"body":{"injectables/FeedService.html":{}}}],["getfeed(req.user",{"_index":941,"title":{},"body":{"controllers/FeedController.html":{}}}],["getfeed(user",{"_index":951,"title":{},"body":{"injectables/FeedService.html":{}}}],["getfollowers",{"_index":1069,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["getfollowers(req",{"_index":1081,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowers(req.user",{"_index":1127,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowers(user",{"_index":1160,"title":{},"body":{"injectables/FollowService.html":{}}}],["getfollowing",{"_index":1070,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["getfollowing(req",{"_index":1084,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowing(req.user",{"_index":1129,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowing(user",{"_index":1162,"title":{},"body":{"injectables/FollowService.html":{}}}],["getfollowrequestsreceived",{"_index":1071,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["getfollowrequestsreceived(req",{"_index":1087,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowrequestsreceived(req.user",{"_index":1131,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowrequestsreceived(user",{"_index":1164,"title":{},"body":{"injectables/FollowService.html":{}}}],["getfollowrequestssent",{"_index":1072,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["getfollowrequestssent(req",{"_index":1092,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowrequestssent(req.user",{"_index":1132,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowrequestssent(user",{"_index":1166,"title":{},"body":{"injectables/FollowService.html":{}}}],["gethello",{"_index":452,"title":{},"body":{"injectables/AppService.html":{}}}],["getmanyandcount",{"_index":638,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["getmessaging",{"_index":2409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getpostanalytics",{"_index":244,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"controllers/FeedController.html":{}}}],["getpostanalytics(@request",{"_index":268,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/FeedController.html":{}}}],["getpostanalytics(req",{"_index":245,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/FeedController.html":{}}}],["getpostanalytics(req.user",{"_index":271,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["getpostanalytics(user",{"_index":306,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["getpostappeals",{"_index":493,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["getpostappeals(@request",{"_index":557,"title":{},"body":{"controllers/AppealsController.html":{}}}],["getpostappeals(pageoptionsdto",{"_index":558,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["getpostappeals(req",{"_index":505,"title":{},"body":{"controllers/AppealsController.html":{}}}],["getpostappealsbyid",{"_index":494,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["getpostappealsbyid(postid",{"_index":552,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["getpostappealsbyid(req",{"_index":510,"title":{},"body":{"controllers/AppealsController.html":{}}}],["getpostbyid",{"_index":1681,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostbyid(@param('id",{"_index":1761,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostbyid(id",{"_index":1714,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostcomments",{"_index":1682,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostcomments(postid",{"_index":1717,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostimagesignedurl",{"_index":985,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["getpostimagesignedurl(imageid",{"_index":994,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["getpostreports",{"_index":1824,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["getpostreports(id",{"_index":1912,"title":{},"body":{"injectables/ReportService.html":{}}}],["getpostreports(params.id",{"_index":1873,"title":{},"body":{"controllers/ReportController.html":{}}}],["getpostreports(req",{"_index":1839,"title":{},"body":{"controllers/ReportController.html":{}}}],["getrawone",{"_index":781,"title":{},"body":{"injectables/AuthService.html":{}}}],["getreportedposts",{"_index":1825,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["getreportedposts(@request",{"_index":1889,"title":{},"body":{"controllers/ReportController.html":{}}}],["getreportedposts(pageoptionsdto",{"_index":1890,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["getreportedposts(req",{"_index":1842,"title":{},"body":{"controllers/ReportController.html":{}}}],["getreportedusers",{"_index":1826,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["getreportedusers(@request",{"_index":1891,"title":{},"body":{"controllers/ReportController.html":{}}}],["getreportedusers(pageoptionsdto",{"_index":1892,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["getreportedusers(req",{"_index":1846,"title":{},"body":{"controllers/ReportController.html":{}}}],["getscrapbookbyid(params.id",{"_index":1785,"title":{},"body":{"controllers/PostController.html":{}}}],["getsignedurl",{"_index":986,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["getsignedurl(urloptions",{"_index":1055,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["getsignedurl(userid",{"_index":996,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["getsignedurlconfig",{"_index":1026,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["getskip",{"_index":1424,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["getstorage",{"_index":2412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getstorage().bucket",{"_index":2401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getting",{"_index":2382,"title":{"index.html":{}},"body":{}}],["getuserappeals",{"_index":495,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["getuserappeals(@request",{"_index":555,"title":{},"body":{"controllers/AppealsController.html":{}}}],["getuserappeals(req",{"_index":514,"title":{},"body":{"controllers/AppealsController.html":{}}}],["getuserappeals(req.user",{"_index":556,"title":{},"body":{"controllers/AppealsController.html":{}}}],["getuserappeals(user",{"_index":579,"title":{},"body":{"injectables/AppealsService.html":{}}}],["getusercomments",{"_index":1683,"title":{},"body":{"controllers/PostController.html":{}}}],["getusercomments(userid",{"_index":1720,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserposts",{"_index":1684,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserposts(@request",{"_index":1758,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserposts(req",{"_index":1722,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserposts(req.user",{"_index":1759,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserreports",{"_index":1827,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["getuserreports(id",{"_index":1916,"title":{},"body":{"injectables/ReportService.html":{}}}],["getuserreports(params.id",{"_index":1876,"title":{},"body":{"controllers/ReportController.html":{}}}],["getuserreports(req",{"_index":1849,"title":{},"body":{"controllers/ReportController.html":{}}}],["getuserscrapbook",{"_index":1685,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserscrapbook(@request",{"_index":1784,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserscrapbook(req",{"_index":1725,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserscrapbooks",{"_index":1686,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserscrapbooks(@request",{"_index":1781,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserscrapbooks(req",{"_index":1729,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserscrapbooks(req.user",{"_index":1782,"title":{},"body":{"controllers/PostController.html":{}}}],["given",{"_index":1728,"title":{},"body":{"controllers/PostController.html":{}}}],["go",{"_index":1609,"title":{},"body":{"injectables/PaymentService.html":{}}}],["google",{"_index":1027,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["group.enum",{"_index":1333,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SendNotificationDto.html":{}}}],["group.enum.ts",{"_index":2349,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["groupby('post.id",{"_index":2007,"title":{},"body":{"injectables/ReportService.html":{}}}],["groupby('user.id",{"_index":2014,"title":{},"body":{"injectables/ReportService.html":{}}}],["guard",{"_index":657,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AuthController.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":2020,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":701,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/local",{"_index":702,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/roles.guard",{"_index":703,"title":{},"body":{"controllers/AuthController.html":{}}}],["harrassement",{"_index":2372,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hash",{"_index":926,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["hash(password",{"_index":930,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["hashed",{"_index":919,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["hashedpassword",{"_index":916,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["hashpassword",{"_index":2221,"title":{},"body":{"entities/User.html":{}}}],["hasnextpage",{"_index":1388,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["haspreviouspage",{"_index":1389,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["hasstripaccount",{"_index":234,"title":{},"body":{"classes/$npmConfigName1674544597118.html":{},"injectables/PaymentService.html":{},"entities/User.html":{}}}],["header",{"_index":1240,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["hello",{"_index":454,"title":{},"body":{"injectables/AppService.html":{}}}],["hook",{"_index":2214,"title":{},"body":{"entities/User.html":{}}}],["host",{"_index":428,"title":{},"body":{"modules/AppModule.html":{}}}],["http://${this.url}:3000/payment/cancel?session_id={checkout_session_id",{"_index":1553,"title":{},"body":{"injectables/PaymentService.html":{}}}],["http://${this.url}:3000/payment/success?session_id={checkout_session_id",{"_index":1551,"title":{},"body":{"injectables/PaymentService.html":{}}}],["httpexception",{"_index":1924,"title":{},"body":{"injectables/ReportService.html":{}}}],["httpexception('post",{"_index":1931,"title":{},"body":{"injectables/ReportService.html":{}}}],["httpexception('report",{"_index":1997,"title":{},"body":{"injectables/ReportService.html":{}}}],["httpexception('user",{"_index":1955,"title":{},"body":{"injectables/ReportService.html":{}}}],["httpexception('you",{"_index":1933,"title":{},"body":{"injectables/ReportService.html":{}}}],["https://firebasestorage.googleapis.com/v0/b/atlas",{"_index":145,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{}}}],["https://github.com/narhakobyan/awesome",{"_index":2386,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":253,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["httpstatus.bad_request",{"_index":1934,"title":{},"body":{"injectables/ReportService.html":{}}}],["httpstatus.no_content",{"_index":1932,"title":{},"body":{"injectables/ReportService.html":{}}}],["id",{"_index":64,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"injectables/AnalyticsService.html":{},"entities/Appeal.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"injectables/ReportService.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["identifier",{"_index":2255,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":1245,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":1002,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["imageexpirydate",{"_index":159,"title":{},"body":{"classes/$npmConfigName1672832148243.html":{},"entities/Post.html":{}}}],["imageid",{"_index":158,"title":{},"body":{"classes/$npmConfigName1672832148243.html":{},"injectables/FirebaseStorageService.html":{},"entities/Post.html":{}}}],["images",{"_index":1029,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["imageurl",{"_index":67,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/CreatePostDto.html":{},"injectables/FirebaseStorageService.html":{},"entities/Post.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":34,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{}}}],["imports",{"_index":295,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["inappropriate",{"_index":2369,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["influencer",{"_index":2376,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["influencers",{"_index":2364,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{}}}],["inject",{"_index":450,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{}}}],["injectable",{"_index":297,"title":{"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{}},"body":{"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["injectables",{"_index":298,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["injectrepository",{"_index":309,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["injectrepository(appeal",{"_index":587,"title":{},"body":{"injectables/AppealsService.html":{}}}],["injectrepository(block",{"_index":848,"title":{},"body":{"injectables/BlockService.html":{}}}],["injectrepository(follow",{"_index":1175,"title":{},"body":{"injectables/FollowService.html":{}}}],["injectrepository(followrequest",{"_index":1174,"title":{},"body":{"injectables/FollowService.html":{}}}],["injectrepository(post",{"_index":315,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["injectrepository(postreport",{"_index":588,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["injectrepository(user",{"_index":317,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["injectrepository(userban",{"_index":1926,"title":{},"body":{"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["injectrepository(userreport",{"_index":1925,"title":{},"body":{"injectables/ReportService.html":{}}}],["input",{"_index":772,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["inserted",{"_index":2217,"title":{},"body":{"entities/User.html":{}}}],["int",{"_index":228,"title":{},"body":{"classes/$npmConfigName1674487677914.html":{}}}],["interact",{"_index":1613,"title":{},"body":{"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["interactioncount",{"_index":346,"title":{},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["interface",{"_index":1409,"title":{"interfaces/PageMetaDtoParameters.html":{}},"body":{"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":1410,"title":{},"body":{"interfaces/PageMetaDtoParameters.html":{}}}],["interval",{"_index":2114,"title":{},"body":{"injectables/TasksService.html":{}}}],["invalid",{"_index":775,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["invoice.payment_failed",{"_index":1589,"title":{},"body":{"injectables/PaymentService.html":{}}}],["invoice.payment_succeeded",{"_index":1574,"title":{},"body":{"injectables/PaymentService.html":{}}}],["invoicingwebhook",{"_index":1444,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["invoicingwebhook(@req",{"_index":1482,"title":{},"body":{"controllers/PaymentController.html":{}}}],["invoicingwebhook(req",{"_index":1449,"title":{},"body":{"controllers/PaymentController.html":{}}}],["invoicingwebhook(req.headers['stripe",{"_index":1483,"title":{},"body":{"controllers/PaymentController.html":{}}}],["invoicingwebhook(stripesignature",{"_index":1497,"title":{},"body":{"injectables/PaymentService.html":{}}}],["invoked",{"_index":1250,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["isarray",{"_index":1377,"title":{},"body":{"classes/PageDto.html":{}}}],["isbanned",{"_index":218,"title":{},"body":{"classes/$npmConfigName1674453163372.html":{},"controllers/AuthController.html":{},"injectables/ReportService.html":{},"entities/User.html":{}}}],["isboolean",{"_index":1668,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["isboolean()@isnotempty",{"_index":1661,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["isdate",{"_index":1669,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["isdate()@isnotempty",{"_index":1658,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["isemail",{"_index":2072,"title":{},"body":{"classes/SignUpUserDto.html":{},"classes/UpdateUserEmailDto.html":{}}}],["isenum",{"_index":897,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"classes/PageOptionsDto.html":{},"classes/ReportDto.html":{},"classes/SendNotificationDto.html":{}}}],["isenum(notificationtargetgroup",{"_index":2052,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["isenum(order",{"_index":1437,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(order)@isoptional",{"_index":1418,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(reportreason",{"_index":1898,"title":{},"body":{"classes/ReportDto.html":{}}}],["isenum(reportreason)@isnotempty",{"_index":1896,"title":{},"body":{"classes/ReportDto.html":{}}}],["isenum(visibility",{"_index":899,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{}}}],["isenum(visibility)@isnotempty",{"_index":895,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{}}}],["isfollowing",{"_index":1220,"title":{},"body":{"injectables/FollowService.html":{}}}],["isint",{"_index":1426,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isint()@min(1)@isoptional",{"_index":1420,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isint()@min(1)@max(50)@isoptional",{"_index":1422,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isnotempty",{"_index":486,"title":{},"body":{"classes/AppealDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"classes/PostAnalyticResposneDto.html":{},"classes/ReportDto.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserPasseordDto.html":{}}}],["isnotempty()@maxlength(100",{"_index":883,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["isnumber",{"_index":1670,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["isnumber()@min(0)@isnotempty",{"_index":1655,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["isoptional",{"_index":1427,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/PostAnalyticResposneDto.html":{},"classes/SendNotificationDto.html":{}}}],["isoptional()@isuuid",{"_index":1666,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{},"classes/SendNotificationDto.html":{}}}],["ispartofscrapbook",{"_index":342,"title":{},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["isphonenumber",{"_index":2080,"title":{},"body":{"classes/SignUpUserDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["isphonenumber('ae",{"_index":2077,"title":{},"body":{"classes/SignUpUserDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["istakendown",{"_index":134,"title":{},"body":{"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672833410692.html":{},"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"injectables/ReportService.html":{}}}],["isuserbanned",{"_index":755,"title":{},"body":{"injectables/AuthService.html":{}}}],["isuserbanned(user",{"_index":762,"title":{},"body":{"injectables/AuthService.html":{}}}],["isuuid",{"_index":1671,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{},"classes/SendNotificationDto.html":{}}}],["itemcount",{"_index":615,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"injectables/ReportService.html":{}}}],["items",{"_index":640,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["itemscount",{"_index":642,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["itself",{"_index":677,"title":{},"body":{"controllers/AuthController.html":{}}}],["json",{"_index":721,"title":{},"body":{"controllers/AuthController.html":{}}}],["json.parse(process.env?.firebase_private_key",{"_index":2410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt",{"_index":668,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":258,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"coverage.html":{}}}],["jwtconfig",{"_index":748,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig.secret",{"_index":1249,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":1241,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":741,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register(jwtconfig",{"_index":752,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":758,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":738,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":73,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{},"miscellaneous/variables.html":{}}}],["lastname",{"_index":718,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignUpUserDto.html":{},"entities/User.html":{}}}],["leftjoinandselect('appeal.appealedby",{"_index":633,"title":{},"body":{"injectables/AppealsService.html":{}}}],["leftjoinandselect('appeal.appealedpost",{"_index":631,"title":{},"body":{"injectables/AppealsService.html":{}}}],["leftjoinandselect('post.postedby",{"_index":632,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["leftjoinandselect('postreport.reportedby",{"_index":1971,"title":{},"body":{"injectables/ReportService.html":{}}}],["leftjoinandselect('postreport.reportedpost",{"_index":1970,"title":{},"body":{"injectables/ReportService.html":{}}}],["leftjoinandselect('userreport.reportedby",{"_index":1981,"title":{},"body":{"injectables/ReportService.html":{}}}],["leftjoinandselect('userreport.reporteduser",{"_index":1980,"title":{},"body":{"injectables/ReportService.html":{}}}],["lessthan",{"_index":2127,"title":{},"body":{"injectables/TasksService.html":{}}}],["lessthan(tomorrow",{"_index":2130,"title":{},"body":{"injectables/TasksService.html":{}}}],["license",{"_index":2396,"title":{},"body":{"properties.html":{}}}],["like.entity",{"_index":410,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"entities/User.html":{}}}],["like.entity.ts",{"_index":1256,"title":{},"body":{"entities/Like.html":{},"coverage.html":{}}}],["like.entity.ts:14",{"_index":1263,"title":{},"body":{"entities/Like.html":{}}}],["like.entity.ts:20",{"_index":1261,"title":{},"body":{"entities/Like.html":{}}}],["like.entity.ts:9",{"_index":1259,"title":{},"body":{"entities/Like.html":{}}}],["like.likedby",{"_index":2179,"title":{},"body":{"entities/User.html":{}}}],["like.likedpost",{"_index":1630,"title":{},"body":{"entities/Post.html":{}}}],["likecount",{"_index":1654,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["liked",{"_index":1264,"title":{},"body":{"entities/Like.html":{}}}],["likedby",{"_index":1257,"title":{},"body":{"entities/Like.html":{}}}],["likedbyid",{"_index":222,"title":{},"body":{"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["likedpost",{"_index":1258,"title":{},"body":{"entities/Like.html":{}}}],["likedpostid",{"_index":221,"title":{},"body":{"classes/$npmConfigName1674486373359.html":{}}}],["likepost",{"_index":1687,"title":{},"body":{"controllers/PostController.html":{}}}],["likepost(@request",{"_index":1794,"title":{},"body":{"controllers/PostController.html":{}}}],["likepost(req",{"_index":1733,"title":{},"body":{"controllers/PostController.html":{}}}],["likepost(req.user",{"_index":1795,"title":{},"body":{"controllers/PostController.html":{}}}],["likes",{"_index":963,"title":{},"body":{"injectables/FeedService.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["likes.likedby",{"_index":964,"title":{},"body":{"injectables/FeedService.html":{}}}],["likescount",{"_index":227,"title":{},"body":{"classes/$npmConfigName1674487677914.html":{},"entities/Post.html":{}}}],["line_items",{"_index":1546,"title":{},"body":{"injectables/PaymentService.html":{}}}],["list",{"_index":1387,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["local",{"_index":665,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":662,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":375,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["location",{"_index":69,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"entities/Post.html":{},"entities/Scrapbook.html":{}}}],["login",{"_index":656,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(user",{"_index":764,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuser",{"_index":649,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(@request",{"_index":729,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(req",{"_index":652,"title":{},"body":{"controllers/AuthController.html":{}}}],["longer",{"_index":1195,"title":{},"body":{"injectables/FollowService.html":{}}}],["longtext",{"_index":160,"title":{},"body":{"classes/$npmConfigName1672832148243.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["lot",{"_index":2099,"title":{},"body":{"injectables/TasksService.html":{}}}],["made",{"_index":879,"title":{},"body":{"entities/Comment.html":{}}}],["make",{"_index":2212,"title":{},"body":{"entities/User.html":{}}}],["male",{"_index":2358,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["many",{"_index":483,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserReport.html":{}}}],["manytoone",{"_index":475,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["manytoone(undefined",{"_index":460,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["map((appeal",{"_index":623,"title":{},"body":{"injectables/AppealsService.html":{}}}],["match",{"_index":712,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EncryptionService.html":{}}}],["matching",{"_index":48,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.itemcount",{"_index":1406,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["max",{"_index":1428,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["max(50",{"_index":1440,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["maxlength",{"_index":885,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["maxlength(100",{"_index":886,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["message",{"_index":277,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["message.dto",{"_index":1290,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["message.dto.ts",{"_index":2048,"title":{},"body":{"classes/SendNotificationDto.html":{},"coverage.html":{}}}],["message.dto.ts:12",{"_index":2053,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["message.dto.ts:16",{"_index":2054,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["message.dto.ts:6",{"_index":2055,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["message.dto.ts:9",{"_index":2051,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["messaging",{"_index":1328,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["messaging.send(payload",{"_index":1362,"title":{},"body":{"injectables/NotificationService.html":{}}}],["messaging.sendmulticast(payload",{"_index":1364,"title":{},"body":{"injectables/NotificationService.html":{}}}],["meta",{"_index":1373,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{}}}],["meta.dto",{"_index":583,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"classes/PageDto.html":{},"injectables/ReportService.html":{}}}],["meta.dto.ts",{"_index":1384,"title":{},"body":{"classes/PageMetaDto.html":{},"coverage.html":{}}}],["meta.dto.ts:10",{"_index":1399,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:11",{"_index":1396,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:12",{"_index":1394,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:7",{"_index":1398,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:8",{"_index":1400,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:9",{"_index":1397,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["metadata",{"_index":1386,"title":{},"body":{"classes/PageMetaDto.html":{},"dependencies.html":{}}}],["method",{"_index":766,"title":{},"body":{"injectables/AuthService.html":{}}}],["methods",{"_index":13,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{}}}],["migrationinterface",{"_index":9,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{}}}],["migrations",{"_index":440,"title":{},"body":{"modules/AppModule.html":{}}}],["migrations/*{.ts,.js",{"_index":443,"title":{},"body":{"modules/AppModule.html":{}}}],["migrations/1672082558971",{"_index":6,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"coverage.html":{}}}],["migrations/1672082713679",{"_index":50,"title":{},"body":{"classes/$npmConfigName1672082713679.html":{},"coverage.html":{}}}],["migrations/1672133224744",{"_index":55,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"coverage.html":{}}}],["migrations/1672166137042",{"_index":84,"title":{},"body":{"classes/$npmConfigName1672166137042.html":{},"coverage.html":{}}}],["migrations/1672251740346",{"_index":86,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{},"coverage.html":{}}}],["migrations/1672388811259",{"_index":95,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"coverage.html":{}}}],["migrations/1672399737695",{"_index":110,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{},"coverage.html":{}}}],["migrations/1672417201262",{"_index":118,"title":{},"body":{"classes/$npmConfigName1672417201262.html":{},"coverage.html":{}}}],["migrations/1672417384470",{"_index":122,"title":{},"body":{"classes/$npmConfigName1672417384470.html":{},"coverage.html":{}}}],["migrations/1672576067204",{"_index":124,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"coverage.html":{}}}],["migrations/1672585305519",{"_index":133,"title":{},"body":{"classes/$npmConfigName1672585305519.html":{},"coverage.html":{}}}],["migrations/1672600378154",{"_index":137,"title":{},"body":{"classes/$npmConfigName1672600378154.html":{},"coverage.html":{}}}],["migrations/1672678196724",{"_index":140,"title":{},"body":{"classes/$npmConfigName1672678196724.html":{},"coverage.html":{}}}],["migrations/1672744437528",{"_index":143,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"coverage.html":{}}}],["migrations/1672760070076",{"_index":152,"title":{},"body":{"classes/$npmConfigName1672760070076.html":{},"coverage.html":{}}}],["migrations/1672832148243",{"_index":157,"title":{},"body":{"classes/$npmConfigName1672832148243.html":{},"coverage.html":{}}}],["migrations/1672833410692",{"_index":162,"title":{},"body":{"classes/$npmConfigName1672833410692.html":{},"coverage.html":{}}}],["migrations/1673022319464",{"_index":165,"title":{},"body":{"classes/$npmConfigName1673022319464.html":{},"coverage.html":{}}}],["migrations/1673025398979",{"_index":173,"title":{},"body":{"classes/$npmConfigName1673025398979.html":{},"coverage.html":{}}}],["migrations/1673027114310",{"_index":175,"title":{},"body":{"classes/$npmConfigName1673027114310.html":{},"coverage.html":{}}}],["migrations/1673177373733",{"_index":178,"title":{},"body":{"classes/$npmConfigName1673177373733.html":{},"coverage.html":{}}}],["migrations/1673337064308",{"_index":181,"title":{},"body":{"classes/$npmConfigName1673337064308.html":{},"coverage.html":{}}}],["migrations/1673770456243",{"_index":184,"title":{},"body":{"classes/$npmConfigName1673770456243.html":{},"coverage.html":{}}}],["migrations/1673847605869",{"_index":192,"title":{},"body":{"classes/$npmConfigName1673847605869.html":{},"coverage.html":{}}}],["migrations/1673974513613",{"_index":199,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"coverage.html":{}}}],["migrations/1674121256550",{"_index":211,"title":{},"body":{"classes/$npmConfigName1674121256550.html":{},"coverage.html":{}}}],["migrations/1674198387677",{"_index":214,"title":{},"body":{"classes/$npmConfigName1674198387677.html":{},"coverage.html":{}}}],["migrations/1674453163372",{"_index":217,"title":{},"body":{"classes/$npmConfigName1674453163372.html":{},"coverage.html":{}}}],["migrations/1674486373359",{"_index":220,"title":{},"body":{"classes/$npmConfigName1674486373359.html":{},"coverage.html":{}}}],["migrations/1674487677914",{"_index":226,"title":{},"body":{"classes/$npmConfigName1674487677914.html":{},"coverage.html":{}}}],["migrations/1674493007150",{"_index":230,"title":{},"body":{"classes/$npmConfigName1674493007150.html":{},"coverage.html":{}}}],["migrations/1674544597118",{"_index":233,"title":{},"body":{"classes/$npmConfigName1674544597118.html":{},"coverage.html":{}}}],["migrationsrun",{"_index":449,"title":{},"body":{"modules/AppModule.html":{}}}],["migrationstablename",{"_index":441,"title":{},"body":{"modules/AppModule.html":{}}}],["millisecondsinaweek",{"_index":1989,"title":{},"body":{"injectables/ReportService.html":{}}}],["min",{"_index":1429,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["min(0",{"_index":1672,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["min(1",{"_index":1438,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["minlength",{"_index":2148,"title":{},"body":{"classes/UpdateUserPasseordDto.html":{}}}],["minlength(8",{"_index":2149,"title":{},"body":{"classes/UpdateUserPasseordDto.html":{}}}],["minlength(8)@isnotempty",{"_index":2144,"title":{},"body":{"classes/UpdateUserPasseordDto.html":{}}}],["miscellaneous",{"_index":2341,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1540,"title":{},"body":{"injectables/PaymentService.html":{}}}],["module",{"_index":279,"title":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":281,"title":{"modules.html":{}},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/analytics/analytics.module",{"_index":407,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/appeals/appeals.module",{"_index":398,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/appeals/entities/appeal.entity",{"_index":397,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth/auth.module",{"_index":383,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth/strategies/local.strategy",{"_index":384,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/block/block.module",{"_index":399,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/block/entities/block.entity",{"_index":400,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/feed/feed.module",{"_index":408,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/follow/entities/follow",{"_index":403,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{}}}],["modules/follow/entities/follow.entity",{"_index":401,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{}}}],["modules/follow/follow.module",{"_index":405,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/notification/notification.module",{"_index":406,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/payment/payment.module",{"_index":411,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/post/entities/comment.entity",{"_index":388,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/post/entities/post",{"_index":409,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/post/entities/post.entity",{"_index":386,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/post/entities/scrapbook.entity",{"_index":387,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/post/post.module",{"_index":385,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/report/entities/post",{"_index":390,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/report/entities/user",{"_index":393,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/report/report.module",{"_index":394,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/tasks/tasks.module",{"_index":414,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/entities/user.entity",{"_index":382,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/user.module",{"_index":381,"title":{},"body":{"modules/AppModule.html":{}}}],["multiple",{"_index":2235,"title":{},"body":{"entities/UserBan.html":{}}}],["mysql",{"_index":425,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql2",{"_index":2328,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":12,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{}}}],["need",{"_index":1615,"title":{},"body":{"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["needed",{"_index":448,"title":{},"body":{"modules/AppModule.html":{}}}],["nest",{"_index":2064,"title":{},"body":{"classes/SignUpUserDto.html":{},"index.html":{}}}],["nestjs/common",{"_index":257,"title":{},"body":{"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"controllers/ReportController.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/common/decorators",{"_index":1105,"title":{},"body":{"controllers/FollowController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{}}}],["nestjs/config",{"_index":380,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2030,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":742,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":744,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":694,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":413,"title":{},"body":{"modules/AppModule.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":291,"title":{},"body":{"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"modules/FollowModule.html":{},"injectables/FollowService.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm/dist/typeorm.module",{"_index":745,"title":{},"body":{"modules/AuthModule.html":{}}}],["new",{"_index":330,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newappeal",{"_index":589,"title":{},"body":{"injectables/AppealsService.html":{}}}],["newappeal.appealedby",{"_index":609,"title":{},"body":{"injectables/AppealsService.html":{}}}],["newappeal.appealedpost",{"_index":608,"title":{},"body":{"injectables/AppealsService.html":{}}}],["newappeal.reportreason",{"_index":613,"title":{},"body":{"injectables/AppealsService.html":{}}}],["newappeal.text",{"_index":611,"title":{},"body":{"injectables/AppealsService.html":{}}}],["newban",{"_index":1987,"title":{},"body":{"injectables/ReportService.html":{}}}],["newban.banneduser",{"_index":1991,"title":{},"body":{"injectables/ReportService.html":{}}}],["newban.enddate",{"_index":1994,"title":{},"body":{"injectables/ReportService.html":{}}}],["newban.startdate",{"_index":1992,"title":{},"body":{"injectables/ReportService.html":{}}}],["newblock",{"_index":857,"title":{},"body":{"injectables/BlockService.html":{}}}],["newblock.blockeduser",{"_index":858,"title":{},"body":{"injectables/BlockService.html":{}}}],["newblock.blockinguser",{"_index":859,"title":{},"body":{"injectables/BlockService.html":{}}}],["newreport",{"_index":1927,"title":{},"body":{"injectables/ReportService.html":{}}}],["newreport.reason",{"_index":1951,"title":{},"body":{"injectables/ReportService.html":{}}}],["newreport.reportedby",{"_index":1928,"title":{},"body":{"injectables/ReportService.html":{}}}],["newreport.reportedpost",{"_index":1950,"title":{},"body":{"injectables/ReportService.html":{}}}],["newreport.reporteduser",{"_index":1966,"title":{},"body":{"injectables/ReportService.html":{}}}],["newuser",{"_index":1522,"title":{},"body":{"injectables/PaymentService.html":{}}}],["none",{"_index":2360,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["not(notificationpreference.none",{"_index":1368,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notfoundexception",{"_index":1515,"title":{},"body":{"injectables/PaymentService.html":{}}}],["notfoundexception('user",{"_index":1521,"title":{},"body":{"injectables/PaymentService.html":{}}}],["notification",{"_index":1279,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["notification.controller",{"_index":1308,"title":{},"body":{"modules/NotificationModule.html":{}}}],["notification.service",{"_index":1292,"title":{},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{}}}],["notification/notification.module",{"_index":1490,"title":{},"body":{"modules/PaymentModule.html":{}}}],["notification/notification.service",{"_index":1519,"title":{},"body":{"injectables/PaymentService.html":{}}}],["notificationcontroller",{"_index":1277,"title":{"controllers/NotificationController.html":{}},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"coverage.html":{}}}],["notificationmodule",{"_index":368,"title":{"modules/NotificationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules.html":{},"overview.html":{}}}],["notificationpreference",{"_index":215,"title":{},"body":{"classes/$npmConfigName1674198387677.html":{},"injectables/NotificationService.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["notificationpreference.all",{"_index":1354,"title":{},"body":{"injectables/NotificationService.html":{},"entities/User.html":{}}}],["notificationpreference.broadcast",{"_index":1366,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationpreference.selectedgroup",{"_index":1353,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationservice",{"_index":1291,"title":{"injectables/NotificationService.html":{}},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"coverage.html":{},"overview.html":{}}}],["notificationtargetgroup",{"_index":1330,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SendNotificationDto.html":{},"miscellaneous/enumerations.html":{}}}],["notificationtargetgroup.all",{"_index":1344,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationtargetgroup.celebrity",{"_index":1346,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationtargetgroup.influencers",{"_index":1348,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationtargetgroup.singleuser",{"_index":1337,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notified",{"_index":1357,"title":{},"body":{"injectables/NotificationService.html":{}}}],["now",{"_index":1031,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["npm_config_name.ts",{"_index":7,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"coverage.html":{}}}],["npm_config_name.ts:10",{"_index":27,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674487677914.html":{}}}],["npm_config_name.ts:11",{"_index":56,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1673025398979.html":{}}}],["npm_config_name.ts:12",{"_index":51,"title":{},"body":{"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674544597118.html":{}}}],["npm_config_name.ts:13",{"_index":87,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1673027114310.html":{}}}],["npm_config_name.ts:14",{"_index":111,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{}}}],["npm_config_name.ts:15",{"_index":179,"title":{},"body":{"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673974513613.html":{}}}],["npm_config_name.ts:17",{"_index":96,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{}}}],["npm_config_name.ts:39",{"_index":231,"title":{},"body":{"classes/$npmConfigName1674493007150.html":{}}}],["npm_config_name.ts:4",{"_index":24,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{}}}],["npm_config_name.ts:6",{"_index":33,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{}}}],["npmconfigname1672082558971",{"_index":1,"title":{"classes/$npmConfigName1672082558971.html":{}},"body":{"classes/$npmConfigName1672082558971.html":{},"coverage.html":{}}}],["npmconfigname1672082713679",{"_index":49,"title":{"classes/$npmConfigName1672082713679.html":{}},"body":{"classes/$npmConfigName1672082713679.html":{},"coverage.html":{}}}],["npmconfigname1672133224744",{"_index":54,"title":{"classes/$npmConfigName1672133224744.html":{}},"body":{"classes/$npmConfigName1672133224744.html":{},"coverage.html":{}}}],["npmconfigname1672166137042",{"_index":83,"title":{"classes/$npmConfigName1672166137042.html":{}},"body":{"classes/$npmConfigName1672166137042.html":{},"coverage.html":{}}}],["npmconfigname1672251740346",{"_index":85,"title":{"classes/$npmConfigName1672251740346.html":{}},"body":{"classes/$npmConfigName1672251740346.html":{},"coverage.html":{}}}],["npmconfigname1672388811259",{"_index":94,"title":{"classes/$npmConfigName1672388811259.html":{}},"body":{"classes/$npmConfigName1672388811259.html":{},"coverage.html":{}}}],["npmconfigname1672399737695",{"_index":109,"title":{"classes/$npmConfigName1672399737695.html":{}},"body":{"classes/$npmConfigName1672399737695.html":{},"coverage.html":{}}}],["npmconfigname1672417201262",{"_index":117,"title":{"classes/$npmConfigName1672417201262.html":{}},"body":{"classes/$npmConfigName1672417201262.html":{},"coverage.html":{}}}],["npmconfigname1672417384470",{"_index":121,"title":{"classes/$npmConfigName1672417384470.html":{}},"body":{"classes/$npmConfigName1672417384470.html":{},"coverage.html":{}}}],["npmconfigname1672576067204",{"_index":123,"title":{"classes/$npmConfigName1672576067204.html":{}},"body":{"classes/$npmConfigName1672576067204.html":{},"coverage.html":{}}}],["npmconfigname1672585305519",{"_index":132,"title":{"classes/$npmConfigName1672585305519.html":{}},"body":{"classes/$npmConfigName1672585305519.html":{},"coverage.html":{}}}],["npmconfigname1672600378154",{"_index":136,"title":{"classes/$npmConfigName1672600378154.html":{}},"body":{"classes/$npmConfigName1672600378154.html":{},"coverage.html":{}}}],["npmconfigname1672678196724",{"_index":139,"title":{"classes/$npmConfigName1672678196724.html":{}},"body":{"classes/$npmConfigName1672678196724.html":{},"coverage.html":{}}}],["npmconfigname1672744437528",{"_index":142,"title":{"classes/$npmConfigName1672744437528.html":{}},"body":{"classes/$npmConfigName1672744437528.html":{},"coverage.html":{}}}],["npmconfigname1672760070076",{"_index":151,"title":{"classes/$npmConfigName1672760070076.html":{}},"body":{"classes/$npmConfigName1672760070076.html":{},"coverage.html":{}}}],["npmconfigname1672832148243",{"_index":156,"title":{"classes/$npmConfigName1672832148243.html":{}},"body":{"classes/$npmConfigName1672832148243.html":{},"coverage.html":{}}}],["npmconfigname1672833410692",{"_index":161,"title":{"classes/$npmConfigName1672833410692.html":{}},"body":{"classes/$npmConfigName1672833410692.html":{},"coverage.html":{}}}],["npmconfigname1673022319464",{"_index":164,"title":{"classes/$npmConfigName1673022319464.html":{}},"body":{"classes/$npmConfigName1673022319464.html":{},"coverage.html":{}}}],["npmconfigname1673025398979",{"_index":172,"title":{"classes/$npmConfigName1673025398979.html":{}},"body":{"classes/$npmConfigName1673025398979.html":{},"coverage.html":{}}}],["npmconfigname1673027114310",{"_index":174,"title":{"classes/$npmConfigName1673027114310.html":{}},"body":{"classes/$npmConfigName1673027114310.html":{},"coverage.html":{}}}],["npmconfigname1673177373733",{"_index":177,"title":{"classes/$npmConfigName1673177373733.html":{}},"body":{"classes/$npmConfigName1673177373733.html":{},"coverage.html":{}}}],["npmconfigname1673337064308",{"_index":180,"title":{"classes/$npmConfigName1673337064308.html":{}},"body":{"classes/$npmConfigName1673337064308.html":{},"coverage.html":{}}}],["npmconfigname1673770456243",{"_index":183,"title":{"classes/$npmConfigName1673770456243.html":{}},"body":{"classes/$npmConfigName1673770456243.html":{},"coverage.html":{}}}],["npmconfigname1673847605869",{"_index":191,"title":{"classes/$npmConfigName1673847605869.html":{}},"body":{"classes/$npmConfigName1673847605869.html":{},"coverage.html":{}}}],["npmconfigname1673974513613",{"_index":198,"title":{"classes/$npmConfigName1673974513613.html":{}},"body":{"classes/$npmConfigName1673974513613.html":{},"coverage.html":{}}}],["npmconfigname1674121256550",{"_index":210,"title":{"classes/$npmConfigName1674121256550.html":{}},"body":{"classes/$npmConfigName1674121256550.html":{},"coverage.html":{}}}],["npmconfigname1674198387677",{"_index":213,"title":{"classes/$npmConfigName1674198387677.html":{}},"body":{"classes/$npmConfigName1674198387677.html":{},"coverage.html":{}}}],["npmconfigname1674453163372",{"_index":216,"title":{"classes/$npmConfigName1674453163372.html":{}},"body":{"classes/$npmConfigName1674453163372.html":{},"coverage.html":{}}}],["npmconfigname1674486373359",{"_index":219,"title":{"classes/$npmConfigName1674486373359.html":{}},"body":{"classes/$npmConfigName1674486373359.html":{},"coverage.html":{}}}],["npmconfigname1674487677914",{"_index":225,"title":{"classes/$npmConfigName1674487677914.html":{}},"body":{"classes/$npmConfigName1674487677914.html":{},"coverage.html":{}}}],["npmconfigname1674493007150",{"_index":229,"title":{"classes/$npmConfigName1674493007150.html":{}},"body":{"classes/$npmConfigName1674493007150.html":{},"coverage.html":{}}}],["npmconfigname1674544597118",{"_index":232,"title":{"classes/$npmConfigName1674544597118.html":{}},"body":{"classes/$npmConfigName1674544597118.html":{},"coverage.html":{}}}],["null",{"_index":44,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674544597118.html":{},"injectables/AuthService.html":{}}}],["number",{"_index":616,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"injectables/ReportService.html":{}}}],["object",{"_index":504,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"injectables/FirebaseStorageService.html":{},"classes/PageDto.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"miscellaneous/variables.html":{}}}],["object.values(visibility).includes(body.visibility",{"_index":1768,"title":{},"body":{"controllers/PostController.html":{}}}],["once",{"_index":2102,"title":{},"body":{"injectables/TasksService.html":{}}}],["ondelete",{"_index":462,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["one",{"_index":482,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/UserReport.html":{}}}],["onetomany",{"_index":1643,"title":{},"body":{"entities/Post.html":{},"entities/Scrapbook.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":1618,"title":{},"body":{"entities/Post.html":{},"entities/Scrapbook.html":{},"entities/User.html":{}}}],["optional",{"_index":29,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{}}}],["options",{"_index":438,"title":{},"body":{"modules/AppModule.html":{},"classes/PageOptionsDto.html":{}}}],["options.dto",{"_index":528,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"interfaces/PageMetaDtoParameters.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["options.dto.ts",{"_index":1413,"title":{},"body":{"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:15",{"_index":1419,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:23",{"_index":1421,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:32",{"_index":1423,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:37",{"_index":1425,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["order",{"_index":1414,"title":{},"body":{"classes/PageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["order.asc",{"_index":1417,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["orderby('appeal.createdat",{"_index":636,"title":{},"body":{"injectables/AppealsService.html":{}}}],["orderby('post.createdat",{"_index":2009,"title":{},"body":{"injectables/ReportService.html":{}}}],["orderby('postreport.createdat",{"_index":1973,"title":{},"body":{"injectables/ReportService.html":{}}}],["orderby('user.createdat",{"_index":2016,"title":{},"body":{"injectables/ReportService.html":{}}}],["orderby('userreport.createdat",{"_index":1983,"title":{},"body":{"injectables/ReportService.html":{}}}],["otherwise",{"_index":921,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["out",{"_index":287,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":2392,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":2315,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1379,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{}}}],["pagecount",{"_index":1390,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pagedto",{"_index":584,"title":{"classes/PageDto.html":{}},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"classes/PageDto.html":{},"injectables/ReportService.html":{},"coverage.html":{}}}],["pagedto(entities",{"_index":617,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/ReportService.html":{}}}],["pagemetadto",{"_index":582,"title":{"classes/PageMetaDto.html":{}},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/ReportService.html":{},"coverage.html":{}}}],["pagemetadtoparameters",{"_index":1393,"title":{"interfaces/PageMetaDtoParameters.html":{}},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{}}}],["pageoptionsdto",{"_index":506,"title":{"classes/PageOptionsDto.html":{}},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"coverage.html":{}}}],["pageoptionsdto.order",{"_index":637,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["pageoptionsdto.page",{"_index":973,"title":{},"body":{"injectables/FeedService.html":{},"classes/PageMetaDto.html":{}}}],["pageoptionsdto.take",{"_index":975,"title":{},"body":{"injectables/FeedService.html":{},"classes/PageMetaDto.html":{}}}],["paginated",{"_index":1381,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{}}}],["paginatedposts",{"_index":971,"title":{},"body":{"injectables/FeedService.html":{}}}],["pagination",{"_index":1431,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["param",{"_index":254,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/EncryptionService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["param('fcmtoken",{"_index":1296,"title":{},"body":{"controllers/NotificationController.html":{}}}],["param('id",{"_index":269,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/BlockController.html":{},"controllers/FollowController.html":{},"controllers/PostController.html":{}}}],["param('postid",{"_index":546,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/ReportController.html":{}}}],["param('reportid",{"_index":1880,"title":{},"body":{"controllers/ReportController.html":{}}}],["param('requestid",{"_index":1116,"title":{},"body":{"controllers/FollowController.html":{}}}],["param('userid",{"_index":1879,"title":{},"body":{"controllers/ReportController.html":{}}}],["parameters",{"_index":28,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{}}}],["parameters.dto",{"_index":1401,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["parameters.dto.ts",{"_index":1411,"title":{},"body":{"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{}}}],["params",{"_index":1695,"title":{},"body":{"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["params.postid",{"_index":1779,"title":{},"body":{"controllers/PostController.html":{}}}],["part",{"_index":1651,"title":{},"body":{"entities/Post.html":{}}}],["pass",{"_index":769,"title":{},"body":{"injectables/AuthService.html":{}}}],["passed",{"_index":1432,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["passport",{"_index":1234,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":743,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1235,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1236,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":432,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/EncryptionService.html":{},"injectables/LocalStrategy.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserPasseordDto.html":{},"entities/User.html":{}}}],["passwords",{"_index":711,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EncryptionService.html":{}}}],["passwordsmatch",{"_index":782,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":525,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/FollowController.html":{},"controllers/PostController.html":{}}}],["patch('accept",{"_index":542,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/FollowController.html":{}}}],["patch('reject",{"_index":548,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/FollowController.html":{}}}],["patch('scrapbook/:id/remove",{"_index":1776,"title":{},"body":{"controllers/PostController.html":{}}}],["payload",{"_index":786,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{}}}],["payload.email",{"_index":1253,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.role",{"_index":1254,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":1252,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payment",{"_index":1443,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["payment.controller",{"_index":1491,"title":{},"body":{"modules/PaymentModule.html":{}}}],["payment.service",{"_index":1468,"title":{},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{}}}],["payment_method_types",{"_index":1541,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentcancel",{"_index":1445,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["paymentcancel(req",{"_index":1454,"title":{},"body":{"controllers/PaymentController.html":{}}}],["paymentcancel(sessionid",{"_index":1480,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["paymentcontroller",{"_index":1441,"title":{"controllers/PaymentController.html":{}},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"coverage.html":{}}}],["paymentfailedevent",{"_index":1590,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentfailedevent.customer",{"_index":1592,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentmodule",{"_index":369,"title":{"modules/PaymentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"modules.html":{},"overview.html":{}}}],["paymentservice",{"_index":1467,"title":{"injectables/PaymentService.html":{}},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"coverage.html":{},"overview.html":{}}}],["paymentsuccess",{"_index":1446,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["paymentsuccess(req",{"_index":1458,"title":{},"body":{"controllers/PaymentController.html":{}}}],["paymentsuccess(sessionid",{"_index":1479,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["paymentsuccessedevent",{"_index":1575,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentsuccessedevent.customer",{"_index":1579,"title":{},"body":{"injectables/PaymentService.html":{}}}],["pending",{"_index":113,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673974513613.html":{},"injectables/ReportService.html":{},"miscellaneous/enumerations.html":{}}}],["pendingreview",{"_index":2373,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["per",{"_index":1439,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["phone",{"_index":1532,"title":{},"body":{"injectables/PaymentService.html":{}}}],["phonenumber",{"_index":2068,"title":{},"body":{"classes/SignUpUserDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{}}}],["picture",{"_index":2118,"title":{},"body":{"injectables/TasksService.html":{}}}],["plan.enum",{"_index":1518,"title":{},"body":{"injectables/PaymentService.html":{},"entities/User.html":{}}}],["plan.enum.ts",{"_index":2355,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["post",{"_index":58,"title":{"entities/Post.html":{}},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"entities/Appeal.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"entities/Comment.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"controllers/FollowController.html":{},"entities/Like.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"entities/Scrapbook.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"coverage.html":{}}}],["post('admin/signup",{"_index":724,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('appeal",{"_index":536,"title":{},"body":{"controllers/AppealsController.html":{}}}],["post('ban",{"_index":1877,"title":{},"body":{"controllers/ReportController.html":{}}}],["post('block",{"_index":823,"title":{},"body":{"controllers/BlockController.html":{}}}],["post('comment/:id",{"_index":1786,"title":{},"body":{"controllers/PostController.html":{}}}],["post('create",{"_index":1750,"title":{},"body":{"controllers/PostController.html":{}}}],["post('invoicing",{"_index":1451,"title":{},"body":{"controllers/PaymentController.html":{}}}],["post('like/:id",{"_index":1793,"title":{},"body":{"controllers/PostController.html":{}}}],["post('login",{"_index":728,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('report",{"_index":1866,"title":{},"body":{"controllers/ReportController.html":{}}}],["post('request",{"_index":1109,"title":{},"body":{"controllers/FollowController.html":{}}}],["post('scrapbook/:id/add",{"_index":1772,"title":{},"body":{"controllers/PostController.html":{}}}],["post('scrapbook/create",{"_index":1766,"title":{},"body":{"controllers/PostController.html":{}}}],["post('send",{"_index":1301,"title":{},"body":{"controllers/NotificationController.html":{}}}],["post('signup",{"_index":706,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup')@useinterceptors(undefined",{"_index":683,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup/:fcmtoken",{"_index":1294,"title":{},"body":{"controllers/NotificationController.html":{}}}],["post('subscribe",{"_index":1470,"title":{},"body":{"controllers/PaymentController.html":{}}}],["post('unban",{"_index":1884,"title":{},"body":{"controllers/ReportController.html":{}}}],["post('unblock",{"_index":829,"title":{},"body":{"controllers/BlockController.html":{}}}],["post('unsubscribe",{"_index":1475,"title":{},"body":{"controllers/PaymentController.html":{}}}],["post.appeals",{"_index":464,"title":{},"body":{"entities/Appeal.html":{},"injectables/AppealsService.html":{}}}],["post.appeals.length",{"_index":341,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{}}}],["post.appeals.some((appeal",{"_index":592,"title":{},"body":{"injectables/AppealsService.html":{}}}],["post.comments",{"_index":875,"title":{},"body":{"entities/Comment.html":{}}}],["post.comments.length",{"_index":337,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["post.controller",{"_index":1804,"title":{},"body":{"modules/PostModule.html":{}}}],["post.entity",{"_index":878,"title":{},"body":{"entities/Comment.html":{},"entities/Like.html":{},"entities/Scrapbook.html":{}}}],["post.id",{"_index":1948,"title":{},"body":{"injectables/ReportService.html":{}}}],["post.istakendown",{"_index":347,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{}}}],["post.likes",{"_index":1262,"title":{},"body":{"entities/Like.html":{}}}],["post.postedby",{"_index":610,"title":{},"body":{"injectables/AppealsService.html":{},"entities/User.html":{}}}],["post.postedby.id",{"_index":327,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["post.reportsagainst",{"_index":602,"title":{},"body":{"injectables/AppealsService.html":{},"entities/PostReport.html":{}}}],["post.reportsagainst.length",{"_index":339,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["post.reportsagainst.some((report",{"_index":597,"title":{},"body":{"injectables/AppealsService.html":{}}}],["post.scrapbook",{"_index":343,"title":{},"body":{"injectables/AnalyticsService.html":{},"entities/Scrapbook.html":{}}}],["post.scrapbook.id",{"_index":358,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["post.service",{"_index":1748,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["post/:id",{"_index":1885,"title":{},"body":{"controllers/ReportController.html":{}}}],["post/:id')@roles(role.admin",{"_index":1858,"title":{},"body":{"controllers/ReportController.html":{}}}],["post/:postid",{"_index":1697,"title":{},"body":{"controllers/PostController.html":{}}}],["post/:postid/:reportid",{"_index":1882,"title":{},"body":{"controllers/ReportController.html":{}}}],["post/:postid/:reportid')@roles(role.admin",{"_index":1833,"title":{},"body":{"controllers/ReportController.html":{}}}],["post/entities/comment.entity",{"_index":2205,"title":{},"body":{"entities/User.html":{}}}],["post/entities/post",{"_index":2209,"title":{},"body":{"entities/User.html":{}}}],["post/entities/post.entity",{"_index":292,"title":{},"body":{"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"entities/Appeal.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"entities/PostReport.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["post/entities/scrapbook.entity",{"_index":2204,"title":{},"body":{"entities/User.html":{}}}],["post\\`(\\`id",{"_index":116,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1674486373359.html":{}}}],["post_report",{"_index":97,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["post_report\\`(\\`id",{"_index":105,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{}}}],["postalreadyreported",{"_index":1945,"title":{},"body":{"injectables/ReportService.html":{}}}],["postalreadyreported.includes(true",{"_index":1949,"title":{},"body":{"injectables/ReportService.html":{}}}],["postanalyticresposnedto",{"_index":311,"title":{"classes/PostAnalyticResposneDto.html":{}},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{},"coverage.html":{}}}],["postcontroller",{"_index":1673,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["posted",{"_index":1650,"title":{},"body":{"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/UserReport.html":{}}}],["postedby",{"_index":321,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"entities/Post.html":{},"injectables/ReportService.html":{}}}],["postedbyid",{"_index":71,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["postid",{"_index":169,"title":{},"body":{"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["postmodule",{"_index":370,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postreport",{"_index":389,"title":{"entities/PostReport.html":{}},"body":{"modules/AppModule.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"entities/User.html":{},"coverage.html":{}}}],["postreport.reportedby",{"_index":2189,"title":{},"body":{"entities/User.html":{}}}],["postreport.reportedpost",{"_index":1636,"title":{},"body":{"entities/Post.html":{}}}],["postreportsandcount[0",{"_index":1975,"title":{},"body":{"injectables/ReportService.html":{}}}],["postreportsandcount[1",{"_index":1976,"title":{},"body":{"injectables/ReportService.html":{}}}],["postreportsrepository",{"_index":571,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["postrepository",{"_index":305,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["posts",{"_index":596,"title":{},"body":{"injectables/AppealsService.html":{},"classes/CreateScrapBookDto.html":{},"injectables/FeedService.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"entities/Scrapbook.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["posts')@roles(role.admin",{"_index":1844,"title":{},"body":{"controllers/ReportController.html":{}}}],["posts.length",{"_index":976,"title":{},"body":{"injectables/FeedService.html":{}}}],["posts.slice",{"_index":972,"title":{},"body":{"injectables/FeedService.html":{}}}],["postsandcount[0",{"_index":2011,"title":{},"body":{"injectables/ReportService.html":{}}}],["postsandcount[0].length",{"_index":2012,"title":{},"body":{"injectables/ReportService.html":{}}}],["postservice",{"_index":1747,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{},"overview.html":{}}}],["power",{"_index":2101,"title":{},"body":{"injectables/TasksService.html":{}}}],["preference.enum",{"_index":1334,"title":{},"body":{"injectables/NotificationService.html":{},"entities/User.html":{}}}],["preference.enum.ts",{"_index":2348,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":242,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["premium",{"_index":2378,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["previous",{"_index":1004,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["previousimageid",{"_index":999,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["price",{"_index":1547,"title":{},"body":{"injectables/PaymentService.html":{}}}],["price_1mthm0b4qqtc27uczovemolz",{"_index":1548,"title":{},"body":{"injectables/PaymentService.html":{}}}],["primary",{"_index":72,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{}}}],["primarygeneratedcolumn",{"_index":476,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":466,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["private",{"_index":316,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"miscellaneous/enumerations.html":{}}}],["process.env?.secret",{"_index":2413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env?.stripe_webhook_secret",{"_index":1506,"title":{},"body":{"injectables/PaymentService.html":{}}}],["processing",{"_index":2100,"title":{},"body":{"injectables/TasksService.html":{}}}],["professional",{"_index":2377,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["profile",{"_index":2122,"title":{},"body":{"injectables/TasksService.html":{}}}],["profilepictureexpirydate",{"_index":153,"title":{},"body":{"classes/$npmConfigName1672760070076.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["profilepictureid",{"_index":2129,"title":{},"body":{"injectables/TasksService.html":{},"entities/User.html":{}}}],["profilepictureurl",{"_index":144,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"controllers/AuthController.html":{},"entities/User.html":{}}}],["project",{"_index":2408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":31,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{}}}],["properties",{"_index":11,"title":{"properties.html":{}},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"entities/PostReport.html":{},"classes/ReportDto.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"properties.html":{}}}],["property",{"_index":2062,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["protect",{"_index":659,"title":{},"body":{"controllers/AuthController.html":{}}}],["providers",{"_index":289,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":14,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"miscellaneous/enumerations.html":{}}}],["publicposts",{"_index":960,"title":{},"body":{"injectables/FeedService.html":{}}}],["quantity",{"_index":1549,"title":{},"body":{"injectables/PaymentService.html":{}}}],["query",{"_index":526,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["query('session_id",{"_index":1478,"title":{},"body":{"controllers/PaymentController.html":{}}}],["queryresults",{"_index":1968,"title":{},"body":{"injectables/ReportService.html":{}}}],["queryresults.items",{"_index":1978,"title":{},"body":{"injectables/ReportService.html":{}}}],["queryresults.itemscount",{"_index":1977,"title":{},"body":{"injectables/ReportService.html":{}}}],["queryrunner",{"_index":26,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{}}}],["queryrunner.query(`alter",{"_index":38,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{}}}],["queryrunner.query(`create",{"_index":57,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{}}}],["queryrunner.query(`drop",{"_index":82,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{}}}],["quesries",{"_index":1617,"title":{},"body":{"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["rawbodyrequest",{"_index":1450,"title":{},"body":{"controllers/PaymentController.html":{}}}],["read",{"_index":1037,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["readonly",{"_index":1371,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["reason",{"_index":99,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"entities/PostReport.html":{},"classes/ReportDto.html":{},"entities/UserReport.html":{}}}],["reason.enum",{"_index":480,"title":{},"body":{"entities/Appeal.html":{},"entities/PostReport.html":{},"classes/ReportDto.html":{},"entities/UserReport.html":{}}}],["reason.enum.ts",{"_index":2352,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receive",{"_index":2213,"title":{},"body":{"entities/User.html":{}}}],["received",{"_index":1090,"title":{},"body":{"controllers/FollowController.html":{}}}],["references",{"_index":78,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["reflect",{"_index":2333,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2024,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reject",{"_index":520,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["rejected",{"_index":1120,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{},"miscellaneous/enumerations.html":{}}}],["rejectfollow",{"_index":1073,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["rejectfollow(@request",{"_index":1118,"title":{},"body":{"controllers/FollowController.html":{}}}],["rejectfollow(id",{"_index":1168,"title":{},"body":{"injectables/FollowService.html":{}}}],["rejectfollow(req",{"_index":1095,"title":{},"body":{"controllers/FollowController.html":{}}}],["rejectfollow(requestid",{"_index":1119,"title":{},"body":{"controllers/FollowController.html":{}}}],["rejectpostappeal",{"_index":496,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["rejectpostappeal(@request",{"_index":549,"title":{},"body":{"controllers/AppealsController.html":{}}}],["rejectpostappeal(postid",{"_index":550,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["rejectpostappeal(req",{"_index":517,"title":{},"body":{"controllers/AppealsController.html":{}}}],["relations",{"_index":320,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/ReportService.html":{}}}],["removeexpiredbans",{"_index":2106,"title":{},"body":{"injectables/TasksService.html":{}}}],["removepostfromscrapbook",{"_index":1688,"title":{},"body":{"controllers/PostController.html":{}}}],["removepostfromscrapbook(@request",{"_index":1777,"title":{},"body":{"controllers/PostController.html":{}}}],["removepostfromscrapbook(params.id",{"_index":1778,"title":{},"body":{"controllers/PostController.html":{}}}],["removepostfromscrapbook(req",{"_index":1736,"title":{},"body":{"controllers/PostController.html":{}}}],["removes",{"_index":1739,"title":{},"body":{"controllers/PostController.html":{},"injectables/TasksService.html":{}}}],["repo",{"_index":2384,"title":{},"body":{"index.html":{}}}],["report",{"_index":1818,"title":{},"body":{"entities/PostReport.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"entities/User.html":{},"entities/UserReport.html":{}}}],["report.controller",{"_index":1903,"title":{},"body":{"modules/ReportModule.html":{}}}],["report.entity",{"_index":391,"title":{},"body":{"modules/AppModule.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"entities/User.html":{}}}],["report.entity.ts",{"_index":1809,"title":{},"body":{"entities/PostReport.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["report.entity.ts:15",{"_index":2246,"title":{},"body":{"entities/UserReport.html":{}}}],["report.entity.ts:16",{"_index":1812,"title":{},"body":{"entities/PostReport.html":{}}}],["report.entity.ts:18",{"_index":2252,"title":{},"body":{"entities/UserReport.html":{}}}],["report.entity.ts:19",{"_index":1817,"title":{},"body":{"entities/PostReport.html":{}}}],["report.entity.ts:21",{"_index":2247,"title":{},"body":{"entities/UserReport.html":{}}}],["report.entity.ts:22",{"_index":1813,"title":{},"body":{"entities/PostReport.html":{}}}],["report.entity.ts:27",{"_index":2251,"title":{},"body":{"entities/UserReport.html":{}}}],["report.entity.ts:28",{"_index":1816,"title":{},"body":{"entities/PostReport.html":{}}}],["report.entity.ts:33",{"_index":2249,"title":{},"body":{"entities/UserReport.html":{}}}],["report.entity.ts:34",{"_index":1815,"title":{},"body":{"entities/PostReport.html":{}}}],["report.service",{"_index":1864,"title":{},"body":{"controllers/ReportController.html":{},"modules/ReportModule.html":{}}}],["report.status",{"_index":598,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["report/entities/post",{"_index":566,"title":{},"body":{"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["report/entities/user",{"_index":2094,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["reportcontroller",{"_index":1820,"title":{"controllers/ReportController.html":{}},"body":{"controllers/ReportController.html":{},"modules/ReportModule.html":{},"coverage.html":{}}}],["reportcount",{"_index":338,"title":{},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["reportdto",{"_index":1851,"title":{"classes/ReportDto.html":{}},"body":{"controllers/ReportController.html":{},"classes/ReportDto.html":{},"coverage.html":{}}}],["reported",{"_index":600,"title":{},"body":{"injectables/AppealsService.html":{},"entities/Post.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"entities/User.html":{}}}],["reportedby",{"_index":1810,"title":{},"body":{"entities/PostReport.html":{},"injectables/ReportService.html":{},"entities/UserReport.html":{}}}],["reportedbyid",{"_index":100,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["reportedpost",{"_index":1811,"title":{},"body":{"entities/PostReport.html":{},"injectables/ReportService.html":{}}}],["reportedpost.id",{"_index":1947,"title":{},"body":{"injectables/ReportService.html":{}}}],["reportedpostid",{"_index":112,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1673027114310.html":{}}}],["reportedposts",{"_index":1938,"title":{},"body":{"injectables/ReportService.html":{},"entities/User.html":{}}}],["reportedposts.reportedpost",{"_index":1939,"title":{},"body":{"injectables/ReportService.html":{}}}],["reportedposts.reportedpost.postedby",{"_index":1940,"title":{},"body":{"injectables/ReportService.html":{}}}],["reporteduser",{"_index":2245,"title":{},"body":{"entities/UserReport.html":{}}}],["reporteduser.id",{"_index":1964,"title":{},"body":{"injectables/ReportService.html":{}}}],["reporteduserid",{"_index":119,"title":{},"body":{"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["reportedusers",{"_index":1958,"title":{},"body":{"injectables/ReportService.html":{},"entities/User.html":{}}}],["reportedusers.reporteduser",{"_index":1959,"title":{},"body":{"injectables/ReportService.html":{}}}],["reportid",{"_index":1831,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["reportmodule",{"_index":371,"title":{"modules/ReportModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ReportModule.html":{},"modules.html":{},"overview.html":{}}}],["reportpost",{"_index":497,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["reportpost(@body",{"_index":537,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/ReportController.html":{}}}],["reportpost(body",{"_index":521,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/ReportController.html":{}}}],["reportpost(req.user",{"_index":1868,"title":{},"body":{"controllers/ReportController.html":{}}}],["reportpost(user",{"_index":1918,"title":{},"body":{"injectables/ReportService.html":{}}}],["reportreason",{"_index":186,"title":{},"body":{"classes/$npmConfigName1673770456243.html":{},"entities/Appeal.html":{},"injectables/AppealsService.html":{},"entities/PostReport.html":{},"classes/ReportDto.html":{},"entities/UserReport.html":{},"miscellaneous/enumerations.html":{}}}],["reports",{"_index":1819,"title":{},"body":{"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"entities/UserReport.html":{}}}],["reports.reportedpost",{"_index":1944,"title":{},"body":{"injectables/ReportService.html":{}}}],["reports.reporteduser",{"_index":1961,"title":{},"body":{"injectables/ReportService.html":{}}}],["reports.status",{"_index":1943,"title":{},"body":{"injectables/ReportService.html":{}}}],["reports/:id",{"_index":1840,"title":{},"body":{"controllers/ReportController.html":{}}}],["reportsagainst",{"_index":322,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["reportsagainstid",{"_index":102,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{}}}],["reportservice",{"_index":1863,"title":{"injectables/ReportService.html":{}},"body":{"controllers/ReportController.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"coverage.html":{},"overview.html":{}}}],["reportstatus",{"_index":477,"title":{},"body":{"entities/Appeal.html":{},"injectables/AppealsService.html":{},"entities/PostReport.html":{},"injectables/ReportService.html":{},"entities/UserReport.html":{},"miscellaneous/enumerations.html":{}}}],["reportstatus.accepted",{"_index":599,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["reportstatus.pendingreview",{"_index":469,"title":{},"body":{"entities/Appeal.html":{},"injectables/AppealsService.html":{},"entities/PostReport.html":{},"injectables/ReportService.html":{},"entities/UserReport.html":{}}}],["reportstatus.rejected",{"_index":628,"title":{},"body":{"injectables/AppealsService.html":{}}}],["reportuser",{"_index":1828,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["reportuser(@body",{"_index":1871,"title":{},"body":{"controllers/ReportController.html":{}}}],["reportuser(body",{"_index":1854,"title":{},"body":{"controllers/ReportController.html":{}}}],["reportuser(req.user",{"_index":1872,"title":{},"body":{"controllers/ReportController.html":{}}}],["reportuser(user",{"_index":1920,"title":{},"body":{"injectables/ReportService.html":{}}}],["repository",{"_index":302,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["represents",{"_index":1385,"title":{},"body":{"classes/PageMetaDto.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["req",{"_index":251,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["req.params.id",{"_index":1765,"title":{},"body":{"controllers/PostController.html":{}}}],["req.params.postid",{"_index":1775,"title":{},"body":{"controllers/PostController.html":{}}}],["req.rawbody",{"_index":1485,"title":{},"body":{"controllers/PaymentController.html":{}}}],["req.user",{"_index":553,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/BlockController.html":{},"controllers/FollowController.html":{}}}],["request",{"_index":256,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"classes/SignUpUserDto.html":{}}}],["request.entity",{"_index":404,"title":{},"body":{"modules/AppModule.html":{},"modules/FollowModule.html":{},"injectables/FollowService.html":{},"entities/User.html":{}}}],["request.entity.ts",{"_index":1140,"title":{},"body":{"entities/FollowRequest.html":{},"coverage.html":{}}}],["request.entity.ts:12",{"_index":1150,"title":{},"body":{"entities/FollowRequest.html":{}}}],["request.entity.ts:18",{"_index":1145,"title":{},"body":{"entities/FollowRequest.html":{}}}],["request.entity.ts:24",{"_index":1147,"title":{},"body":{"entities/FollowRequest.html":{}}}],["request.entity.ts:9",{"_index":1143,"title":{},"body":{"entities/FollowRequest.html":{}}}],["requestedby",{"_index":1141,"title":{},"body":{"entities/FollowRequest.html":{},"injectables/FollowService.html":{}}}],["requestedbyid",{"_index":204,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["requesteduser",{"_index":1142,"title":{},"body":{"entities/FollowRequest.html":{},"injectables/FollowService.html":{}}}],["requesteduserid",{"_index":205,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["requestfollow",{"_index":1074,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["requestfollow(@request",{"_index":1110,"title":{},"body":{"controllers/FollowController.html":{}}}],["requestfollow(id",{"_index":1112,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["requestfollow(req",{"_index":1098,"title":{},"body":{"controllers/FollowController.html":{}}}],["requestid",{"_index":1077,"title":{},"body":{"controllers/FollowController.html":{}}}],["requests",{"_index":1089,"title":{},"body":{"controllers/FollowController.html":{},"entities/User.html":{}}}],["required",{"_index":1340,"title":{},"body":{"injectables/NotificationService.html":{}}}],["requiredroles",{"_index":2032,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":2037,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiring",{"_index":2098,"title":{},"body":{"injectables/TasksService.html":{}}}],["res",{"_index":246,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["res.status(err.status).json",{"_index":276,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["res.status(httpstatus.bad_request).json",{"_index":710,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(httpstatus.created).json",{"_index":723,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(httpstatus.ok).json",{"_index":833,"title":{},"body":{"controllers/BlockController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["res.status(httpstatus.ok).json(analytics",{"_index":274,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["res.status(httpstatus.ok).json(appeal",{"_index":541,"title":{},"body":{"controllers/AppealsController.html":{}}}],["res.status(httpstatus.ok).json(appeals",{"_index":560,"title":{},"body":{"controllers/AppealsController.html":{}}}],["res.status(httpstatus.ok).json(block",{"_index":828,"title":{},"body":{"controllers/BlockController.html":{}}}],["res.status(httpstatus.ok).json(comments",{"_index":1789,"title":{},"body":{"controllers/PostController.html":{}}}],["res.status(httpstatus.ok).json(post",{"_index":1754,"title":{},"body":{"controllers/PostController.html":{}}}],["res.status(httpstatus.ok).json(posts",{"_index":943,"title":{},"body":{"controllers/FeedController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["res.status(httpstatus.ok).json(report",{"_index":1870,"title":{},"body":{"controllers/ReportController.html":{}}}],["res.status(httpstatus.ok).json(reports",{"_index":1875,"title":{},"body":{"controllers/ReportController.html":{}}}],["res.status(httpstatus.ok).json(result",{"_index":1114,"title":{},"body":{"controllers/FollowController.html":{}}}],["reset",{"_index":286,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":247,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["response.appealcount",{"_index":354,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.commentcount",{"_index":349,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.createdat",{"_index":355,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.dto",{"_index":314,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.dto.ts",{"_index":1653,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{},"coverage.html":{}}}],["response.dto.ts:12",{"_index":1664,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:17",{"_index":1660,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:21",{"_index":1663,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:26",{"_index":1665,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:31",{"_index":1656,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:35",{"_index":1659,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:39",{"_index":1662,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:43",{"_index":1667,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:7",{"_index":1657,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.interactioncount",{"_index":351,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.ispartofscrapbook",{"_index":356,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.istakendown",{"_index":352,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.likecount",{"_index":350,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.reportcount",{"_index":353,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.scrapbookid",{"_index":357,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["respponse",{"_index":689,"title":{},"body":{"controllers/AuthController.html":{}}}],["result",{"_index":785,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["results",{"_index":47,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":273,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{}}}],["returns",{"_index":30,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{}}}],["review",{"_index":114,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1673770456243.html":{},"miscellaneous/enumerations.html":{}}}],["rimraf",{"_index":2335,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":53,"title":{},"body":{"classes/$npmConfigName1672082713679.html":{},"injectables/AnalyticsService.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/ReportController.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":326,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["role.celebrity",{"_index":1352,"title":{},"body":{"injectables/NotificationService.html":{}}}],["role.influencer",{"_index":1365,"title":{},"body":{"injectables/NotificationService.html":{}}}],["roles",{"_index":42,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/NotificationController.html":{},"controllers/ReportController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":544,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/NotificationController.html":{},"controllers/ReportController.html":{}}}],["roles_key",{"_index":2031,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":530,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/NotificationController.html":{},"controllers/ReportController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesguard)@get('post",{"_index":507,"title":{},"body":{"controllers/AppealsController.html":{}}}],["rolesguard)@get('reported",{"_index":1843,"title":{},"body":{"controllers/ReportController.html":{}}}],["rolesguard)@patch('accept",{"_index":499,"title":{},"body":{"controllers/AppealsController.html":{}}}],["rolesguard)@patch('reject",{"_index":518,"title":{},"body":{"controllers/AppealsController.html":{}}}],["rolesguard)@post('admin/signup')@roles(role.admin",{"_index":673,"title":{},"body":{"controllers/AuthController.html":{}}}],["rolesguard)@post('ban",{"_index":1832,"title":{},"body":{"controllers/ReportController.html":{}}}],["rolesguard)@post('send')@roles(role.admin",{"_index":1284,"title":{},"body":{"controllers/NotificationController.html":{}}}],["rolesguard)@post('unban",{"_index":1857,"title":{},"body":{"controllers/ReportController.html":{}}}],["route",{"_index":655,"title":{},"body":{"controllers/AuthController.html":{}}}],["run",{"_index":445,"title":{},"body":{"modules/AppModule.html":{},"injectables/TasksService.html":{}}}],["runs",{"_index":2112,"title":{},"body":{"injectables/TasksService.html":{}}}],["rxjs",{"_index":2337,"title":{},"body":{"dependencies.html":{}}}],["salt_factor",{"_index":928,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["saved",{"_index":1300,"title":{},"body":{"controllers/NotificationController.html":{}}}],["schedulemodule",{"_index":412,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":416,"title":{},"body":{"modules/AppModule.html":{}}}],["scrapbook",{"_index":88,"title":{"entities/Scrapbook.html":{}},"body":{"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1674493007150.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"classes/CreateScrapBookDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"coverage.html":{}}}],["scrapbook.entity",{"_index":1646,"title":{},"body":{"entities/Post.html":{}}}],["scrapbook.posts",{"_index":1638,"title":{},"body":{"entities/Post.html":{}}}],["scrapbook.user",{"_index":2196,"title":{},"body":{"entities/User.html":{}}}],["scrapbook\\`(\\`id",{"_index":93,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{}}}],["scrapbookid",{"_index":90,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["scrapbooks",{"_index":1731,"title":{},"body":{"controllers/PostController.html":{},"entities/User.html":{}}}],["secret",{"_index":1246,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":1248,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":1608,"title":{},"body":{"injectables/PaymentService.html":{}}}],["select",{"_index":2211,"title":{},"body":{"entities/User.html":{}}}],["select(['id",{"_index":779,"title":{},"body":{"injectables/AuthService.html":{}}}],["selectedgroup",{"_index":2361,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["send",{"_index":678,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignUpUserDto.html":{},"entities/User.html":{}}}],["sending",{"_index":1724,"title":{},"body":{"controllers/PostController.html":{}}}],["sendnotification",{"_index":1310,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotification(body",{"_index":1303,"title":{},"body":{"controllers/NotificationController.html":{}}}],["sendnotification(sendnotificationdto",{"_index":1315,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationdto",{"_index":1283,"title":{"classes/SendNotificationDto.html":{}},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/SendNotificationDto.html":{},"coverage.html":{}}}],["sendnotificationdto.body",{"_index":1343,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationdto.targetgroup",{"_index":1336,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationdto.targetuserid",{"_index":1338,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationdto.title",{"_index":1342,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationtoall",{"_index":1280,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["sendnotificationtoall(@request",{"_index":1302,"title":{},"body":{"controllers/NotificationController.html":{}}}],["sendnotificationtoall(req",{"_index":1282,"title":{},"body":{"controllers/NotificationController.html":{}}}],["sendnotificationtoall(title",{"_index":1317,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationtocelebrities",{"_index":1311,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationtocelebrities(title",{"_index":1320,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationtoinfluencers",{"_index":1312,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationtoinfluencers(title",{"_index":1322,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationtoone",{"_index":1313,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/PaymentService.html":{}}}],["sendnotificationtoone('payment",{"_index":1583,"title":{},"body":{"injectables/PaymentService.html":{}}}],["sendnotificationtoone(title",{"_index":1324,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sends",{"_index":2063,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["sent",{"_index":1093,"title":{},"body":{"controllers/FollowController.html":{},"controllers/NotificationController.html":{}}}],["server",{"_index":2058,"title":{},"body":{"classes/SignUpUserDto.html":{},"injectables/TasksService.html":{}}}],["service",{"_index":910,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["serviceaccount",{"_index":2271,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["servicec",{"_index":705,"title":{},"body":{"controllers/AuthController.html":{}}}],["session",{"_index":1538,"title":{},"body":{"injectables/PaymentService.html":{}}}],["session.url",{"_index":1554,"title":{},"body":{"injectables/PaymentService.html":{}}}],["sessionid",{"_index":1455,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["set",{"_index":1435,"title":{},"body":{"classes/PageOptionsDto.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["setmetadata(roles_key",{"_index":2417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settings",{"_index":424,"title":{},"body":{"modules/AppModule.html":{}}}],["sign",{"_index":686,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignUpUserDto.html":{}}}],["signature",{"_index":1484,"title":{},"body":{"controllers/PaymentController.html":{}}}],["signed",{"_index":1019,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["signoptions",{"_index":2414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signup",{"_index":1281,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["signup(@request",{"_index":1295,"title":{},"body":{"controllers/NotificationController.html":{}}}],["signup(req",{"_index":1286,"title":{},"body":{"controllers/NotificationController.html":{}}}],["signup(req.user",{"_index":1298,"title":{},"body":{"controllers/NotificationController.html":{}}}],["signup(user",{"_index":1326,"title":{},"body":{"injectables/NotificationService.html":{}}}],["signup.dto",{"_index":700,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup.dto.ts",{"_index":2057,"title":{},"body":{"classes/SignUpUserDto.html":{},"coverage.html":{}}}],["signup.dto.ts:13",{"_index":2074,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:16",{"_index":2075,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:19",{"_index":2073,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:22",{"_index":2079,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:25",{"_index":2076,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:28",{"_index":2070,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:31",{"_index":2078,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:33",{"_index":2069,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:36",{"_index":2071,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signupadmin",{"_index":650,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupadmin(@body",{"_index":725,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupadmin(body",{"_index":671,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupuser",{"_index":651,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupuser(body",{"_index":682,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupuserdto",{"_index":672,"title":{"classes/SignUpUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SignUpUserDto.html":{},"coverage.html":{}}}],["singleuser",{"_index":2363,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["skip",{"_index":1416,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["skip(pageoptionsdto.skip",{"_index":634,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["sorry",{"_index":1607,"title":{},"body":{"injectables/PaymentService.html":{}}}],["sort((a",{"_index":604,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{}}}],["spam",{"_index":2368,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["specified",{"_index":2113,"title":{},"body":{"injectables/TasksService.html":{}}}],["sql",{"_index":1616,"title":{},"body":{"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["src/.../ban",{"_index":2343,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../constants.ts",{"_index":2399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../firebase",{"_index":2398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../follow",{"_index":2345,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../gender.enum.ts",{"_index":2346,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":2381,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../notification",{"_index":2347,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../order.enum.ts",{"_index":2350,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../report",{"_index":2351,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role.enum.ts",{"_index":2353,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":2400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../subscription",{"_index":2354,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../visibility.enum.ts",{"_index":2356,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":376,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":451,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":453,"title":{},"body":{"injectables/AppService.html":{}}}],["src/common/dto/page",{"_index":527,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"coverage.html":{}}}],["src/common/dto/page.dto",{"_index":585,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/ReportService.html":{}}}],["src/common/dto/page.dto.ts",{"_index":1370,"title":{},"body":{"classes/PageDto.html":{},"coverage.html":{}}}],["src/common/dto/page.dto.ts:10",{"_index":1378,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dto/page.dto.ts:12",{"_index":1376,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/entities/base.entity.ts",{"_index":792,"title":{},"body":{"classes/BaseEntity.html":{},"coverage.html":{}}}],["src/common/entities/base.entity.ts:12",{"_index":797,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entity.ts:9",{"_index":795,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/services/encryption.service",{"_index":777,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/common/services/encryption.service.ts",{"_index":909,"title":{},"body":{"injectables/EncryptionService.html":{},"coverage.html":{}}}],["src/common/services/encryption.service.ts:14",{"_index":923,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/common/services/encryption.service.ts:25",{"_index":917,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/common/services/firebase",{"_index":978,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/TasksService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/services/stripe.service.ts",{"_index":2082,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/common/services/stripe.service.ts:12",{"_index":2085,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/common/services/stripe.service.ts:8",{"_index":2087,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/constants/ban",{"_index":2126,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/enumerations.html":{}}}],["src/constants/follow",{"_index":1172,"title":{},"body":{"injectables/FollowService.html":{},"miscellaneous/enumerations.html":{}}}],["src/constants/gender.enum.ts",{"_index":2357,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/constants/notification",{"_index":1331,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SendNotificationDto.html":{},"miscellaneous/enumerations.html":{}}}],["src/constants/order.enum",{"_index":1430,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["src/constants/order.enum.ts",{"_index":2366,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/constants/report",{"_index":586,"title":{},"body":{"injectables/AppealsService.html":{},"classes/ReportDto.html":{},"injectables/ReportService.html":{},"miscellaneous/enumerations.html":{}}}],["src/constants/role.enum",{"_index":310,"title":{},"body":{"injectables/AnalyticsService.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/ReportController.html":{},"guards/RolesGuard.html":{}}}],["src/constants/role.enum.ts",{"_index":2374,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/constants/subscription",{"_index":1517,"title":{},"body":{"injectables/PaymentService.html":{},"miscellaneous/enumerations.html":{}}}],["src/constants/visibility.enum",{"_index":898,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/FeedService.html":{},"controllers/PostController.html":{}}}],["src/constants/visibility.enum.ts",{"_index":2379,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/decorators/roles.decorator",{"_index":529,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/NotificationController.html":{},"controllers/ReportController.html":{},"guards/RolesGuard.html":{}}}],["src/decorators/roles.decorator.ts",{"_index":2275,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":2276,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/analytics/analytics.controller.ts",{"_index":241,"title":{},"body":{"controllers/AnalyticsController.html":{},"coverage.html":{}}}],["src/modules/analytics/analytics.controller.ts:12",{"_index":250,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["src/modules/analytics/analytics.module.ts",{"_index":288,"title":{},"body":{"modules/AnalyticsModule.html":{}}}],["src/modules/analytics/analytics.service.ts",{"_index":299,"title":{},"body":{"injectables/AnalyticsService.html":{},"coverage.html":{}}}],["src/modules/analytics/analytics.service.ts:10",{"_index":304,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["src/modules/analytics/analytics.service.ts:19",{"_index":307,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["src/modules/analytics/dto/post",{"_index":1652,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{},"coverage.html":{}}}],["src/modules/appeals/appeals.controller.ts",{"_index":491,"title":{},"body":{"controllers/AppealsController.html":{},"coverage.html":{}}}],["src/modules/appeals/appeals.controller.ts:118",{"_index":516,"title":{},"body":{"controllers/AppealsController.html":{}}}],["src/modules/appeals/appeals.controller.ts:132",{"_index":509,"title":{},"body":{"controllers/AppealsController.html":{}}}],["src/modules/appeals/appeals.controller.ts:35",{"_index":523,"title":{},"body":{"controllers/AppealsController.html":{}}}],["src/modules/appeals/appeals.controller.ts:55",{"_index":501,"title":{},"body":{"controllers/AppealsController.html":{}}}],["src/modules/appeals/appeals.controller.ts:75",{"_index":519,"title":{},"body":{"controllers/AppealsController.html":{}}}],["src/modules/appeals/appeals.controller.ts:94",{"_index":513,"title":{},"body":{"controllers/AppealsController.html":{}}}],["src/modules/appeals/appeals.module.ts",{"_index":563,"title":{},"body":{"modules/AppealsModule.html":{}}}],["src/modules/appeals/appeals.service.ts",{"_index":568,"title":{},"body":{"injectables/AppealsService.html":{},"coverage.html":{}}}],["src/modules/appeals/appeals.service.ts:117",{"_index":574,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/appeals.service.ts:146",{"_index":581,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/appeals.service.ts:15",{"_index":572,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/appeals.service.ts:173",{"_index":577,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/appeals.service.ts:30",{"_index":576,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/appeals.service.ts:73",{"_index":578,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/appeals.service.ts:99",{"_index":580,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/dto/appeal.dto.ts",{"_index":485,"title":{},"body":{"classes/AppealDto.html":{},"coverage.html":{}}}],["src/modules/appeals/dto/appeal.dto.ts:5",{"_index":487,"title":{},"body":{"classes/AppealDto.html":{}}}],["src/modules/appeals/dto/appeal.dto.ts:8",{"_index":488,"title":{},"body":{"classes/AppealDto.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts",{"_index":457,"title":{},"body":{"entities/Appeal.html":{},"coverage.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts:11",{"_index":467,"title":{},"body":{"entities/Appeal.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts:14",{"_index":471,"title":{},"body":{"entities/Appeal.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts:17",{"_index":468,"title":{},"body":{"entities/Appeal.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts:20",{"_index":472,"title":{},"body":{"entities/Appeal.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts:26",{"_index":465,"title":{},"body":{"entities/Appeal.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts:32",{"_index":463,"title":{},"body":{"entities/Appeal.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":647,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:117",{"_index":654,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:40",{"_index":684,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:88",{"_index":674,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":739,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":754,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:10",{"_index":760,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:24",{"_index":770,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:49",{"_index":765,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:56",{"_index":763,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/constants.ts",{"_index":2286,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/dto/user",{"_index":2056,"title":{},"body":{"classes/SignUpUserDto.html":{},"coverage.html":{}}}],["src/modules/auth/guards/jwt",{"_index":1225,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/local",{"_index":1265,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/roles.guard.ts",{"_index":2021,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/roles.guard.ts:10",{"_index":2028,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/modules/auth/guards/roles.guard.ts:7",{"_index":2025,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts",{"_index":1229,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:20",{"_index":1232,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:7",{"_index":1230,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts",{"_index":1267,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:10",{"_index":1269,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:21",{"_index":1271,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/block/block.controller.ts",{"_index":810,"title":{},"body":{"controllers/BlockController.html":{},"coverage.html":{}}}],["src/modules/block/block.controller.ts:12",{"_index":816,"title":{},"body":{"controllers/BlockController.html":{}}}],["src/modules/block/block.controller.ts:25",{"_index":819,"title":{},"body":{"controllers/BlockController.html":{}}}],["src/modules/block/block.module.ts",{"_index":837,"title":{},"body":{"modules/BlockModule.html":{}}}],["src/modules/block/block.service.ts",{"_index":841,"title":{},"body":{"injectables/BlockService.html":{},"coverage.html":{}}}],["src/modules/block/block.service.ts:17",{"_index":845,"title":{},"body":{"injectables/BlockService.html":{}}}],["src/modules/block/block.service.ts:50",{"_index":846,"title":{},"body":{"injectables/BlockService.html":{}}}],["src/modules/block/block.service.ts:8",{"_index":843,"title":{},"body":{"injectables/BlockService.html":{}}}],["src/modules/block/entities/block.entity.ts",{"_index":799,"title":{},"body":{"entities/Block.html":{},"coverage.html":{}}}],["src/modules/block/entities/block.entity.ts:14",{"_index":805,"title":{},"body":{"entities/Block.html":{}}}],["src/modules/block/entities/block.entity.ts:20",{"_index":803,"title":{},"body":{"entities/Block.html":{}}}],["src/modules/block/entities/block.entity.ts:8",{"_index":806,"title":{},"body":{"entities/Block.html":{}}}],["src/modules/feed/feed.controller.ts",{"_index":933,"title":{},"body":{"controllers/FeedController.html":{},"coverage.html":{}}}],["src/modules/feed/feed.controller.ts:13",{"_index":936,"title":{},"body":{"controllers/FeedController.html":{}}}],["src/modules/feed/feed.module.ts",{"_index":946,"title":{},"body":{"modules/FeedModule.html":{}}}],["src/modules/feed/feed.service.ts",{"_index":948,"title":{},"body":{"injectables/FeedService.html":{},"coverage.html":{}}}],["src/modules/feed/feed.service.ts:12",{"_index":950,"title":{},"body":{"injectables/FeedService.html":{}}}],["src/modules/feed/feed.service.ts:21",{"_index":952,"title":{},"body":{"injectables/FeedService.html":{}}}],["src/modules/follow/entities/follow",{"_index":1139,"title":{},"body":{"entities/FollowRequest.html":{},"coverage.html":{}}}],["src/modules/follow/entities/follow.entity.ts",{"_index":1056,"title":{},"body":{"entities/Follow.html":{},"coverage.html":{}}}],["src/modules/follow/entities/follow.entity.ts:14",{"_index":1062,"title":{},"body":{"entities/Follow.html":{}}}],["src/modules/follow/entities/follow.entity.ts:20",{"_index":1060,"title":{},"body":{"entities/Follow.html":{}}}],["src/modules/follow/entities/follow.entity.ts:8",{"_index":1063,"title":{},"body":{"entities/Follow.html":{}}}],["src/modules/follow/follow.controller.ts",{"_index":1067,"title":{},"body":{"controllers/FollowController.html":{},"coverage.html":{}}}],["src/modules/follow/follow.controller.ts:106",{"_index":1091,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:124",{"_index":1094,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:14",{"_index":1101,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:28",{"_index":1080,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:42",{"_index":1097,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:56",{"_index":1104,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:70",{"_index":1083,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:88",{"_index":1086,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.module.ts",{"_index":1135,"title":{},"body":{"modules/FollowModule.html":{}}}],["src/modules/follow/follow.service.ts",{"_index":1152,"title":{},"body":{"injectables/FollowService.html":{},"coverage.html":{}}}],["src/modules/follow/follow.service.ts:107",{"_index":1169,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:13",{"_index":1156,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:138",{"_index":1161,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:160",{"_index":1163,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:182",{"_index":1165,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:203",{"_index":1167,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:224",{"_index":1171,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:25",{"_index":1170,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:72",{"_index":1159,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/notification/dto/send",{"_index":2047,"title":{},"body":{"classes/SendNotificationDto.html":{},"coverage.html":{}}}],["src/modules/notification/notification.controller.ts",{"_index":1278,"title":{},"body":{"controllers/NotificationController.html":{},"coverage.html":{}}}],["src/modules/notification/notification.controller.ts:16",{"_index":1288,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/modules/notification/notification.controller.ts:30",{"_index":1285,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/modules/notification/notification.module.ts",{"_index":1307,"title":{},"body":{"modules/NotificationModule.html":{}}}],["src/modules/notification/notification.service.ts",{"_index":1309,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{}}}],["src/modules/notification/notification.service.ts:12",{"_index":1314,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:144",{"_index":1318,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:18",{"_index":1327,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:189",{"_index":1325,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:22",{"_index":1316,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:50",{"_index":1321,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:97",{"_index":1323,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/payment/payment.controller.ts",{"_index":1442,"title":{},"body":{"controllers/PaymentController.html":{},"coverage.html":{}}}],["src/modules/payment/payment.controller.ts:22",{"_index":1463,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/modules/payment/payment.controller.ts:35",{"_index":1466,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/modules/payment/payment.controller.ts:47",{"_index":1460,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/modules/payment/payment.controller.ts:63",{"_index":1457,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/modules/payment/payment.controller.ts:79",{"_index":1453,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/modules/payment/payment.module.ts",{"_index":1489,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/modules/payment/payment.service.ts",{"_index":1492,"title":{},"body":{"injectables/PaymentService.html":{},"coverage.html":{}}}],["src/modules/payment/payment.service.ts:110",{"_index":1500,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:122",{"_index":1498,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:13",{"_index":1513,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:17",{"_index":1507,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:19",{"_index":1496,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:27",{"_index":1503,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:74",{"_index":1505,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:98",{"_index":1501,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/post/dto/comment",{"_index":881,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/modules/post/dto/post",{"_index":888,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/modules/post/dto/scrapbook",{"_index":901,"title":{},"body":{"classes/CreateScrapBookDto.html":{},"coverage.html":{}}}],["src/modules/post/entities/comment.entity.ts",{"_index":870,"title":{},"body":{"entities/Comment.html":{},"coverage.html":{}}}],["src/modules/post/entities/comment.entity.ts:12",{"_index":877,"title":{},"body":{"entities/Comment.html":{}}}],["src/modules/post/entities/comment.entity.ts:18",{"_index":873,"title":{},"body":{"entities/Comment.html":{}}}],["src/modules/post/entities/comment.entity.ts:24",{"_index":876,"title":{},"body":{"entities/Comment.html":{}}}],["src/modules/post/entities/comment.entity.ts:9",{"_index":874,"title":{},"body":{"entities/Comment.html":{}}}],["src/modules/post/entities/post",{"_index":1255,"title":{},"body":{"entities/Like.html":{},"coverage.html":{}}}],["src/modules/post/entities/post.entity.ts",{"_index":1612,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/modules/post/entities/post.entity.ts:20",{"_index":1624,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:23",{"_index":1621,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:26",{"_index":1640,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:29",{"_index":1641,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:32",{"_index":1633,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:35",{"_index":1642,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:38",{"_index":1629,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:41",{"_index":1628,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:44",{"_index":1627,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:47",{"_index":1626,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:50",{"_index":1632,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:56",{"_index":1635,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:60",{"_index":1637,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:64",{"_index":1639,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:67",{"_index":1623,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:71",{"_index":1620,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:75",{"_index":1631,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts",{"_index":2039,"title":{},"body":{"entities/Scrapbook.html":{},"coverage.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts:15",{"_index":2041,"title":{},"body":{"entities/Scrapbook.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts:18",{"_index":2040,"title":{},"body":{"entities/Scrapbook.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts:21",{"_index":2042,"title":{},"body":{"entities/Scrapbook.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts:24",{"_index":2046,"title":{},"body":{"entities/Scrapbook.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts:30",{"_index":2045,"title":{},"body":{"entities/Scrapbook.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts:34",{"_index":2043,"title":{},"body":{"entities/Scrapbook.html":{}}}],["src/modules/post/post.controller.ts",{"_index":1674,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/modules/post/post.controller.ts:112",{"_index":1705,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:130",{"_index":1698,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:149",{"_index":1738,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:167",{"_index":1732,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:186",{"_index":1727,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:200",{"_index":1692,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:218",{"_index":1719,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:235",{"_index":1721,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:252",{"_index":1710,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:265",{"_index":1735,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:278",{"_index":1742,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:35",{"_index":1702,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:66",{"_index":1723,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:79",{"_index":1716,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:92",{"_index":1713,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.module.ts",{"_index":1803,"title":{},"body":{"modules/PostModule.html":{}}}],["src/modules/post/post.service.ts",{"_index":2299,"title":{},"body":{"coverage.html":{}}}],["src/modules/report/dto/report.dto.ts",{"_index":1893,"title":{},"body":{"classes/ReportDto.html":{},"coverage.html":{}}}],["src/modules/report/dto/report.dto.ts:13",{"_index":1897,"title":{},"body":{"classes/ReportDto.html":{}}}],["src/modules/report/dto/report.dto.ts:9",{"_index":1895,"title":{},"body":{"classes/ReportDto.html":{}}}],["src/modules/report/entities/post",{"_index":1808,"title":{},"body":{"entities/PostReport.html":{},"coverage.html":{}}}],["src/modules/report/entities/user",{"_index":2224,"title":{},"body":{"entities/UserBan.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["src/modules/report/report.controller.ts",{"_index":1821,"title":{},"body":{"controllers/ReportController.html":{},"coverage.html":{}}}],["src/modules/report/report.controller.ts:111",{"_index":1838,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:136",{"_index":1834,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:161",{"_index":1859,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:175",{"_index":1845,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:189",{"_index":1848,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:24",{"_index":1853,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:43",{"_index":1855,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:62",{"_index":1841,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:86",{"_index":1850,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.module.ts",{"_index":1901,"title":{},"body":{"modules/ReportModule.html":{}}}],["src/modules/report/report.service.ts",{"_index":1905,"title":{},"body":{"injectables/ReportService.html":{},"coverage.html":{}}}],["src/modules/report/report.service.ts:139",{"_index":1913,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:15",{"_index":1908,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:165",{"_index":1917,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:190",{"_index":1911,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:223",{"_index":1910,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:252",{"_index":1923,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:269",{"_index":1914,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:297",{"_index":1915,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:33",{"_index":1919,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:90",{"_index":1921,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/tasks/tasks.module.ts",{"_index":2092,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/modules/tasks/tasks.service.ts",{"_index":2095,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/modules/tasks/tasks.service.ts:111",{"_index":2111,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:16",{"_index":2109,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:33",{"_index":2121,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:72",{"_index":2116,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/user/dto/dateofbirth",{"_index":2133,"title":{},"body":{"classes/UpdateUserDateOfBirthDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/email",{"_index":2139,"title":{},"body":{"classes/UpdateUserEmailDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/password",{"_index":2142,"title":{},"body":{"classes/UpdateUserPasseordDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/phone",{"_index":2151,"title":{},"body":{"classes/UpdateUserPhoneNumberDto.html":{},"coverage.html":{}}}],["src/modules/user/entities/user.entity.ts",{"_index":2152,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/modules/user/entities/user.entity.ts:103",{"_index":2197,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:107",{"_index":2190,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:111",{"_index":2192,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:115",{"_index":2194,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:118",{"_index":2158,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:122",{"_index":2164,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:126",{"_index":2156,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:130",{"_index":2162,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:134",{"_index":2160,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:138",{"_index":2170,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:142",{"_index":2169,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:146",{"_index":2172,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:150",{"_index":2171,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:154",{"_index":2180,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:36",{"_index":2176,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:39",{"_index":2168,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:42",{"_index":2178,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:45",{"_index":2166,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:48",{"_index":2200,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:51",{"_index":2183,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:54",{"_index":2184,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:57",{"_index":2154,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:60",{"_index":2165,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:63",{"_index":2195,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:66",{"_index":2188,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:69",{"_index":2187,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:72",{"_index":2186,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:75",{"_index":2174,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:78",{"_index":2167,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:81",{"_index":2181,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:84",{"_index":2177,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:87",{"_index":2175,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:90",{"_index":2198,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:93",{"_index":2199,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:99",{"_index":2185,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/user.controller.ts",{"_index":2309,"title":{},"body":{"coverage.html":{}}}],["src/modules/user/user.module.ts",{"_index":2240,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/user/user.service.ts",{"_index":2311,"title":{},"body":{"coverage.html":{}}}],["standard",{"_index":2375,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["start",{"_index":447,"title":{},"body":{"modules/AppModule.html":{}}}],["startdate",{"_index":127,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"entities/UserBan.html":{}}}],["started",{"_index":2383,"title":{"index.html":{}},"body":{}}],["statements",{"_index":2256,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":98,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673974513613.html":{},"entities/Appeal.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/PostReport.html":{},"injectables/ReportService.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["status(httpstatus.created",{"_index":720,"title":{},"body":{"controllers/AuthController.html":{}}}],["status.enum",{"_index":479,"title":{},"body":{"entities/Appeal.html":{},"injectables/AppealsService.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/PostReport.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["status.enum.ts",{"_index":2344,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["still",{"_index":1935,"title":{},"body":{"injectables/ReportService.html":{}}}],["storage",{"_index":981,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["storage.service",{"_index":1648,"title":{},"body":{"entities/Post.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["storage.service.ts",{"_index":979,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"coverage.html":{}}}],["storage.service.ts:110",{"_index":997,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:139",{"_index":995,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:16",{"_index":1018,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:25",{"_index":1009,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:50",{"_index":1000,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:68",{"_index":991,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:80",{"_index":1012,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:98",{"_index":993,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storagebucket",{"_index":2404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategies/jwt.strategy",{"_index":750,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":751,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":666,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":20,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/Like.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"entities/PostReport.html":{},"classes/ReportDto.html":{},"injectables/ReportService.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"miscellaneous/variables.html":{}}}],["stripe",{"_index":1494,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{},"dependencies.html":{}}}],["stripe(process.env?.stripe_test_key",{"_index":1508,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.customer",{"_index":1524,"title":{},"body":{"injectables/PaymentService.html":{}}}],["stripecustomerid",{"_index":235,"title":{},"body":{"classes/$npmConfigName1674544597118.html":{},"injectables/PaymentService.html":{},"entities/User.html":{}}}],["stripeservice",{"_index":2081,"title":{"injectables/StripeService.html":{}},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["stripesignature",{"_index":1499,"title":{},"body":{"injectables/PaymentService.html":{}}}],["sub",{"_index":788,"title":{},"body":{"injectables/AuthService.html":{}}}],["subscribe",{"_index":1447,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["subscribe(@request",{"_index":1471,"title":{},"body":{"controllers/PaymentController.html":{}}}],["subscribe(req",{"_index":1461,"title":{},"body":{"controllers/PaymentController.html":{}}}],["subscribe(req.user",{"_index":1473,"title":{},"body":{"controllers/PaymentController.html":{}}}],["subscribe(user",{"_index":1502,"title":{},"body":{"injectables/PaymentService.html":{}}}],["subscription",{"_index":1537,"title":{},"body":{"injectables/PaymentService.html":{}}}],["subscriptiondeletedevent",{"_index":1599,"title":{},"body":{"injectables/PaymentService.html":{}}}],["subscriptiondeletedevent.customer",{"_index":1601,"title":{},"body":{"injectables/PaymentService.html":{}}}],["subscriptionplan",{"_index":236,"title":{},"body":{"classes/$npmConfigName1674544597118.html":{},"injectables/PaymentService.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["subscriptionplan.basic",{"_index":1526,"title":{},"body":{"injectables/PaymentService.html":{},"entities/User.html":{}}}],["subscriptionplan.premium",{"_index":1536,"title":{},"body":{"injectables/PaymentService.html":{}}}],["subscriptions",{"_index":1557,"title":{},"body":{"injectables/PaymentService.html":{}}}],["success",{"_index":1474,"title":{},"body":{"controllers/PaymentController.html":{}}}],["success_url",{"_index":1550,"title":{},"body":{"injectables/PaymentService.html":{}}}],["successcustomer",{"_index":1577,"title":{},"body":{"injectables/PaymentService.html":{}}}],["successcustomer.id",{"_index":1581,"title":{},"body":{"injectables/PaymentService.html":{}}}],["successful",{"_index":1584,"title":{},"body":{"injectables/PaymentService.html":{}}}],["successfully",{"_index":1606,"title":{},"body":{"injectables/PaymentService.html":{},"controllers/PostController.html":{}}}],["successuser",{"_index":1580,"title":{},"body":{"injectables/PaymentService.html":{}}}],["successuser.id",{"_index":1586,"title":{},"body":{"injectables/PaymentService.html":{}}}],["super",{"_index":1237,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":2389,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":2390,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1571,"title":{},"body":{"injectables/PaymentService.html":{}}}],["synchronize",{"_index":436,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":1375,"title":{},"body":{"classes/PageDto.html":{}}}],["table",{"_index":39,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"modules/AppModule.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2314,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":68,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["take",{"_index":1391,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["take(pageoptionsdto.take",{"_index":635,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["taken",{"_index":601,"title":{},"body":{"injectables/AppealsService.html":{}}}],["target",{"_index":1332,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SendNotificationDto.html":{},"miscellaneous/enumerations.html":{}}}],["targetgroup",{"_index":2049,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["targetuserid",{"_index":2050,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["tasks",{"_index":2097,"title":{},"body":{"injectables/TasksService.html":{}}}],["tasks.service",{"_index":2093,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasksmodule",{"_index":372,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":2091,"title":{"injectables/TasksService.html":{}},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["template",{"_index":2385,"title":{},"body":{"index.html":{}}}],["temporary",{"_index":1054,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["text",{"_index":167,"title":{},"body":{"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{}}}],["thank",{"_index":1585,"title":{},"body":{"injectables/PaymentService.html":{}}}],["then((_",{"_index":832,"title":{},"body":{"controllers/BlockController.html":{},"controllers/FollowController.html":{}}}],["then((analytics",{"_index":272,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["then((appeal",{"_index":540,"title":{},"body":{"controllers/AppealsController.html":{}}}],["then((appeals",{"_index":559,"title":{},"body":{"controllers/AppealsController.html":{}}}],["then((appealsandcount",{"_index":639,"title":{},"body":{"injectables/AppealsService.html":{}}}],["then((block",{"_index":827,"title":{},"body":{"controllers/BlockController.html":{}}}],["then((comments",{"_index":1788,"title":{},"body":{"controllers/PostController.html":{}}}],["then((post",{"_index":1757,"title":{},"body":{"controllers/PostController.html":{}}}],["then((postreportsandcount",{"_index":1974,"title":{},"body":{"injectables/ReportService.html":{}}}],["then((posts",{"_index":942,"title":{},"body":{"controllers/FeedController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["then((postsandcount",{"_index":2010,"title":{},"body":{"injectables/ReportService.html":{}}}],["then((report",{"_index":1869,"title":{},"body":{"controllers/ReportController.html":{}}}],["then((reports",{"_index":1874,"title":{},"body":{"controllers/ReportController.html":{}}}],["then((result",{"_index":1113,"title":{},"body":{"controllers/FollowController.html":{},"controllers/PaymentController.html":{}}}],["then((user",{"_index":1941,"title":{},"body":{"injectables/ReportService.html":{}}}],["then((userreportsandcount",{"_index":1984,"title":{},"body":{"injectables/ReportService.html":{}}}],["then((usersandcount",{"_index":2017,"title":{},"body":{"injectables/ReportService.html":{}}}],["then(async",{"_index":1051,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/TasksService.html":{}}}],["this.analyticsservice",{"_index":270,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["this.appealrepository",{"_index":629,"title":{},"body":{"injectables/AppealsService.html":{}}}],["this.appealrepository.save(appeal",{"_index":627,"title":{},"body":{"injectables/AppealsService.html":{}}}],["this.appealrepository.save(newappeal",{"_index":614,"title":{},"body":{"injectables/AppealsService.html":{}}}],["this.appealsservice",{"_index":538,"title":{},"body":{"controllers/AppealsController.html":{}}}],["this.authservice.isuserbanned(req.user",{"_index":730,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(req.user",{"_index":731,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":1276,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.blockrepository.delete",{"_index":869,"title":{},"body":{"injectables/BlockService.html":{}}}],["this.blockrepository.save(newblock",{"_index":860,"title":{},"body":{"injectables/BlockService.html":{}}}],["this.blockservice",{"_index":825,"title":{},"body":{"controllers/BlockController.html":{}}}],["this.data",{"_index":1382,"title":{},"body":{"classes/PageDto.html":{}}}],["this.deleteavatar(previousimageid",{"_index":1041,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["this.email",{"_index":2219,"title":{},"body":{"entities/User.html":{}}}],["this.email.tolowercase",{"_index":2220,"title":{},"body":{"entities/User.html":{}}}],["this.endpointsecret",{"_index":1568,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.expirydate",{"_index":1039,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["this.feedservice",{"_index":940,"title":{},"body":{"controllers/FeedController.html":{}}}],["this.followrequestsrepository.findone",{"_index":1192,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.followrequestsrepository.save(followrequest",{"_index":1191,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.followrequestsrepository.update(followrequest.id",{"_index":1201,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.followservice",{"_index":1111,"title":{},"body":{"controllers/FollowController.html":{}}}],["this.followsrepository.delete(followid",{"_index":1224,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.followsrepository.save(follow",{"_index":1204,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.hasnextpage",{"_index":1408,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.haspreviouspage",{"_index":1407,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.itemcount",{"_index":1404,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.jwtservice.sign(payload",{"_index":790,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.meta",{"_index":1383,"title":{},"body":{"classes/PageDto.html":{}}}],["this.notificationservice",{"_index":1297,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/PaymentService.html":{}}}],["this.page",{"_index":1402,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.pagecount",{"_index":1405,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.password",{"_index":2222,"title":{},"body":{"entities/User.html":{}}}],["this.paymentservice",{"_index":1472,"title":{},"body":{"controllers/PaymentController.html":{}}}],["this.postreportsrepository",{"_index":1969,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.postreportsrepository.findone",{"_index":2001,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.postreportsrepository.save(newreport",{"_index":1953,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.postreportsrepository.save(report",{"_index":2002,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.postrepository",{"_index":2003,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.postrepository.find",{"_index":961,"title":{},"body":{"injectables/FeedService.html":{}}}],["this.postrepository.findone",{"_index":319,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["this.postrepository.update(postid",{"_index":626,"title":{},"body":{"injectables/AppealsService.html":{}}}],["this.postservice",{"_index":1755,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.createpostwithimage(req.user",{"_index":1752,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.createscrapbook(req.user",{"_index":1770,"title":{},"body":{"controllers/PostController.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":2033,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reportservice",{"_index":1867,"title":{},"body":{"controllers/ReportController.html":{}}}],["this.sendnotificationtoall(sendnotificationdto.title",{"_index":1345,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.sendnotificationtocelebrities",{"_index":1347,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.sendnotificationtoinfluencers",{"_index":1349,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.sendnotificationtoone",{"_index":1341,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.stripe.checkout.sessions.create",{"_index":1539,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.stripe.checkout.sessions.retrieve(sessionid",{"_index":1559,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.stripe.customers.create",{"_index":1528,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.stripe.customers.del(customerid",{"_index":2088,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.retrieve",{"_index":1578,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.stripe.customers.retrieve(session.customer",{"_index":1560,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.stripe.subscriptions.list",{"_index":1558,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.stripe.webhooks.constructevent(body",{"_index":1567,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.take",{"_index":1403,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.userbanrepository.save(newban",{"_index":2000,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.userreportsrepository",{"_index":1979,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.userreportsrepository.findone",{"_index":1996,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.userreportsrepository.save(newreport",{"_index":1967,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.userreportsrepository.save(report",{"_index":1998,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.userrepository",{"_index":1561,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["this.userrepository.findone",{"_index":619,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["this.userrepository.findoneby",{"_index":850,"title":{},"body":{"injectables/BlockService.html":{}}}],["this.userrepository.update(dbuser.id",{"_index":1534,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.userrepository.update(deleteduser.id",{"_index":1604,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.userrepository.update(failuser.id",{"_index":1595,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.userrepository.update(successuser.id",{"_index":1582,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.userrepository.update(userid",{"_index":1999,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.userservice.create(body).then((user",{"_index":722,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.createadmin(body).then((user",{"_index":726,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.createuserwithimage(body",{"_index":715,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.findonebyemail(body.email).then((user",{"_index":713,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersrepository",{"_index":778,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.find",{"_index":1351,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.usersrepository.findone",{"_index":1178,"title":{},"body":{"injectables/FollowService.html":{},"injectables/NotificationService.html":{}}}],["this.usersrepository.findoneby",{"_index":1176,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.usersrepository.update(user.id",{"_index":1335,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.usersservice.isuserbanned(user.id).then((result",{"_index":791,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":329,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"injectables/ReportService.html":{},"classes/SignUpUserDto.html":{}}}],["throws",{"_index":1273,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["time",{"_index":2105,"title":{},"body":{"injectables/TasksService.html":{}}}],["times",{"_index":2236,"title":{},"body":{"entities/UserBan.html":{}}}],["timestamp",{"_index":154,"title":{},"body":{"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["tinyint",{"_index":135,"title":{},"body":{"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674544597118.html":{}}}],["title",{"_index":1319,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SendNotificationDto.html":{}}}],["token",{"_index":670,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["tokens",{"_index":1363,"title":{},"body":{"injectables/NotificationService.html":{}}}],["tomorrow",{"_index":2120,"title":{},"body":{"injectables/TasksService.html":{}}}],["tomorrow.setdate(tomorrow.getdate",{"_index":2128,"title":{},"body":{"injectables/TasksService.html":{}}}],["transfer",{"_index":1380,"title":{},"body":{"classes/PageDto.html":{}}}],["transformer",{"_index":2322,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":344,"title":{},"body":{"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/FollowService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{}}}],["try",{"_index":1566,"title":{},"body":{"injectables/PaymentService.html":{}}}],["type",{"_index":18,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":35,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"injectables/AnalyticsService.html":{},"entities/Appeal.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"injectables/FeedService.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/Like.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"injectables/ReportService.html":{},"entities/Scrapbook.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"dependencies.html":{}}}],["typeorm.config.ts",{"_index":2313,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":290,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([appeal",{"_index":567,"title":{},"body":{"modules/AppealsModule.html":{}}}],["typeormmodule.forfeature([block",{"_index":840,"title":{},"body":{"modules/BlockModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":296,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/FeedModule.html":{},"modules/PostModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":753,"title":{},"body":{"modules/AuthModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([userreport",{"_index":1904,"title":{},"body":{"modules/ReportModule.html":{}}}],["typeormmodule.forrootasync",{"_index":417,"title":{},"body":{"modules/AppModule.html":{}}}],["unauthorizedexception",{"_index":1274,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unbanned",{"_index":1861,"title":{},"body":{"controllers/ReportController.html":{}}}],["unbanpost",{"_index":1829,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["unbanpost(@request",{"_index":1886,"title":{},"body":{"controllers/ReportController.html":{}}}],["unbanpost(id",{"_index":1922,"title":{},"body":{"injectables/ReportService.html":{}}}],["unbanpost(params.id",{"_index":1887,"title":{},"body":{"controllers/ReportController.html":{}}}],["unbanpost(req",{"_index":1856,"title":{},"body":{"controllers/ReportController.html":{}}}],["unbans",{"_index":1860,"title":{},"body":{"controllers/ReportController.html":{}}}],["unblock",{"_index":863,"title":{},"body":{"injectables/BlockService.html":{}}}],["unblocked",{"_index":834,"title":{},"body":{"controllers/BlockController.html":{}}}],["unblockinguser",{"_index":864,"title":{},"body":{"injectables/BlockService.html":{}}}],["unblockinguser.blocks.map((block",{"_index":867,"title":{},"body":{"injectables/BlockService.html":{}}}],["unblockuser",{"_index":812,"title":{},"body":{"controllers/BlockController.html":{},"injectables/BlockService.html":{}}}],["unblockuser(@request",{"_index":830,"title":{},"body":{"controllers/BlockController.html":{}}}],["unblockuser(id",{"_index":831,"title":{},"body":{"controllers/BlockController.html":{},"injectables/BlockService.html":{}}}],["unblockuser(req",{"_index":817,"title":{},"body":{"controllers/BlockController.html":{}}}],["undefined",{"_index":141,"title":{},"body":{"classes/$npmConfigName1672678196724.html":{},"entities/Appeal.html":{},"entities/FollowRequest.html":{},"entities/PostReport.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"miscellaneous/enumerations.html":{}}}],["undefined)[0",{"_index":625,"title":{},"body":{"injectables/AppealsService.html":{}}}],["unfollow",{"_index":1075,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["unfollow(@request",{"_index":1122,"title":{},"body":{"controllers/FollowController.html":{}}}],["unfollow(id",{"_index":1123,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["unfollow(req",{"_index":1102,"title":{},"body":{"controllers/FollowController.html":{}}}],["unfollowed",{"_index":1124,"title":{},"body":{"controllers/FollowController.html":{}}}],["unknown",{"_index":667,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/JwtStrategy.html":{},"injectables/PaymentService.html":{}}}],["unlicensed",{"_index":2397,"title":{},"body":{"properties.html":{}}}],["unlike",{"_index":1689,"title":{},"body":{"controllers/PostController.html":{}}}],["unlike(@request",{"_index":1797,"title":{},"body":{"controllers/PostController.html":{}}}],["unlike(req",{"_index":1740,"title":{},"body":{"controllers/PostController.html":{}}}],["unliked",{"_index":1799,"title":{},"body":{"controllers/PostController.html":{}}}],["unlikepost(req.user",{"_index":1798,"title":{},"body":{"controllers/PostController.html":{}}}],["unsubscribe",{"_index":1448,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["unsubscribe(@request",{"_index":1476,"title":{},"body":{"controllers/PaymentController.html":{}}}],["unsubscribe(req",{"_index":1464,"title":{},"body":{"controllers/PaymentController.html":{}}}],["unsubscribe(req.user",{"_index":1477,"title":{},"body":{"controllers/PaymentController.html":{}}}],["unsubscribe(user",{"_index":1504,"title":{},"body":{"injectables/PaymentService.html":{}}}],["unsubscribed",{"_index":1605,"title":{},"body":{"injectables/PaymentService.html":{}}}],["unsuccessful",{"_index":1596,"title":{},"body":{"injectables/PaymentService.html":{}}}],["up",{"_index":17,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"controllers/AuthController.html":{},"classes/SignUpUserDto.html":{}}}],["up(queryrunner",{"_index":32,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{}}}],["update",{"_index":63,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{},"injectables/FirebaseStorageService.html":{}}}],["update(post",{"_index":2004,"title":{},"body":{"injectables/ReportService.html":{}}}],["update(user",{"_index":1562,"title":{},"body":{"injectables/PaymentService.html":{}}}],["update.dto.ts",{"_index":2134,"title":{},"body":{"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"coverage.html":{}}}],["update.dto.ts:13",{"_index":2145,"title":{},"body":{"classes/UpdateUserPasseordDto.html":{}}}],["update.dto.ts:5",{"_index":2146,"title":{},"body":{"classes/UpdateUserPasseordDto.html":{}}}],["update.dto.ts:7",{"_index":2137,"title":{},"body":{"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["update.dto.ts:9",{"_index":2147,"title":{},"body":{"classes/UpdateUserPasseordDto.html":{}}}],["updateavatar",{"_index":987,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["updateavatar(image",{"_index":998,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["updatedat",{"_index":62,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/BaseEntity.html":{}}}],["updatedatecolumn",{"_index":796,"title":{},"body":{"classes/BaseEntity.html":{}}}],["updateresult",{"_index":1173,"title":{},"body":{"injectables/FollowService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["updates",{"_index":2117,"title":{},"body":{"injectables/TasksService.html":{}}}],["updateuserdateofbirthdto",{"_index":2132,"title":{"classes/UpdateUserDateOfBirthDto.html":{}},"body":{"classes/UpdateUserDateOfBirthDto.html":{},"coverage.html":{}}}],["updateuseremaildto",{"_index":2138,"title":{"classes/UpdateUserEmailDto.html":{}},"body":{"classes/UpdateUserEmailDto.html":{},"coverage.html":{}}}],["updateuserpasseorddto",{"_index":2141,"title":{"classes/UpdateUserPasseordDto.html":{}},"body":{"classes/UpdateUserPasseordDto.html":{},"coverage.html":{}}}],["updateuserphonenumberdto",{"_index":2150,"title":{"classes/UpdateUserPhoneNumberDto.html":{}},"body":{"classes/UpdateUserPhoneNumberDto.html":{},"coverage.html":{}}}],["updateuserposturls",{"_index":2107,"title":{},"body":{"injectables/TasksService.html":{}}}],["updateuserprofileurls",{"_index":2108,"title":{},"body":{"injectables/TasksService.html":{}}}],["updating",{"_index":2135,"title":{},"body":{"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["upload",{"_index":1010,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["uploadavatar",{"_index":988,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["uploadavatar(image",{"_index":1008,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["uploaded",{"_index":1003,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["uploadedfile",{"_index":692,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["uploadpostimage",{"_index":989,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["uploadpostimage(image",{"_index":1011,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["url",{"_index":1005,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/TasksService.html":{}}}],["urloptions",{"_index":1035,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["urls",{"_index":1020,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["use",{"_index":418,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["used",{"_index":658,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"classes/SignUpUserDto.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["usefactory",{"_index":422,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":255,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["useguards(jwtauthguard",{"_index":266,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["useguards(jwtauthguard)@delete('/:id",{"_index":1712,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@delete('comment/:id",{"_index":1709,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@delete('unfollow/:id",{"_index":1103,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@delete('unlike/:id",{"_index":1741,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@get",{"_index":935,"title":{},"body":{"controllers/FeedController.html":{}}}],["useguards(jwtauthguard)@get('/:id",{"_index":1715,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@get('follow",{"_index":1088,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@get('followers",{"_index":1082,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@get('following",{"_index":1085,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@get('post",{"_index":511,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["useguards(jwtauthguard)@get('post/:id",{"_index":249,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["useguards(jwtauthguard)@get('scrapbook/:id",{"_index":1726,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@get('scrapbook/user",{"_index":1730,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@get('user",{"_index":515,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["useguards(jwtauthguard)@patch('accept",{"_index":1078,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@patch('reject",{"_index":1096,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@patch('scrapbook/:id/remove",{"_index":1737,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@post('appeal",{"_index":522,"title":{},"body":{"controllers/AppealsController.html":{}}}],["useguards(jwtauthguard)@post('block",{"_index":814,"title":{},"body":{"controllers/BlockController.html":{}}}],["useguards(jwtauthguard)@post('comment/:id",{"_index":1691,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@post('create')@useinterceptors(undefined",{"_index":1701,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@post('like/:id",{"_index":1734,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@post('report",{"_index":1852,"title":{},"body":{"controllers/ReportController.html":{}}}],["useguards(jwtauthguard)@post('request",{"_index":1099,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@post('scrapbook/:id/add",{"_index":1696,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@post('scrapbook/create",{"_index":1704,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@post('signup/:fcmtoken",{"_index":1287,"title":{},"body":{"controllers/NotificationController.html":{}}}],["useguards(jwtauthguard)@post('subscribe",{"_index":1462,"title":{},"body":{"controllers/PaymentController.html":{}}}],["useguards(jwtauthguard)@post('unblock",{"_index":818,"title":{},"body":{"controllers/BlockController.html":{}}}],["useguards(jwtauthguard)@post('unsubscribe",{"_index":1465,"title":{},"body":{"controllers/PaymentController.html":{}}}],["useguards(localauthguard",{"_index":727,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('login",{"_index":653,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":691,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["useinterceptors(fileinterceptor('avatar",{"_index":707,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors(fileinterceptor('image",{"_index":1751,"title":{},"body":{"controllers/PostController.html":{}}}],["user",{"_index":40,"title":{"entities/User.html":{}},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674544597118.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"entities/Appeal.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/Like.html":{},"injectables/LocalStrategy.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SignUpUserDto.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["user.appeals",{"_index":461,"title":{},"body":{"entities/Appeal.html":{}}}],["user.bans",{"_index":2227,"title":{},"body":{"entities/UserBan.html":{}}}],["user.blockedby",{"_index":802,"title":{},"body":{"entities/Block.html":{}}}],["user.blocks",{"_index":804,"title":{},"body":{"entities/Block.html":{}}}],["user.comments",{"_index":872,"title":{},"body":{"entities/Comment.html":{}}}],["user.controller",{"_index":2242,"title":{},"body":{"modules/UserModule.html":{}}}],["user.email",{"_index":787,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.fcmtoken",{"_index":1360,"title":{},"body":{"injectables/NotificationService.html":{}}}],["user.followed.posts)[0",{"_index":967,"title":{},"body":{"injectables/FeedService.html":{}}}],["user.followers",{"_index":1059,"title":{},"body":{"entities/Follow.html":{},"entities/User.html":{}}}],["user.following",{"_index":1061,"title":{},"body":{"entities/Follow.html":{}}}],["user.followrequestsreceived",{"_index":1146,"title":{},"body":{"entities/FollowRequest.html":{}}}],["user.followrequestssent",{"_index":1144,"title":{},"body":{"entities/FollowRequest.html":{}}}],["user.id",{"_index":328,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["user.likes",{"_index":1260,"title":{},"body":{"entities/Like.html":{}}}],["user.password",{"_index":784,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.posts",{"_index":1634,"title":{},"body":{"entities/Post.html":{}}}],["user.reportedposts",{"_index":1814,"title":{},"body":{"entities/PostReport.html":{}}}],["user.reportedposts.map((reports",{"_index":1942,"title":{},"body":{"injectables/ReportService.html":{}}}],["user.reportedusers",{"_index":2248,"title":{},"body":{"entities/UserReport.html":{}}}],["user.reportedusers.map((reports",{"_index":1960,"title":{},"body":{"injectables/ReportService.html":{}}}],["user.reportsagainst",{"_index":2250,"title":{},"body":{"entities/UserReport.html":{}}}],["user.role",{"_index":325,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AuthService.html":{}}}],["user.role?.includes(role",{"_index":2038,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.scrapbooks",{"_index":2044,"title":{},"body":{"entities/Scrapbook.html":{}}}],["user.service",{"_index":2244,"title":{},"body":{"modules/UserModule.html":{}}}],["user/:id",{"_index":815,"title":{},"body":{"controllers/BlockController.html":{}}}],["user/:userid/:reportid",{"_index":1878,"title":{},"body":{"controllers/ReportController.html":{}}}],["user/:userid/:reportid')@roles(role.admin",{"_index":1837,"title":{},"body":{"controllers/ReportController.html":{}}}],["user/entities/user.entity",{"_index":293,"title":{},"body":{"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"entities/Appeal.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Block.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"entities/Follow.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/Like.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"entities/Scrapbook.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["user/signup",{"_index":687,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/user.module",{"_index":746,"title":{},"body":{"modules/AuthModule.html":{}}}],["user/user.service",{"_index":696,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user\\`(\\`id",{"_index":79,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["user_ban",{"_index":125,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["user_report",{"_index":101,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["user_report\\`(\\`id",{"_index":108,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672417201262.html":{}}}],["userban",{"_index":395,"title":{"entities/UserBan.html":{}},"body":{"modules/AppModule.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"entities/UserBan.html":{},"coverage.html":{}}}],["userban.banneduser",{"_index":2157,"title":{},"body":{"entities/User.html":{}}}],["userbanrepository",{"_index":1907,"title":{},"body":{"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["usercontroller",{"_index":2241,"title":{},"body":{"modules/UserModule.html":{},"coverage.html":{}}}],["userfound",{"_index":865,"title":{},"body":{"injectables/BlockService.html":{}}}],["userid",{"_index":89,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1674493007150.html":{},"injectables/FirebaseStorageService.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["usermodule",{"_index":373,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":430,"title":{},"body":{"modules/AppModule.html":{},"classes/SignUpUserDto.html":{},"entities/User.html":{}}}],["usernamefield",{"_index":1275,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userreport",{"_index":392,"title":{"entities/UserReport.html":{}},"body":{"modules/AppModule.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"entities/User.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["userreport.reportedby",{"_index":2191,"title":{},"body":{"entities/User.html":{}}}],["userreport.reporteduser",{"_index":2193,"title":{},"body":{"entities/User.html":{}}}],["userreportedposts",{"_index":1936,"title":{},"body":{"injectables/ReportService.html":{}}}],["userreportedposts.map((reportedpost",{"_index":1946,"title":{},"body":{"injectables/ReportService.html":{}}}],["userreportedusers",{"_index":1957,"title":{},"body":{"injectables/ReportService.html":{}}}],["userreportedusers.map((reporteduser",{"_index":1963,"title":{},"body":{"injectables/ReportService.html":{}}}],["userreportsandcount[0",{"_index":1985,"title":{},"body":{"injectables/ReportService.html":{}}}],["userreportsandcount[1",{"_index":1986,"title":{},"body":{"injectables/ReportService.html":{}}}],["userreportsrepository",{"_index":1909,"title":{},"body":{"injectables/ReportService.html":{}}}],["userrepository",{"_index":303,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["userrequestingfollow",{"_index":1177,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingfollow.following.map((follow",{"_index":1187,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingfollow.followrequestssent.map((followrequest",{"_index":1184,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingfollow.id",{"_index":1183,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingunfollow",{"_index":1217,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingunfollow.following.map((follow",{"_index":1222,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingunfollow.id",{"_index":1219,"title":{},"body":{"injectables/FollowService.html":{}}}],["users",{"_index":1206,"title":{},"body":{"injectables/FollowService.html":{},"injectables/NotificationService.html":{},"entities/Post.html":{},"controllers/ReportController.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["users')@roles(role.admin",{"_index":1847,"title":{},"body":{"controllers/ReportController.html":{}}}],["users.length",{"_index":1208,"title":{},"body":{"injectables/FollowService.html":{}}}],["users/${userid}/avatars/${imageid}.png",{"_index":1044,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["users/${userid}/posts/${postid}/${imageid}.png",{"_index":1049,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["usersalreadyreported",{"_index":1962,"title":{},"body":{"injectables/ReportService.html":{}}}],["usersalreadyreported.includes(true",{"_index":1965,"title":{},"body":{"injectables/ReportService.html":{}}}],["usersandcount[0",{"_index":2018,"title":{},"body":{"injectables/ReportService.html":{}}}],["usersandcount[0].length",{"_index":2019,"title":{},"body":{"injectables/ReportService.html":{}}}],["userservice",{"_index":695,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersrepository",{"_index":759,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FollowService.html":{},"injectables/NotificationService.html":{}}}],["usersservice",{"_index":761,"title":{},"body":{"injectables/AuthService.html":{}}}],["userstobenotified",{"_index":1350,"title":{},"body":{"injectables/NotificationService.html":{}}}],["userstobenotified.length",{"_index":1355,"title":{},"body":{"injectables/NotificationService.html":{}}}],["userstobenotified.map((user",{"_index":1359,"title":{},"body":{"injectables/NotificationService.html":{}}}],["usertobeblocked",{"_index":849,"title":{},"body":{"injectables/BlockService.html":{}}}],["usertobeblocked.id",{"_index":851,"title":{},"body":{"injectables/BlockService.html":{}}}],["usertobefollowed",{"_index":1158,"title":{},"body":{"injectables/FollowService.html":{}}}],["usertobefollowed.id",{"_index":1182,"title":{},"body":{"injectables/FollowService.html":{}}}],["usertobenotified",{"_index":1367,"title":{},"body":{"injectables/NotificationService.html":{}}}],["usertobenotified.fcmtoken",{"_index":1369,"title":{},"body":{"injectables/NotificationService.html":{}}}],["usertobereported",{"_index":1954,"title":{},"body":{"injectables/ReportService.html":{}}}],["usertobereported.id",{"_index":1956,"title":{},"body":{"injectables/ReportService.html":{}}}],["usertobeunblocked",{"_index":861,"title":{},"body":{"injectables/BlockService.html":{}}}],["usertobeunblocked.id",{"_index":862,"title":{},"body":{"injectables/BlockService.html":{}}}],["usertobeunfollowed",{"_index":1216,"title":{},"body":{"injectables/FollowService.html":{}}}],["usertobeunfollowed.id",{"_index":1218,"title":{},"body":{"injectables/FollowService.html":{}}}],["using",{"_index":664,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["uuid",{"_index":1025,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":1024,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["v4",{"_index":1023,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["valid",{"_index":1196,"title":{},"body":{"injectables/FollowService.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["validate",{"_index":771,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/SignUpUserDto.html":{}}}],["validate(email",{"_index":1270,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1231,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validates",{"_index":1272,"title":{},"body":{"injectables/LocalStrategy.html":{},"classes/SignUpUserDto.html":{}}}],["validateuser",{"_index":756,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":768,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":489,"title":{},"body":{"classes/AppealDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PostAnalyticResposneDto.html":{},"classes/ReportDto.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"dependencies.html":{}}}],["value",{"_index":22,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"modules/AppModule.html":{},"entities/Appeal.html":{},"injectables/FirebaseStorageService.html":{},"entities/FollowRequest.html":{},"classes/PageOptionsDto.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"injectables/StripeService.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1434,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["varchar(255",{"_index":43,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674544597118.html":{}}}],["varchar(36",{"_index":65,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{}}}],["variable",{"_index":426,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{}}}],["variables",{"_index":421,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["verified",{"_index":1251,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["verify",{"_index":1247,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["version",{"_index":1036,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"properties.html":{}}}],["view",{"_index":333,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{}}}],["visibility",{"_index":70,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/FeedService.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"entities/Scrapbook.html":{},"miscellaneous/enumerations.html":{}}}],["visibility.public",{"_index":962,"title":{},"body":{"injectables/FeedService.html":{}}}],["void",{"_index":252,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["want",{"_index":1050,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["webhook",{"_index":1452,"title":{},"body":{"controllers/PaymentController.html":{}}}],["week",{"_index":1995,"title":{},"body":{"injectables/ReportService.html":{}}}],["where('email",{"_index":780,"title":{},"body":{"injectables/AuthService.html":{}}}],["where('id",{"_index":2005,"title":{},"body":{"injectables/ReportService.html":{}}}],["where('postreport.reportedpost.id",{"_index":1972,"title":{},"body":{"injectables/ReportService.html":{}}}],["where('postreport.status",{"_index":2006,"title":{},"body":{"injectables/ReportService.html":{}}}],["where('stripecustomerid",{"_index":1563,"title":{},"body":{"injectables/PaymentService.html":{}}}],["where('userreport.reporteduser.id",{"_index":1982,"title":{},"body":{"injectables/ReportService.html":{}}}],["where('userreport.status",{"_index":2013,"title":{},"body":{"injectables/ReportService.html":{}}}],["whose",{"_index":2115,"title":{},"body":{"injectables/TasksService.html":{}}}],["world",{"_index":455,"title":{},"body":{"injectables/AppService.html":{}}}],["yourself",{"_index":852,"title":{},"body":{"injectables/BlockService.html":{},"injectables/FollowService.html":{},"injectables/ReportService.html":{}}}],["zoom",{"_index":285,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/$npmConfigName1672082558971.html":{"url":"classes/$npmConfigName1672082558971.html","title":"class - $npmConfigName1672082558971","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672082558971\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672082558971-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672082558971'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672082558971-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672082558971-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672082558971-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672082558971 implements MigrationInterface {\n    name = '$npmConfigName1672082558971'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`roles\\` varchar(255) NOT NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`roles\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672082713679.html":{"url":"classes/$npmConfigName1672082713679.html","title":"class - $npmConfigName1672082713679","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672082713679\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672082713679-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672082713679'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672082713679-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672082713679-$npm_config_name.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672082713679-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672082713679 implements MigrationInterface {\n    name = '$npmConfigName1672082713679'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`roles\\` \\`role\\` varchar(255) NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`role\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`role\\` varchar(255) NOT NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`role\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`role\\` varchar(255) NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`role\\` \\`roles\\` varchar(255) NOT NULL`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672133224744.html":{"url":"classes/$npmConfigName1672133224744.html","title":"class - $npmConfigName1672133224744","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672133224744\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672133224744-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672133224744'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672133224744-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672133224744-$npm_config_name.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672133224744-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672133224744 implements MigrationInterface {\n    name = '$npmConfigName1672133224744'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`post\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`caption\\` varchar(255) NOT NULL, \\`imageUrl\\` varchar(255) NOT NULL, \\`tag\\` varchar(255) NOT NULL, \\`type\\` varchar(255) NOT NULL, \\`location\\` varchar(255) NOT NULL, \\`visibility\\` varchar(255) NOT NULL, \\`postedById\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_fb7ffd0860cbcc5cf22c96d3c05\\` FOREIGN KEY (\\`postedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_fb7ffd0860cbcc5cf22c96d3c05\\``);\n        await queryRunner.query(`DROP TABLE \\`post\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672166137042.html":{"url":"classes/$npmConfigName1672166137042.html","title":"class - $npmConfigName1672166137042","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672166137042\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672166137042-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672166137042'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672166137042-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672166137042-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672166137042-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672166137042 implements MigrationInterface {\n    name = '$npmConfigName1672166137042'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` CHANGE \\`imageUrl\\` \\`imageUrl\\` varchar(255) NOT NULL DEFAULT ''`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` CHANGE \\`imageUrl\\` \\`imageUrl\\` varchar(255) NOT NULL`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672251740346.html":{"url":"classes/$npmConfigName1672251740346.html","title":"class - $npmConfigName1672251740346","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672251740346\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672251740346-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672251740346'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672251740346-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672251740346-$npm_config_name.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672251740346-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672251740346 implements MigrationInterface {\n    name = '$npmConfigName1672251740346'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`scrapbook\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`caption\\` varchar(255) NOT NULL, \\`location\\` varchar(255) NOT NULL, \\`visibility\\` varchar(255) NOT NULL, \\`userId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`scrapbookId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`scrapbook\\` ADD CONSTRAINT \\`FK_b5db9533f87c9bc26bbb8ed3d06\\` FOREIGN KEY (\\`userId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_baa1c30b37f90c0df2e56257f16\\` FOREIGN KEY (\\`scrapbookId\\`) REFERENCES \\`scrapbook\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_baa1c30b37f90c0df2e56257f16\\``);\n        await queryRunner.query(`ALTER TABLE \\`scrapbook\\` DROP FOREIGN KEY \\`FK_b5db9533f87c9bc26bbb8ed3d06\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`scrapbookId\\``);\n        await queryRunner.query(`DROP TABLE \\`scrapbook\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672388811259.html":{"url":"classes/$npmConfigName1672388811259.html","title":"class - $npmConfigName1672388811259","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672388811259\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672388811259-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672388811259'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672388811259-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672388811259-$npm_config_name.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672388811259-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672388811259 implements MigrationInterface {\n    name = '$npmConfigName1672388811259'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`post_report\\` (\\`id\\` varchar(36) NOT NULL, \\`status\\` varchar(255) NOT NULL, \\`reason\\` varchar(255) NOT NULL, \\`reportedById\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`user_report\\` (\\`id\\` varchar(36) NOT NULL, \\`status\\` varchar(255) NOT NULL, \\`reason\\` varchar(255) NOT NULL, \\`reportedById\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`reportsAgainstId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`reportsAgainstId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD CONSTRAINT \\`FK_929dcdf74558612cc6166981480\\` FOREIGN KEY (\\`reportedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_aea779e51a733247bccf1f61d9a\\` FOREIGN KEY (\\`reportsAgainstId\\`) REFERENCES \\`post_report\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD CONSTRAINT \\`FK_2e595b9d3a37e4b72879dddb5ce\\` FOREIGN KEY (\\`reportedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD CONSTRAINT \\`FK_22b6df8103e450a49ea0f9ff939\\` FOREIGN KEY (\\`reportsAgainstId\\`) REFERENCES \\`user_report\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP FOREIGN KEY \\`FK_22b6df8103e450a49ea0f9ff939\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP FOREIGN KEY \\`FK_2e595b9d3a37e4b72879dddb5ce\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_aea779e51a733247bccf1f61d9a\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP FOREIGN KEY \\`FK_929dcdf74558612cc6166981480\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`reportsAgainstId\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`reportsAgainstId\\``);\n        await queryRunner.query(`DROP TABLE \\`user_report\\``);\n        await queryRunner.query(`DROP TABLE \\`post_report\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672399737695.html":{"url":"classes/$npmConfigName1672399737695.html","title":"class - $npmConfigName1672399737695","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672399737695\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672399737695-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672399737695'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672399737695-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672399737695-$npm_config_name.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672399737695-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672399737695 implements MigrationInterface {\n    name = '$npmConfigName1672399737695'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_aea779e51a733247bccf1f61d9a\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`reportsAgainstId\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD \\`reportedPostId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` CHANGE \\`status\\` \\`status\\` varchar(255) NOT NULL DEFAULT 'pending review'`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD CONSTRAINT \\`FK_a9aad25ed05e8f5a9dffbc17a4a\\` FOREIGN KEY (\\`reportedPostId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP FOREIGN KEY \\`FK_a9aad25ed05e8f5a9dffbc17a4a\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` CHANGE \\`status\\` \\`status\\` varchar(255) NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP COLUMN \\`reportedPostId\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`reportsAgainstId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_aea779e51a733247bccf1f61d9a\\` FOREIGN KEY (\\`reportsAgainstId\\`) REFERENCES \\`post_report\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672417201262.html":{"url":"classes/$npmConfigName1672417201262.html","title":"class - $npmConfigName1672417201262","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672417201262\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672417201262-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672417201262'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672417201262-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672417201262-$npm_config_name.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672417201262-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672417201262 implements MigrationInterface {\n    name = '$npmConfigName1672417201262'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP FOREIGN KEY \\`FK_22b6df8103e450a49ea0f9ff939\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`reportsAgainstId\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD \\`reportedUserId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD CONSTRAINT \\`FK_2d3711064572aa0203cba01242b\\` FOREIGN KEY (\\`reportedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP FOREIGN KEY \\`FK_2d3711064572aa0203cba01242b\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP COLUMN \\`reportedUserId\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`reportsAgainstId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD CONSTRAINT \\`FK_22b6df8103e450a49ea0f9ff939\\` FOREIGN KEY (\\`reportsAgainstId\\`) REFERENCES \\`user_report\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672417384470.html":{"url":"classes/$npmConfigName1672417384470.html","title":"class - $npmConfigName1672417384470","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672417384470\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672417384470-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672417384470'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672417384470-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672417384470-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672417384470-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672417384470 implements MigrationInterface {\n    name = '$npmConfigName1672417384470'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` CHANGE \\`status\\` \\`status\\` varchar(255) NOT NULL DEFAULT 'pending review'`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` CHANGE \\`status\\` \\`status\\` varchar(255) NOT NULL`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672576067204.html":{"url":"classes/$npmConfigName1672576067204.html","title":"class - $npmConfigName1672576067204","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672576067204\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672576067204-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672576067204'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672576067204-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672576067204-$npm_config_name.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672576067204-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672576067204 implements MigrationInterface {\n    name = '$npmConfigName1672576067204'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`user_ban\\` (\\`id\\` varchar(36) NOT NULL, \\`status\\` varchar(255) NOT NULL DEFAULT 'active', \\`startDate\\` datetime NOT NULL, \\`endDate\\` datetime NOT NULL, \\`bannedUserId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` ADD CONSTRAINT \\`FK_43cb4b8de8f8cfa4fd2857369c2\\` FOREIGN KEY (\\`bannedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` DROP FOREIGN KEY \\`FK_43cb4b8de8f8cfa4fd2857369c2\\``);\n        await queryRunner.query(`DROP TABLE \\`user_ban\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672585305519.html":{"url":"classes/$npmConfigName1672585305519.html","title":"class - $npmConfigName1672585305519","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672585305519\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672585305519-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672585305519'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672585305519-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672585305519-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672585305519-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672585305519 implements MigrationInterface {\n    name = '$npmConfigName1672585305519'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`isTakenDown\\` tinyint NOT NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`isTakenDown\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672600378154.html":{"url":"classes/$npmConfigName1672600378154.html","title":"class - $npmConfigName1672600378154","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672600378154\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672600378154-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672600378154'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672600378154-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672600378154-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672600378154-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672600378154 implements MigrationInterface {\n    name = '$npmConfigName1672600378154'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`gender\\` varchar(255) NOT NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`gender\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672678196724.html":{"url":"classes/$npmConfigName1672678196724.html","title":"class - $npmConfigName1672678196724","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672678196724\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672678196724-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672678196724'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672678196724-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672678196724-$npm_config_name.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672678196724-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672678196724 implements MigrationInterface {\n    name = '$npmConfigName1672678196724'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`isTakenDown\\` tinyint NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`gender\\` \\`gender\\` varchar(255) NOT NULL DEFAULT 'undefined'`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`gender\\` \\`gender\\` varchar(255) NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`isTakenDown\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672744437528.html":{"url":"classes/$npmConfigName1672744437528.html","title":"class - $npmConfigName1672744437528","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672744437528\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672744437528-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672744437528'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672744437528-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672744437528-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672744437528-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672744437528 implements MigrationInterface {\n    name = '$npmConfigName1672744437528'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`profilePictureUrl\\` varchar(255) NOT NULL DEFAULT 'https://firebasestorage.googleapis.com/v0/b/atlas-6183a.appspot.com/o/Avatars%2FAvatars%2FdefaultImage.png?alt=media&token=4482a7ff-450d-4bf8-a4d7-8b4a1a6ebbd2'`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`profilePictureUrl\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672760070076.html":{"url":"classes/$npmConfigName1672760070076.html","title":"class - $npmConfigName1672760070076","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672760070076\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672760070076-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672760070076'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672760070076-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672760070076-$npm_config_name.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672760070076-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672760070076 implements MigrationInterface {\n    name = '$npmConfigName1672760070076'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`profilePictureExpiryDate\\` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`profilePictureUrl\\` \\`profilePictureUrl\\` varchar(255) NOT NULL DEFAULT ''`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`profilePictureUrl\\` \\`profilePictureUrl\\` varchar(255) NOT NULL DEFAULT 'https://firebasestorage.googleapis.com/v0/b/atlas-6183a.appspot.com/o/Avatars%2FAvatars%2FdefaultImage.png?alt=media&token=4482a7ff-450d-4bf8-a4d7-8b4a1a6ebbd2'`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`profilePictureExpiryDate\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672832148243.html":{"url":"classes/$npmConfigName1672832148243.html","title":"class - $npmConfigName1672832148243","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672832148243\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672832148243-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672832148243'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672832148243-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672832148243-$npm_config_name.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672832148243-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672832148243 implements MigrationInterface {\n    name = '$npmConfigName1672832148243'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`imageId\\` varchar(255) NOT NULL DEFAULT ''`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`imageExpiryDate\\` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`imageUrl\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`imageUrl\\` longtext NOT NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`imageUrl\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`imageUrl\\` varchar(255) NOT NULL DEFAULT ''`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`imageExpiryDate\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`imageId\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672833410692.html":{"url":"classes/$npmConfigName1672833410692.html","title":"class - $npmConfigName1672833410692","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672833410692\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672833410692-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672833410692'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672833410692-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672833410692-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672833410692-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672833410692 implements MigrationInterface {\n    name = '$npmConfigName1672833410692'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` CHANGE \\`isTakenDown\\` \\`isTakenDown\\` tinyint NOT NULL DEFAULT 0`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` CHANGE \\`isTakenDown\\` \\`isTakenDown\\` tinyint NOT NULL`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673022319464.html":{"url":"classes/$npmConfigName1673022319464.html","title":"class - $npmConfigName1673022319464","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673022319464\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673022319464-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673022319464'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673022319464-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673022319464-$npm_config_name.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673022319464-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673022319464 implements MigrationInterface {\n    name = '$npmConfigName1673022319464'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`comment\\` (\\`id\\` varchar(36) NOT NULL, \\`text\\` varchar(255) NOT NULL, \\`authorId\\` varchar(36) NULL, \\`postId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD CONSTRAINT \\`FK_276779da446413a0d79598d4fbd\\` FOREIGN KEY (\\`authorId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD CONSTRAINT \\`FK_94a85bb16d24033a2afdd5df060\\` FOREIGN KEY (\\`postId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP FOREIGN KEY \\`FK_94a85bb16d24033a2afdd5df060\\``);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP FOREIGN KEY \\`FK_276779da446413a0d79598d4fbd\\``);\n        await queryRunner.query(`DROP TABLE \\`comment\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673025398979.html":{"url":"classes/$npmConfigName1673025398979.html","title":"class - $npmConfigName1673025398979","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673025398979\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673025398979-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673025398979'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673025398979-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673025398979-$npm_config_name.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673025398979-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673025398979 implements MigrationInterface {\n    name = '$npmConfigName1673025398979'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)`);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP COLUMN \\`updatedAt\\``);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP COLUMN \\`createdAt\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673027114310.html":{"url":"classes/$npmConfigName1673027114310.html","title":"class - $npmConfigName1673027114310","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673027114310\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673027114310-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673027114310'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673027114310-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673027114310-$npm_config_name.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673027114310-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673027114310 implements MigrationInterface {\n    name = '$npmConfigName1673027114310'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP FOREIGN KEY \\`FK_94a85bb16d24033a2afdd5df060\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP FOREIGN KEY \\`FK_a9aad25ed05e8f5a9dffbc17a4a\\``);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD CONSTRAINT \\`FK_94a85bb16d24033a2afdd5df060\\` FOREIGN KEY (\\`postId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD CONSTRAINT \\`FK_a9aad25ed05e8f5a9dffbc17a4a\\` FOREIGN KEY (\\`reportedPostId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP FOREIGN KEY \\`FK_a9aad25ed05e8f5a9dffbc17a4a\\``);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP FOREIGN KEY \\`FK_94a85bb16d24033a2afdd5df060\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD CONSTRAINT \\`FK_a9aad25ed05e8f5a9dffbc17a4a\\` FOREIGN KEY (\\`reportedPostId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD CONSTRAINT \\`FK_94a85bb16d24033a2afdd5df060\\` FOREIGN KEY (\\`postId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673177373733.html":{"url":"classes/$npmConfigName1673177373733.html","title":"class - $npmConfigName1673177373733","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673177373733\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673177373733-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673177373733'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673177373733-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673177373733-$npm_config_name.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673177373733-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673177373733 implements MigrationInterface {\n    name = '$npmConfigName1673177373733'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)`);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` ADD \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)`);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` ADD \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` DROP COLUMN \\`updatedAt\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` DROP COLUMN \\`createdAt\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP COLUMN \\`updatedAt\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP COLUMN \\`createdAt\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP COLUMN \\`updatedAt\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP COLUMN \\`createdAt\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673337064308.html":{"url":"classes/$npmConfigName1673337064308.html","title":"class - $npmConfigName1673337064308","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673337064308\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673337064308-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673337064308'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673337064308-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673337064308-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673337064308-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673337064308 implements MigrationInterface {\n    name = '$npmConfigName1673337064308'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`address\\` \\`address\\` varchar(255) NOT NULL DEFAULT ''`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`address\\` \\`address\\` varchar(255) NOT NULL`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673770456243.html":{"url":"classes/$npmConfigName1673770456243.html","title":"class - $npmConfigName1673770456243","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673770456243\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673770456243-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673770456243'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673770456243-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673770456243-$npm_config_name.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673770456243-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673770456243 implements MigrationInterface {\n    name = '$npmConfigName1673770456243'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`appeal\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`status\\` varchar(255) NOT NULL DEFAULT 'pending review', \\`reportReason\\` varchar(255) NOT NULL, \\`text\\` varchar(255) NOT NULL, \\`appealedPostId\\` varchar(36) NULL, \\`appealedById\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` ADD CONSTRAINT \\`FK_7b9ec6db412ee31e791072faf29\\` FOREIGN KEY (\\`appealedPostId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` ADD CONSTRAINT \\`FK_f975f729d8f811976339e642f1b\\` FOREIGN KEY (\\`appealedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` DROP FOREIGN KEY \\`FK_f975f729d8f811976339e642f1b\\``);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` DROP FOREIGN KEY \\`FK_7b9ec6db412ee31e791072faf29\\``);\n        await queryRunner.query(`DROP TABLE \\`appeal\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673847605869.html":{"url":"classes/$npmConfigName1673847605869.html","title":"class - $npmConfigName1673847605869","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673847605869\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673847605869-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673847605869'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673847605869-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673847605869-$npm_config_name.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673847605869-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673847605869 implements MigrationInterface {\n    name = '$npmConfigName1673847605869'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`block\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`blockingUserId\\` varchar(36) NULL, \\`blockedUserId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`block\\` ADD CONSTRAINT \\`FK_cac6c15bcaa655e31e86e48f59a\\` FOREIGN KEY (\\`blockingUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`block\\` ADD CONSTRAINT \\`FK_c9a8df2f7cbbae1cda940694409\\` FOREIGN KEY (\\`blockedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`block\\` DROP FOREIGN KEY \\`FK_c9a8df2f7cbbae1cda940694409\\``);\n        await queryRunner.query(`ALTER TABLE \\`block\\` DROP FOREIGN KEY \\`FK_cac6c15bcaa655e31e86e48f59a\\``);\n        await queryRunner.query(`DROP TABLE \\`block\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673974513613.html":{"url":"classes/$npmConfigName1673974513613.html","title":"class - $npmConfigName1673974513613","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673974513613\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673974513613-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673974513613'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673974513613-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673974513613-$npm_config_name.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673974513613-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673974513613 implements MigrationInterface {\n    name = '$npmConfigName1673974513613'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`follow\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`followedById\\` varchar(36) NULL, \\`followedId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`follow_request\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`status\\` varchar(255) NOT NULL DEFAULT 'pending', \\`requestedById\\` varchar(36) NULL, \\`requestedUserId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` ADD CONSTRAINT \\`FK_c2159058051b11b2f9bb1b36983\\` FOREIGN KEY (\\`followedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` ADD CONSTRAINT \\`FK_f4a9d59861c87ba252ead40d84d\\` FOREIGN KEY (\\`followedId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` ADD CONSTRAINT \\`FK_7c5f8647272441265e4c2e61071\\` FOREIGN KEY (\\`requestedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` ADD CONSTRAINT \\`FK_37ecc4fc7d8451a768b704c43e0\\` FOREIGN KEY (\\`requestedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` DROP FOREIGN KEY \\`FK_37ecc4fc7d8451a768b704c43e0\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` DROP FOREIGN KEY \\`FK_7c5f8647272441265e4c2e61071\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` DROP FOREIGN KEY \\`FK_f4a9d59861c87ba252ead40d84d\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` DROP FOREIGN KEY \\`FK_c2159058051b11b2f9bb1b36983\\``);\n        await queryRunner.query(`DROP TABLE \\`follow_request\\``);\n        await queryRunner.query(`DROP TABLE \\`follow\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674121256550.html":{"url":"classes/$npmConfigName1674121256550.html","title":"class - $npmConfigName1674121256550","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674121256550\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674121256550-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674121256550'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674121256550-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674121256550-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674121256550-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674121256550 implements MigrationInterface {\n    name = '$npmConfigName1674121256550'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`fcmToken\\` varchar(255) NOT NULL DEFAULT ''`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`fcmToken\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674198387677.html":{"url":"classes/$npmConfigName1674198387677.html","title":"class - $npmConfigName1674198387677","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674198387677\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674198387677-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674198387677'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674198387677-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674198387677-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674198387677-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674198387677 implements MigrationInterface {\n    name = '$npmConfigName1674198387677'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`notificationPreference\\` varchar(255) NOT NULL DEFAULT 'all'`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`notificationPreference\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674453163372.html":{"url":"classes/$npmConfigName1674453163372.html","title":"class - $npmConfigName1674453163372","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674453163372\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674453163372-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674453163372'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674453163372-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674453163372-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674453163372-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674453163372 implements MigrationInterface {\n    name = '$npmConfigName1674453163372'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`isBanned\\` tinyint NOT NULL DEFAULT 0`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`isBanned\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674486373359.html":{"url":"classes/$npmConfigName1674486373359.html","title":"class - $npmConfigName1674486373359","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674486373359\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674486373359-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674486373359'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674486373359-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674486373359-$npm_config_name.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674486373359-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674486373359 implements MigrationInterface {\n    name = '$npmConfigName1674486373359'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`like\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`likedPostId\\` varchar(36) NULL, \\`likedById\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`like\\` ADD CONSTRAINT \\`FK_288f29161615bed72435a2f90ee\\` FOREIGN KEY (\\`likedPostId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`like\\` ADD CONSTRAINT \\`FK_48750d6b207c4bd82d30c5dd722\\` FOREIGN KEY (\\`likedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`like\\` DROP FOREIGN KEY \\`FK_48750d6b207c4bd82d30c5dd722\\``);\n        await queryRunner.query(`ALTER TABLE \\`like\\` DROP FOREIGN KEY \\`FK_288f29161615bed72435a2f90ee\\``);\n        await queryRunner.query(`DROP TABLE \\`like\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674487677914.html":{"url":"classes/$npmConfigName1674487677914.html","title":"class - $npmConfigName1674487677914","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674487677914\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674487677914-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674487677914'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674487677914-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674487677914-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674487677914-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674487677914 implements MigrationInterface {\n    name = '$npmConfigName1674487677914'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`likesCount\\` int NOT NULL DEFAULT '0'`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`likesCount\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674493007150.html":{"url":"classes/$npmConfigName1674493007150.html","title":"class - $npmConfigName1674493007150","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674493007150\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674493007150-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674493007150'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674493007150-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674493007150-$npm_config_name.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674493007150-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674493007150 implements MigrationInterface {\n    name = '$npmConfigName1674493007150'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`scrapbook\\` DROP FOREIGN KEY \\`FK_b5db9533f87c9bc26bbb8ed3d06\\``);\n        await queryRunner.query(`ALTER TABLE \\`like\\` DROP FOREIGN KEY \\`FK_48750d6b207c4bd82d30c5dd722\\``);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP FOREIGN KEY \\`FK_276779da446413a0d79598d4fbd\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP FOREIGN KEY \\`FK_929dcdf74558612cc6166981480\\``);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` DROP FOREIGN KEY \\`FK_f975f729d8f811976339e642f1b\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_fb7ffd0860cbcc5cf22c96d3c05\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP FOREIGN KEY \\`FK_2d3711064572aa0203cba01242b\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP FOREIGN KEY \\`FK_2e595b9d3a37e4b72879dddb5ce\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` DROP FOREIGN KEY \\`FK_43cb4b8de8f8cfa4fd2857369c2\\``);\n        await queryRunner.query(`ALTER TABLE \\`block\\` DROP FOREIGN KEY \\`FK_c9a8df2f7cbbae1cda940694409\\``);\n        await queryRunner.query(`ALTER TABLE \\`block\\` DROP FOREIGN KEY \\`FK_cac6c15bcaa655e31e86e48f59a\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` DROP FOREIGN KEY \\`FK_c2159058051b11b2f9bb1b36983\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` DROP FOREIGN KEY \\`FK_f4a9d59861c87ba252ead40d84d\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` DROP FOREIGN KEY \\`FK_37ecc4fc7d8451a768b704c43e0\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` DROP FOREIGN KEY \\`FK_7c5f8647272441265e4c2e61071\\``);\n        await queryRunner.query(`ALTER TABLE \\`scrapbook\\` ADD CONSTRAINT \\`FK_b5db9533f87c9bc26bbb8ed3d06\\` FOREIGN KEY (\\`userId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`like\\` ADD CONSTRAINT \\`FK_48750d6b207c4bd82d30c5dd722\\` FOREIGN KEY (\\`likedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD CONSTRAINT \\`FK_276779da446413a0d79598d4fbd\\` FOREIGN KEY (\\`authorId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD CONSTRAINT \\`FK_929dcdf74558612cc6166981480\\` FOREIGN KEY (\\`reportedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` ADD CONSTRAINT \\`FK_f975f729d8f811976339e642f1b\\` FOREIGN KEY (\\`appealedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_fb7ffd0860cbcc5cf22c96d3c05\\` FOREIGN KEY (\\`postedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD CONSTRAINT \\`FK_2d3711064572aa0203cba01242b\\` FOREIGN KEY (\\`reportedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD CONSTRAINT \\`FK_2e595b9d3a37e4b72879dddb5ce\\` FOREIGN KEY (\\`reportedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` ADD CONSTRAINT \\`FK_43cb4b8de8f8cfa4fd2857369c2\\` FOREIGN KEY (\\`bannedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`block\\` ADD CONSTRAINT \\`FK_cac6c15bcaa655e31e86e48f59a\\` FOREIGN KEY (\\`blockingUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`block\\` ADD CONSTRAINT \\`FK_c9a8df2f7cbbae1cda940694409\\` FOREIGN KEY (\\`blockedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` ADD CONSTRAINT \\`FK_c2159058051b11b2f9bb1b36983\\` FOREIGN KEY (\\`followedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` ADD CONSTRAINT \\`FK_f4a9d59861c87ba252ead40d84d\\` FOREIGN KEY (\\`followedId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` ADD CONSTRAINT \\`FK_7c5f8647272441265e4c2e61071\\` FOREIGN KEY (\\`requestedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` ADD CONSTRAINT \\`FK_37ecc4fc7d8451a768b704c43e0\\` FOREIGN KEY (\\`requestedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` DROP FOREIGN KEY \\`FK_37ecc4fc7d8451a768b704c43e0\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` DROP FOREIGN KEY \\`FK_7c5f8647272441265e4c2e61071\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` DROP FOREIGN KEY \\`FK_f4a9d59861c87ba252ead40d84d\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` DROP FOREIGN KEY \\`FK_c2159058051b11b2f9bb1b36983\\``);\n        await queryRunner.query(`ALTER TABLE \\`block\\` DROP FOREIGN KEY \\`FK_c9a8df2f7cbbae1cda940694409\\``);\n        await queryRunner.query(`ALTER TABLE \\`block\\` DROP FOREIGN KEY \\`FK_cac6c15bcaa655e31e86e48f59a\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` DROP FOREIGN KEY \\`FK_43cb4b8de8f8cfa4fd2857369c2\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP FOREIGN KEY \\`FK_2e595b9d3a37e4b72879dddb5ce\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP FOREIGN KEY \\`FK_2d3711064572aa0203cba01242b\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_fb7ffd0860cbcc5cf22c96d3c05\\``);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` DROP FOREIGN KEY \\`FK_f975f729d8f811976339e642f1b\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP FOREIGN KEY \\`FK_929dcdf74558612cc6166981480\\``);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP FOREIGN KEY \\`FK_276779da446413a0d79598d4fbd\\``);\n        await queryRunner.query(`ALTER TABLE \\`like\\` DROP FOREIGN KEY \\`FK_48750d6b207c4bd82d30c5dd722\\``);\n        await queryRunner.query(`ALTER TABLE \\`scrapbook\\` DROP FOREIGN KEY \\`FK_b5db9533f87c9bc26bbb8ed3d06\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` ADD CONSTRAINT \\`FK_7c5f8647272441265e4c2e61071\\` FOREIGN KEY (\\`requestedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` ADD CONSTRAINT \\`FK_37ecc4fc7d8451a768b704c43e0\\` FOREIGN KEY (\\`requestedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` ADD CONSTRAINT \\`FK_f4a9d59861c87ba252ead40d84d\\` FOREIGN KEY (\\`followedId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` ADD CONSTRAINT \\`FK_c2159058051b11b2f9bb1b36983\\` FOREIGN KEY (\\`followedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`block\\` ADD CONSTRAINT \\`FK_cac6c15bcaa655e31e86e48f59a\\` FOREIGN KEY (\\`blockingUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`block\\` ADD CONSTRAINT \\`FK_c9a8df2f7cbbae1cda940694409\\` FOREIGN KEY (\\`blockedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` ADD CONSTRAINT \\`FK_43cb4b8de8f8cfa4fd2857369c2\\` FOREIGN KEY (\\`bannedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD CONSTRAINT \\`FK_2e595b9d3a37e4b72879dddb5ce\\` FOREIGN KEY (\\`reportedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD CONSTRAINT \\`FK_2d3711064572aa0203cba01242b\\` FOREIGN KEY (\\`reportedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_fb7ffd0860cbcc5cf22c96d3c05\\` FOREIGN KEY (\\`postedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` ADD CONSTRAINT \\`FK_f975f729d8f811976339e642f1b\\` FOREIGN KEY (\\`appealedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD CONSTRAINT \\`FK_929dcdf74558612cc6166981480\\` FOREIGN KEY (\\`reportedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD CONSTRAINT \\`FK_276779da446413a0d79598d4fbd\\` FOREIGN KEY (\\`authorId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`like\\` ADD CONSTRAINT \\`FK_48750d6b207c4bd82d30c5dd722\\` FOREIGN KEY (\\`likedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`scrapbook\\` ADD CONSTRAINT \\`FK_b5db9533f87c9bc26bbb8ed3d06\\` FOREIGN KEY (\\`userId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674544597118.html":{"url":"classes/$npmConfigName1674544597118.html","title":"class - $npmConfigName1674544597118","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674544597118\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674544597118-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674544597118'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674544597118-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674544597118-$npm_config_name.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674544597118-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674544597118 implements MigrationInterface {\n    name = '$npmConfigName1674544597118'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`hasStripAccount\\` tinyint NOT NULL DEFAULT 0`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`stripeCustomerId\\` varchar(255) NOT NULL DEFAULT ''`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`subscriptionPlan\\` varchar(255) NOT NULL DEFAULT 'Basic'`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`subscriptionPlan\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`stripeCustomerId\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`hasStripAccount\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AnalyticsController.html":{"url":"controllers/AnalyticsController.html","title":"controller - AnalyticsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AnalyticsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/analytics/analytics.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                analytics\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPostAnalytics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getPostAnalytics\n                        \n                    \n                \n            \n            \n                \ngetPostAnalytics(req, postId, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('post/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/analytics/analytics.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpStatus, Param, Res, UseGuards, Request } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { AnalyticsService } from './analytics.service';\nimport { Response } from 'express';\n\n@Controller('analytics')\nexport class AnalyticsController {\n  constructor(private analyticsService: AnalyticsService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Get('post/:id')\n  getPostAnalytics(@Request() req, @Param('id') postId, @Res() res: Response) {\n    this.analyticsService\n      .getPostAnalytics(req.user, postId)\n      .then((analytics) => {\n        return res.status(HttpStatus.OK).json(analytics);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AnalyticsModule.html":{"url":"modules/AnalyticsModule.html","title":"module - AnalyticsModule","body":"\n                   \n\n\n\n\n    Modules\n    AnalyticsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AnalyticsModule\n\n\n\ncluster_AnalyticsModule_providers\n\n\n\n\nAnalyticsService\n\nAnalyticsService\n\n\n\nAnalyticsModule\n\nAnalyticsModule\n\nAnalyticsModule -->\n\nAnalyticsService->AnalyticsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/analytics/analytics.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AnalyticsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AnalyticsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { User } from '../user/entities/user.entity';\nimport { AnalyticsController } from './analytics.controller';\nimport { AnalyticsService } from './analytics.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Post, User])],\n  controllers: [AnalyticsController],\n  providers: [AnalyticsService]\n})\nexport class AnalyticsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AnalyticsService.html":{"url":"injectables/AnalyticsService.html","title":"injectable - AnalyticsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AnalyticsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/analytics/analytics.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getPostAnalytics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/analytics/analytics.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostAnalytics\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostAnalytics(user: any, postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/analytics/analytics.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Role } from 'src/constants/role.enum';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { User } from '../user/entities/user.entity';\nimport { PostAnalyticResposneDto } from './dto/post-analytic-response.dto';\n\n@Injectable()\nexport class AnalyticsService {\n  constructor(\n    @InjectRepository(Post)\n    private postRepository: Repository,\n\n    @InjectRepository(User)\n    private userRepository: Repository\n  ) {}\n\n  async getPostAnalytics(user: any, postId: string): Promise {\n    const post = await this.postRepository.findOne({\n      where: { id: postId },\n      relations: ['postedBy', 'reportsAgainst', 'scrapbook', 'comments', 'appeals']\n    });\n\n    if (user.role !== Role.Admin) {\n      if (post.postedBy.id !== user.id) {\n        throw new BadRequestException('You are not authorized to view the analytics of this post');\n      }\n    }\n\n    if (!post) {\n      throw new BadRequestException('Post does not exist');\n    }\n\n    const commentCount = post.comments.length;\n    const reportCount = post.reportsAgainst.length;\n    const appealCount = post.appeals.length;\n    const isPartOfScrapbook = post.scrapbook ? true : false;\n    const interactionCount = commentCount;\n    const isTakenDown = post.isTakenDown;\n    const createdAt = new Date(post.createdAt);\n\n    const response = new PostAnalyticResposneDto();\n    response.commentCount = commentCount;\n    response.likeCount = 0;\n    response.interactionCount = interactionCount;\n    response.isTakenDown = isTakenDown;\n    response.reportCount = reportCount;\n    response.appealCount = appealCount;\n    response.createdAt = createdAt;\n    response.isPartOfScrapbook = isPartOfScrapbook;\n\n    if (isPartOfScrapbook) {\n      response.scrapbookId = post.scrapbook.id;\n    }\n\n    return response;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAnalyticsModule\n\nAnalyticsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnalyticsModule->AppModule\n\n\n\n\n\nAppealsModule\n\nAppealsModule\n\nAppModule -->\n\nAppealsModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBlockModule\n\nBlockModule\n\nAppModule -->\n\nBlockModule->AppModule\n\n\n\n\n\nFeedModule\n\nFeedModule\n\nAppModule -->\n\nFeedModule->AppModule\n\n\n\n\n\nFollowModule\n\nFollowModule\n\nAppModule -->\n\nFollowModule->AppModule\n\n\n\n\n\nNotificationModule\n\nNotificationModule\n\nAppModule -->\n\nNotificationModule->AppModule\n\n\n\n\n\nPaymentModule\n\nPaymentModule\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nReportModule\n\nReportModule\n\nAppModule -->\n\nReportModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAppModule -->\n\nLocalStrategy->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AnalyticsModule\n                        \n                        \n                            AppealsModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            BlockModule\n                        \n                        \n                            FeedModule\n                        \n                        \n                            FollowModule\n                        \n                        \n                            NotificationModule\n                        \n                        \n                            PaymentModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            ReportModule\n                        \n                        \n                            TasksModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { UserModule } from './modules/user/user.module';\nimport { User } from './modules/user/entities/user.entity';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { LocalStrategy } from './modules/auth/strategies/local.strategy';\nimport { PostModule } from './modules/post/post.module';\nimport { Post } from './modules/post/entities/post.entity';\nimport { Scrapbook } from './modules/post/entities/scrapbook.entity';\nimport { Comment } from './modules/post/entities/comment.entity';\nimport { PostReport } from './modules/report/entities/post-report.entity';\nimport { UserReport } from './modules/report/entities/user-report.entity';\nimport { ReportModule } from './modules/report/report.module';\nimport { UserBan } from './modules/report/entities/user-ban.entity';\nimport { Appeal } from './modules/appeals/entities/appeal.entity';\nimport { AppealsModule } from './modules/appeals/appeals.module';\nimport { BlockModule } from './modules/block/block.module';\nimport { Block } from './modules/block/entities/block.entity';\nimport { Follow } from './modules/follow/entities/follow.entity';\nimport { FollowRequest } from './modules/follow/entities/follow-request.entity';\nimport { FollowModule } from './modules/follow/follow.module';\nimport { NotificationModule } from './modules/notification/notification.module';\nimport { AnalyticsModule } from './modules/analytics/analytics.module';\nimport { FeedModule } from './modules/feed/feed.module';\nimport { Like } from './modules/post/entities/post-like.entity';\nimport { PaymentModule } from './modules/payment/payment.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { TasksModule } from './modules/tasks/tasks.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    ScheduleModule.forRoot(),\n    TypeOrmModule.forRootAsync({\n      //We import the ConfigModule to use the ConfigService to acceess the environment variables\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        //*Database Settings\n        type: 'mysql',\n        //We get get the value of the environment variable DATABASE_HOST\n        host: configService.get('DATABASE_HOST'),\n        username: configService.get('DATABASE_USERNAME'),\n        password: configService.get('DATABASE_PASSWORD'),\n        database: configService.get('DATABASE_NAME'),\n        entities: [\n          User,\n          Post,\n          Scrapbook,\n          PostReport,\n          UserReport,\n          UserBan,\n          Comment,\n          Appeal,\n          Block,\n          Follow,\n          FollowRequest,\n          Like\n        ],\n        synchronize: false,\n        autoLoadEntities: true,\n        options: { encrypt: false },\n        //*Migrations Settings\n        //Migrations Table Name\n        migrationsTableName: 'migrations',\n        //Migrations Folder\n        migrations: ['../migrations/*{.ts,.js}'],\n        //Automatically run migrations on app start if needed\n        migrationsRun: true\n      }),\n      inject: [ConfigService]\n    }),\n    UserModule,\n    AuthModule,\n    PostModule,\n    ReportModule,\n    AppealsModule,\n    BlockModule,\n    FollowModule,\n    NotificationModule,\n    AnalyticsModule,\n    FeedModule,\n    PaymentModule,\n    TasksModule\n  ],\n  controllers: [],\n  providers: [AppService, LocalStrategy]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Appeal.html":{"url":"entities/Appeal.html","title":"entity - Appeal","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Appeal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appeals/entities/appeal.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                appealedBy\n                            \n                            \n                                appealedPost\n                            \n                            \n                                id\n                            \n                            \n                                reportReason\n                            \n                            \n                                status\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        appealedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.appeals, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/entities/appeal.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        appealedPost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.appeals, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/entities/appeal.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/entities/appeal.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportReason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReportReason\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/entities/appeal.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ReportStatus.PendingReview\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/entities/appeal.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/entities/appeal.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Post } from '../../post/entities/post.entity';\nimport { User } from '../../user/entities/user.entity';\nimport { ReportStatus } from '../../../constants/report-status.enum';\nimport { ReportReason } from '../../../constants/report-reason.enum';\n\n@Entity()\nexport class Appeal extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ default: ReportStatus.PendingReview })\n  status: string = ReportStatus.PendingReview;\n\n  @Column()\n  reportReason: ReportReason;\n\n  @Column()\n  text: string;\n\n  //An appeal can only appeal one post but a post can be in many appeals\n  @ManyToOne(() => Post, (post) => post.appeals, {\n    onDelete: 'CASCADE'\n  })\n  appealedPost: Post;\n\n  //A appeal can only be appeal by one user but a user can have many appeal\n  @ManyToOne(() => User, (user) => user.appeals, {\n    onDelete: 'CASCADE'\n  })\n  appealedBy: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppealDto.html":{"url":"classes/AppealDto.html","title":"class - AppealDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppealDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appeals/dto/appeal.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                postId\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/dto/appeal.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/dto/appeal.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport class AppealDto {\n  @IsNotEmpty()\n  postId: string;\n\n  @IsNotEmpty()\n  text: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppealsController.html":{"url":"controllers/AppealsController.html","title":"controller - AppealsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppealsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appeals/appeals.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                appeals\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                acceptPostAppeal\n                            \n                            \n                                getPostAppeals\n                            \n                            \n                                getPostAppealsById\n                            \n                            \n                                getUserAppeals\n                            \n                            \n                                rejectPostAppeal\n                            \n                            \n                                reportPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        acceptPostAppeal\n                        \n                    \n                \n            \n            \n                \nacceptPostAppeal(req, postId, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Patch('accept-appeal/:postId')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/appeals/appeals.controller.ts:55\n                \n            \n\n\n            \n                \n                    Accept an appeal\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    postId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostAppeals\n                        \n                    \n                \n            \n            \n                \ngetPostAppeals(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Get('post-appeals')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/appeals/appeals.controller.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostAppealsById\n                        \n                    \n                \n            \n            \n                \ngetPostAppealsById(req, postId, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('post-appeals/:postId')\n                \n            \n\n            \n                \n                    Defined in src/modules/appeals/appeals.controller.ts:94\n                \n            \n\n\n            \n                \n                    Get the appeals of a post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    postId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserAppeals\n                        \n                    \n                \n            \n            \n                \ngetUserAppeals(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('user-appeals')\n                \n            \n\n            \n                \n                    Defined in src/modules/appeals/appeals.controller.ts:118\n                \n            \n\n\n            \n                \n                    Get the appeals of a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rejectPostAppeal\n                        \n                    \n                \n            \n            \n                \nrejectPostAppeal(req, postId, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Patch('reject-appeal/:postId')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/appeals/appeals.controller.ts:75\n                \n            \n\n\n            \n                \n                    Reject an appeal\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    postId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportPost\n                        \n                    \n                \n            \n            \n                \nreportPost(body: AppealDto, req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('appeal-post')\n                \n            \n\n            \n                \n                    Defined in src/modules/appeals/appeals.controller.ts:35\n                \n            \n\n\n            \n                \n                    Appeal a post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AppealDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the body of the request\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  UseGuards,\n  Res,\n  Request,\n  Post,\n  Body,\n  HttpStatus,\n  Get,\n  Param,\n  Patch,\n  Query\n} from '@nestjs/common';\nimport { Response } from 'express';\nimport { PageOptionsDto } from 'src/common/dto/page-options.dto';\nimport { Role } from 'src/constants/role.enum';\nimport { Roles } from 'src/decorators/roles.decorator';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { AppealsService } from './appeals.service';\nimport { AppealDto } from './dto/appeal.dto';\n\n@Controller('appeals')\nexport class AppealsController {\n  constructor(private appealsService: AppealsService) {}\n\n  /**\n   * Appeal a post\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('appeal-post')\n  reportPost(@Body() body: AppealDto, @Request() req, @Res() res: Response) {\n    this.appealsService\n      .appealPost(req.user, body)\n      .then((appeal) => {\n        return res.status(HttpStatus.OK).json(appeal);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Accept an appeal\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Patch('accept-appeal/:postId')\n  @Roles(Role.Admin)\n  acceptPostAppeal(@Request() req, @Param('postId') postId, @Res() res: Response) {\n    this.appealsService\n      .acceptPostAppeal(postId)\n      .then((appeal) => {\n        return res.status(HttpStatus.OK).json(appeal);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Reject an appeal\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Patch('reject-appeal/:postId')\n  @Roles(Role.Admin)\n  rejectPostAppeal(@Request() req, @Param('postId') postId, @Res() res: Response) {\n    this.appealsService\n      .rejectPostAppeal(postId)\n      .then((appeal) => {\n        return res.status(HttpStatus.OK).json(appeal);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Get the appeals of a post\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('post-appeals/:postId')\n  getPostAppealsById(\n    @Request() req,\n    @Param('postId') postId,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.appealsService\n      .getPostAppealsById(postId, req.user, pageOptionsDto)\n      .then((appeal) => {\n        return res.status(HttpStatus.OK).json(appeal);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Get the appeals of a user\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('user-appeals')\n  getUserAppeals(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.appealsService\n      .getUserAppeals(req.user, pageOptionsDto)\n      .then((appeal) => {\n        return res.status(HttpStatus.OK).json(appeal);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Get('post-appeals')\n  @Roles(Role.Admin)\n  getPostAppeals(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.appealsService\n      .getPostAppeals(pageOptionsDto)\n      .then((appeals) => {\n        return res.status(HttpStatus.OK).json(appeals);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppealsModule.html":{"url":"modules/AppealsModule.html","title":"module - AppealsModule","body":"\n                   \n\n\n\n\n    Modules\n    AppealsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppealsModule\n\n\n\ncluster_AppealsModule_providers\n\n\n\n\nAppealsService\n\nAppealsService\n\n\n\nAppealsModule\n\nAppealsModule\n\nAppealsModule -->\n\nAppealsService->AppealsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/appeals/appeals.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppealsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppealsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppealsService } from './appeals.service';\nimport { AppealsController } from './appeals.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { Appeal } from './entities/appeal.entity';\nimport { Post } from '../post/entities/post.entity';\nimport { PostReport } from '../report/entities/post-report.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Appeal, Post, User, PostReport])],\n  providers: [AppealsService],\n  controllers: [AppealsController]\n})\nexport class AppealsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppealsService.html":{"url":"injectables/AppealsService.html","title":"injectable - AppealsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppealsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appeals/appeals.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                acceptPostAppeal\n                            \n                            \n                                    Async\n                                appealPost\n                            \n                            \n                                    Async\n                                getPostAppeals\n                            \n                            \n                                    Async\n                                getPostAppealsById\n                            \n                            \n                                    Async\n                                getUserAppeals\n                            \n                            \n                                    Async\n                                rejectPostAppeal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appealRepository: Repository, postReportsRepository: Repository, postRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/appeals/appeals.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appealRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postReportsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        acceptPostAppeal\n                        \n                    \n                \n            \n            \n                \n                    \n                    acceptPostAppeal(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/appeals/appeals.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        appealPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    appealPost(user: any, body: AppealDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/appeals/appeals.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                AppealDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostAppeals\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostAppeals(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/appeals/appeals.service.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostAppealsById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostAppealsById(postId: string, user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/appeals/appeals.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserAppeals\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserAppeals(user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/appeals/appeals.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        rejectPostAppeal\n                        \n                    \n                \n            \n            \n                \n                    \n                    rejectPostAppeal(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/appeals/appeals.service.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PageMetaDto } from 'src/common/dto/page-meta.dto';\nimport { PageOptionsDto } from 'src/common/dto/page-options.dto';\nimport { PageDto } from 'src/common/dto/page.dto';\nimport { ReportStatus } from 'src/constants/report-status.enum';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { PostReport } from '../report/entities/post-report.entity';\nimport { User } from '../user/entities/user.entity';\nimport { AppealDto } from './dto/appeal.dto';\nimport { Appeal } from './entities/appeal.entity';\n\n@Injectable()\nexport class AppealsService {\n  constructor(\n    @InjectRepository(Appeal)\n    private appealRepository: Repository,\n\n    @InjectRepository(PostReport)\n    private postReportsRepository: Repository,\n\n    @InjectRepository(Post)\n    private postRepository: Repository,\n\n    @InjectRepository(User)\n    private userRepository: Repository\n  ) {}\n\n  async appealPost(user: any, body: AppealDto): Promise {\n    const newAppeal = new Appeal();\n\n    const post = await this.postRepository.findOne({\n      where: { id: body.postId },\n      relations: ['reportsAgainst', 'postedBy', 'appeals']\n    });\n\n    if (!post) {\n      throw new BadRequestException('Post not found');\n    }\n\n    if (post.appeals.some((appeal) => appeal.status === ReportStatus.PendingReview)) {\n      throw new BadRequestException('Post has already been appealed');\n    }\n\n    if (post.postedBy.id !== user.id) {\n      throw new BadRequestException('You can only appeal your posts');\n    }\n\n    if (\n      !(\n        post.reportsAgainst.some((report) => report.status === ReportStatus.Accepted) &&\n        post.isTakenDown\n      )\n    ) {\n      throw new BadRequestException('Post has not been reported or taken down');\n    }\n\n    const reportReason = post.reportsAgainst\n      .filter((report) => {\n        return report.status === ReportStatus.Accepted;\n      })\n      .sort((a, b) => Date.parse(b.createdAt) - Date.parse(a.createdAt))[0].reason;\n\n    newAppeal.appealedPost = post;\n    newAppeal.appealedBy = post.postedBy;\n    newAppeal.text = body.text;\n    newAppeal.reportReason = reportReason;\n\n    return this.appealRepository.save(newAppeal);\n  }\n\n  async getPostAppealsById(\n    postId: string,\n    user: any,\n    pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const post = await this.postRepository.findOne({\n      where: { id: postId },\n      relations: ['postedBy', 'appeals']\n    });\n\n    if (!post) {\n      throw new BadRequestException('Post not found');\n    }\n\n    if (post.postedBy.id !== user.id) {\n      throw new BadRequestException('You can only view your post appeals');\n    }\n\n    const itemCount: number = post.appeals.length;\n    const entities: Appeal[] = post.appeals;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async getUserAppeals(user: any, pageOptionsDto: PageOptionsDto): Promise> {\n    const dbUser = await this.userRepository.findOne({\n      where: { id: user.id },\n      relations: ['appeals']\n    });\n\n    if (!dbUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    const itemCount: number = dbUser.appeals.length;\n    const entities: Appeal[] = dbUser.appeals;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async acceptPostAppeal(postId: string): Promise {\n    const post = await this.postRepository.findOne({\n      where: { id: postId },\n      relations: ['appeals', 'postedBy']\n    });\n\n    if (!post) {\n      throw new BadRequestException('Post not found');\n    }\n\n    if (!post.appeals.some((appeal) => appeal.status === ReportStatus.PendingReview)) {\n      throw new BadRequestException('Post has not been appealed');\n    }\n\n    const appeal = post.appeals\n      .map((appeal) => {\n        if (appeal.status === ReportStatus.PendingReview) {\n          return appeal;\n        }\n      })\n      .filter((appeal) => appeal !== undefined)[0];\n\n    appeal.status = ReportStatus.Accepted;\n\n    await this.postRepository.update(postId, { isTakenDown: false });\n\n    return this.appealRepository.save(appeal);\n  }\n\n  async rejectPostAppeal(postId: string): Promise {\n    const post = await this.postRepository.findOne({\n      where: { id: postId },\n      relations: ['appeals', 'postedBy']\n    });\n\n    if (!post) {\n      throw new BadRequestException('Post not found');\n    }\n\n    if (!post.appeals.some((appeal) => appeal.status === ReportStatus.PendingReview)) {\n      throw new BadRequestException('Post has not been appealed');\n    }\n\n    const appeal = post.appeals\n      .map((appeal) => {\n        if (appeal.status === ReportStatus.PendingReview) {\n          return appeal;\n        }\n      })\n      .filter((appeal) => appeal !== undefined)[0];\n\n    appeal.status = ReportStatus.Rejected;\n\n    return this.appealRepository.save(appeal);\n  }\n\n  async getPostAppeals(pageOptionsDto: PageOptionsDto): Promise> {\n    const appeals = await this.appealRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('Appeal.appealedPost', 'Post')\n      .leftJoinAndSelect('Post.postedBy', 'PostedBy')\n      .leftJoinAndSelect('Appeal.appealedBy', 'User')\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take)\n      .orderBy('Appeal.createdAt', pageOptionsDto.order)\n      .getManyAndCount()\n      .then((appealsAndCount) => {\n        return {\n          items: appealsAndCount[0],\n          itemsCount: appealsAndCount[0].length\n        };\n      });\n\n    const itemCount: number = appeals.itemsCount;\n    const entities: Appeal[] = appeals.items;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                loginUser\n                            \n                            \n                                signUpAdmin\n                            \n                            \n                                signUpUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginUser(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:117\n                \n            \n\n\n            \n                \n                    Route for login\nThe guard is used to protect the route, if the user is not authenticated, the route will not be accessible\nThe LocalAuthGuard will check if the user is authenticated using the local strategy\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the JWT access token for the user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signUpAdmin\n                        \n                    \n                \n            \n            \n                \nsignUpAdmin(body: SignUpUserDto, req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Post('admin/signup')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:88\n                \n            \n\n\n            \n                \n                    creating post route, the route will be admin/signup\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SignUpUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request body\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object itself\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object we will send back to the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        confirmation message or error message\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signUpUser\n                        \n                    \n                \n            \n            \n                \nsignUpUser(body: SignUpUserDto, req, res: Response, file)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:40\n                \n            \n\n\n            \n                \n                    We create a post route for the sign up, the route will be /user/signup\nWe use the @Body() decorator to get the body of the request and the body is a SignUpUserDto\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SignUpUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request body\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object itself\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the respponse object we will send back to the user\n\n                                    \n                                \n                                \n                                    file\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        confirmation message or error message\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Request,\n  Post,\n  Body,\n  Res,\n  HttpStatus,\n  UseGuards,\n  ForbiddenException,\n  UseInterceptors,\n  UploadedFile\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { Response } from 'express';\nimport { Role } from 'src/constants/role.enum';\nimport { Roles } from 'src/decorators/roles.decorator';\nimport { User } from '../user/entities/user.entity';\nimport { UserService } from '../user/user.service';\nimport { AuthService } from './auth.service';\nimport { SignUpUserDto } from './dto/user-signup.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { RolesGuard } from './guards/roles.guard';\n\n@Controller('auth')\nexport class AuthController {\n  //We inject the user servicec in the constructor\n  constructor(private userService: UserService, private authService: AuthService) {}\n\n  /**\n   * We create a post route for the sign up, the route will be /user/signup\n   * We use the @Body() decorator to get the body of the request and the body is a SignUpUserDto\n   * @param body the request body\n   * @param req the request object itself\n   * @param res the respponse object we will send back to the user\n   * @returns confirmation message or error message\n   */\n  @Post('signup')\n  @UseInterceptors(FileInterceptor('avatar'))\n  signUpUser(\n    @Body() body: SignUpUserDto,\n    @Request() req,\n    @Res() res: Response,\n    @UploadedFile() file\n  ) {\n    if (body.password !== body.confirmPassword) {\n      return res.status(HttpStatus.BAD_REQUEST).json({\n        message: 'Passwords do not match'\n      });\n    }\n\n    this.userService.findOneByEmail(body.email).then((user: User) => {\n      if (user) {\n        return res.status(HttpStatus.BAD_REQUEST).json({\n          message: 'User already exists'\n        });\n      }\n\n      if (!user) {\n        if (file) {\n          this.userService.createUserWithImage(body, file).then((user: User) => {\n            const { id, firstName, lastName, email, profilePictureUrl } = user;\n            return res\n              .status(HttpStatus.CREATED)\n              .json({ id, firstName, lastName, email, profilePictureUrl });\n          });\n        }\n\n        if (!file) {\n          this.userService.create(body).then((user: User) => {\n            const { id, firstName, lastName, email } = user;\n            return res.status(HttpStatus.CREATED).json({ id, firstName, lastName, email });\n          });\n        }\n      }\n    });\n  }\n\n  /** creating post route, the route will be admin/signup\n   * @param body the request body\n   * @param req the request object itself\n   * @param res the response object we will send back to the user\n   * @returns confirmation message or error message\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Post('admin/signup')\n  @Roles(Role.Admin)\n  signUpAdmin(@Body() body: SignUpUserDto, @Request() req, @Res() res: Response) {\n    if (body.password !== body.confirmPassword) {\n      return res.status(HttpStatus.BAD_REQUEST).json({\n        message: 'Passwords do not match'\n      });\n    }\n\n    this.userService.findOneByEmail(body.email).then((user: User) => {\n      if (user) {\n        return res.status(HttpStatus.BAD_REQUEST).json({\n          message: 'User already exists'\n        });\n      }\n    });\n\n    this.userService.createAdmin(body).then((user: User) => {\n      const { id, firstName, lastName, email } = user;\n      return res.status(HttpStatus.CREATED).json({ id, firstName, lastName, email });\n    });\n  }\n  /**\n   * Route for login\n   * The guard is used to protect the route, if the user is not authenticated, the route will not be accessible\n   * The LocalAuthGuard will check if the user is authenticated using the local strategy\n   * @param req The request object\n   * @returns the JWT access token for the user\n   */\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  async loginUser(@Request() req) {\n    const isBanned = await this.authService.isUserBanned(req.user);\n\n    if (!isBanned) {\n      return this.authService.login(req.user);\n    }\n\n    throw new ForbiddenException('User banned');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm/dist/typeorm.module';\nimport { User } from '../user/entities/user.entity';\nimport { UserModule } from '../user/user.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport jwtConfig from './constants';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\n\n@Module({\n  imports: [\n    UserModule,\n    PassportModule,\n    JwtModule.register(jwtConfig),\n    TypeOrmModule.forFeature([User])\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                isUserBanned\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UserService, jwtService: JwtService, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        isUserBanned\n                        \n                    \n                \n            \n            \n                \n                    \n                    isUserBanned(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:49\n                \n            \n\n\n            \n                \n                    This method is called after the user is authenticated by the local strategy and returns the JWT token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the authenticated user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the JWT token\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:24\n                \n            \n\n\n            \n                \n                    Validate the user using password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        email of the user\n\n                                    \n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        password input by the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the user details (excluding password) or null if the user is not found or has an invalid password\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { EncryptionService } from 'src/common/services/encryption.service';\nimport { Repository } from 'typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { UserService } from '../user/user.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UserService,\n    private jwtService: JwtService,\n    @InjectRepository(User)\n    private usersRepository: Repository\n  ) {}\n\n  /**\n   * Validate the user using password\n   * @param email email of the user\n   * @param pass password input by the user\n   * @returns the user details (excluding password) or null if the user is not found or has an invalid password\n   */\n  async validateUser(email: string, pass: string): Promise {\n    const user = await this.usersRepository\n      .createQueryBuilder()\n      .select(['id', 'email', 'password', 'role'])\n      .where('email = :email', { email: email })\n      .getRawOne();\n\n    if (!user) {\n      throw new BadRequestException('User not found');\n    }\n\n    const passwordsMatch = await new EncryptionService().comparePasswords(pass, user.password);\n\n    if (user && passwordsMatch) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  /**\n   * This method is called after the user is authenticated by the local strategy and returns the JWT token\n   * @param user the authenticated user\n   * @returns the JWT token\n   */\n  async login(user: any) {\n    const payload = { email: user.email, sub: user.id, role: user.role };\n    return {\n      access_token: this.jwtService.sign(payload)\n    };\n  }\n\n  async isUserBanned(user: any) {\n    return this.usersService.isUserBanned(user.id).then((result) => {\n      return result;\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseEntity.html":{"url":"classes/BaseEntity.html","title":"class - BaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entities/base.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Base entity class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateDateColumn, UpdateDateColumn } from 'typeorm';\n\n/**\n * Base entity class\n * @description Base entity class for all entities\n */\nexport abstract class BaseEntity {\n  @CreateDateColumn()\n  createdAt: string;\n\n  @UpdateDateColumn()\n  updatedAt: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Block.html":{"url":"entities/Block.html","title":"entity - Block","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Block\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/block/entities/block.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                blockedUser\n                            \n                            \n                                blockingUser\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        blockedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.blockedBy, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/block/entities/block.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        blockingUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.blocks, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/block/entities/block.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/block/entities/block.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\n\n@Entity()\nexport class Block extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  //A block can only be done by one user but a user can have many blocks\n  @ManyToOne(() => User, (user) => user.blocks, {\n    onDelete: 'CASCADE'\n  })\n  blockingUser: User;\n\n  //A block can only be done by one user but a user can have many blocks\n  @ManyToOne(() => User, (user) => user.blockedBy, {\n    onDelete: 'CASCADE'\n  })\n  blockedUser: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BlockController.html":{"url":"controllers/BlockController.html","title":"controller - BlockController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BlockController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/block/block.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                block\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                blockUser\n                            \n                            \n                                unblockUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        blockUser\n                        \n                    \n                \n            \n            \n                \nblockUser(req, id: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('block-user/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/block/block.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unblockUser\n                        \n                    \n                \n            \n            \n                \nunblockUser(req, id: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('unblock-user/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/block/block.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UseGuards, Res, Request, Post, Param, HttpStatus } from '@nestjs/common';\nimport { Response } from 'express';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { BlockService } from './block.service';\n\n@Controller('block')\nexport class BlockController {\n  constructor(private blockService: BlockService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Post('block-user/:id')\n  blockUser(@Request() req, @Param('id') id: string, @Res() res: Response) {\n    this.blockService\n      .blockUser(id, req.user)\n      .then((block) => {\n        return res.status(HttpStatus.OK).json(block);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('unblock-user/:id')\n  unblockUser(@Request() req, @Param('id') id: string, @Res() res: Response) {\n    this.blockService\n      .unblockUser(id, req.user)\n      .then((_) => {\n        return res.status(HttpStatus.OK).json({ message: 'User unblocked' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BlockModule.html":{"url":"modules/BlockModule.html","title":"module - BlockModule","body":"\n                   \n\n\n\n\n    Modules\n    BlockModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BlockModule\n\n\n\ncluster_BlockModule_providers\n\n\n\n\nBlockService\n\nBlockService\n\n\n\nBlockModule\n\nBlockModule\n\nBlockModule -->\n\nBlockService->BlockModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/block/block.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BlockService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BlockController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { BlockService } from './block.service';\nimport { BlockController } from './block.controller';\nimport { Block } from './entities/block.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Block, User])],\n  providers: [BlockService],\n  controllers: [BlockController]\n})\nexport class BlockModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BlockService.html":{"url":"injectables/BlockService.html","title":"injectable - BlockService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BlockService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/block/block.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                blockUser\n                            \n                            \n                                    Async\n                                unblockUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(blockRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/block/block.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        blockRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        blockUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    blockUser(id: string, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/block/block.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unblockUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    unblockUser(id: string, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/block/block.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeleteResult, Repository } from 'typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { Block } from './entities/block.entity';\n\n@Injectable()\nexport class BlockService {\n  constructor(\n    @InjectRepository(Block)\n    private blockRepository: Repository,\n\n    @InjectRepository(User)\n    private userRepository: Repository\n  ) {}\n\n  async blockUser(id: string, user: any): Promise {\n    const userToBeBlocked = await this.userRepository.findOneBy({ id: id });\n\n    if (!userToBeBlocked) {\n      throw new BadRequestException('User not found');\n    }\n\n    if (userToBeBlocked.id === user.id) {\n      throw new BadRequestException('You cannot block yourself');\n    }\n\n    const blockingUser = await this.userRepository.findOne({\n      where: { id: user.id },\n      relations: ['blocks', 'blocks.blockedUser']\n    });\n\n    if (!blockingUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    blockingUser.blocks.map((block) => {\n      if (block.blockedUser.id === userToBeBlocked.id) {\n        throw new BadRequestException('User already blocked');\n      }\n    });\n\n    const newBlock = new Block();\n    newBlock.blockedUser = userToBeBlocked;\n    newBlock.blockingUser = blockingUser;\n\n    return await this.blockRepository.save(newBlock);\n  }\n\n  async unblockUser(id: string, user: any): Promise {\n    const userToBeUnblocked = await this.userRepository.findOneBy({ id: id });\n\n    if (!userToBeUnblocked) {\n      throw new BadRequestException('User not found');\n    }\n\n    if (userToBeUnblocked.id === user.id) {\n      throw new BadRequestException('You cannot unblock yourself');\n    }\n\n    const unblockingUser = await this.userRepository.findOne({\n      where: { id: user.id },\n      relations: ['blocks', 'blocks.blockedUser']\n    });\n\n    if (!unblockingUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    let userFound = false;\n    let blockId = '';\n\n    unblockingUser.blocks.map((block) => {\n      if (block.blockedUser.id === userToBeUnblocked.id) {\n        userFound = true;\n        blockId = block.id;\n      }\n    });\n\n    if (!userFound) {\n      throw new BadRequestException('User not blocked');\n    }\n\n    return await this.blockRepository.delete({ id: blockId });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Comment.html":{"url":"entities/Comment.html","title":"entity - Comment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/entities/comment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                id\n                            \n                            \n                                post\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.comments, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/comment.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/comment.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.comments, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/comment.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/comment.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from '../../user/entities/user.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Post } from './post.entity';\nimport { BaseEntity } from '../../../common/entities/base.entity';\n\n@Entity()\nexport class Comment extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  text: string;\n\n  //A comment can be made my one user but a user can have many comments\n  @ManyToOne(() => User, (user) => user.comments, {\n    onDelete: 'CASCADE'\n  })\n  author: User;\n\n  //A comment can be in one post but a post can have many comments\n  @ManyToOne(() => Post, (post) => post.comments, {\n    onDelete: 'CASCADE'\n  })\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/dto/comment-create.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MaxLength(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/comment-create.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, MaxLength } from 'class-validator';\n\nexport class CreateCommentDto {\n  @IsNotEmpty()\n  @MaxLength(100)\n  text: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/dto/post-create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the DTO for creating a post\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                caption\n                            \n                            \n                                imageUrl\n                            \n                            \n                                location\n                            \n                            \n                                tag\n                            \n                            \n                                type\n                            \n                            \n                                visibility\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        caption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/post-create.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/post-create.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/post-create.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/post-create.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/post-create.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visibility\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Visibility\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Visibility)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/post-create.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty } from 'class-validator';\nimport { Visibility } from 'src/constants/visibility.enum';\n\n/**\n * This is the DTO for creating a post\n */\nexport class CreatePostDto {\n  @IsNotEmpty()\n  caption: string;\n\n  imageUrl: string;\n\n  @IsNotEmpty()\n  tag: string;\n\n  @IsNotEmpty()\n  type: string;\n\n  @IsNotEmpty()\n  location: string;\n\n  @IsEnum(Visibility)\n  @IsNotEmpty()\n  visibility: Visibility;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateScrapBookDto.html":{"url":"classes/CreateScrapBookDto.html","title":"class - CreateScrapBookDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateScrapBookDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/dto/scrapbook-create.dts.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the DTO for creating a scrapbook\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                caption\n                            \n                            \n                                location\n                            \n                            \n                                posts\n                            \n                            \n                                visibility\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        caption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/scrapbook-create.dts.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/scrapbook-create.dts.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/scrapbook-create.dts.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visibility\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Visibility\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Visibility)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/scrapbook-create.dts.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty } from 'class-validator';\nimport { Visibility } from 'src/constants/visibility.enum';\nimport { Post } from '../entities/post.entity';\n\n/**\n * This is the DTO for creating a scrapbook\n */\nexport class CreateScrapBookDto {\n  @IsNotEmpty()\n  caption: string;\n\n  //Optional field\n  posts: Post[];\n\n  @IsNotEmpty()\n  location: string;\n\n  @IsEnum(Visibility)\n  @IsNotEmpty()\n  visibility: Visibility;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/encryption.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for encrypting and comparing passwords\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePasswords\n                            \n                            \n                                    Async\n                                encryptPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                    \n                    comparePasswords(password: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/encryption.service.ts:25\n                \n            \n\n\n            \n                \n                    Compares a password with a hashed password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the password to compare\n\n                                    \n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the hashed password to compare with\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        true if the passwords match, false otherwise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        encryptPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    encryptPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/encryption.service.ts:14\n                \n            \n\n\n            \n                \n                    Encrypts a password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the password to encrypt\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the encrypted password\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { hash, compare } from 'bcryptjs';\n\n/**\n * Service for encrypting and comparing passwords\n */\n@Injectable()\nexport class EncryptionService {\n  /**\n   * Encrypts a password\n   * @param password the password to encrypt\n   * @returns the encrypted password\n   */\n  async encryptPassword(password: string): Promise {\n    const SALT_FACTOR = 10;\n    return await hash(password, SALT_FACTOR);\n  }\n\n  /**\n   * Compares a password with a hashed password\n   * @param password the password to compare\n   * @param hashedPassword the hashed password to compare with\n   * @returns true if the passwords match, false otherwise\n   */\n  async comparePasswords(password: string, hashedPassword: string): Promise {\n    return await compare(password, hashedPassword);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FeedController.html":{"url":"controllers/FeedController.html","title":"controller - FeedController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FeedController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/feed/feed.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                feed\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPostAnalytics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getPostAnalytics\n                        \n                    \n                \n            \n            \n                \ngetPostAnalytics(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/feed/feed.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpStatus, Res, UseGuards, Request, Query } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { Response } from 'express';\nimport { FeedService } from './feed.service';\nimport { PageOptionsDto } from 'src/common/dto/page-options.dto';\n\n@Controller('feed')\nexport class FeedController {\n  constructor(private feedService: FeedService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  getPostAnalytics(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.feedService\n      .getFeed(req.user, pageOptionsDto)\n      .then((posts) => {\n        return res.status(HttpStatus.OK).json(posts);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FeedModule.html":{"url":"modules/FeedModule.html","title":"module - FeedModule","body":"\n                   \n\n\n\n\n    Modules\n    FeedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FeedModule\n\n\n\ncluster_FeedModule_providers\n\n\n\n\nFeedService\n\nFeedService\n\n\n\nFeedModule\n\nFeedModule\n\nFeedModule -->\n\nFeedService->FeedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/feed/feed.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FeedService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FeedController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { User } from '../user/entities/user.entity';\nimport { FeedController } from './feed.controller';\nimport { FeedService } from './feed.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Post, User])],\n  controllers: [FeedController],\n  providers: [FeedService]\n})\nexport class FeedModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FeedService.html":{"url":"injectables/FeedService.html","title":"injectable - FeedService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FeedService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/feed/feed.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getFeed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/feed/feed.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFeed\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFeed(user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/feed/feed.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PageMetaDto } from 'src/common/dto/page-meta.dto';\nimport { PageOptionsDto } from 'src/common/dto/page-options.dto';\nimport { PageDto } from 'src/common/dto/page.dto';\nimport { Visibility } from 'src/constants/visibility.enum';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { User } from '../user/entities/user.entity';\n\n@Injectable()\nexport class FeedService {\n  constructor(\n    @InjectRepository(Post)\n    private postRepository: Repository,\n\n    @InjectRepository(User)\n    private userRepository: Repository\n  ) {}\n\n  async getFeed(user: any, pageOptionsDto: PageOptionsDto): Promise> {\n    const dbUser = await this.userRepository.findOne({\n      where: { id: user.id },\n      relations: [\n        'following',\n        'following.followed.posts',\n        'following.followed.posts.postedBy',\n        'following.followed.posts.likes',\n        'following.followed.posts.likes.likedBy',\n        'following.followed.posts.comments',\n        'following.followed.posts.comments.author'\n      ]\n    });\n\n    if (!dbUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    const publicPosts = await this.postRepository.find({\n      where: { visibility: Visibility.Public },\n      relations: ['postedBy', 'comments', 'likes', 'likes.likedBy', 'comments.author']\n    });\n\n    let posts = dbUser.following.map((user) => user.followed.posts)[0];\n\n    posts = posts\n      .concat(publicPosts)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n\n    const paginatedPosts = posts.slice(\n      (pageOptionsDto.page - 1) * pageOptionsDto.take,\n      pageOptionsDto.page * pageOptionsDto.take\n    );\n\n    const itemCount: number = posts.length;\n    const entities: Post[] = paginatedPosts;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseStorageService.html":{"url":"injectables/FirebaseStorageService.html","title":"injectable - FirebaseStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseStorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/firebase-storage.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Firebase Storage Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expiryDate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteAvatar\n                            \n                            \n                                    Async\n                                deletePostImage\n                            \n                            \n                                    Async\n                                getPostImageSignedURL\n                            \n                            \n                                    Async\n                                getSignedURL\n                            \n                            \n                                    Async\n                                updateAvatar\n                            \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadPostImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAvatar(imageId: any, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageId\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePostImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePostImage(imageId: any, userId: string, postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageId\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostImageSignedURL\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostImageSignedURL(imageId: any, userId: string, postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageId\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSignedURL\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSignedURL(userId: string, imageId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAvatar(image: any, previousImageId: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:50\n                \n            \n\n\n            \n                \n                    Update the user avatar\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the image to be uploaded\n\n                                    \n                                \n                                \n                                    previousImageId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the previous image\n\n                                    \n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the image id, url and expiry date of the new image\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(image: any, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:25\n                \n            \n\n\n            \n                \n                    Upload Avatar\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the image to be uploaded\n\n                                    \n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the image id, url and expiry date\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPostImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPostImage(image: any, userId: string, postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expiryDate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Date.now() + 6 * 24 * 60 * 60 * 1000\n                    \n                \n                    \n                        \n                                Defined in src/common/services/firebase-storage.service.ts:16\n                        \n                    \n\n            \n                \n                    Expiry date for signed urls\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { bucket, storage } from './firebase-admin.service';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Injectable } from '@nestjs/common';\nimport { GetSignedUrlConfig } from '@google-cloud/storage';\n\n/**\n * Firebase Storage Service\n * @description This service is used to upload, delete and get signed urls for images\n */\n@Injectable()\nexport class FirebaseStorageService {\n  /**\n   * Expiry date for signed urls\n   * @description This is the expiry date for the signed urls, which is 6 days from now\n   */\n  expiryDate = Date.now() + 6 * 24 * 60 * 60 * 1000;\n\n  /**\n   * Upload Avatar\n   * @description This function is used to upload a new avatar image\n   * @param image the image to be uploaded\n   * @param userId the id of the user\n   * @returns the image id, url and expiry date\n   */\n  async uploadAvatar(image: any, userId: string) {\n    const imageId = uuidv4();\n\n    const file = bucket.file(`users/${userId}/avatars/${imageId}.png`);\n\n    await file.save(image);\n\n    const urlOptions: GetSignedUrlConfig = {\n      version: 'v4',\n      action: 'read',\n      expires: this.expiryDate\n    };\n\n    const [url] = await file.getSignedUrl(urlOptions);\n\n    return { imageId: imageId, url: url, expiryDate: this.expiryDate };\n  }\n\n  /**\n   * Update the user avatar\n   * @param image the image to be uploaded\n   * @param previousImageId the id of the previous image\n   * @param userId the id of the user\n   * @returns the image id, url and expiry date of the new image\n   */\n  async updateAvatar(image: any, previousImageId: string, userId: string) {\n    await this.deleteAvatar(previousImageId, userId);\n\n    const file = bucket.file(`users/${userId}/avatars/${previousImageId}.png`);\n\n    await file.save(image);\n\n    const urlOptions: GetSignedUrlConfig = {\n      version: 'v4',\n      action: 'read',\n      expires: this.expiryDate\n    };\n\n    const [url] = await file.getSignedUrl(urlOptions);\n\n    return { url: url, expiryDate: this.expiryDate };\n  }\n\n  async deleteAvatar(imageId: any, userId: string) {\n    const fileName = `users/${userId}/avatars/${imageId}.png`;\n\n    await storage\n      .bucket(process.env.FIREBASE_BUCKET_NAME)\n      .file(fileName)\n      .delete()\n      .catch((err) => {\n        throw err;\n      });\n  }\n\n  async uploadPostImage(image: any, userId: string, postId: string) {\n    const imageId = uuidv4();\n\n    const file = bucket.file(`users/${userId}/posts/${postId}/${imageId}.png`);\n\n    await file.save(image);\n\n    const urlOptions: GetSignedUrlConfig = {\n      version: 'v4',\n      action: 'read',\n      expires: this.expiryDate\n    };\n\n    const [url] = await file.getSignedUrl(urlOptions);\n\n    return { imageId: imageId, url: url, expiryDate: this.expiryDate };\n  }\n\n  async deletePostImage(imageId: any, userId: string, postId: string) {\n    const fileName = `users/${userId}/posts/${postId}/${imageId}.png`;\n\n    await storage\n      .bucket(process.env.FIREBASE_BUCKET_NAME)\n      .file(fileName)\n      .delete()\n      .catch((err) => {\n        throw err;\n      });\n  }\n\n  async getSignedURL(userId: string, imageId: string) {\n    // The name of the object for which you want a signed URL\n    const fileName = `users/${userId}/avatars/${imageId}.png`;\n    let imageUrl = '';\n\n    await storage\n      .bucket(process.env.FIREBASE_BUCKET_NAME)\n      .file(fileName)\n      .exists()\n      .then(async (exists) => {\n        if (exists[0]) {\n          const urlOptions: GetSignedUrlConfig = {\n            version: 'v4',\n            action: 'read',\n            expires: this.expiryDate\n          };\n\n          // Get a signed URL that allows temporary access to the object\n          const [url] = await storage\n            .bucket(process.env.FIREBASE_BUCKET_NAME)\n            .file(fileName)\n            .getSignedUrl(urlOptions);\n\n          imageUrl = url;\n        }\n      });\n    return { url: imageUrl, expiryDate: this.expiryDate };\n  }\n\n  async getPostImageSignedURL(imageId: any, userId: string, postId: string) {\n    const fileName = `users/${userId}/posts/${postId}/${imageId}.png`;\n\n    let imageUrl = '';\n    await storage\n      .bucket(process.env.FIREBASE_BUCKET_NAME)\n      .file(fileName)\n      .exists()\n      .then(async (exists) => {\n        if (exists[0]) {\n          const urlOptions: GetSignedUrlConfig = {\n            version: 'v4',\n            action: 'read',\n            expires: this.expiryDate\n          };\n\n          // Get a signed URL that allows temporary access to the object\n          const [url] = await storage\n            .bucket(process.env.FIREBASE_BUCKET_NAME)\n            .file(fileName)\n            .getSignedUrl(urlOptions);\n\n          imageUrl = url;\n        }\n      });\n    return { url: imageUrl, expiryDate: this.expiryDate };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Follow.html":{"url":"entities/Follow.html","title":"entity - Follow","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Follow\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/follow/entities/follow.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                followed\n                            \n                            \n                                followedBy\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        followed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.followers, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.following, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\n\n@Entity()\nexport class Follow extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  //the user doing the following\n  @ManyToOne(() => User, (user) => user.following, {\n    onDelete: 'CASCADE'\n  })\n  followedBy: User;\n\n  //the user being followed\n  @ManyToOne(() => User, (user) => user.followers, {\n    onDelete: 'CASCADE'\n  })\n  followed: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FollowController.html":{"url":"controllers/FollowController.html","title":"controller - FollowController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FollowController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/follow/follow.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                follow\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                acceptFollow\n                            \n                            \n                                    Async\n                                getFollowers\n                            \n                            \n                                    Async\n                                getFollowing\n                            \n                            \n                                    Async\n                                getFollowRequestsReceived\n                            \n                            \n                                    Async\n                                getFollowRequestsSent\n                            \n                            \n                                    Async\n                                rejectFollow\n                            \n                            \n                                    Async\n                                requestFollow\n                            \n                            \n                                    Async\n                                unfollow\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        acceptFollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    acceptFollow(req, res: Response, requestId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch('accept-follow/:requestId')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    requestId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowers(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('followers')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowing\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowing(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('following')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowRequestsReceived\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowRequestsReceived(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('follow-requests-received')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowRequestsSent\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowRequestsSent(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('follow-requests-sent')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        rejectFollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    rejectFollow(req, res: Response, requestId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch('reject-follow/:requestId')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    requestId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        requestFollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    requestFollow(req, res: Response, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('request-follow/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollow(req, res: Response, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete('unfollow/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UseGuards, Res, Request, Post, HttpStatus } from '@nestjs/common';\nimport { Delete, Get, Param, Patch, Query } from '@nestjs/common/decorators';\nimport { Response } from 'express';\nimport { PageOptionsDto } from 'src/common/dto/page-options.dto';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { FollowService } from './follow.service';\n\n@Controller('follow')\nexport class FollowController {\n  constructor(private followService: FollowService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Post('request-follow/:id')\n  async requestFollow(@Request() req, @Res() res: Response, @Param('id') id: string) {\n    this.followService\n      .requestFollow(id, req.user)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json(result);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  //Accept Follow\n  @UseGuards(JwtAuthGuard)\n  @Patch('accept-follow/:requestId')\n  async acceptFollow(@Request() req, @Res() res: Response, @Param('requestId') requestId: string) {\n    this.followService\n      .acceptFollow(requestId, req.user)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json(result);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  //Reject Follow\n  @UseGuards(JwtAuthGuard)\n  @Patch('reject-follow/:requestId')\n  async rejectFollow(@Request() req, @Res() res: Response, @Param('requestId') requestId: string) {\n    this.followService\n      .rejectFollow(requestId, req.user)\n      .then((_) => {\n        return res.status(HttpStatus.OK).json({ message: 'Follow request rejected' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  //Unfollow\n  @UseGuards(JwtAuthGuard)\n  @Delete('unfollow/:id')\n  async unfollow(@Request() req, @Res() res: Response, @Param('id') id: string) {\n    this.followService\n      .unfollow(id, req.user)\n      .then((_) => {\n        return res.status(HttpStatus.OK).json({ message: 'Unfollowed' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  //Get Followers\n  @UseGuards(JwtAuthGuard)\n  @Get('followers')\n  async getFollowers(\n    @Request() req,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.followService\n      .getFollowers(req.user, pageOptionsDto)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json(result);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  //Get Following\n  @UseGuards(JwtAuthGuard)\n  @Get('following')\n  async getFollowing(\n    @Request() req,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.followService\n      .getFollowing(req.user, pageOptionsDto)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json(result);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  //Get Follow Requests Received\n  @UseGuards(JwtAuthGuard)\n  @Get('follow-requests-received')\n  async getFollowRequestsReceived(\n    @Request() req,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.followService\n      .getFollowRequestsReceived(req.user, pageOptionsDto)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json(result);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  //Get Follow Requests Sent\n  @UseGuards(JwtAuthGuard)\n  @Get('follow-requests-sent')\n  async getFollowRequestsSent(\n    @Request() req,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.followService\n      .getFollowRequestsSent(req.user, pageOptionsDto)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json(result);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FollowModule.html":{"url":"modules/FollowModule.html","title":"module - FollowModule","body":"\n                   \n\n\n\n\n    Modules\n    FollowModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FollowModule\n\n\n\ncluster_FollowModule_providers\n\n\n\n\nFollowService\n\nFollowService\n\n\n\nFollowModule\n\nFollowModule\n\nFollowModule -->\n\nFollowService->FollowModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/follow/follow.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FollowService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FollowController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { FollowRequest } from './entities/follow-request.entity';\nimport { Follow } from './entities/follow.entity';\nimport { FollowController } from './follow.controller';\nimport { FollowService } from './follow.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Follow, FollowRequest])],\n  controllers: [FollowController],\n  providers: [FollowService]\n})\nexport class FollowModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/FollowRequest.html":{"url":"entities/FollowRequest.html","title":"entity - FollowRequest","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  FollowRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/follow/entities/follow-request.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                requestedBy\n                            \n                            \n                                requestedUser\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow-request.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        requestedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.followRequestsSent, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow-request.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        requestedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.followRequestsReceived, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow-request.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FollowStatus\n\n                    \n                \n                \n                    \n                        Default value : FollowStatus.Pending\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow-request.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { FollowStatus } from '../../../constants/follow-status.enum';\n\n@Entity()\nexport class FollowRequest extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ default: FollowStatus.Pending })\n  status: FollowStatus = FollowStatus.Pending;\n\n  //the user doing the following\n  @ManyToOne(() => User, (user) => user.followRequestsSent, {\n    onDelete: 'CASCADE'\n  })\n  requestedBy: User;\n\n  //the user being followed\n  @ManyToOne(() => User, (user) => user.followRequestsReceived, {\n    onDelete: 'CASCADE'\n  })\n  requestedUser: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FollowService.html":{"url":"injectables/FollowService.html","title":"injectable - FollowService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FollowService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/follow/follow.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                acceptFollow\n                            \n                            \n                                    Async\n                                getFollowers\n                            \n                            \n                                    Async\n                                getFollowing\n                            \n                            \n                                    Async\n                                getFollowRequestsReceived\n                            \n                            \n                                    Async\n                                getFollowRequestsSent\n                            \n                            \n                                    Async\n                                rejectFollow\n                            \n                            \n                                    Async\n                                requestFollow\n                            \n                            \n                                    Async\n                                unfollow\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, followRequestsRepository: Repository, followsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/follow/follow.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        followRequestsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        followsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        acceptFollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    acceptFollow(id: string, userToBeFollowed: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userToBeFollowed\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowers(user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowing\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowing(user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowRequestsReceived\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowRequestsReceived(user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowRequestsSent\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowRequestsSent(user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:203\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        rejectFollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    rejectFollow(id: string, userToBeFollowed: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userToBeFollowed\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        requestFollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    requestFollow(id: string, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollow(id: string, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:224\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, ForbiddenException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PageMetaDto } from 'src/common/dto/page-meta.dto';\nimport { PageOptionsDto } from 'src/common/dto/page-options.dto';\nimport { PageDto } from 'src/common/dto/page.dto';\nimport { FollowStatus } from 'src/constants/follow-status.enum';\nimport { DeleteResult, Repository, UpdateResult } from 'typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { FollowRequest } from './entities/follow-request.entity';\nimport { Follow } from './entities/follow.entity';\n\n@Injectable()\nexport class FollowService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n\n    @InjectRepository(FollowRequest)\n    private followRequestsRepository: Repository,\n\n    @InjectRepository(Follow)\n    private followsRepository: Repository\n  ) {}\n\n  async requestFollow(id: string, user: any): Promise {\n    const userToBeFollowed = await this.usersRepository.findOneBy({ id: id });\n\n    const userRequestingFollow = await this.usersRepository.findOne({\n      where: { id: user.id },\n      relations: [\n        'following',\n        'following.followed',\n        'followRequestsSent',\n        'followRequestsSent.requestedUser'\n      ]\n    });\n\n    if (!userToBeFollowed) {\n      throw new BadRequestException('User not found');\n    }\n\n    if (!userRequestingFollow) {\n      throw new BadRequestException('User not found');\n    }\n\n    if (userToBeFollowed.id === userRequestingFollow.id) {\n      throw new BadRequestException('You cannot follow yourself');\n    }\n\n    userRequestingFollow.followRequestsSent.map((followRequest) => {\n      if (\n        followRequest.requestedUser.id === userToBeFollowed.id &&\n        followRequest.status === FollowStatus.Pending\n      ) {\n        throw new BadRequestException('You already request to follow this user');\n      }\n    });\n\n    userRequestingFollow.following.map((follow) => {\n      if (follow.followed.id === userToBeFollowed.id) {\n        throw new BadRequestException('You are already following this user');\n      }\n    });\n\n    const followRequest = new FollowRequest();\n    followRequest.requestedBy = user;\n    followRequest.requestedUser = userToBeFollowed;\n\n    return await this.followRequestsRepository.save(followRequest);\n  }\n\n  async acceptFollow(id: string, userToBeFollowed: any): Promise {\n    const followRequest = await this.followRequestsRepository.findOne({\n      where: { id: id },\n      relations: ['requestedBy', 'requestedUser']\n    });\n\n    if (!followRequest) {\n      throw new BadRequestException('Follow request not found');\n    }\n\n    if (followRequest.requestedUser.id !== userToBeFollowed.id) {\n      throw new ForbiddenException('You cannot accept this follow request');\n    }\n\n    if (!followRequest.requestedBy) {\n      throw new BadRequestException('Follow request is no longer valid');\n    }\n\n    if (followRequest.status === FollowStatus.Accepted) {\n      throw new BadRequestException('This follow request has already been accepted');\n    }\n\n    if (followRequest.status === FollowStatus.Rejected) {\n      throw new BadRequestException('This follow request has been rejected');\n    }\n\n    await this.followRequestsRepository.update(followRequest.id, { status: FollowStatus.Accepted });\n\n    const follow = new Follow();\n    follow.followedBy = followRequest.requestedBy;\n    follow.followed = followRequest.requestedUser;\n\n    return await this.followsRepository.save(follow);\n  }\n\n  async rejectFollow(id: string, userToBeFollowed: any): Promise {\n    const followRequest = await this.followRequestsRepository.findOne({\n      where: { id: id },\n      relations: ['requestedBy', 'requestedUser']\n    });\n\n    if (!followRequest) {\n      throw new BadRequestException('Follow request not found');\n    }\n\n    if (followRequest.requestedUser.id !== userToBeFollowed.id) {\n      throw new ForbiddenException('You cannot reject this follow request');\n    }\n\n    if (!followRequest.requestedBy) {\n      throw new BadRequestException('Follow request is no longer valid');\n    }\n\n    if (followRequest.status === FollowStatus.Accepted) {\n      throw new BadRequestException('This follow request has been accepted');\n    }\n\n    if (followRequest.status === FollowStatus.Rejected) {\n      throw new BadRequestException('This follow request has already been rejected');\n    }\n\n    return this.followRequestsRepository.update(followRequest.id, {\n      status: FollowStatus.Rejected\n    });\n  }\n\n  async getFollowers(user: any, pageOptionsDto: PageOptionsDto): Promise> {\n    const dbUser = await this.usersRepository.findOne({\n      where: { id: user.id },\n      relations: ['followers', 'followers.followedBy']\n    });\n\n    if (!dbUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    const users = dbUser.followers.map((follow) => {\n      return follow.followedBy;\n    });\n\n    const itemCount: number = users.length;\n    const entities: User[] = users;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async getFollowing(user: any, pageOptionsDto: PageOptionsDto): Promise> {\n    const dbUser = await this.usersRepository.findOne({\n      where: { id: user.id },\n      relations: ['following', 'following.followed']\n    });\n\n    if (!dbUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    const users = dbUser.following.map((follow) => {\n      return follow.followed;\n    });\n\n    const itemCount: number = users.length;\n    const entities: User[] = users;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async getFollowRequestsReceived(\n    user: any,\n    pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const dbUser = await this.usersRepository.findOne({\n      where: { id: user.id },\n      relations: ['followRequestsReceived', 'followRequestsReceived.requestedBy']\n    });\n\n    if (!dbUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    const itemCount: number = dbUser.followRequestsReceived.length;\n    const entities: FollowRequest[] = dbUser.followRequestsReceived;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async getFollowRequestsSent(\n    user: any,\n    pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const dbUser = await this.usersRepository.findOne({\n      where: { id: user.id },\n      relations: ['followRequestsSent', 'followRequestsSent.requestedUser']\n    });\n\n    if (!dbUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    const itemCount: number = dbUser.followRequestsSent.length;\n    const entities: FollowRequest[] = dbUser.followRequestsSent;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async unfollow(id: string, user: any): Promise {\n    const userToBeUnfollowed = await this.usersRepository.findOneBy({ id: id });\n    const userRequestingUnfollow = await this.usersRepository.findOne({\n      where: { id: user.id },\n      relations: ['following', 'following.followed']\n    });\n\n    if (!userToBeUnfollowed) {\n      throw new BadRequestException('User not found');\n    }\n\n    if (!userRequestingUnfollow) {\n      throw new BadRequestException('User not found');\n    }\n\n    if (userToBeUnfollowed.id === userRequestingUnfollow.id) {\n      throw new BadRequestException('You cannot unfollow yourself');\n    }\n\n    let isFollowing = false;\n    let followId = '';\n\n    userRequestingUnfollow.following.map((follow) => {\n      if (follow.followed.id === userToBeUnfollowed.id) {\n        isFollowing = true;\n        followId = follow.id;\n      }\n    });\n\n    if (!isFollowing) {\n      throw new BadRequestException('You are not following this user');\n    }\n\n    return this.followsRepository.delete(followId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategies/jwt.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport jwtConfig from '../constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      //Extract the token from the authorization header\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      //Ensure that the token has not expired\n      ignoreExpiration: false,\n      //Use the secret to verify the token\n      secretOrKey: jwtConfig.secret\n    });\n  }\n\n  //Invoked after Passport has verified the token\n  async validate(payload: any) {\n    return { id: payload.sub, email: payload.email, role: payload.role };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Like.html":{"url":"entities/Like.html","title":"entity - Like","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Like\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/entities/post-like.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                likedBy\n                            \n                            \n                                likedPost\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post-like.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.likes, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post-like.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likedPost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.likes, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post-like.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { User } from '../../user/entities/user.entity';\nimport { Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Post } from './post.entity';\n\n@Entity()\nexport class Like extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @ManyToOne(() => Post, (post) => post.likes, {\n    onDelete: 'CASCADE'\n  })\n  likedPost: Post;\n\n  //A like can only be liked by one user but a user can have many likes\n  @ManyToOne(() => User, (user) => user.likes, {\n    onDelete: 'CASCADE'\n  })\n  likedBy: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/local.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Local strategy for passport\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/local.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategies/local.strategy.ts:21\n                \n            \n\n\n            \n                \n                    Validates the user using password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        email of the user\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        password input by the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the user details or throws an UnauthorizedException if the user is not found or has an invalid password\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\n\n/**\n * Local strategy for passport\n */\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  /**\n   * Validates the user using password\n   * @param email email of the user\n   * @param password password input by the user\n   * @returns the user details or throws an UnauthorizedException if the user is not found or has an invalid password\n   */\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationController.html":{"url":"controllers/NotificationController.html","title":"controller - NotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notification/notification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                notification\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendNotificationToAll\n                            \n                            \n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendNotificationToAll\n                        \n                    \n                \n            \n            \n                \nsendNotificationToAll(req, res: Response, body: SendNotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Post('send')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/notification/notification.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                SendNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signup\n                        \n                    \n                \n            \n            \n                \nsignup(req, res: Response, fcmToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('signup/:fcmToken')\n                \n            \n\n            \n                \n                    Defined in src/modules/notification/notification.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fcmToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UseGuards, Post, Res, Param, Request, HttpStatus, Body } from '@nestjs/common';\nimport { Response } from 'express';\nimport { Role } from 'src/constants/role.enum';\nimport { Roles } from 'src/decorators/roles.decorator';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { SendNotificationDto } from './dto/send-message.dto';\nimport { NotificationService } from './notification.service';\n\n@Controller('notification')\nexport class NotificationController {\n  constructor(private notificationService: NotificationService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Post('signup/:fcmToken')\n  signup(@Request() req, @Res() res: Response, @Param('fcmToken') fcmToken: string) {\n    this.notificationService\n      .signup(req.user, fcmToken)\n      .then(() => {\n        return res.status(HttpStatus.OK).json({ message: 'FCM token saved' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Post('send')\n  @Roles(Role.Admin)\n  sendNotificationToAll(@Request() req, @Res() res: Response, @Body() body: SendNotificationDto) {\n    this.notificationService\n      .sendNotification(body)\n      .then(() => {\n        return res.status(HttpStatus.OK).json({ message: 'Notification sent' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationModule.html":{"url":"modules/NotificationModule.html","title":"module - NotificationModule","body":"\n                   \n\n\n\n\n    Modules\n    NotificationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_NotificationModule\n\n\n\ncluster_NotificationModule_exports\n\n\n\ncluster_NotificationModule_providers\n\n\n\n\nNotificationService \n\nNotificationService \n\n\n\nNotificationModule\n\nNotificationModule\n\nNotificationService  -->\n\nNotificationModule->NotificationService \n\n\n\n\n\nNotificationService\n\nNotificationService\n\nNotificationModule -->\n\nNotificationService->NotificationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/notification/notification.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NotificationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NotificationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NotificationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { NotificationController } from './notification.controller';\nimport { NotificationService } from './notification.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [NotificationController],\n  providers: [NotificationService],\n  exports: [NotificationService]\n})\nexport class NotificationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notification/notification.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendNotification\n                            \n                            \n                                    Async\n                                sendNotificationToAll\n                            \n                            \n                                    Async\n                                sendNotificationToCelebrities\n                            \n                            \n                                    Async\n                                sendNotificationToInfluencers\n                            \n                            \n                                    Async\n                                sendNotificationToOne\n                            \n                            \n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/notification/notification.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendNotification(sendNotificationDto: SendNotificationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notification/notification.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sendNotificationDto\n                                    \n                                                SendNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendNotificationToAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendNotificationToAll(title: string, body: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notification/notification.service.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendNotificationToCelebrities\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendNotificationToCelebrities(title: string, body: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notification/notification.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendNotificationToInfluencers\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendNotificationToInfluencers(title: string, body: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notification/notification.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendNotificationToOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendNotificationToOne(title: string, body: string, userId)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notification/notification.service.ts:189\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signup\n                        \n                    \n                \n            \n            \n                \nsignup(user: any, fcmToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notification/notification.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fcmToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Not, Repository, UpdateResult } from 'typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { messaging } from '../../common/services/firebase-admin.service';\nimport { SendNotificationDto } from './dto/send-message.dto';\nimport { NotificationTargetGroup } from 'src/constants/notification-target-group.enum';\nimport { NotificationPreference } from 'src/constants/notification-preference.enum';\nimport { Role } from 'src/constants/role.enum';\n\n@Injectable()\nexport class NotificationService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository\n  ) {}\n\n  signup(user: any, fcmToken: string): Promise {\n    return this.usersRepository.update(user.id, { fcmToken: fcmToken });\n  }\n\n  async sendNotification(sendNotificationDto: SendNotificationDto): Promise {\n    if (sendNotificationDto.targetGroup === NotificationTargetGroup.SingleUser) {\n      if (!sendNotificationDto.targetUserId) {\n        throw new BadRequestException('Target User ID is required');\n      }\n      return await this.sendNotificationToOne(\n        sendNotificationDto.title,\n        sendNotificationDto.body,\n        sendNotificationDto.targetUserId\n      );\n    }\n    if (sendNotificationDto.targetGroup === NotificationTargetGroup.All) {\n      return await this.sendNotificationToAll(sendNotificationDto.title, sendNotificationDto.body);\n    }\n    if (sendNotificationDto.targetGroup === NotificationTargetGroup.Celebrity) {\n      return await this.sendNotificationToCelebrities(\n        sendNotificationDto.title,\n        sendNotificationDto.body\n      );\n    }\n    if (sendNotificationDto.targetGroup === NotificationTargetGroup.Influencers) {\n      return await this.sendNotificationToInfluencers(\n        sendNotificationDto.title,\n        sendNotificationDto.body\n      );\n    }\n  }\n\n  async sendNotificationToCelebrities(title: string, body: string): Promise {\n    const usersToBeNotified = await this.usersRepository.find({\n      where: [\n        {\n          fcmToken: Not(''),\n          role: Role.Celebrity,\n          notificationPreference: NotificationPreference.SelectedGroup\n        },\n        {\n          fcmToken: Not(''),\n          role: Role.Celebrity,\n          notificationPreference: NotificationPreference.All\n        }\n      ]\n    });\n\n    if (usersToBeNotified.length === 0) {\n      throw new BadRequestException('No users to be notified');\n    }\n\n    const fcmTokens = usersToBeNotified.map((user) => {\n      return user.fcmToken;\n    });\n\n    if (usersToBeNotified.length == 1) {\n      const payload = {\n        notification: {\n          title: title,\n          body: body\n        },\n        token: fcmTokens[0]\n      };\n\n      return messaging.send(payload);\n    }\n\n    const payload = {\n      notification: {\n        title: title,\n        body: body\n      },\n      tokens: fcmTokens\n    };\n\n    return messaging.sendMulticast(payload);\n  }\n\n  async sendNotificationToInfluencers(title: string, body: string): Promise {\n    const usersToBeNotified = await this.usersRepository.find({\n      where: [\n        {\n          fcmToken: Not(''),\n          role: Role.Influencer,\n          notificationPreference: NotificationPreference.SelectedGroup\n        },\n        {\n          fcmToken: Not(''),\n          role: Role.Influencer,\n          notificationPreference: NotificationPreference.All\n        }\n      ]\n    });\n\n    if (usersToBeNotified.length === 0) {\n      throw new BadRequestException('No users to be notified');\n    }\n\n    const fcmTokens = usersToBeNotified.map((user) => {\n      return user.fcmToken;\n    });\n\n    if (usersToBeNotified.length == 1) {\n      const payload = {\n        notification: {\n          title: title,\n          body: body\n        },\n        token: fcmTokens[0]\n      };\n\n      return messaging.send(payload);\n    }\n\n    const payload = {\n      notification: {\n        title: title,\n        body: body\n      },\n      tokens: fcmTokens\n    };\n\n    return messaging.sendMulticast(payload);\n  }\n\n  async sendNotificationToAll(title: string, body: string): Promise {\n    const usersToBeNotified = await this.usersRepository.find({\n      where: [\n        {\n          fcmToken: Not(''),\n          notificationPreference: NotificationPreference.Broadcast\n        },\n        {\n          fcmToken: Not(''),\n          notificationPreference: NotificationPreference.All\n        }\n      ]\n    });\n\n    if (usersToBeNotified.length === 0) {\n      throw new BadRequestException('No users to be notified');\n    }\n\n    const fcmTokens = usersToBeNotified.map((user) => {\n      return user.fcmToken;\n    });\n\n    if (usersToBeNotified.length == 1) {\n      const payload = {\n        notification: {\n          title: title,\n          body: body\n        },\n        token: fcmTokens[0]\n      };\n\n      return messaging.send(payload);\n    }\n\n    const payload = {\n      notification: {\n        title: title,\n        body: body\n      },\n      tokens: fcmTokens\n    };\n\n    return messaging.sendMulticast(payload);\n  }\n\n  async sendNotificationToOne(title: string, body: string, userId): Promise {\n    const userToBeNotified = await this.usersRepository.findOne({\n      where: {\n        id: userId,\n        fcmToken: Not(''),\n        notificationPreference: Not(NotificationPreference.None)\n      }\n    });\n\n    if (!userToBeNotified) {\n      throw new BadRequestException('No user to be notified');\n    }\n\n    const payload = {\n      notification: {\n        title: title,\n        body: body\n      },\n      token: userToBeNotified.fcmToken\n    };\n\n    return messaging.send(payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDto.html":{"url":"classes/PageDto.html","title":"class - PageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/page.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PageDto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/common/dto/page.dto.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray } from 'class-validator';\nimport { PageMetaDto } from './page-meta.dto';\n\n/**\n * PageDto\n * @description Data transfer object for paginated data\n */\nexport class PageDto {\n  @IsArray()\n  readonly data: T[];\n\n  readonly meta: PageMetaDto;\n\n  constructor(data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageMetaDto.html":{"url":"classes/PageMetaDto.html","title":"class - PageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/page-meta.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PageMetaDto is a class that represents the metadata of a paginated list.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                            \n                                    Readonly\n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaDtoParameters)\n                    \n                \n                        \n                            \n                                Defined in src/common/dto/page-meta.dto.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaDtoParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-meta.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-meta.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-meta.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-meta.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-meta.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-meta.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageMetaDtoParameters } from './page-meta-parameters.dto';\n\n/**\n * PageMetaDto is a class that represents the metadata of a paginated list.\n */\nexport class PageMetaDto {\n  readonly page: number;\n  readonly take: number;\n  readonly itemCount: number;\n  readonly pageCount: number;\n  readonly hasPreviousPage: boolean;\n  readonly hasNextPage: boolean;\n\n  constructor({ pageOptionsDto, itemCount }: PageMetaDtoParameters) {\n    this.page = pageOptionsDto.page;\n    this.take = pageOptionsDto.take;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.take);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageMetaDtoParameters.html":{"url":"interfaces/PageMetaDtoParameters.html","title":"interface - PageMetaDtoParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageMetaDtoParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/page-meta-parameters.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PageMetaDtoParameters\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PageOptionsDto } from './page-options.dto';\n\n/**\n * PageMetaDtoParameters\n * @description Page meta parameters, used to generate page meta\n */\nexport interface PageMetaDtoParameters {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageOptionsDto.html":{"url":"classes/PageOptionsDto.html","title":"class - PageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/page-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PageOptionsDto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                order\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order\n\n                    \n                \n                \n                    \n                        Default value : Order.ASC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Order)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-options.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-options.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)@Max(50)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-options.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dto/page-options.dto.ts:37\n                                \n                            \n                    \n                        \n\n                                \n                                \n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { IsEnum, IsInt, IsOptional, Max, Min } from 'class-validator';\nimport { Order } from 'src/constants/order.enum';\n\n/**\n * PageOptionsDto\n * @description Page options DTO, used for pagination and is passed by the frontend\n * @description The default values are set to 1, 10 and ASC\n */\nexport class PageOptionsDto {\n  /**\n   * @description The order of the results\n   */\n  @IsEnum(Order)\n  @IsOptional()\n  readonly order?: Order = Order.ASC;\n\n  /**\n   * @description The page number\n   */\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  /**\n   * @description The number of results per page\n   */\n  @IsInt()\n  @Min(1)\n  @Max(50)\n  @IsOptional()\n  readonly take?: number = 10;\n\n  /**\n   * @description The number of results to skip\n   */\n  get skip(): number {\n    return (this.page - 1) * this.take;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PaymentController.html":{"url":"controllers/PaymentController.html","title":"controller - PaymentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PaymentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/payment/payment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                payment\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                invoicingWebHook\n                            \n                            \n                                    Async\n                                paymentCancel\n                            \n                            \n                                    Async\n                                paymentSuccess\n                            \n                            \n                                    Async\n                                subscribe\n                            \n                            \n                                    Async\n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        invoicingWebHook\n                        \n                    \n                \n            \n            \n                \n                    \n                    invoicingWebHook(req: RawBodyRequest, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('invoicing-webhook')\n                \n            \n\n            \n                \n                    Defined in src/modules/payment/payment.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            RawBodyRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paymentCancel\n                        \n                    \n                \n            \n            \n                \n                    \n                    paymentCancel(req, res: Response, sessionId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('cancel')\n                \n            \n\n            \n                \n                    Defined in src/modules/payment/payment.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sessionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paymentSuccess\n                        \n                    \n                \n            \n            \n                \n                    \n                    paymentSuccess(req, res: Response, sessionId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('success')\n                \n            \n\n            \n                \n                    Defined in src/modules/payment/payment.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sessionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                    \n                    subscribe(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('subscribe')\n                \n            \n\n            \n                \n                    Defined in src/modules/payment/payment.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unsubscribe\n                        \n                    \n                \n            \n            \n                \n                    \n                    unsubscribe(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('unsubscribe')\n                \n            \n\n            \n                \n                    Defined in src/modules/payment/payment.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  UseGuards,\n  Res,\n  Request,\n  Post,\n  HttpStatus,\n  RawBodyRequest,\n  Req\n} from '@nestjs/common';\nimport { Get, Query } from '@nestjs/common/decorators';\nimport { Response } from 'express';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { PaymentService } from './payment.service';\n\n@Controller('payment')\nexport class PaymentController {\n  constructor(private readonly paymentService: PaymentService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Post('subscribe')\n  async subscribe(@Request() req, @Res() res: Response) {\n    this.paymentService\n      .subscribe(req.user)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json({ message: 'Payment success', url: result });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('unsubscribe')\n  async unsubscribe(@Request() req, @Res() res: Response) {\n    this.paymentService\n      .unsubscribe(req.user)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json({ message: 'Payment success', url: result });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @Get('success')\n  async paymentSuccess(\n    @Request() req,\n    @Res() res: Response,\n    @Query('session_id') sessionId: string\n  ) {\n    this.paymentService\n      .paymentSuccess(sessionId)\n      .then(() => {\n        return res.status(HttpStatus.OK).json({ message: 'Payment success' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @Get('cancel')\n  async paymentCancel(\n    @Request() req,\n    @Res() res: Response,\n    @Query('session_id') sessionId: string\n  ) {\n    this.paymentService\n      .paymentCancel(sessionId)\n      .then(() => {\n        return res.status(HttpStatus.OK).json({ message: 'Payment Failed' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @Post('invoicing-webhook')\n  async invoicingWebHook(@Req() req: RawBodyRequest, @Res() res: Response) {\n    this.paymentService\n      .invoicingWebHook(req.headers['stripe-signature'], req.rawBody)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json({ message: result });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentModule.html":{"url":"modules/PaymentModule.html","title":"module - PaymentModule","body":"\n                   \n\n\n\n\n    Modules\n    PaymentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PaymentModule\n\n\n\ncluster_PaymentModule_imports\n\n\n\ncluster_PaymentModule_providers\n\n\n\n\nNotificationModule\n\nNotificationModule\n\n\n\nPaymentModule\n\nPaymentModule\n\nPaymentModule -->\n\nNotificationModule->PaymentModule\n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/payment/payment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaymentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PaymentController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            NotificationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { NotificationModule } from '../notification/notification.module';\nimport { User } from '../user/entities/user.entity';\nimport { PaymentController } from './payment.controller';\nimport { PaymentService } from './payment.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), NotificationModule],\n  controllers: [PaymentController],\n  providers: [PaymentService]\n})\nexport class PaymentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaymentService.html":{"url":"injectables/PaymentService.html","title":"injectable - PaymentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaymentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/payment/payment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                endpointSecret\n                            \n                            \n                                    Private\n                                stripe\n                            \n                            \n                                    Private\n                                url\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                invoicingWebHook\n                            \n                            \n                                    Async\n                                paymentCancel\n                            \n                            \n                                    Async\n                                paymentSuccess\n                            \n                            \n                                    Async\n                                subscribe\n                            \n                            \n                                    Async\n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, notificationService: NotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/payment/payment.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notificationService\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        invoicingWebHook\n                        \n                    \n                \n            \n            \n                \n                    \n                    invoicingWebHook(stripeSignature: any, body: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/payment/payment.service.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stripeSignature\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paymentCancel\n                        \n                    \n                \n            \n            \n                \n                    \n                    paymentCancel(sessionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/payment/payment.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sessionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paymentSuccess\n                        \n                    \n                \n            \n            \n                \n                    \n                    paymentSuccess(sessionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/payment/payment.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sessionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                    \n                    subscribe(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/payment/payment.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unsubscribe\n                        \n                    \n                \n            \n            \n                \n                    \n                    unsubscribe(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/payment/payment.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        endpointSecret\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env?.STRIPE_WEBHOOK_SECRET\n                    \n                \n                    \n                        \n                                Defined in src/modules/payment/payment.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stripe\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Stripe(process.env?.STRIPE_TEST_KEY, {\n    apiVersion: '2022-11-15'\n  })\n                    \n                \n                    \n                        \n                                Defined in src/modules/payment/payment.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '192.168.1.175'\n                    \n                \n                    \n                        \n                                Defined in src/modules/payment/payment.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, NotFoundException } from '@nestjs/common';\nimport Stripe from 'stripe';\nimport * as dotenv from 'dotenv';\nimport { User } from '../user/entities/user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, UpdateResult } from 'typeorm';\nimport { SubscriptionPlan } from 'src/constants/subscription-plan.enum';\nimport { NotificationService } from '../notification/notification.service';\ndotenv.config();\n\n@Injectable()\nexport class PaymentService {\n  private stripe = new Stripe(process.env?.STRIPE_TEST_KEY, {\n    apiVersion: '2022-11-15'\n  });\n\n  private endpointSecret = process.env?.STRIPE_WEBHOOK_SECRET;\n\n  private url = '192.168.1.175';\n\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository,\n    private readonly notificationService: NotificationService\n  ) {}\n\n  async subscribe(user: User): Promise {\n    const dbUser = await this.userRepository.findOne({ where: { id: user.id } });\n\n    if (!dbUser) {\n      throw new NotFoundException('User not found');\n    }\n\n    let newUser = false;\n    let customer: Stripe.Customer;\n\n    if (dbUser.subscriptionPlan === SubscriptionPlan.Basic && dbUser.hasStripAccount === false) {\n      customer = await this.stripe.customers.create({\n        email: dbUser.email,\n        name: `${dbUser.firstName} ${dbUser.lastName}`,\n        phone: dbUser.phoneNumber\n      });\n\n      newUser = true;\n\n      await this.userRepository.update(dbUser.id, {\n        stripeCustomerId: customer.id,\n        hasStripAccount: true\n      });\n    }\n\n    if (dbUser.subscriptionPlan === SubscriptionPlan.Premium && dbUser.hasStripAccount === true) {\n      throw new BadRequestException('User already has an active subscription');\n    }\n\n    const session = await this.stripe.checkout.sessions.create({\n      mode: 'subscription',\n      payment_method_types: ['card'],\n      customer: newUser ? customer.id : dbUser.stripeCustomerId,\n      currency: 'aed',\n      line_items: [\n        {\n          price: 'price_1MThM0B4qQTC27uczOVeMOlz',\n          quantity: 1\n        }\n      ],\n      success_url: `http://${this.url}:3000/payment/success?session_id={CHECKOUT_SESSION_ID}`,\n      cancel_url: `http://${this.url}:3000/payment/cancel?session_id={CHECKOUT_SESSION_ID}`\n    });\n\n    return session.url;\n  }\n\n  async unsubscribe(user: User): Promise {\n    const dbUser = await this.userRepository.findOne({ where: { id: user.id } });\n\n    if (!dbUser) {\n      throw new NotFoundException('User not found');\n    }\n\n    if (\n      !(dbUser.subscriptionPlan === SubscriptionPlan.Premium && dbUser.hasStripAccount === true)\n    ) {\n      throw new BadRequestException(\"User doesn't have an active subscription\");\n    }\n\n    const subscriptions = await this.stripe.subscriptions.list({\n      customer: dbUser.stripeCustomerId\n    });\n\n    for (let i = 0; i  {\n    const session = await this.stripe.checkout.sessions.retrieve(sessionId);\n    const customer = await this.stripe.customers.retrieve(session.customer as string);\n\n    return this.userRepository\n      .createQueryBuilder()\n      .update(User)\n      .set({ subscriptionPlan: SubscriptionPlan.Premium })\n      .where('stripeCustomerId = :stripeCustomerId', { stripeCustomerId: customer.id })\n      .execute();\n  }\n\n  async paymentCancel(sessionId: string): Promise {\n    const session = await this.stripe.checkout.sessions.retrieve(sessionId);\n    const customer = await this.stripe.customers.retrieve(session.customer as string);\n\n    return this.userRepository\n      .createQueryBuilder()\n      .update(User)\n      .set({ subscriptionPlan: SubscriptionPlan.Basic })\n      .where('stripeCustomerId = :stripeCustomerId', { stripeCustomerId: customer.id })\n      .execute();\n  }\n\n  async invoicingWebHook(stripeSignature: any, body: any) {\n    let event;\n    try {\n      event = this.stripe.webhooks.constructEvent(body, stripeSignature, this.endpointSecret);\n    } catch (err) {\n      return new BadRequestException(`Webhook Error: ${err.message}`);\n    }\n\n    switch (event.type) {\n      case 'invoice.payment_succeeded':\n        const paymentSuccessedEvent = event.data.object;\n\n        const successCustomer = await this.stripe.customers.retrieve(\n          paymentSuccessedEvent.customer as string\n        );\n\n        const successUser = await this.userRepository.findOne({\n          where: { stripeCustomerId: successCustomer.id }\n        });\n\n        if (!successUser) {\n          return;\n        }\n\n        this.userRepository.update(successUser.id, { subscriptionPlan: SubscriptionPlan.Premium });\n\n        this.notificationService\n          .sendNotificationToOne('Payment Successful', 'Thank you for your payment', successUser.id)\n          .catch((err) => {\n            console.log(err);\n          });\n        break;\n      case 'invoice.payment_failed':\n        const paymentFailedEvent = event.data.object;\n\n        const failCustomer = await this.stripe.customers.retrieve(\n          paymentFailedEvent.customer as string\n        );\n\n        const failUser = await this.userRepository.findOne({\n          where: { stripeCustomerId: failCustomer.id }\n        });\n\n        if (!failUser) {\n          return;\n        }\n\n        this.userRepository.update(failUser.id, { subscriptionPlan: SubscriptionPlan.Basic });\n\n        this.notificationService\n          .sendNotificationToOne(\n            'Payment Unsuccessful',\n            'There was an error in your payment',\n            failUser.id\n          )\n          .catch((err) => {\n            console.log(err);\n          });\n        break;\n      case 'customer.subscription.deleted':\n        const subscriptionDeletedEvent = event.data.object;\n\n        const deletedCustomer = await this.stripe.customers.retrieve(\n          subscriptionDeletedEvent.customer as string\n        );\n\n        const deletedUser = await this.userRepository.findOne({\n          where: { stripeCustomerId: deletedCustomer.id }\n        });\n\n        if (!deletedUser) {\n          return;\n        }\n\n        this.userRepository.update(deletedUser.id, { subscriptionPlan: SubscriptionPlan.Basic });\n\n        this.notificationService\n          .sendNotificationToOne(\n            'Unsubscribed Successfully',\n            'We are sorry to see you go',\n            deletedUser.id\n          )\n          .catch((err) => {\n            console.log(err);\n          });\n        break;\n      default:\n        console.log(`Unhandled event type ${event.type}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/entities/post.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class is the class that represents the User table in the database\nThis is how we interact with the database table in the application\nNo need for SQL quesries\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                appeals\n                            \n                            \n                                caption\n                            \n                            \n                                comments\n                            \n                            \n                                id\n                            \n                            \n                                imageExpiryDate\n                            \n                            \n                                imageId\n                            \n                            \n                                imageUrl\n                            \n                            \n                                isTakenDown\n                            \n                            \n                                likes\n                            \n                            \n                                likesCount\n                            \n                            \n                                location\n                            \n                            \n                                postedBy\n                            \n                            \n                                reportsAgainst\n                            \n                            \n                                scrapbook\n                            \n                            \n                                tag\n                            \n                            \n                                type\n                            \n                            \n                                visibility\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        appeals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Appeal[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, appeal => appeal.appealedPost)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        caption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.post)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageExpiryDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'longtext'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTakenDown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Like[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, like => like.likedPost)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likesCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportsAgainst\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PostReport[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, postReport => postReport.reportedPost)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scrapbook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Scrapbook\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, scrapbook => scrapbook.posts)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visibility\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Visibility\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne, OneToMany, AfterLoad } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { Visibility } from '../../../constants/visibility.enum';\nimport { Scrapbook } from './scrapbook.entity';\nimport { Like } from './post-like.entity';\nimport { Comment } from './comment.entity';\nimport { PostReport } from '../../report/entities/post-report.entity';\nimport { FirebaseStorageService } from '../../../common/services/firebase-storage.service';\nimport { Appeal } from '../../appeals/entities/appeal.entity';\n\n/**\n * User Entity Class is the class that represents the User table in the database\n * This is how we interact with the database table in the application\n * No need for SQL quesries\n */\n@Entity()\nexport class Post extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  caption: string;\n\n  @Column()\n  tag: string;\n\n  @Column()\n  type: string;\n\n  @Column()\n  location: string;\n\n  @Column()\n  visibility: Visibility;\n\n  @Column({ default: false })\n  isTakenDown: boolean = false;\n\n  @Column({ type: 'longtext' })\n  imageUrl: string = '';\n\n  @Column({ default: '' })\n  imageId: string = '';\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  imageExpiryDate: Date;\n\n  @Column({ default: 0 })\n  likesCount: number = 0;\n\n  //A post can only be posted by one user but a user can have many posts\n  @ManyToOne(() => User, (user) => user.posts, {\n    onDelete: 'CASCADE'\n  })\n  postedBy: User;\n\n  //A user can be reported by many users\n  @OneToMany(() => PostReport, (postReport) => postReport.reportedPost)\n  reportsAgainst: PostReport[];\n\n  //A post can only be part of one scrapbook but a scrapbook can have many posts\n  @ManyToOne(() => Scrapbook, (scrapbook) => scrapbook.posts)\n  scrapbook: Scrapbook;\n\n  @OneToMany(() => Comment, (comment) => comment.post)\n  comments: Comment[];\n\n  //A post can have many appeals\n  @OneToMany(() => Appeal, (appeal) => appeal.appealedPost)\n  appeals: Appeal[];\n\n  //A post can have many likes\n  @OneToMany(() => Like, (like) => like.likedPost)\n  likes: Like[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostAnalyticResposneDto.html":{"url":"classes/PostAnalyticResposneDto.html","title":"class - PostAnalyticResposneDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostAnalyticResposneDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/analytics/dto/post-analytic-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                appealCount\n                            \n                            \n                                commentCount\n                            \n                            \n                                createdAt\n                            \n                            \n                                interactionCount\n                            \n                            \n                                isPartOfScrapbook\n                            \n                            \n                                isTakenDown\n                            \n                            \n                                likeCount\n                            \n                            \n                                reportCount\n                            \n                            \n                                scrapbookId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        appealCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commentCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interactionCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPartOfScrapbook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTakenDown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likeCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scrapbookId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsDate, IsNotEmpty, IsNumber, IsOptional, IsUUID, Min } from 'class-validator';\n\nexport class PostAnalyticResposneDto {\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  commentCount: number;\n\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  likeCount: number;\n\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  interactionCount: number;\n\n  @IsBoolean()\n  @IsNotEmpty()\n  isTakenDown: boolean;\n\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  reportCount: number;\n\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  appealCount: number;\n\n  @IsDate()\n  @IsNotEmpty()\n  createdAt: Date;\n\n  @IsBoolean()\n  @IsNotEmpty()\n  isPartOfScrapbook: boolean;\n\n  @IsOptional()\n  @IsUUID()\n  scrapbookId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                post\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addComment\n                            \n                            \n                                addPostToScrapbook\n                            \n                            \n                                createPost\n                            \n                            \n                                createScrapbook\n                            \n                            \n                                deleteComment\n                            \n                            \n                                deletePostById\n                            \n                            \n                                getPostById\n                            \n                            \n                                getPostComments\n                            \n                            \n                                getUserComments\n                            \n                            \n                                getUserPosts\n                            \n                            \n                                getUserScrapbook\n                            \n                            \n                                getUserScrapbooks\n                            \n                            \n                                likePost\n                            \n                            \n                                removePostFromScrapbook\n                            \n                            \n                                unlike\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addComment\n                        \n                    \n                \n            \n            \n                \naddComment(body: CreateCommentDto, req, res: Response, postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('comment/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:200\n                \n            \n\n\n            \n                \n                    COMMENTS APIs\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addPostToScrapbook\n                        \n                    \n                \n            \n            \n                \naddPostToScrapbook(req, res: Response, params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('scrapbook/:id/add-post/:postId')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:130\n                \n            \n\n\n            \n                \n                    Adds a post to a scrapbook\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request params\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createPost\n                        \n                    \n                \n            \n            \n                \ncreatePost(body: CreatePostDto, req, res: Response, file)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('create')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createScrapbook\n                        \n                    \n                \n            \n            \n                \ncreateScrapbook(body: CreateScrapBookDto, req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('scrapbook/create')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:112\n                \n            \n\n\n            \n                \n                    Creates a new scrapbook\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateScrapBookDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteComment\n                        \n                    \n                \n            \n            \n                \ndeleteComment(req, res: Response, commentId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete('comment/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:252\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    commentId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletePostById\n                        \n                    \n                \n            \n            \n                \ndeletePostById(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostById\n                        \n                    \n                \n            \n            \n                \ngetPostById(id: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostComments\n                        \n                    \n                \n            \n            \n                \ngetPostComments(postId: string, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('post-comments/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:218\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserComments\n                        \n                    \n                \n            \n            \n                \ngetUserComments(userId: string, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('user-comments/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:235\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserPosts\n                        \n                    \n                \n            \n            \n                \ngetUserPosts(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('user-posts')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:66\n                \n            \n\n\n            \n                \n                    Returns the posts of the user sending the request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserScrapbook\n                        \n                    \n                \n            \n            \n                \ngetUserScrapbook(req, params, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('scrapbook/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:186\n                \n            \n\n\n            \n                \n                    Returns the scrapbook with the given id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request params\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserScrapbooks\n                        \n                    \n                \n            \n            \n                \ngetUserScrapbooks(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('scrapbook/user-scrapbooks')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:167\n                \n            \n\n\n            \n                \n                    Returns the scrapbooks of the user sending the request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likePost\n                        \n                    \n                \n            \n            \n                \nlikePost(req, res: Response, postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('like/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:265\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removePostFromScrapbook\n                        \n                    \n                \n            \n            \n                \nremovePostFromScrapbook(req, res: Response, params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch('scrapbook/:id/remove-post/:postId')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:149\n                \n            \n\n\n            \n                \n                    Removes a post from a scrapbook\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request params\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unlike\n                        \n                    \n                \n            \n            \n                \nunlike(req, res: Response, postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete('unlike/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:278\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  UseGuards,\n  Res,\n  Request,\n  Get,\n  HttpStatus,\n  Post,\n  Body,\n  BadRequestException,\n  Param,\n  Delete,\n  UseInterceptors,\n  UploadedFile,\n  Patch,\n  Query\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { Response } from 'express';\nimport { PageOptionsDto } from 'src/common/dto/page-options.dto';\nimport { Visibility } from 'src/constants/visibility.enum';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { CreateCommentDto } from './dto/comment-create.dto';\nimport { CreatePostDto } from './dto/post-create.dto';\nimport { CreateScrapBookDto } from './dto/scrapbook-create.dts';\nimport { PostService } from './post.service';\n\n@Controller('post')\nexport class PostController {\n  constructor(private postService: PostService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Post('create')\n  @UseInterceptors(FileInterceptor('image'))\n  createPost(\n    @Body() body: CreatePostDto,\n    @Request() req,\n    @Res() res: Response,\n    @UploadedFile() file\n  ) {\n    if (file) {\n      this.postService.createPostWithImage(req.user, body, file).then((post) => {\n        return res.status(HttpStatus.OK).json(post);\n      });\n    }\n\n    if (!file) {\n      this.postService\n        .createPost(req.user, body)\n        .then((post) => {\n          return res.status(HttpStatus.OK).json(post);\n        })\n        .catch((err) => {\n          return res.status(err.status).json({ message: err.message });\n        });\n    }\n  }\n\n  /**\n   * Returns the posts of the user sending the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('user-posts')\n  getUserPosts(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.postService\n      .getUserPosts(req.user, pageOptionsDto)\n      .then((posts) => {\n        return res.status(HttpStatus.OK).json(posts);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('/:id')\n  getPostById(@Param('id') id: string, @Res() res: Response) {\n    this.postService\n      .getPostById(id)\n      .then((post) => {\n        return res.status(HttpStatus.OK).json(post);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete('/:id')\n  deletePostById(@Request() req, @Res() res: Response) {\n    this.postService\n      .deletePostById(req.user, req.params.id)\n      .then((post) => {\n        return res.status(HttpStatus.OK).json(post);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /************************** SCRAPBOOK APIs **************************/\n  /**\n   * Creates a new scrapbook\n   * @param body the request body\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('scrapbook/create')\n  createScrapbook(@Body() body: CreateScrapBookDto, @Request() req, @Res() res: Response) {\n    if (!Object.values(Visibility).includes(body.visibility)) {\n      throw new BadRequestException('Invalid visibility');\n    }\n\n    this.postService.createScrapbook(req.user, body).then((post) => {\n      return res.status(HttpStatus.OK).json(post);\n    });\n  }\n\n  /**\n   * Adds a post to a scrapbook\n   * @param req the request object\n   * @param res the response object\n   * @param params the request params\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('scrapbook/:id/add-post/:postId')\n  addPostToScrapbook(@Request() req, @Res() res: Response, @Param() params) {\n    this.postService\n      .addPostToScrapbook(req.user, req.params.id, req.params.postId)\n      .then((post) => {\n        return res.status(HttpStatus.OK).json(post);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Removes a post from a scrapbook\n   * @param req the request object\n   * @param res the response object\n   * @param params the request params\n   */\n  @UseGuards(JwtAuthGuard)\n  @Patch('scrapbook/:id/remove-post/:postId')\n  removePostFromScrapbook(@Request() req, @Res() res: Response, @Param() params) {\n    this.postService\n      .removePostFromScrapbook(params.id, params.postId)\n      .then((post) => {\n        return res.status(HttpStatus.OK).json(post);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Returns the scrapbooks of the user sending the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('scrapbook/user-scrapbooks')\n  getUserScrapbooks(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.postService\n      .getUserScrapbooks(req.user, pageOptionsDto)\n      .then((posts) => {\n        return res.status(HttpStatus.OK).json(posts);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Returns the scrapbook with the given id\n   * @param req the request object\n   * @param params the request params\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('scrapbook/:id')\n  getUserScrapbook(@Request() req, @Param() params, @Res() res: Response) {\n    this.postService\n      .getScrapbookById(params.id)\n      .then((posts) => {\n        return res.status(HttpStatus.OK).json(posts);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /************************** COMMENTS APIs **************************/\n  @UseGuards(JwtAuthGuard)\n  @Post('comment/:id')\n  addComment(\n    @Body() body: CreateCommentDto,\n    @Request() req,\n    @Res() res: Response,\n    @Param('id') postId: string\n  ) {\n    this.postService\n      .addComment(req.user, postId, body)\n      .then((post) => {\n        return res.status(HttpStatus.OK).json(post);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('post-comments/:id')\n  getPostComments(\n    @Param('id') postId: string,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.postService\n      .getPostComments(postId, pageOptionsDto)\n      .then((comments) => {\n        return res.status(HttpStatus.OK).json(comments);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('user-comments/:id')\n  getUserComments(\n    @Param('id') userId: string,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.postService\n      .getUserComments(userId, pageOptionsDto)\n      .then((comments) => {\n        return res.status(HttpStatus.OK).json(comments);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete('comment/:id')\n  deleteComment(@Request() req, @Res() res: Response, @Param('id') commentId: string) {\n    this.postService\n      .deleteComment(req.user, commentId)\n      .then((post) => {\n        return res.status(HttpStatus.OK).json(post);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('like/:id')\n  likePost(@Request() req, @Res() res: Response, @Param('id') postId: string) {\n    this.postService\n      .likePost(req.user, postId)\n      .then((post) => {\n        return res.status(HttpStatus.OK).json(post);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete('unlike/:id')\n  unlike(@Request() req, @Res() res: Response, @Param('id') postId: string) {\n    this.postService\n      .unlikePost(req.user, postId)\n      .then(() => {\n        return res.status(HttpStatus.OK).json({ message: 'Post unliked successfully' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_PostModule_exports\n\n\n\n\nPostService \n\nPostService \n\n\n\nPostModule\n\nPostModule\n\nPostService  -->\n\nPostModule->PostService \n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PostController } from './post.controller';\nimport { Post } from './entities/post.entity';\nimport { PostService } from './post.service';\nimport { Scrapbook } from './entities/scrapbook.entity';\nimport { Comment } from './entities/comment.entity';\nimport { User } from '../user/entities/user.entity';\nimport { Like } from './entities/post-like.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Post, Scrapbook, User, Comment, Like])],\n  controllers: [PostController],\n  providers: [PostService],\n  exports: [PostService]\n})\nexport class PostModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PostReport.html":{"url":"entities/PostReport.html","title":"entity - PostReport","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PostReport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/report/entities/post-report.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class is the class that represents the User table in the database\nThis is how we interact with the database table in the application\nNo need for SQL quesries\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                reason\n                            \n                            \n                                reportedBy\n                            \n                            \n                                reportedPost\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/post-report.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReportReason\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/post-report.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.reportedPosts, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/post-report.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportedPost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.reportsAgainst, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/post-report.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ReportStatus.PendingReview\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/post-report.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from '../../post/entities/post.entity';\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { ReportStatus } from '../../../constants/report-status.enum';\nimport { BaseEntity } from '../../../common/entities/base.entity';\nimport { ReportReason } from '../../../constants/report-reason.enum';\n\n/**\n * User Entity Class is the class that represents the User table in the database\n * This is how we interact with the database table in the application\n * No need for SQL quesries\n */\n@Entity()\nexport class PostReport extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ default: ReportStatus.PendingReview })\n  status: string = ReportStatus.PendingReview;\n\n  @Column()\n  reason: ReportReason;\n\n  //A Report can only report one post but a post can be in many reports\n  @ManyToOne(() => Post, (post) => post.reportsAgainst, {\n    onDelete: 'CASCADE'\n  })\n  reportedPost: Post;\n\n  //A Report can only be posted by one user but a user can have many Reports\n  @ManyToOne(() => User, (user) => user.reportedPosts, {\n    onDelete: 'CASCADE'\n  })\n  reportedBy: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReportController.html":{"url":"controllers/ReportController.html","title":"controller - ReportController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReportController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/report/report.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                report\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                banPost\n                            \n                            \n                                banUser\n                            \n                            \n                                getPostReports\n                            \n                            \n                                getReportedPosts\n                            \n                            \n                                getReportedUsers\n                            \n                            \n                                getUserReports\n                            \n                            \n                                reportPost\n                            \n                            \n                                reportUser\n                            \n                            \n                                unbanPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        banPost\n                        \n                    \n                \n            \n            \n                \nbanPost(req, postId, reportId, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Post('ban-post/:postId/:reportId')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:136\n                \n            \n\n\n            \n                \n                    Bans a post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    postId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    reportId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        banUser\n                        \n                    \n                \n            \n            \n                \nbanUser(req, userId, reportId, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Post('ban-user/:userId/:reportId')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:111\n                \n            \n\n\n            \n                \n                    Bans a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    userId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    reportId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostReports\n                        \n                    \n                \n            \n            \n                \ngetPostReports(req, params, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('post-reports/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:62\n                \n            \n\n\n            \n                \n                    Get the reports of a post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the parameters (the id of the reported post)\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReportedPosts\n                        \n                    \n                \n            \n            \n                \ngetReportedPosts(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Get('reported-posts')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReportedUsers\n                        \n                    \n                \n            \n            \n                \ngetReportedUsers(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Get('reported-users')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:189\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserReports\n                        \n                    \n                \n            \n            \n                \ngetUserReports(req, params, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('user-reports/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:86\n                \n            \n\n\n            \n                \n                    Get the reports of a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the parameters (the id of the reported user)\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportPost\n                        \n                    \n                \n            \n            \n                \nreportPost(body: ReportDto, req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('report-post')\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:24\n                \n            \n\n\n            \n                \n                    Report a post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                ReportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the body of the request\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportUser\n                        \n                    \n                \n            \n            \n                \nreportUser(body: ReportDto, req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('report-user')\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:43\n                \n            \n\n\n            \n                \n                    Report a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                ReportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the body of the request\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unbanPost\n                        \n                    \n                \n            \n            \n                \nunbanPost(req, params, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Post('unban-post/:id')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:161\n                \n            \n\n\n            \n                \n                    Unbans a post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the parameters (the id of the user to be unbanned)\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UseGuards, Res, Request, Post, Body, HttpStatus } from '@nestjs/common';\nimport { Get, Param, Query } from '@nestjs/common/decorators';\nimport { Response } from 'express';\nimport { PageOptionsDto } from 'src/common/dto/page-options.dto';\nimport { Role } from 'src/constants/role.enum';\nimport { Roles } from 'src/decorators/roles.decorator';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { ReportDto } from './dto/report.dto';\nimport { ReportService } from './report.service';\n\n@Controller('report')\nexport class ReportController {\n  constructor(private reportService: ReportService) {}\n\n  /**\n   * Report a post\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('report-post')\n  reportPost(@Body() body: ReportDto, @Request() req, @Res() res: Response) {\n    this.reportService\n      .reportPost(req.user, body)\n      .then((report) => {\n        return res.status(HttpStatus.OK).json(report);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Report a user\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('report-user')\n  reportUser(@Body() body: ReportDto, @Request() req, @Res() res: Response) {\n    this.reportService\n      .reportUser(req.user, body)\n      .then((report) => {\n        return res.status(HttpStatus.OK).json(report);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Get the reports of a post\n   * @param req the request object\n   * @param params the parameters (the id of the reported post)\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('post-reports/:id')\n  getPostReports(\n    @Request() req,\n    @Param() params,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.reportService\n      .getPostReports(params.id, pageOptionsDto)\n      .then((reports) => {\n        return res.status(HttpStatus.OK).json(reports);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Get the reports of a user\n   * @param req the request object\n   * @param params the parameters (the id of the reported user)\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('user-reports/:id')\n  getUserReports(\n    @Request() req,\n    @Param() params,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.reportService\n      .getUserReports(params.id, pageOptionsDto)\n      .then((reports) => {\n        return res.status(HttpStatus.OK).json(reports);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Bans a user\n   * @param req the request object\n   * @param params the parameters (the id of the user to be banned)\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Post('ban-user/:userId/:reportId')\n  @Roles(Role.Admin)\n  banUser(\n    @Request() req,\n    @Param('userId') userId,\n    @Param('reportId') reportId,\n    @Res() res: Response\n  ) {\n    this.reportService\n      .banUser(userId, reportId)\n      .then((reports) => {\n        return res.status(HttpStatus.OK).json(reports);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Bans a post\n   * @param req the request object\n   * @param params the parameters (the id of the post to be banned)\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Post('ban-post/:postId/:reportId')\n  @Roles(Role.Admin)\n  banPost(\n    @Request() req,\n    @Param('postId') postId,\n    @Param('reportId') reportId,\n    @Res() res: Response\n  ) {\n    this.reportService\n      .banPost(postId, reportId)\n      .then(() => {\n        return res.status(HttpStatus.OK).json({ 'message': 'Post banned' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Unbans a post\n   * @param req the request object\n   * @param params the parameters (the id of the user to be unbanned)\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Post('unban-post/:id')\n  @Roles(Role.Admin)\n  unbanPost(@Request() req, @Param() params, @Res() res: Response) {\n    this.reportService\n      .unbanPost(params.id)\n      .then(() => {\n        return res.status(HttpStatus.OK).json({ 'message': 'Post unbanned' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Get('reported-posts')\n  @Roles(Role.Admin)\n  getReportedPosts(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.reportService\n      .getReportedPosts(pageOptionsDto)\n      .then((posts) => {\n        return res.status(HttpStatus.OK).json(posts);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Get('reported-users')\n  @Roles(Role.Admin)\n  getReportedUsers(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.reportService\n      .getReportedUsers(pageOptionsDto)\n      .then((posts) => {\n        return res.status(HttpStatus.OK).json(posts);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReportDto.html":{"url":"classes/ReportDto.html","title":"class - ReportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/report/dto/report.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the DTO for creating a reports for both user and post\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                reason\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/dto/report.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReportReason\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ReportReason)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/dto/report.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty } from 'class-validator';\nimport { ReportReason } from 'src/constants/report-reason.enum';\n\n/**\n * This is the DTO for creating a reports for both user and post\n */\nexport class ReportDto {\n  @IsNotEmpty()\n  id: string;\n\n  @IsEnum(ReportReason)\n  @IsNotEmpty()\n  reason: ReportReason;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReportModule.html":{"url":"modules/ReportModule.html","title":"module - ReportModule","body":"\n                   \n\n\n\n\n    Modules\n    ReportModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ReportModule\n\n\n\ncluster_ReportModule_providers\n\n\n\n\nReportService\n\nReportService\n\n\n\nReportModule\n\nReportModule\n\nReportModule -->\n\nReportService->ReportModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/report/report.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ReportService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReportController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { User } from '../user/entities/user.entity';\nimport { PostReport } from './entities/post-report.entity';\nimport { UserBan } from './entities/user-ban.entity';\nimport { UserReport } from './entities/user-report.entity';\nimport { ReportController } from './report.controller';\nimport { ReportService } from './report.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserReport, PostReport, Post, User, UserBan])],\n  controllers: [ReportController],\n  providers: [ReportService]\n})\nexport class ReportModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReportService.html":{"url":"injectables/ReportService.html","title":"injectable - ReportService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReportService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/report/report.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                banPost\n                            \n                            \n                                    Async\n                                banUser\n                            \n                            \n                                    Async\n                                getPostReports\n                            \n                            \n                                    Async\n                                getReportedPosts\n                            \n                            \n                                    Async\n                                getReportedUsers\n                            \n                            \n                                    Async\n                                getUserReports\n                            \n                            \n                                    Async\n                                reportPost\n                            \n                            \n                                    Async\n                                reportUser\n                            \n                            \n                                    Async\n                                unbanPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userReportsRepository: Repository, postReportsRepository: Repository, postRepository: Repository, userRepository: Repository, userBanRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/report/report.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userReportsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postReportsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userBanRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        banPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    banPost(postId: string, reportId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:223\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reportId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        banUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    banUser(userId: string, reportId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reportId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostReports\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostReports(id: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReportedPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReportedPosts(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:269\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReportedUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReportedUsers(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:297\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserReports\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserReports(id: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:165\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reportPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reportPost(user: any, body: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reportUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    reportUser(user: any, body: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unbanPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    unbanPost(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:252\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PageMetaDto } from 'src/common/dto/page-meta.dto';\nimport { PageOptionsDto } from 'src/common/dto/page-options.dto';\nimport { PageDto } from 'src/common/dto/page.dto';\nimport { ReportStatus } from 'src/constants/report-status.enum';\nimport { Repository, UpdateResult } from 'typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { User } from '../user/entities/user.entity';\nimport { PostReport } from './entities/post-report.entity';\nimport { UserBan } from './entities/user-ban.entity';\nimport { UserReport } from './entities/user-report.entity';\n\n@Injectable()\nexport class ReportService {\n  constructor(\n    @InjectRepository(UserReport)\n    private userReportsRepository: Repository,\n\n    @InjectRepository(PostReport)\n    private postReportsRepository: Repository,\n\n    @InjectRepository(Post)\n    private postRepository: Repository,\n\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    @InjectRepository(UserBan)\n    private userBanRepository: Repository\n  ) {}\n\n  async reportPost(user: any, body: any): Promise {\n    const newReport = new PostReport();\n    newReport.reportedBy = user;\n\n    // Find the post to report\n    const post = await this.postRepository.findOne({\n      where: { id: body.id },\n      relations: ['postedBy']\n    });\n\n    // If the post doesn't exist, throw an error\n    if (!post) {\n      throw new HttpException('Post not found', HttpStatus.NO_CONTENT);\n    }\n\n    if (post.postedBy.id === user.id) {\n      throw new HttpException('You cannot report your own post', HttpStatus.BAD_REQUEST);\n    }\n\n    // If the post has already been reported and is still pending response, throw an error\n    const userReportedPosts = await this.userRepository\n      .findOne({\n        where: { id: user.id },\n        relations: [\n          'reportedPosts',\n          'reportedPosts.reportedPost',\n          'reportedPosts.reportedPost.postedBy'\n        ]\n      })\n      .then((user) => {\n        if (!user) {\n          throw new BadRequestException('User not found');\n        }\n        return user.reportedPosts.map((reports) => {\n          if ((reports.status = ReportStatus.PendingReview)) {\n            return reports.reportedPost;\n          }\n        });\n      });\n\n    const postAlreadyReported = userReportedPosts.map((reportedPost) => {\n      if (!reportedPost) {\n        return false;\n      }\n      return reportedPost.id === post.id;\n    });\n\n    if (postAlreadyReported.includes(true)) {\n      throw new HttpException('You have already reported this post', HttpStatus.BAD_REQUEST);\n    }\n\n    newReport.reportedPost = post;\n    newReport.reason = body.reason;\n\n    return this.postReportsRepository.save(newReport);\n  }\n\n  async reportUser(user: any, body: any): Promise {\n    const newReport = new UserReport();\n    newReport.reportedBy = user;\n\n    // Find the user to report\n    const userToBeReported = await this.userRepository.findOne({\n      where: { id: body.id }\n    });\n\n    // If the user doesn't exist, throw an error\n    if (!userToBeReported) {\n      throw new HttpException('User not found', HttpStatus.NO_CONTENT);\n    }\n\n    if (userToBeReported.id === user.id) {\n      throw new HttpException('You cannot report yourself', HttpStatus.BAD_REQUEST);\n    }\n\n    // If the user has already been reported and is still pending response, throw an error\n    const userReportedUsers = await this.userRepository\n      .findOne({\n        where: { id: user.id },\n        relations: ['reportedUsers', 'reportedUsers.reportedUser']\n      })\n      .then((user) => {\n        if (!user) {\n          throw new BadRequestException('User not found');\n        }\n        return user.reportedUsers.map((reports) => {\n          if ((reports.status = ReportStatus.PendingReview)) {\n            return reports.reportedUser;\n          }\n        });\n      });\n\n    const usersAlreadyReported = userReportedUsers.map((reportedUser) => {\n      return reportedUser.id === userToBeReported.id;\n    });\n\n    if (usersAlreadyReported.includes(true)) {\n      throw new HttpException('You have already reported this user', HttpStatus.BAD_REQUEST);\n    }\n\n    newReport.reportedUser = userToBeReported;\n    newReport.reason = body.reason;\n\n    return this.userReportsRepository.save(newReport);\n  }\n\n  async getPostReports(id: string, pageOptionsDto: PageOptionsDto): Promise> {\n    const queryResults = await this.postReportsRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('PostReport.reportedPost', 'Post')\n      .leftJoinAndSelect('PostReport.reportedBy', 'ReportedBy')\n      .leftJoinAndSelect('Post.postedBy', 'PostedBy')\n      .where('PostReport.reportedPost.id = :id', { id: id })\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take)\n      .orderBy('PostReport.createdAt', pageOptionsDto.order)\n      .getManyAndCount()\n      .then((postReportsAndCount) => {\n        return {\n          items: postReportsAndCount[0],\n          itemsCount: postReportsAndCount[1]\n        };\n      });\n\n    const itemCount: number = queryResults.itemsCount;\n    const entities: PostReport[] = queryResults.items;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async getUserReports(id: string, pageOptionsDto: PageOptionsDto): Promise> {\n    const queryResults = await this.userReportsRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('UserReport.reportedUser', 'User')\n      .leftJoinAndSelect('UserReport.reportedBy', 'ReportedBy')\n      .where('UserReport.reportedUser.id = :id', { id: id })\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take)\n      .orderBy('UserReport.createdAt', pageOptionsDto.order)\n      .getManyAndCount()\n      .then((userReportsAndCount) => {\n        return {\n          items: userReportsAndCount[0],\n          itemsCount: userReportsAndCount[1]\n        };\n      });\n\n    const itemCount: number = queryResults.itemsCount;\n    const entities: UserReport[] = queryResults.items;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async banUser(userId: string, reportId: string): Promise {\n    const newBan = new UserBan();\n\n    // Find the user to ban\n    const user = await this.userRepository.findOne({\n      where: { id: userId }\n    });\n\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NO_CONTENT);\n    }\n\n    const millisecondsInAWeek = 604800000;\n    newBan.bannedUser = user;\n    newBan.startDate = new Date(Date.now());\n    newBan.endDate = new Date(Date.now() + millisecondsInAWeek); //Ban for 1 week\n\n    const report = await this.userReportsRepository.findOne({\n      where: { id: reportId }\n    });\n\n    if (!report) {\n      throw new HttpException('Report not found', HttpStatus.NO_CONTENT);\n    }\n\n    report.status = ReportStatus.Accepted;\n    await this.userReportsRepository.save(report);\n\n    await this.userRepository.update(userId, { isBanned: true });\n\n    return this.userBanRepository.save(newBan);\n  }\n\n  async banPost(postId: string, reportId: string): Promise {\n    const post = await this.postRepository.findOne({\n      where: { id: postId },\n      relations: ['postedBy']\n    });\n\n    if (!post) {\n      throw new HttpException('Post not found', HttpStatus.NO_CONTENT);\n    }\n\n    const report = await this.postReportsRepository.findOne({\n      where: { id: reportId }\n    });\n\n    if (!report) {\n      throw new HttpException('Report not found', HttpStatus.NO_CONTENT);\n    }\n\n    report.status = ReportStatus.Accepted;\n    await this.postReportsRepository.save(report);\n\n    return this.postRepository\n      .createQueryBuilder()\n      .update(Post)\n      .set({ isTakenDown: true })\n      .where('id = :id', { id: post.id })\n      .execute();\n  }\n\n  async unbanPost(id: string): Promise {\n    const post = await this.postRepository.findOne({\n      where: { id: id }\n    });\n\n    if (!post) {\n      throw new HttpException('Post not found', HttpStatus.NO_CONTENT);\n    }\n\n    return this.postRepository\n      .createQueryBuilder()\n      .update(Post)\n      .set({ isTakenDown: false })\n      .where('id = :id', { id: post.id })\n      .execute();\n  }\n\n  async getReportedPosts(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryResults = await this.postReportsRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('PostReport.reportedPost', 'Post')\n      .leftJoinAndSelect('PostReport.reportedBy', 'ReportedBy')\n      .leftJoinAndSelect('Post.postedBy', 'postedBy')\n      .where('PostReport.status = :status', { status: ReportStatus.PendingReview })\n      .groupBy('Post.id')\n      .addGroupBy('PostReport.reason')\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take)\n      .orderBy('Post.createdAt', pageOptionsDto.order)\n      .getManyAndCount()\n      .then((postsAndCount) => {\n        return {\n          items: postsAndCount[0],\n          itemsCount: postsAndCount[0].length\n        };\n      });\n\n    const itemCount: number = queryResults.itemsCount;\n    const entities: PostReport[] = queryResults.items;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async getReportedUsers(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryResults = await this.userReportsRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('UserReport.reportedUser', 'User')\n      .leftJoinAndSelect('UserReport.reportedBy', 'ReportedBy')\n      .where('UserReport.status = :status', { status: ReportStatus.PendingReview })\n      .groupBy('User.id')\n      .addGroupBy('UserReport.reason')\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take)\n      .orderBy('User.createdAt', pageOptionsDto.order)\n      .getManyAndCount()\n      .then((usersAndCount) => {\n        return {\n          items: usersAndCount[0],\n          itemsCount: usersAndCount[0].length\n        };\n      });\n\n    const itemCount: number = queryResults.itemsCount;\n    const entities: UserReport[] = queryResults.items;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/roles.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guards/roles.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from 'src/constants/role.enum';\nimport { ROLES_KEY } from 'src/decorators/roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass()\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    const { user } = context.switchToHttp().getRequest();\n\n    return requiredRoles.some((role) => user.role?.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Scrapbook.html":{"url":"entities/Scrapbook.html","title":"entity - Scrapbook","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Scrapbook\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/entities/scrapbook.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class is the class that represents the User table in the database\nThis is how we interact with the database table in the application\nNo need for SQL quesries\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                caption\n                            \n                            \n                                id\n                            \n                            \n                                location\n                            \n                            \n                                posts\n                            \n                            \n                                user\n                            \n                            \n                                visibility\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        caption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/scrapbook.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/scrapbook.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/scrapbook.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.scrapbook)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/scrapbook.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.scrapbooks, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/scrapbook.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visibility\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Visibility\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/scrapbook.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne, OneToMany } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { Visibility } from '../../../constants/visibility.enum';\nimport { Post } from './post.entity';\n\n/**\n * User Entity Class is the class that represents the User table in the database\n * This is how we interact with the database table in the application\n * No need for SQL quesries\n */\n@Entity()\nexport class Scrapbook extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  caption: string;\n\n  @Column()\n  location: string;\n\n  @Column()\n  visibility: Visibility;\n\n  //A scrapbook can only be posted by one user but a user can have many scrapbook\n  @ManyToOne(() => User, (user) => user.scrapbooks, {\n    onDelete: 'CASCADE'\n  })\n  user: User;\n\n  //A scrapbook can have many posts\n  @OneToMany(() => Post, (post) => post.scrapbook)\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendNotificationDto.html":{"url":"classes/SendNotificationDto.html","title":"class - SendNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notification/dto/send-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                            \n                                targetGroup\n                            \n                            \n                                targetUserId\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notification/dto/send-message.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationTargetGroup\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(NotificationTargetGroup)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notification/dto/send-message.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetUserId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notification/dto/send-message.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notification/dto/send-message.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty, IsOptional, IsUUID } from 'class-validator';\nimport { NotificationTargetGroup } from 'src/constants/notification-target-group.enum';\n\nexport class SendNotificationDto {\n  @IsNotEmpty()\n  title: string;\n\n  @IsNotEmpty()\n  body: string;\n\n  @IsEnum(NotificationTargetGroup)\n  targetGroup: NotificationTargetGroup;\n\n  @IsOptional()\n  @IsUUID()\n  targetUserId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpUserDto.html":{"url":"classes/SignUpUserDto.html","title":"class - SignUpUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/user-signup.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the DTO for the user sign up,\nthis is the data that the user will send to the server in the body of the request.\nThe annotation above each property is used to validate the data that the user sends.\nNest Validates it automatically and if the data is not valid it will throw an error.\nIsNotEmpty check that the string is not empty.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                confirmPassword\n                            \n                            \n                                dateOfBirth\n                            \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateOfBirth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPhoneNumber('AE')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsPhoneNumber } from 'class-validator';\n\n/**\n * This is the DTO for the user sign up,\n * this is the data that the user will send to the server in the body of the request.\n * The annotation above each property is used to validate the data that the user sends.\n * Nest Validates it automatically and if the data is not valid it will throw an error.\n * IsNotEmpty check that the string is not empty.\n */\n\nexport class SignUpUserDto {\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsEmail()\n  email: string;\n\n  @IsNotEmpty()\n  username: string;\n\n  @IsNotEmpty()\n  password: string;\n\n  @IsNotEmpty()\n  confirmPassword: string;\n\n  @IsPhoneNumber('AE')\n  phoneNumber: string;\n\n  address: string;\n\n  @IsNotEmpty()\n  dateOfBirth: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteCustomer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCustomer(customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/stripe.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stripe\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Stripe(process.env?.STRIPE_TEST_KEY, {\n    apiVersion: '2022-11-15'\n  })\n                    \n                \n                    \n                        \n                                Defined in src/common/services/stripe.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import * as dotenv from 'dotenv';\ndotenv.config();\nimport Stripe from 'stripe';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class StripeService {\n  private stripe = new Stripe(process.env?.STRIPE_TEST_KEY, {\n    apiVersion: '2022-11-15'\n  });\n\n  async deleteCustomer(customerId: string): Promise {\n    await this.stripe.customers.del(customerId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nTasksService\n\nTasksService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/tasks/tasks.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { Post } from '../post/entities/post.entity';\nimport { TasksService } from './tasks.service';\nimport { UserBan } from '../report/entities/user-ban.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Post, UserBan])],\n  providers: [TasksService]\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tasks/tasks.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This service is used to run bulk tasks requiring a lot of processing power\nThis will run once everyday at 12:00:00 AM server time\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                removeExpiredBans\n                            \n                            \n                                    Async\n                                updateUserPostURLs\n                            \n                            \n                                    Async\n                                updateUserProfileURLs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, postRepository: Repository, userBanRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/tasks/tasks.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userBanRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeExpiredBans\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeExpiredBans()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)\n                \n            \n\n            \n                \n                    Defined in src/modules/tasks/tasks.service.ts:111\n                \n            \n\n\n            \n                \n                    Runs at the specified interval\nRemoves the bans on users whose ban has expired\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserPostURLs\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserPostURLs()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)\n                \n            \n\n            \n                \n                    Defined in src/modules/tasks/tasks.service.ts:72\n                \n            \n\n\n            \n                \n                    Runs at the specified interval\nUpdates the post picture URL for all posts whose picture will expire tomorrow\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserProfileURLs\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserProfileURLs()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)\n                \n            \n\n            \n                \n                    Defined in src/modules/tasks/tasks.service.ts:33\n                \n            \n\n\n            \n                \n                    Runs at the specified interval\nUpdates the profile picture URL for all users whose profile picture will expire tomorrow\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FirebaseStorageService } from 'src/common/services/firebase-storage.service';\nimport { BanStatus } from 'src/constants/ban-status.enum';\nimport { Repository, Not, LessThan } from 'typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { UserBan } from '../report/entities/user-ban.entity';\nimport { User } from '../user/entities/user.entity';\n\n/**\n * This service is used to run bulk tasks requiring a lot of processing power\n * This will run once everyday at 12:00:00 AM server time\n */\n@Injectable()\nexport class TasksService {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    @InjectRepository(Post)\n    private postRepository: Repository,\n\n    @InjectRepository(UserBan)\n    private userBanRepository: Repository\n  ) {}\n\n  /**\n   * Runs at the specified interval\n   * Updates the profile picture URL for all users whose profile picture will expire tomorrow\n   */\n  @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)\n  async updateUserProfileURLs() {\n    const tomorrow = new Date(Date.now());\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    await this.userRepository\n      .find({\n        where: {\n          profilePictureId: Not(''),\n          profilePictureExpiryDate: LessThan(tomorrow)\n        }\n      })\n      .then(async (users) => {\n        console.log(users.length);\n\n        for (let i = 0; i  {\n        for (let i = 0; i  {\n        for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDateOfBirthDto.html":{"url":"classes/UpdateUserDateOfBirthDto.html","title":"class - UpdateUserDateOfBirthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDateOfBirthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/dateofbirth-update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                to check for valid date while updating dates\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dateOfBirth\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dateOfBirth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/dateofbirth-update.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n/**\n * to check for valid date while updating dates\n */\nexport class UpdateUserDateOfBirthDto {\n  @IsNotEmpty()\n  dateOfBirth: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserEmailDto.html":{"url":"classes/UpdateUserEmailDto.html","title":"class - UpdateUserEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/email-update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                to check for valid email while updating emails\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/email-update.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail } from 'class-validator';\n/**\n * to check for valid email while updating emails\n */\nexport class UpdateUserEmailDto {\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserPasseordDto.html":{"url":"classes/UpdateUserPasseordDto.html","title":"class - UpdateUserPasseordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserPasseordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/password-update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmPassword\n                            \n                            \n                                currentPassword\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(8)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/password-update.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/password-update.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(8)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/password-update.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, MinLength } from 'class-validator';\n\nexport class UpdateUserPasseordDto {\n  @IsNotEmpty()\n  currentPassword: string;\n\n  @MinLength(8)\n  @IsNotEmpty()\n  password: string;\n\n  @MinLength(8)\n  @IsNotEmpty()\n  confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserPhoneNumberDto.html":{"url":"classes/UpdateUserPhoneNumberDto.html","title":"class - UpdateUserPhoneNumberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserPhoneNumberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/phone-update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                to check for valid date while updating dates\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPhoneNumber('AE')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/phone-update.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsPhoneNumber } from 'class-validator';\n/**\n * to check for valid date while updating dates\n */\nexport class UpdateUserPhoneNumberDto {\n  @IsPhoneNumber('AE')\n  phoneNumber: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class is the class that represents the User table in the database\nThis is how we interact with the database table in the application\nNo need for SQL quesries\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                appeals\n                            \n                            \n                                bans\n                            \n                            \n                                blockedBy\n                            \n                            \n                                blocks\n                            \n                            \n                                comments\n                            \n                            \n                                dateOfBirth\n                            \n                            \n                                email\n                            \n                            \n                                fcmToken\n                            \n                            \n                                firstName\n                            \n                            \n                                followers\n                            \n                            \n                                following\n                            \n                            \n                                followRequestsReceived\n                            \n                            \n                                followRequestsSent\n                            \n                            \n                                gender\n                            \n                            \n                                hasStripAccount\n                            \n                            \n                                id\n                            \n                            \n                                isBanned\n                            \n                            \n                                lastName\n                            \n                            \n                                likes\n                            \n                            \n                                notificationPreference\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                posts\n                            \n                            \n                                profilePictureExpiryDate\n                            \n                            \n                                profilePictureId\n                            \n                            \n                                profilePictureUrl\n                            \n                            \n                                reportedPosts\n                            \n                            \n                                reportedUsers\n                            \n                            \n                                reportsAgainst\n                            \n                            \n                                role\n                            \n                            \n                                scrapbooks\n                            \n                            \n                                stripeCustomerId\n                            \n                            \n                                subscriptionPlan\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        appeals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Appeal[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, appeal => appeal.appealedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bans\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserBan[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, userBan => userBan.bannedUser)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        blockedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Block[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, block => block.blockedUser)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        blocks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Block[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, block => block.blockingUser)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:130\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateOfBirth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fcmToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Follow[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, follow => follow.followed)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:142\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        following\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Follow[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, follow => follow.followedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:138\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followRequestsReceived\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FollowRequest[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, followRequest => followRequest.requestedUser)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:150\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followRequestsSent\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FollowRequest[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, followRequest => followRequest.requestedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Gender\n\n                    \n                \n                \n                    \n                        Default value : Gender.Undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasStripAccount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isBanned\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Like[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, like => like.likedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:154\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notificationPreference\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationPreference\n\n                    \n                \n                \n                    \n                        Default value : NotificationPreference.All\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.postedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profilePictureExpiryDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profilePictureId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profilePictureUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'longtext'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportedPosts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PostReport[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, postReport => postReport.reportedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:107\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportedUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserReport[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, userReport => userReport.reportedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportsAgainst\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserReport[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, userReport => userReport.reportedUser)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scrapbooks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Scrapbook[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, scrapbook => scrapbook.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stripeCustomerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subscriptionPlan\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SubscriptionPlan\n\n                    \n                \n                \n                    \n                        Default value : SubscriptionPlan.Basic\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  BeforeInsert,\n  OneToMany,\n  AfterLoad\n} from 'typeorm';\nimport { EncryptionService } from '../../../common/services/encryption.service';\nimport { Role } from '../../../constants/role.enum';\nimport { Post } from '../../post/entities/post.entity';\nimport { Scrapbook } from '../../post/entities/scrapbook.entity';\nimport { Comment } from '../../post/entities/comment.entity';\nimport { PostReport } from '../../report/entities/post-report.entity';\nimport { UserReport } from '../../report/entities/user-report.entity';\nimport { Gender } from '../../../constants/gender.enum';\nimport { UserBan } from '../../report/entities/user-ban.entity';\nimport { FirebaseStorageService } from '../../../common/services/firebase-storage.service';\nimport { Appeal } from '../../appeals/entities/appeal.entity';\nimport { Block } from '../../block/entities/block.entity';\nimport { Follow } from '../../../modules/follow/entities/follow.entity';\nimport { FollowRequest } from '../../../modules/follow/entities/follow-request.entity';\nimport { NotificationPreference } from '../../../constants/notification-preference.enum';\nimport { Like } from '../../post/entities/post-like.entity';\nimport { SubscriptionPlan } from '../../../constants/subscription-plan.enum';\n\n/**\n * User Entity Class is the class that represents the User table in the database\n * This is how we interact with the database table in the application\n * No need for SQL quesries\n */\n@Entity()\nexport class User extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column()\n  email: string;\n\n  @Column()\n  username: string;\n\n  @Column({ select: false })\n  password: string;\n\n  @Column()\n  phoneNumber: string;\n\n  @Column({ default: '' })\n  address: string = '';\n\n  @Column()\n  dateOfBirth: Date;\n\n  @Column()\n  role: Role;\n\n  @Column({ type: 'longtext' })\n  profilePictureUrl: string = '';\n\n  @Column({ default: '' })\n  profilePictureId: string = '';\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  profilePictureExpiryDate: Date;\n\n  @Column({ default: Gender.Undefined })\n  gender: Gender = Gender.Undefined;\n\n  @Column({ default: '' })\n  fcmToken: string = '';\n\n  @Column({ default: NotificationPreference.All })\n  notificationPreference: NotificationPreference = NotificationPreference.All;\n\n  @Column({ default: false })\n  isBanned: boolean = false;\n\n  @Column({ default: false })\n  hasStripAccount: boolean = false;\n\n  @Column({ default: '' })\n  stripeCustomerId: string = '';\n\n  @Column({ default: SubscriptionPlan.Basic })\n  subscriptionPlan: SubscriptionPlan = SubscriptionPlan.Basic;\n\n  /* @OneToMany(() => User, (user) => user.followers) */\n\n  //A user can have many posts\n  @OneToMany(() => Post, (post) => post.postedBy)\n  posts: Post[];\n\n  //A user can have many posts\n  @OneToMany(() => Scrapbook, (scrapbook) => scrapbook.user)\n  scrapbooks: Scrapbook[];\n\n  //A user can report many posts\n  @OneToMany(() => PostReport, (postReport) => postReport.reportedBy)\n  reportedPosts: PostReport[];\n\n  //A user can report many users\n  @OneToMany(() => UserReport, (userReport) => userReport.reportedBy)\n  reportedUsers: UserReport[];\n\n  //A user can be reported by many users\n  @OneToMany(() => UserReport, (userReport) => userReport.reportedUser)\n  reportsAgainst: UserReport[];\n\n  @OneToMany(() => UserBan, (userBan) => userBan.bannedUser)\n  bans: UserBan[];\n\n  //A user can make many comments\n  @OneToMany(() => Comment, (comment) => comment.author)\n  comments: Comment[];\n\n  //A user can make many appeals\n  @OneToMany(() => Appeal, (appeal) => appeal.appealedBy)\n  appeals: Appeal[];\n\n  //A user can block many users\n  @OneToMany(() => Block, (block) => block.blockingUser)\n  blocks: Block[];\n\n  //A user can be blocked by many users\n  @OneToMany(() => Block, (block) => block.blockedUser)\n  blockedBy: Block[];\n\n  //A user can follow many users\n  @OneToMany(() => Follow, (follow) => follow.followedBy)\n  following: Follow[];\n\n  //A user can be followed by many users\n  @OneToMany(() => Follow, (follow) => follow.followed)\n  followers: Follow[];\n\n  //A user can send many follow requests\n  @OneToMany(() => FollowRequest, (followRequest) => followRequest.requestedBy)\n  followRequestsSent: FollowRequest[];\n\n  //A user can receive many follow requests\n  @OneToMany(() => FollowRequest, (followRequest) => followRequest.requestedUser)\n  followRequestsReceived: FollowRequest[];\n\n  //A user can have many likes\n  @OneToMany(() => Like, (like) => like.likedBy)\n  likes: Like[];\n\n  //This is a hook that will be executed before the user is inserted in the database\n  @BeforeInsert()\n  emailToLowerCase() {\n    this.email = this.email.toLowerCase();\n  }\n\n  @BeforeInsert()\n  async hashPassword() {\n    this.password = await new EncryptionService().encryptPassword(this.password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserBan.html":{"url":"entities/UserBan.html","title":"entity - UserBan","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserBan\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/report/entities/user-ban.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class is the class that represents the User table in the database\nThis is how we interact with the database table in the application\nNo need for SQL quesries\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bannedUser\n                            \n                            \n                                endDate\n                            \n                            \n                                id\n                            \n                            \n                                startDate\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bannedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.bans, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-ban.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-ban.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-ban.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-ban.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : BanStatus.Active\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-ban.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { BanStatus } from '../../../constants/ban-status.enum';\nimport { BaseEntity } from '../../../common/entities/base.entity';\n\n/**\n * User Entity Class is the class that represents the User table in the database\n * This is how we interact with the database table in the application\n * No need for SQL quesries\n */\n@Entity()\nexport class UserBan extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ default: BanStatus.Active })\n  status: string = BanStatus.Active;\n\n  @Column()\n  startDate: Date;\n\n  @Column()\n  endDate: Date;\n\n  //A user can be banned multiple times\n  @ManyToOne(() => User, (user) => user.bans, {\n    onDelete: 'CASCADE'\n  })\n  bannedUser: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserController } from './user.controller';\nimport { User } from './entities/user.entity';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService]\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserReport.html":{"url":"entities/UserReport.html","title":"entity - UserReport","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserReport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/report/entities/user-report.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class is the class that represents the User table in the database\nThis is how we interact with the database table in the application\nNo need for SQL quesries\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                reason\n                            \n                            \n                                reportedBy\n                            \n                            \n                                reportedUser\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-report.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReportReason\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-report.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.reportedUsers, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-report.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.reportsAgainst, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-report.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ReportStatus.PendingReview\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-report.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ReportStatus } from '../../../constants/report-status.enum';\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { BaseEntity } from '../../../common/entities/base.entity';\nimport { ReportReason } from '../../../constants/report-reason.enum';\n\n/**\n * User Entity Class is the class that represents the User table in the database\n * This is how we interact with the database table in the application\n * No need for SQL quesries\n */\n@Entity()\nexport class UserReport extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ default: ReportStatus.PendingReview })\n  status: string = ReportStatus.PendingReview;\n\n  @Column()\n  reason: ReportReason;\n\n  //A Report can only report one user but a user can be in many reports\n  @ManyToOne(() => User, (user) => user.reportsAgainst, {\n    onDelete: 'CASCADE'\n  })\n  reportedUser: User;\n\n  //A Report can only be posted by one user but a user can have many Reports\n  @ManyToOne(() => User, (user) => user.reportedUsers, {\n    onDelete: 'CASCADE'\n  })\n  reportedBy: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                migrations/1672082558971-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672082558971\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672082713679-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672082713679\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672133224744-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672133224744\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672166137042-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672166137042\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672251740346-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672251740346\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672388811259-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672388811259\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672399737695-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672399737695\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672417201262-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672417201262\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672417384470-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672417384470\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672576067204-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672576067204\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672585305519-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672585305519\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672600378154-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672600378154\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672678196724-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672678196724\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672744437528-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672744437528\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672760070076-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672760070076\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672832148243-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672832148243\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672833410692-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672833410692\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673022319464-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673022319464\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673025398979-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673025398979\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673027114310-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673027114310\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673177373733-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673177373733\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673337064308-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673337064308\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673770456243-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673770456243\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673847605869-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673847605869\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673974513613-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673974513613\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674121256550-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674121256550\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674198387677-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674198387677\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674453163372-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674453163372\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674486373359-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674486373359\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674487677914-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674487677914\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674493007150-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674493007150\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674544597118-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674544597118\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/dto/page-meta-parameters.dto.ts\n            \n            interface\n            PageMetaDtoParameters\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/common/dto/page-meta.dto.ts\n            \n            class\n            PageMetaDto\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/common/dto/page-options.dto.ts\n            \n            class\n            PageOptionsDto\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/common/dto/page.dto.ts\n            \n            class\n            PageDto\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/common/entities/base.entity.ts\n            \n            class\n            BaseEntity\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/common/services/encryption.service.ts\n            \n            injectable\n            EncryptionService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/services/firebase-admin.service.ts\n            \n            variable\n            bucket\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/services/firebase-admin.service.ts\n            \n            variable\n            firebaseConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/services/firebase-admin.service.ts\n            \n            variable\n            messaging\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/services/firebase-admin.service.ts\n            \n            variable\n            serviceAccount\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/services/firebase-admin.service.ts\n            \n            variable\n            storage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/services/firebase-storage.service.ts\n            \n            injectable\n            FirebaseStorageService\n            \n                44 %\n                (4/9)\n            \n        \n        \n            \n                \n                src/common/services/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/analytics/analytics.controller.ts\n            \n            controller\n            AnalyticsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/analytics/analytics.service.ts\n            \n            injectable\n            AnalyticsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/analytics/dto/post-analytic-response.dto.ts\n            \n            class\n            PostAnalyticResposneDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/appeals/appeals.controller.ts\n            \n            controller\n            AppealsController\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/modules/appeals/appeals.service.ts\n            \n            injectable\n            AppealsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/appeals/dto/appeal.dto.ts\n            \n            class\n            AppealDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/appeals/entities/appeal.entity.ts\n            \n            entity\n            Appeal\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/modules/auth/constants.ts\n            \n            variable\n            jwtConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/user-signup.dto.ts\n            \n            class\n            SignUpUserDto\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/modules/block/block.controller.ts\n            \n            controller\n            BlockController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/block/block.service.ts\n            \n            injectable\n            BlockService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/block/entities/block.entity.ts\n            \n            entity\n            Block\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/feed/feed.controller.ts\n            \n            controller\n            FeedController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/feed/feed.service.ts\n            \n            injectable\n            FeedService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/follow/entities/follow-request.entity.ts\n            \n            entity\n            FollowRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/follow/entities/follow.entity.ts\n            \n            entity\n            Follow\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/follow/follow.controller.ts\n            \n            controller\n            FollowController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/follow/follow.service.ts\n            \n            injectable\n            FollowService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/notification/dto/send-message.dto.ts\n            \n            class\n            SendNotificationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/notification/notification.controller.ts\n            \n            controller\n            NotificationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/notification/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/payment/payment.controller.ts\n            \n            controller\n            PaymentController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/payment/payment.service.ts\n            \n            injectable\n            PaymentService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/post/dto/comment-create.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/post/dto/post-create.dto.ts\n            \n            class\n            CreatePostDto\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/modules/post/dto/scrapbook-create.dts.ts\n            \n            class\n            CreateScrapBookDto\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/modules/post/entities/comment.entity.ts\n            \n            entity\n            Comment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/post/entities/post-like.entity.ts\n            \n            entity\n            Like\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/post/entities/post.entity.ts\n            \n            entity\n            Post\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/post/entities/scrapbook.entity.ts\n            \n            entity\n            Scrapbook\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                43 %\n                (7/16)\n            \n        \n        \n            \n                \n                src/modules/post/post.service.ts\n            \n            injectable\n            PostService\n            \n                27 %\n                (5/18)\n            \n        \n        \n            \n                \n                src/modules/report/dto/report.dto.ts\n            \n            class\n            ReportDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/modules/report/entities/post-report.entity.ts\n            \n            entity\n            PostReport\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/report/entities/user-ban.entity.ts\n            \n            entity\n            UserBan\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/report/entities/user-report.entity.ts\n            \n            entity\n            UserReport\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/report/report.controller.ts\n            \n            controller\n            ReportController\n            \n                70 %\n                (7/10)\n            \n        \n        \n            \n                \n                src/modules/report/report.service.ts\n            \n            injectable\n            ReportService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/modules/user/dto/dateofbirth-update.dto.ts\n            \n            class\n            UpdateUserDateOfBirthDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/user/dto/email-update.dto.ts\n            \n            class\n            UpdateUserEmailDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/user/dto/password-update.dto.ts\n            \n            class\n            UpdateUserPasseordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/user/dto/phone-update.dto.ts\n            \n            class\n            UpdateUserPhoneNumberDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                70 %\n                (14/20)\n            \n        \n        \n            \n                \n                src/modules/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                71 %\n                (20/28)\n            \n        \n        \n            \n                \n                typeOrm.config.ts\n            \n            variable\n            configService\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.1\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/schedule : ^2.1.0\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            firebase : ^9.15.0\n        \n            firebase-admin : ^11.4.1\n        \n            mysql2 : ^2.3.3\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            stripe : ^11.7.0\n        \n            typeorm : ^0.3.11\n        \n            uuid : ^9.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BanStatus   (src/.../ban-status.enum.ts)\n                        \n                        \n                            FollowStatus   (src/.../follow-status.enum.ts)\n                        \n                        \n                            Gender   (src/.../gender.enum.ts)\n                        \n                        \n                            NotificationPreference   (src/.../notification-preference.enum.ts)\n                        \n                        \n                            NotificationTargetGroup   (src/.../notification-target-group.enum.ts)\n                        \n                        \n                            Order   (src/.../order.enum.ts)\n                        \n                        \n                            ReportReason   (src/.../report-reason.enum.ts)\n                        \n                        \n                            ReportStatus   (src/.../report-status.enum.ts)\n                        \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                        \n                            SubscriptionPlan   (src/.../subscription-plan.enum.ts)\n                        \n                        \n                            Visibility   (src/.../visibility.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants/ban-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        BanStatus\n                    \n                \n                        \n                            \n                                 Active\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 Expired\n                            \n                        \n                        \n                            \n                                Value : expired\n                            \n                        \n            \n        \n\n    src/constants/follow-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        FollowStatus\n                    \n                \n                        \n                            \n                                 Pending\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 Accepted\n                            \n                        \n                        \n                            \n                                Value : accepted\n                            \n                        \n                        \n                            \n                                 Rejected\n                            \n                        \n                        \n                            \n                                Value : rejected\n                            \n                        \n            \n        \n\n    src/constants/gender.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Gender\n                    \n                \n                        \n                            \n                                 Male\n                            \n                        \n                        \n                            \n                                Value : male\n                            \n                        \n                        \n                            \n                                 Female\n                            \n                        \n                        \n                            \n                                Value : female\n                            \n                        \n                        \n                            \n                                 Other\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n                        \n                            \n                                 Undefined\n                            \n                        \n                        \n                            \n                                Value : undefined\n                            \n                        \n            \n        \n\n    src/constants/notification-preference.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NotificationPreference\n                    \n                \n                        \n                            \n                                 All\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n                        \n                            \n                                 SelectedGroup\n                            \n                        \n                        \n                            \n                                Value : selectedGroup\n                            \n                        \n                        \n                            \n                                 Broadcast\n                            \n                        \n                        \n                            \n                                Value : broadcast\n                            \n                        \n            \n        \n\n    src/constants/notification-target-group.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NotificationTargetGroup\n                    \n                \n                        \n                            \n                                 All\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n                        \n                            \n                                 SingleUser\n                            \n                        \n                        \n                            \n                                Value : singleUser\n                            \n                        \n                        \n                            \n                                 Influencers\n                            \n                        \n                        \n                            \n                                Value : influencers\n                            \n                        \n                        \n                            \n                                 Celebrity\n                            \n                        \n                        \n                            \n                                Value : celebrity\n                            \n                        \n            \n        \n\n    src/constants/order.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Order\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/constants/report-reason.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ReportReason\n                    \n                \n                        \n                            \n                                 Spam\n                            \n                        \n                        \n                            \n                                Value : spam\n                            \n                        \n                        \n                            \n                                 Inappropriate\n                            \n                        \n                        \n                            \n                                Value : inappropriate\n                            \n                        \n                        \n                            \n                                 BullyingOrHarrassement\n                            \n                        \n                        \n                            \n                                Value : bullying or harrassement\n                            \n                        \n            \n        \n\n    src/constants/report-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ReportStatus\n                    \n                \n                        \n                            \n                                 Accepted\n                            \n                        \n                        \n                            \n                                Value : accepted\n                            \n                        \n                        \n                            \n                                 Rejected\n                            \n                        \n                        \n                            \n                                Value : rejected\n                            \n                        \n                        \n                            \n                                 PendingReview\n                            \n                        \n                        \n                            \n                                Value : pending review\n                            \n                        \n            \n        \n\n    src/constants/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 Standard\n                            \n                        \n                        \n                            \n                                Value : standard\n                            \n                        \n                        \n                            \n                                 Celebrity\n                            \n                        \n                        \n                            \n                                Value : celebrity\n                            \n                        \n                        \n                            \n                                 Influencer\n                            \n                        \n                        \n                            \n                                Value : influencer\n                            \n                        \n                        \n                            \n                                 Professional\n                            \n                        \n                        \n                            \n                                Value : professional\n                            \n                        \n            \n        \n\n    src/constants/subscription-plan.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        SubscriptionPlan\n                    \n                \n                        \n                            \n                                 Basic\n                            \n                        \n                        \n                            \n                                Value : Basic\n                            \n                        \n                        \n                            \n                                 Premium\n                            \n                        \n                        \n                            \n                                Value : Premium\n                            \n                        \n            \n        \n\n    src/constants/visibility.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Visibility\n                    \n                \n                        \n                            \n                                 Public\n                            \n                        \n                        \n                            \n                                Value : public\n                            \n                        \n                        \n                            \n                                 Private\n                            \n                        \n                        \n                            \n                                Value : private\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nUsed Repo Template\nhttps://github.com/NarHakobyan/awesome-nest-boilerplate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AnalyticsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppealsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BlockModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FeedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FollowModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReportModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AnalyticsModule\n\n\n\ncluster_AnalyticsModule_providers\n\n\n\ncluster_AppealsModule\n\n\n\ncluster_AppealsModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BlockModule\n\n\n\ncluster_BlockModule_providers\n\n\n\ncluster_FeedModule\n\n\n\ncluster_FeedModule_providers\n\n\n\ncluster_FollowModule\n\n\n\ncluster_FollowModule_providers\n\n\n\ncluster_NotificationModule\n\n\n\ncluster_NotificationModule_exports\n\n\n\ncluster_NotificationModule_providers\n\n\n\ncluster_PaymentModule\n\n\n\ncluster_PaymentModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_exports\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_ReportModule\n\n\n\ncluster_ReportModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAnalyticsService\n\nAnalyticsService\n\n\n\nAnalyticsModule\n\nAnalyticsModule\n\nAnalyticsModule -->\n\nAnalyticsService->AnalyticsModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnalyticsModule->AppModule\n\n\n\n\n\nAppealsService\n\nAppealsService\n\n\n\nAppealsModule\n\nAppealsModule\n\nAppealsModule -->\n\nAppealsService->AppealsModule\n\n\n\nAppModule -->\n\nAppealsModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nBlockModule\n\nBlockModule\n\nAppModule -->\n\nBlockModule->AppModule\n\n\n\n\n\nFeedModule\n\nFeedModule\n\nAppModule -->\n\nFeedModule->AppModule\n\n\n\n\n\nFollowModule\n\nFollowModule\n\nAppModule -->\n\nFollowModule->AppModule\n\n\n\n\n\nNotificationModule\n\nNotificationModule\n\n\n\nPaymentModule\n\nPaymentModule\n\nPaymentModule -->\n\nNotificationModule->PaymentModule\n\n\n\nAppModule -->\n\nNotificationModule->AppModule\n\n\n\n\n\nNotificationService \n\nNotificationService \n\nNotificationService  -->\n\nNotificationModule->NotificationService \n\n\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nPostService \n\nPostService \n\nPostService  -->\n\nPostModule->PostService \n\n\n\n\n\nReportModule\n\nReportModule\n\nAppModule -->\n\nReportModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\nAppModule -->\n\nLocalStrategy->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nBlockService\n\nBlockService\n\nBlockModule -->\n\nBlockService->BlockModule\n\n\n\n\n\nFeedService\n\nFeedService\n\nFeedModule -->\n\nFeedService->FeedModule\n\n\n\n\n\nFollowService\n\nFollowService\n\nFollowModule -->\n\nFollowService->FollowModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nNotificationModule -->\n\nNotificationService->NotificationModule\n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nReportService\n\nReportService\n\nReportModule -->\n\nReportService->ReportModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        13 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    20 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    48 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bucket   (src/.../firebase-admin.service.ts)\n                        \n                        \n                            configService   (typeOrm.config.ts)\n                        \n                        \n                            firebaseConfig   (src/.../firebase-admin.service.ts)\n                        \n                        \n                            jwtConfig   (src/.../constants.ts)\n                        \n                        \n                            messaging   (src/.../firebase-admin.service.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            serviceAccount   (src/.../firebase-admin.service.ts)\n                        \n                        \n                            storage   (src/.../firebase-admin.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/services/firebase-admin.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bucket\n                        \n                    \n                \n            \n                \n                    \n                        Default value : getStorage().bucket()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firebaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  credential: credential.cert(serviceAccount),\n  storageBucket: 'atlas-6183a.appspot.com'\n}\n                    \n                \n\n            \n                \n                    This is the firebase config for the firebase project\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messaging\n                        \n                    \n                \n            \n                \n                    \n                        Default value : getMessaging()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serviceAccount\n                        \n                    \n                \n            \n                \n                    \n                        Default value : JSON.parse(process.env?.FIREBASE_PRIVATE_KEY)\n                    \n                \n\n            \n                \n                    This is the service account key for the firebase project\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : getStorage()\n                    \n                \n\n            \n                \n                    Export the firebase admin storage and messaging\n\n                \n            \n\n        \n    \n\n    typeOrm.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ConfigService()\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env?.SECRET,\n  signOptions: { expiresIn: '2h' }\n}\n                    \n                \n\n\n        \n    \n\n    src/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
