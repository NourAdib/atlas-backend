var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/$npmConfigName1672082558971.html",[0,0.237,1,3.523]],["body/classes/$npmConfigName1672082558971.html",[0,0.289,1,6.416,2,0.988,3,0.106,4,0.106,5,0.094,6,7.034,7,1.48,8,1.899,9,2.148,10,0.241,11,0.817,12,1.128,13,1.013,14,2.341,15,1.524,16,1.899,17,1.854,18,0.36,19,0.009,20,0.485,21,1.14,22,1.087,23,0.437,24,1.516,25,1.945,26,2.495,27,2.728,28,0.962,29,0.937,30,0.987,31,1.704,32,1.945,33,1.516,34,0.106,35,0.852,36,0.094,37,1.33,38,1.945,39,1.608,40,0.987,41,1.672,42,4.108,43,2.005,44,1.553,45,1.672,46,1.672,47,0.007,48,0.007]],["title/classes/$npmConfigName1672082713679.html",[0,0.237,49,3.523]],["body/classes/$npmConfigName1672082713679.html",[0,0.269,2,0.918,3,0.099,4,0.099,5,0.088,7,1.376,8,1.811,9,2.074,10,0.224,11,0.779,12,1.102,13,0.966,14,2.295,15,1.495,16,1.811,17,1.768,18,0.348,19,0.009,20,0.451,21,1.059,22,1.01,23,0.421,24,1.409,25,1.855,26,2.46,28,0.917,29,0.893,30,0.941,31,1.657,32,1.855,33,1.409,34,0.099,35,0.792,36,0.088,37,1.607,38,2.351,39,1.943,40,1.193,41,2.046,42,3.918,43,2.915,44,2.258,45,2.046,46,2.046,47,0.007,48,0.007,49,6.239,50,6.84,51,3.119,52,3.918,53,4.083]],["title/classes/$npmConfigName1672133224744.html",[0,0.237,54,3.523]],["body/classes/$npmConfigName1672133224744.html",[0,0.256,2,0.873,3,0.094,4,0.094,5,0.083,7,1.309,8,1.752,9,2.023,10,0.213,11,0.754,12,1.084,13,0.934,14,2.263,15,1.474,16,1.752,17,1.71,18,0.363,19,0.009,20,0.429,21,1.521,22,0.961,23,0.411,24,1.34,25,1.794,26,2.436,28,0.887,29,0.864,30,0.911,31,1.624,32,1.794,33,1.34,34,0.094,35,0.753,36,0.083,37,1.476,38,1.794,39,1.785,41,1.479,43,3.066,44,2.522,45,1.479,47,0.006,48,0.006,54,6.117,55,6.706,56,3.304,57,2.71,58,1.703,59,2.503,60,3.79,61,4.272,62,2.71,63,2.825,64,1.592,65,3.35,66,3.123,67,3.123,68,3.795,69,3.123,70,2.71,71,5.57,72,2.71,73,3.287,74,2.71,75,2.328,76,5.57,77,3.117,78,2.328,79,2.503,80,2.11,81,3.013,82,2.71]],["title/classes/$npmConfigName1672166137042.html",[0,0.237,83,3.523]],["body/classes/$npmConfigName1672166137042.html",[0,0.286,2,0.976,3,0.105,4,0.105,5,0.093,7,1.463,8,1.885,9,2.136,10,0.239,11,0.811,12,1.124,13,1.006,14,2.334,15,1.52,16,1.885,17,1.84,18,0.359,19,0.009,20,0.48,21,1.452,22,1.075,23,0.434,24,1.499,25,1.931,26,2.489,27,2.697,28,0.955,29,0.93,30,0.98,31,1.696,32,1.931,33,1.499,34,0.105,35,0.842,36,0.093,37,1.32,38,1.931,39,1.596,43,2.554,44,1.979,47,0.007,48,0.007,52,4.078,58,1.522,67,5.256,83,6.389,84,7.004]],["title/classes/$npmConfigName1672251740346.html",[0,0.237,85,3.523]],["body/classes/$npmConfigName1672251740346.html",[0,0.241,2,0.823,3,0.088,4,0.088,5,0.079,7,1.233,8,1.683,9,1.963,10,0.201,11,0.724,12,1.063,13,0.898,14,2.223,15,1.448,16,1.683,17,1.643,18,0.329,19,0.009,20,0.404,21,1.475,22,0.906,23,0.399,24,1.263,25,1.724,26,2.407,28,0.852,29,0.83,30,0.875,31,1.585,32,1.724,33,1.263,34,0.088,35,0.71,36,0.079,37,1.622,38,2.278,39,1.961,41,2.165,43,2.596,44,2.431,45,2.165,46,1.394,47,0.006,48,0.006,57,2.554,58,1.662,59,2.359,60,3.641,61,4.145,62,2.554,63,3.09,64,1.53,65,3.664,66,2.943,69,2.943,70,2.554,72,2.554,73,3.586,74,2.554,75,2.995,77,3.662,78,2.995,79,2.359,80,2.714,81,3.54,82,2.554,85,5.97,86,6.545,87,3.32,88,3.794,89,3.816,90,6.092,91,5.352,92,6.066,93,4.445]],["title/classes/$npmConfigName1672388811259.html",[0,0.237,94,3.523]],["body/classes/$npmConfigName1672388811259.html",[0,0.212,2,0.723,3,0.078,4,0.078,5,0.069,7,1.084,8,1.538,9,1.832,10,0.177,11,0.662,12,1.014,13,0.821,14,2.135,15,1.39,16,1.538,17,1.502,18,0.307,19,0.009,20,0.355,21,0.835,22,0.796,23,0.372,24,1.11,25,1.576,26,2.338,28,0.779,29,0.759,30,0.8,31,1.499,32,1.576,33,1.11,34,0.078,35,0.624,36,0.069,37,1.701,38,2.422,39,2.057,40,1.012,41,2.413,43,2.637,44,2.429,45,2.413,46,1.738,47,0.006,48,0.006,57,3.186,58,1.571,63,3.138,64,1.769,65,4.083,72,3.186,73,3.853,74,3.186,75,3.463,77,3.992,78,3.463,79,2.942,80,3.138,81,3.859,82,3.186,94,5.645,95,6.189,96,3.906,97,4.914,98,2.737,99,4.14,100,6.189,101,4.914,102,6.192,103,4.891,104,4.891,105,3.446,106,4.891,107,4.891,108,3.446]],["title/classes/$npmConfigName1672399737695.html",[0,0.237,109,3.523]],["body/classes/$npmConfigName1672399737695.html",[0,0.242,2,0.828,3,0.089,4,0.089,5,0.079,7,1.24,8,1.69,9,1.968,10,0.202,11,0.727,12,1.065,13,0.901,14,2.227,15,1.451,16,1.69,17,1.649,18,0.33,19,0.009,20,0.407,21,1.301,22,0.911,23,0.4,24,1.271,25,1.731,26,2.409,28,0.856,29,0.833,30,0.878,31,1.589,32,1.731,33,1.271,34,0.089,35,0.714,36,0.079,37,1.665,38,2.437,39,2.014,41,2.331,43,2.289,44,2.165,45,2.331,46,1.909,47,0.006,48,0.006,52,3.656,58,1.666,63,2.725,65,3.231,73,3.434,75,3.006,77,3.671,78,3.006,80,2.725,81,3.549,97,5.624,98,3.671,102,5.573,104,5.373,105,3.945,109,5.984,110,6.561,111,4.471,112,6.11,113,2.96,114,3.339,115,5.373,116,3.132]],["title/classes/$npmConfigName1672417201262.html",[0,0.237,117,3.523]],["body/classes/$npmConfigName1672417201262.html",[0,0.253,2,0.863,3,0.093,4,0.093,5,0.082,7,1.293,8,1.737,9,2.01,10,0.211,11,0.748,12,1.08,13,0.927,14,2.255,15,1.468,16,1.737,17,1.696,18,0.337,19,0.009,20,0.424,21,0.996,22,0.949,23,0.409,24,1.324,25,1.78,26,2.43,28,0.88,29,0.857,30,0.903,31,1.616,32,1.78,33,1.324,34,0.093,35,0.744,36,0.082,37,1.64,38,2.399,39,1.982,40,1.091,41,2.371,44,1.824,45,2.371,46,1.963,47,0.006,48,0.006,63,2.802,65,3.323,73,3.493,75,3.092,77,3.734,78,3.092,79,2.472,80,2.802,81,3.609,87,3.48,101,5.299,102,5.692,107,5.525,108,4.111,117,6.087,118,6.673,119,6.241,120,5.525]],["title/classes/$npmConfigName1672417384470.html",[0,0.237,121,3.523]],["body/classes/$npmConfigName1672417384470.html",[0,0.285,2,0.974,3,0.105,4,0.105,5,0.093,7,1.46,8,1.882,9,2.134,10,0.238,11,0.81,12,1.124,13,1.004,14,2.332,15,1.519,16,1.882,17,1.838,18,0.358,19,0.009,20,0.479,21,1.45,22,1.072,23,0.434,24,1.496,25,1.928,26,2.488,27,2.691,28,0.953,29,0.928,30,0.979,31,1.695,32,1.928,33,1.496,34,0.105,35,0.84,36,0.093,37,1.318,38,1.928,39,1.593,43,2.551,44,1.976,47,0.007,48,0.007,52,4.072,98,3.916,101,4.753,113,3.484,114,3.93,121,6.383,122,6.998]],["title/classes/$npmConfigName1672576067204.html",[0,0.237,123,3.523]],["body/classes/$npmConfigName1672576067204.html",[0,0.266,2,0.908,3,0.097,4,0.097,5,0.087,7,1.361,8,1.798,9,2.063,10,0.222,11,0.774,12,1.099,13,0.959,14,2.288,15,1.49,16,1.798,17,1.755,18,0.346,19,0.009,20,0.446,21,1.385,22,1,23,0.419,24,1.394,25,1.842,26,2.455,28,0.911,29,0.887,30,0.935,31,1.65,32,1.842,33,1.394,34,0.097,35,0.784,36,0.087,37,1.5,38,1.842,39,1.813,41,1.538,43,1.844,44,2.338,45,1.538,47,0.007,48,0.007,56,3.437,57,2.819,63,2.195,64,1.634,65,3.439,72,2.819,73,3.352,74,2.819,75,2.422,77,3.199,78,2.422,79,2.603,80,2.195,81,3.093,82,2.819,98,2.422,123,6.213,124,6.812,125,6.213,126,3.948,127,4.328,128,6.481,129,4.328,130,5.718,131,5.718]],["title/classes/$npmConfigName1672585305519.html",[0,0.237,132,3.523]],["body/classes/$npmConfigName1672585305519.html",[0,0.289,2,0.988,3,0.106,4,0.106,5,0.094,7,1.48,8,1.899,9,2.148,10,0.241,11,0.817,12,1.128,13,1.013,14,2.341,15,1.524,16,1.899,17,1.854,18,0.36,19,0.009,20,0.485,21,1.14,22,1.087,23,0.437,24,1.516,25,1.945,26,2.495,27,2.728,28,0.962,29,0.937,30,0.987,31,1.704,32,1.945,33,1.516,34,0.106,35,0.852,36,0.094,37,1.33,38,1.945,39,1.608,41,1.672,44,1.553,45,1.672,46,1.672,47,0.007,48,0.007,58,1.533,132,6.416,133,7.034,134,4.108,135,3.737]],["title/classes/$npmConfigName1672600378154.html",[0,0.237,136,3.523]],["body/classes/$npmConfigName1672600378154.html",[0,0.289,2,0.988,3,0.106,4,0.106,5,0.094,7,1.48,8,1.899,9,2.148,10,0.241,11,0.817,12,1.128,13,1.013,14,2.341,15,1.524,16,1.899,17,1.854,18,0.36,19,0.009,20,0.485,21,1.14,22,1.087,23,0.437,24,1.516,25,1.945,26,2.495,27,2.728,28,0.962,29,0.937,30,0.987,31,1.704,32,1.945,33,1.516,34,0.106,35,0.852,36,0.094,37,1.33,38,1.945,39,1.608,40,0.987,41,1.672,43,2.005,44,1.553,45,1.672,46,1.672,47,0.007,48,0.007,136,6.416,137,7.034,138,5.112]],["title/classes/$npmConfigName1672678196724.html",[0,0.237,139,3.523]],["body/classes/$npmConfigName1672678196724.html",[0,0.276,2,0.944,3,0.101,4,0.101,5,0.09,7,1.415,8,1.845,9,2.102,10,0.231,11,0.794,12,1.113,13,0.984,14,2.313,15,1.506,16,1.845,17,1.801,18,0.353,19,0.009,20,0.464,21,1.421,22,1.039,23,0.427,24,1.45,25,1.89,26,2.474,28,0.934,29,0.91,30,0.959,31,1.675,32,1.89,33,1.45,34,0.101,35,0.815,36,0.09,37,1.523,38,2.228,39,1.841,40,0.959,41,1.599,43,2.499,44,2.154,45,1.599,46,1.599,47,0.007,48,0.007,52,3.991,56,3.573,58,1.489,134,3.991,135,3.573,138,5.854,139,6.308,140,6.915,141,3.061]],["title/classes/$npmConfigName1672744437528.html",[0,0.237,142,3.523]],["body/classes/$npmConfigName1672744437528.html",[0,0.285,2,0.972,3,0.104,4,0.104,5,0.093,7,1.457,8,1.88,9,2.132,10,0.238,11,0.809,12,1.123,13,1.003,14,2.331,15,1.518,16,1.88,17,1.835,18,0.358,19,0.009,20,0.477,21,1.447,22,1.07,23,0.433,24,1.492,25,1.925,26,2.487,27,2.685,28,0.952,29,0.927,30,0.977,31,1.693,32,1.925,33,1.492,34,0.104,35,0.839,36,0.093,37,1.316,38,1.925,39,1.591,40,0.977,41,1.646,43,1.974,44,1.529,45,1.646,46,1.646,47,0.007,48,0.007,142,6.378,143,6.992,144,5.059,145,4.632,146,4.632,147,4.632,148,4.632,149,4.632,150,4.632]],["title/classes/$npmConfigName1672760070076.html",[0,0.237,151,3.523]],["body/classes/$npmConfigName1672760070076.html",[0,0.271,2,0.926,3,0.099,4,0.099,5,0.088,7,1.387,8,1.821,9,2.082,10,0.226,11,0.784,12,1.106,13,0.971,14,2.3,15,1.498,16,1.821,17,1.778,18,0.349,19,0.009,20,0.455,21,1.662,22,1.019,23,0.423,24,1.421,25,1.866,26,2.465,28,0.922,29,0.898,30,0.947,31,1.662,32,1.866,33,1.421,34,0.099,35,0.799,36,0.088,37,1.511,38,2.211,39,1.827,40,1.122,41,1.568,43,2.468,44,2.134,45,1.568,46,1.568,47,0.007,48,0.007,52,3.94,56,3.504,144,5.81,145,4.412,146,4.412,147,4.412,148,4.412,149,4.412,150,4.412,151,6.26,152,6.863,153,5.282,154,3.735,155,3.735]],["title/classes/$npmConfigName1672832148243.html",[0,0.237,156,3.523]],["body/classes/$npmConfigName1672832148243.html",[0,0.259,2,0.884,3,0.095,4,0.095,5,0.084,7,1.325,8,1.766,9,2.035,10,0.216,11,0.76,12,1.089,13,0.942,14,2.27,15,1.479,16,1.766,17,1.724,18,0.342,19,0.009,20,0.434,21,1.632,22,0.973,23,0.414,24,1.357,25,1.809,26,2.442,28,0.894,29,0.871,30,0.918,31,1.632,32,1.809,33,1.357,34,0.095,35,0.763,36,0.084,37,1.649,38,2.412,39,1.993,41,2.395,43,2.393,44,2.224,45,2.395,46,2.395,47,0.006,48,0.006,58,1.901,67,5.057,87,3.566,154,3.566,155,3.566,156,6.147,157,6.739,158,5.123,159,5.616,160,3.842]],["title/classes/$npmConfigName1672833410692.html",[0,0.237,161,3.523]],["body/classes/$npmConfigName1672833410692.html",[0,0.286,2,0.976,3,0.105,4,0.105,5,0.093,7,1.463,8,1.885,9,2.136,10,0.239,11,0.811,12,1.124,13,1.006,14,2.334,15,1.52,16,1.885,17,1.84,18,0.359,19,0.009,20,0.48,21,1.452,22,1.075,23,0.434,24,1.499,25,1.931,26,2.489,27,2.697,28,0.955,29,0.93,30,0.98,31,1.696,32,1.931,33,1.499,34,0.105,35,0.842,36,0.093,37,1.32,38,1.931,39,1.596,44,1.979,47,0.007,48,0.007,52,4.078,58,1.522,134,4.765,135,4.76,161,6.389,162,7.004,163,2.697]],["title/classes/$npmConfigName1673022319464.html",[0,0.237,164,3.523]],["body/classes/$npmConfigName1673022319464.html",[0,0.256,2,0.873,3,0.094,4,0.094,5,0.083,7,1.309,8,1.752,9,2.023,10,0.213,11,0.754,12,1.084,13,0.934,14,2.263,15,1.474,16,1.752,17,1.71,18,0.339,19,0.009,20,0.429,21,1.008,22,0.961,23,0.411,24,1.34,25,1.794,26,2.436,28,0.887,29,0.864,30,0.911,31,1.624,32,1.794,33,1.34,34,0.094,35,0.753,36,0.083,37,1.584,38,2.16,39,1.915,41,1.979,43,1.773,44,2.213,45,1.979,47,0.006,48,0.006,51,2.967,57,2.71,63,2.825,64,1.592,65,3.776,72,2.71,73,3.659,74,2.71,75,3.117,77,3.752,78,3.117,79,2.503,80,2.825,81,3.627,82,2.71,116,3.304,164,6.117,165,6.706,166,4.327,167,3.123,168,5.57,169,3.35,170,5.57,171,5.57]],["title/classes/$npmConfigName1673025398979.html",[0,0.237,172,3.523]],["body/classes/$npmConfigName1673025398979.html",[0,0.276,2,0.942,3,0.101,4,0.101,5,0.09,7,1.412,8,1.842,9,2.1,10,0.23,11,0.793,12,1.112,13,0.983,14,2.311,15,1.505,16,1.842,17,1.798,18,0.352,19,0.009,20,0.463,21,1.579,22,1.037,23,0.427,24,1.446,25,1.887,26,2.473,28,0.933,29,0.909,30,0.958,31,1.673,32,1.887,33,1.446,34,0.101,35,0.813,36,0.09,37,1.521,38,2.226,39,1.839,41,2.081,44,1.933,45,2.081,46,2.081,47,0.007,48,0.007,56,3.565,59,3.523,60,3.985,61,4.435,62,3.815,63,2.277,166,4.156,172,6.302,173,6.91]],["title/classes/$npmConfigName1673027114310.html",[0,0.237,174,3.523]],["body/classes/$npmConfigName1673027114310.html",[0,0.244,2,0.832,3,0.089,4,0.089,5,0.08,7,1.248,8,1.696,9,1.974,10,0.203,11,0.73,12,1.067,13,0.905,14,2.231,15,1.453,16,1.696,17,1.656,18,0.331,19,0.009,20,0.409,21,0.961,22,0.916,23,0.401,24,1.278,25,1.738,26,2.412,28,0.859,29,0.837,30,0.882,31,1.593,32,1.738,33,1.278,34,0.089,35,0.718,36,0.08,37,1.626,38,2.379,39,1.966,41,2.337,45,2.337,47,0.006,48,0.006,63,3.335,73,3.866,75,3.68,77,4.133,78,3.68,80,3.335,81,3.837,87,3.358,97,5.222,112,5.394,115,6.577,116,5.222,166,3.955,169,3.244,171,6.577,174,5.999,175,6.577,176,2.824]],["title/classes/$npmConfigName1673177373733.html",[0,0.237,177,3.523]],["body/classes/$npmConfigName1673177373733.html",[0,0.238,2,0.814,3,0.087,4,0.087,5,0.078,7,1.219,8,1.67,9,1.951,10,0.199,11,0.719,12,1.058,13,0.891,14,2.216,15,1.443,16,1.67,17,1.63,18,0.327,19,0.009,20,0.4,21,1.747,22,0.895,23,0.397,24,1.249,25,1.711,26,2.401,28,0.846,29,0.824,30,0.868,31,1.578,32,1.711,33,1.249,34,0.087,35,0.702,36,0.078,37,1.689,38,2.472,39,2.043,41,2.504,44,2.326,45,2.504,46,2.504,47,0.006,48,0.006,59,4.238,60,4.794,61,5.07,62,4.589,63,3.071,97,5.172,101,5.172,125,5.941,177,5.941,178,6.514,179,3.877]],["title/classes/$npmConfigName1673337064308.html",[0,0.237,180,3.523]],["body/classes/$npmConfigName1673337064308.html",[0,0.286,2,0.976,3,0.105,4,0.105,5,0.093,7,1.463,8,1.885,9,2.136,10,0.239,11,0.811,12,1.124,13,1.006,14,2.334,15,1.52,16,1.885,17,1.84,18,0.359,19,0.009,20,0.48,21,1.452,22,1.075,23,0.434,24,1.499,25,1.931,26,2.489,27,2.697,28,0.955,29,0.93,30,0.98,31,1.696,32,1.931,33,1.499,34,0.105,35,0.842,36,0.093,37,1.32,38,1.931,39,1.596,40,0.98,43,2.554,44,1.979,47,0.007,48,0.007,52,4.078,180,6.389,181,7.004,182,6.389]],["title/classes/$npmConfigName1673770456243.html",[0,0.237,183,3.523]],["body/classes/$npmConfigName1673770456243.html",[0,0.245,2,0.837,3,0.09,4,0.09,5,0.08,7,1.255,8,1.703,9,1.98,10,0.205,11,0.733,12,1.069,13,0.909,14,2.235,15,1.456,16,1.703,17,1.663,18,0.332,19,0.009,20,0.411,21,1.597,22,0.922,23,0.403,24,1.286,25,1.745,26,2.415,28,0.863,29,0.84,30,0.885,31,1.597,32,1.745,33,1.286,34,0.09,35,0.722,36,0.08,37,1.565,38,2.124,39,1.892,41,1.924,43,2.619,44,2.441,45,1.924,47,0.006,48,0.006,51,2.846,57,2.599,59,2.4,60,3.685,61,4.182,62,2.599,63,3.117,64,1.548,65,3.697,72,2.599,73,3.608,74,2.599,75,3.03,77,3.689,78,3.03,79,2.4,80,2.746,81,3.325,82,2.599,98,2.233,113,2.995,114,3.378,116,3.169,167,2.995,176,2.089,183,6.013,184,6.593,185,4.274,186,2.846,187,6.138,188,5.416,189,6.138,190,5.416]],["title/classes/$npmConfigName1673847605869.html",[0,0.237,191,3.523]],["body/classes/$npmConfigName1673847605869.html",[0,0.251,2,0.857,3,0.092,4,0.092,5,0.082,7,1.285,8,1.73,9,2.004,10,0.21,11,0.745,12,1.078,13,0.923,14,2.251,15,1.466,16,1.73,17,1.689,18,0.336,19,0.009,20,0.421,21,1.507,22,0.944,23,0.407,24,1.316,25,1.773,26,2.427,28,0.876,29,0.854,30,0.9,31,1.612,32,1.773,33,1.316,34,0.092,35,0.74,36,0.082,37,1.576,38,2.144,39,1.905,41,1.956,44,2.293,45,1.956,47,0.006,48,0.006,51,2.914,57,2.661,59,2.458,60,3.744,61,4.233,62,2.661,63,3.155,64,1.573,65,3.742,72,2.661,73,3.637,74,2.661,75,3.079,77,3.725,78,3.079,79,3.31,80,2.791,81,3.6,82,2.661,191,6.072,192,6.657,193,4.474,194,5.503,195,5.503,196,5.503,197,5.503]],["title/classes/$npmConfigName1673974513613.html",[0,0.237,198,3.523]],["body/classes/$npmConfigName1673974513613.html",[0,0.214,2,0.732,3,0.079,4,0.079,5,0.07,7,1.097,8,1.551,9,1.844,10,0.179,11,0.668,12,1.018,13,0.828,14,2.143,15,1.396,16,1.551,17,1.514,18,0.309,19,0.009,20,0.359,21,1.651,22,0.805,23,0.375,24,1.124,25,1.589,26,2.345,28,0.786,29,0.765,30,0.806,31,1.507,32,1.589,33,1.124,34,0.079,35,0.631,36,0.07,37,1.659,38,2.306,39,2.006,41,2.211,43,1.486,44,2.463,45,2.211,47,0.006,48,0.006,57,3.213,59,2.967,60,4.233,61,4.637,62,3.213,63,3.456,64,1.778,65,4.099,72,3.213,73,3.862,74,3.213,75,3.481,77,4.005,78,3.481,79,3.742,80,3.155,81,3.871,82,3.213,98,1.951,113,2.617,179,3.488,198,5.675,199,6.222,200,4.261,201,4.933,202,4.933,203,6.815,204,4.933,205,4.933,206,4.933,207,4.933,208,4.933,209,4.933]],["title/classes/$npmConfigName1674121256550.html",[0,0.237,210,3.523]],["body/classes/$npmConfigName1674121256550.html",[0,0.288,2,0.983,3,0.106,4,0.106,5,0.094,7,1.473,8,1.893,9,2.143,10,0.24,11,0.815,12,1.127,13,1.01,14,2.338,15,1.523,16,1.893,17,1.848,18,0.36,19,0.009,20,0.483,21,1.458,22,1.082,23,0.436,24,1.509,25,1.94,26,2.492,27,2.716,28,0.959,29,0.934,30,0.984,31,1.701,32,1.94,33,1.509,34,0.106,35,0.848,36,0.094,37,1.326,38,1.94,39,1.603,40,0.984,41,1.665,43,1.996,44,1.546,45,1.665,46,1.665,47,0.007,48,0.007,210,6.405,211,7.022,212,5.097]],["title/classes/$npmConfigName1674198387677.html",[0,0.237,213,3.523]],["body/classes/$npmConfigName1674198387677.html",[0,0.288,2,0.985,3,0.106,4,0.106,5,0.094,7,1.477,8,1.896,9,2.146,10,0.241,11,0.816,12,1.128,13,1.012,14,2.339,15,1.524,16,1.896,17,1.851,18,0.36,19,0.009,20,0.484,21,1.46,22,1.084,23,0.436,24,1.513,25,1.942,26,2.494,27,2.722,28,0.96,29,0.935,30,0.986,31,1.702,32,1.942,33,1.513,34,0.106,35,0.85,36,0.094,37,1.328,38,1.942,39,1.605,40,0.986,41,1.669,43,2.001,44,1.55,45,1.669,46,1.669,47,0.007,48,0.007,213,6.411,214,7.028,215,5.104]],["title/classes/$npmConfigName1674453163372.html",[0,0.237,216,3.523]],["body/classes/$npmConfigName1674453163372.html",[0,0.288,2,0.983,3,0.106,4,0.106,5,0.094,7,1.473,8,1.893,9,2.143,10,0.24,11,0.815,12,1.127,13,1.01,14,2.338,15,1.523,16,1.893,17,1.848,18,0.36,19,0.009,20,0.483,21,1.458,22,1.082,23,0.436,24,1.509,25,1.94,26,2.492,27,2.716,28,0.959,29,0.934,30,0.984,31,1.701,32,1.94,33,1.509,34,0.106,35,0.848,36,0.094,37,1.326,38,1.94,39,1.603,40,0.984,41,1.665,44,1.546,45,1.665,46,1.665,47,0.007,48,0.007,135,3.72,163,2.716,216,6.405,217,7.022,218,5.097]],["title/classes/$npmConfigName1674486373359.html",[0,0.237,219,3.523]],["body/classes/$npmConfigName1674486373359.html",[0,0.254,2,0.868,3,0.093,4,0.093,5,0.083,7,1.301,8,1.745,9,2.017,10,0.212,11,0.751,12,1.082,13,0.931,14,2.259,15,1.471,16,1.745,17,1.703,18,0.338,19,0.009,20,0.426,21,1.516,22,0.955,23,0.41,24,1.332,25,1.787,26,2.433,28,0.884,29,0.861,30,0.907,31,1.62,32,1.787,33,1.332,34,0.093,35,0.749,36,0.083,37,1.581,38,2.155,39,1.912,41,1.971,44,2.303,45,1.971,47,0.006,48,0.006,51,2.949,57,2.694,59,2.487,60,3.774,61,4.259,62,2.694,63,3.175,64,1.586,65,3.765,72,2.694,73,3.652,74,2.694,75,3.104,77,3.743,78,3.104,79,2.487,80,2.813,81,3.386,82,2.694,116,3.284,176,2.165,219,6.102,220,6.689,221,6.288,222,5.548,223,6.288,224,5.548]],["title/classes/$npmConfigName1674487677914.html",[0,0.237,225,3.523]],["body/classes/$npmConfigName1674487677914.html",[0,0.288,2,0.983,3,0.106,4,0.106,5,0.094,7,1.473,8,1.893,9,2.143,10,0.24,11,0.815,12,1.127,13,1.01,14,2.338,15,1.523,16,1.893,17,1.848,18,0.36,19,0.009,20,0.483,21,1.458,22,1.082,23,0.436,24,1.509,25,1.94,26,2.492,27,2.716,28,0.959,29,0.934,30,0.984,31,1.701,32,1.94,33,1.509,34,0.106,35,0.848,36,0.094,37,1.326,38,1.94,39,1.603,41,1.665,44,1.546,45,1.665,46,1.665,47,0.007,48,0.007,58,1.529,163,2.716,225,6.405,226,7.022,227,6.021,228,4.685]],["title/classes/$npmConfigName1674493007150.html",[0,0.237,229,3.523]],["body/classes/$npmConfigName1674493007150.html",[0,0.111,2,0.378,3,0.041,4,0.041,5,0.036,7,0.567,8,0.934,9,1.22,10,0.092,11,0.402,12,0.753,13,0.498,14,1.643,15,1.07,16,0.934,17,0.911,18,0.205,19,0.008,20,0.186,21,0.436,22,0.416,23,0.248,24,0.581,25,0.956,26,1.927,28,0.473,29,0.461,30,0.485,31,1.063,32,0.956,33,0.581,34,0.041,35,0.326,36,0.036,37,1.747,38,2.557,39,2.113,41,2.667,45,2.667,47,0.003,48,0.003,58,1.115,63,3.805,71,2.969,73,4.155,75,4.199,76,4.39,77,4.441,78,4.199,79,4.513,80,3.805,81,4.212,88,2.545,89,2.117,91,4.39,97,3.486,100,4.39,101,4.583,103,4.39,106,4.39,119,2.969,120,4.39,125,4.004,130,2.969,131,4.39,166,2.64,168,2.969,170,4.39,176,3.541,185,2.64,188,2.969,190,4.39,193,3.608,194,2.969,195,2.969,196,4.39,197,4.39,200,3.608,201,2.969,202,2.969,203,5.772,204,2.969,205,2.969,206,4.39,207,4.39,208,4.39,209,4.39,222,2.969,224,4.39,229,4.004,230,4.39,231,2.042]],["title/classes/$npmConfigName1674544597118.html",[0,0.237,232,3.523]],["body/classes/$npmConfigName1674544597118.html",[0,0.267,2,0.912,3,0.098,4,0.098,5,0.087,7,1.367,8,1.803,9,2.067,10,0.223,11,0.776,12,1.1,13,0.962,14,2.291,15,1.492,16,1.803,17,1.76,18,0.347,19,0.009,20,0.448,21,1.652,22,1.004,23,0.42,24,1.4,25,1.847,26,2.457,28,0.913,29,0.889,30,0.937,31,1.652,32,1.847,33,1.4,34,0.098,35,0.787,36,0.087,37,1.604,38,2.347,39,1.939,40,1.191,41,2.28,43,2.443,44,2.118,45,2.28,46,2.28,47,0.007,48,0.007,51,3.099,135,3.451,163,2.519,232,6.224,233,6.823,234,5.23,235,5.23,236,4.854,237,4.347]],["title/classes/$npmConfigName1675177507147.html",[0,0.237,238,3.523]],["body/classes/$npmConfigName1675177507147.html",[0,0.267,2,0.912,3,0.098,4,0.098,5,0.087,7,1.367,8,1.803,9,2.067,10,0.223,11,0.776,12,1.1,13,0.962,14,2.291,15,1.492,16,1.803,17,1.76,18,0.347,19,0.009,20,0.448,21,1.652,22,1.004,23,0.42,24,1.4,25,1.847,26,2.457,28,0.913,29,0.889,30,0.937,31,1.652,32,1.847,33,1.4,34,0.098,35,0.787,36,0.087,37,1.604,38,2.347,39,1.939,40,1.191,41,2.28,43,1.852,44,2.118,45,2.28,46,2.28,47,0.007,48,0.007,51,3.099,163,3.324,228,5.734,238,6.224,239,6.823,240,5.734,241,5.734,242,5.23]],["title/controllers/AnalyticsController.html",[243,1.692,244,3.27]],["body/controllers/AnalyticsController.html",[0,0.299,3,0.11,4,0.11,5,0.098,10,0.249,12,0.754,13,1.034,18,0.263,19,0.009,23,0.318,28,0.774,29,0.754,30,0.795,34,0.16,36,0.098,47,0.007,48,0.007,169,4.282,243,2.13,244,5.219,245,2.017,246,4.863,247,3.04,248,4.863,249,6.166,250,5.512,251,4.593,252,4.127,253,1.357,254,5.512,255,5.512,256,3.855,257,3.468,258,2.925,259,2.819,260,3.04,261,2.819,262,1.235,263,2.721,264,3.167,265,3.04,266,5.081,267,4.863,268,2.925,269,5.512,270,2.819,271,3.04,272,5.512,273,5.512,274,4.116,275,5.512,276,5.512,277,5.512,278,2.364,279,5.512,280,2.925,281,3.167,282,3.04,283,3.04]],["title/modules/AnalyticsModule.html",[284,1.481,285,3.067]],["body/modules/AnalyticsModule.html",[0,0.322,3,0.118,4,0.118,5,0.105,19,0.009,34,0.172,36,0.105,40,1.056,47,0.007,48,0.007,58,1.33,244,5.927,245,2.678,262,1.33,266,5.739,267,5.236,284,2.476,285,6.072,286,2.655,287,3.275,288,5.236,289,5.236,290,3.493,291,2.832,292,2.832,293,5.935,294,3.613,295,2.93,296,2.172,297,2.93,298,1.687,299,5.935,300,2.93,301,4.776]],["title/injectables/AnalyticsService.html",[266,2.899,302,1.104]],["body/injectables/AnalyticsService.html",[0,0.233,3,0.086,4,0.086,5,0.076,10,0.195,12,0.812,13,0.878,15,1.227,18,0.283,19,0.009,20,0.618,23,0.343,28,0.834,29,0.812,30,0.621,31,1.268,34,0.162,35,0.688,36,0.076,37,0.836,40,0.856,47,0.006,48,0.006,53,2.125,58,1.64,59,3.149,64,1.086,88,2.202,134,3.562,163,2.202,169,3.883,248,3.798,249,5.236,252,3.035,262,0.964,266,3.929,278,1.456,296,1.575,297,2.125,298,1.224,302,1.496,303,1.76,304,3.798,305,2.655,306,3.798,307,4.486,308,4.272,309,4.305,310,4.157,311,5.934,312,4.305,313,2.375,314,2.375,315,2.708,316,4.432,317,3.798,318,3.464,319,4.305,320,3.016,321,2.832,322,2.375,323,3.884,324,3.464,325,2.85,326,3.016,327,3.215,328,2.85,329,2.85,330,3.798,331,4.305,332,3.464,333,2.584,334,2.832,335,3.082,336,3.215,337,4.305,338,3.798,339,3.798,340,3.798,341,5.991,342,4.305,343,5.236,344,4.305,345,5.236,346,3.798,347,5.991,348,3.798,349,2.584,350,2.284,351,5.236,352,3.798,353,4.305,354,4.305,355,4.305,356,4.305,357,4.305,358,4.305,359,4.305,360,4.305,361,4.305,362,4.305,363,4.305]],["title/modules/AppModule.html",[284,1.481,364,3.27]],["body/modules/AppModule.html",[0,0.18,3,0.066,4,0.066,5,0.059,12,0.454,18,0.158,19,0.009,22,0.676,34,0.179,36,0.059,39,0.78,40,0.711,47,0.005,48,0.005,58,1.104,88,2.519,166,2.614,185,2.614,193,2.717,200,2.717,245,1.215,262,0.744,284,1.666,285,5.095,286,1.485,287,2.204,290,2.351,291,1.584,292,1.584,294,2.432,295,1.639,296,1.215,300,2.9,349,2.957,350,2.614,364,6.735,365,2.929,366,2.929,367,2.929,368,5.095,369,5.095,370,5.095,371,5.095,372,5.095,373,4.815,374,5.095,375,5.095,376,5.095,377,5.095,378,4.815,379,5.095,380,4.815,381,3.319,382,3.319,383,5.874,384,5.587,385,2.929,386,3.319,387,3.319,388,3.319,389,3.319,390,3.319,391,3.319,392,3.319,393,3.319,394,2.717,395,3.319,396,3.099,397,3.099,398,4.926,399,3.319,400,2.831,401,2.198,402,3.319,403,3.319,404,3.319,405,3.319,406,2.929,407,3.099,408,2.929,409,2.479,410,3.319,411,3.319,412,3.319,413,3.319,414,3.319,415,2.479,416,3.319,417,3.319,418,2.671,419,3.319,420,3.319,421,3.319,422,3.319,423,2.671,424,3.319,425,4.926,426,2.479,427,3.319,428,2.957,429,4.926,430,2.929,431,2.929,432,3.319,433,2.929,434,3.319,435,2.479,436,3.319,437,1.993,438,3.319,439,3.319,440,1.357,441,3.319,442,3.319,443,2.929,444,2.929,445,6.417,446,3.319,447,3.319,448,3.319,449,2.929,450,2.671,451,3.319,452,2.929,453,3.319,454,3.319,455,2.929]],["title/injectables/AppService.html",[302,1.104,379,3.067]],["body/injectables/AppService.html",[0,0.352,3,0.129,4,0.129,5,0.115,10,0.294,13,1.145,19,0.009,20,0.703,23,0.376,30,0.938,34,0.129,36,0.115,47,0.008,48,0.008,262,1.456,278,2.199,302,1.95,303,2.658,379,5.419,456,5.735,457,8.545,458,6.5,459,6.5,460,6.5]],["title/entities/Appeal.html",[185,2.323,461,1.481]],["body/entities/Appeal.html",[0,0.25,3,0.091,4,0.091,5,0.081,10,0.208,11,0.742,18,0.386,19,0.009,20,0.736,21,1.327,22,0.938,23,0.468,34,0.161,35,0.735,36,0.081,40,1.214,46,2.539,47,0.006,48,0.006,58,1.886,64,1.773,98,3.471,141,2.764,167,4.655,176,3.476,185,4.392,186,5.094,253,1.994,297,2.273,298,1.309,329,3.048,440,1.883,461,2.101,462,4.062,463,7.031,464,7.031,465,3.296,466,6.212,467,3.994,468,4.604,469,5.481,470,4.604,471,3.177,472,4.604,473,4.604,474,4.926,475,2.896,476,4.604,477,4.604,478,2.869,479,2.354,480,3.731,481,2.354,482,3.048,483,4.999,484,2.646,485,3.438,486,2.06,487,3.729,488,3.57]],["title/classes/AppealDto.html",[0,0.237,489,3.067]],["body/classes/AppealDto.html",[0,0.412,2,1.167,3,0.125,4,0.125,5,0.112,10,0.285,11,0.907,18,0.362,19,0.009,20,0.769,23,0.439,34,0.125,36,0.112,47,0.008,48,0.008,167,5.396,169,4.325,253,1.87,489,5.321,490,5.563,491,4.593,492,6.306,493,6.306,494,2.821]],["title/controllers/AppealsController.html",[243,1.692,495,3.27]],["body/controllers/AppealsController.html",[0,0.142,3,0.052,4,0.052,5,0.046,10,0.119,12,0.907,13,0.609,18,0.316,19,0.009,23,0.383,28,0.931,29,0.907,30,0.956,34,0.147,36,0.046,40,0.593,42,1.574,47,0.004,48,0.004,53,1.294,58,1.553,169,3.916,185,3.517,243,1.013,245,0.959,247,1.446,251,4.84,252,4.475,253,1.632,256,4.592,257,4.17,258,1.391,259,4.19,260,1.446,261,4.286,262,0.587,263,1.294,264,1.507,265,1.446,268,1.391,270,1.341,271,4.071,278,2.647,280,3.517,281,3.809,282,3.656,283,3.656,315,1.649,329,4.752,489,4.028,495,3.072,496,2.313,497,3.629,498,3.629,499,4.479,500,3.629,501,3.629,502,3.311,503,2.622,504,2.622,505,4.114,506,2.622,507,3.311,508,1.959,509,5.305,510,2.622,511,4.047,512,2.622,513,2.622,514,2.622,515,2.622,516,2.11,517,4.114,518,2.622,519,2.622,520,2.11,521,2.622,522,2.622,523,2.622,524,2.622,525,3.311,526,2.313,527,2.622,528,2.622,529,4.307,530,2.11,531,3.807,532,1.294,533,1.446,534,1.837,535,3.617,536,2.11,537,3.361,538,2.313,539,2.313,540,2.622,541,2.622,542,2.313,543,6.629,544,2.622,545,6.247,546,6.247,547,2.313,548,4.114,549,3.792,550,2.622,551,4.479,552,2.313,553,2.313,554,2.622,555,2.313,556,3.311,557,2.313,558,2.11,559,2.11,560,2.622,561,2.622,562,2.622,563,2.313,564,2.622,565,2.622]],["title/modules/AppealsModule.html",[284,1.481,368,3.067]],["body/modules/AppealsModule.html",[0,0.311,3,0.114,4,0.114,5,0.102,19,0.009,34,0.175,36,0.102,40,1.034,47,0.007,48,0.007,58,1.607,185,3.048,245,2.625,262,1.287,284,2.426,286,2.57,287,3.209,290,3.423,291,2.741,292,2.741,294,3.541,295,2.835,296,2.102,297,2.835,298,1.633,300,2.835,368,6.024,394,3.956,396,3.613,495,5.841,537,5.693,538,5.068,566,5.068,567,5.068,568,5.744,569,5.744,570,5.068,571,4.29,572,5.744]],["title/injectables/AppealsService.html",[302,1.104,537,2.899]],["body/injectables/AppealsService.html",[0,0.13,3,0.048,4,0.048,5,0.042,10,0.108,12,0.916,13,0.567,15,1.48,16,0.664,18,0.319,19,0.009,20,0.652,23,0.387,28,0.94,29,0.916,30,0.919,31,1.633,34,0.152,35,0.382,36,0.042,37,1.3,40,0.965,47,0.004,48,0.004,58,1.712,64,1.507,134,1.437,169,3.551,185,4.056,186,2.409,262,0.536,278,2.486,296,0.876,297,1.182,298,0.681,302,0.965,303,0.979,305,1.713,307,4.282,308,3.009,310,3.351,313,1.321,314,1.321,320,1.678,321,2.608,322,1.321,323,3.81,324,4.398,325,3.957,326,4.187,327,1.788,329,4.43,332,3.081,333,2.872,334,3.583,335,3.448,336,2.859,338,2.113,339,6.133,346,2.113,350,1.271,352,2.113,394,1.321,396,1.506,440,1.956,469,4.221,474,4.187,482,1.585,484,1.376,489,3.829,497,3.378,498,3.378,499,4.221,500,3.378,501,3.378,511,3.964,529,2.538,532,1.89,533,1.321,537,2.535,539,2.113,552,3.378,555,3.378,557,2.113,563,3.378,570,2.113,571,1.788,573,2.113,574,3.829,575,2.394,576,4.221,577,2.394,578,3.829,579,2.394,580,3.829,581,2.394,582,2.394,583,2.394,584,3.829,585,2.394,586,2.394,587,4.66,588,1.678,589,1.506,590,1.788,591,1.788,592,2.394,593,2.113,594,2.394,595,2.394,596,3.587,597,4.784,598,6.691,599,1.585,600,4.784,601,1.376,602,2.394,603,3.378,604,4.221,605,1.678,606,2.394,607,2.113,608,2.394,609,2.113,610,2.113,611,2.394,612,2.394,613,2.394,614,2.394,615,2.113,616,2.394,617,2.394,618,2.394,619,2.394,620,4.22,621,2.639,622,3.573,623,2.859,624,1.678,625,1.506,626,2.394,627,2.394,628,3.829,629,3.829,630,3.829,631,2.394,632,3.829,633,2.394,634,2.394,635,1.788,636,2.394,637,2.113,638,2.394,639,2.113,640,2.113,641,2.394,642,2.113,643,2.113,644,2.394,645,2.113,646,2.394,647,2.113,648,2.394,649,2.394,650,2.394]],["title/controllers/AuthController.html",[243,1.692,651,3.27]],["body/controllers/AuthController.html",[0,0.147,3,0.054,4,0.054,5,0.119,10,0.123,12,0.711,13,0.627,15,0.939,17,1.147,18,0.202,19,0.009,23,0.3,28,0.73,29,0.711,30,0.971,34,0.157,36,0.048,37,0.528,40,1.251,42,1.633,47,0.004,48,0.004,53,1.343,58,1.424,64,1.697,144,3.162,218,3.162,243,1.051,245,0.995,247,1.5,251,4.355,252,3.818,253,1.28,256,4.288,258,1.443,259,3.594,260,1.5,261,4.182,262,0.609,263,1.343,265,2.335,268,2.247,270,1.391,271,2.335,278,2.458,282,4.355,298,0.773,305,1.217,315,1.711,321,1.298,323,2.709,334,1.298,335,1.145,423,3.407,455,2.4,508,1.63,509,4.801,529,4.446,534,1.906,535,2.664,549,2.031,599,2.803,651,3.162,652,2.4,653,2.72,654,4.234,655,4.234,656,5.198,657,2.72,658,2.72,659,2.72,660,8.096,661,3.735,662,3.162,663,2.664,664,4.234,665,5.176,666,4.234,667,3.882,668,2.803,669,3.407,670,3.162,671,3.162,672,1.906,673,3.162,674,3.735,675,2.966,676,2.72,677,5.575,678,2.72,679,2.72,680,3.162,681,4.234,682,5.866,683,4.721,684,5.866,685,5.866,686,4.381,687,2.72,688,2.72,689,2.72,690,3.735,691,3.735,692,4.234,693,4.234,694,4.234,695,2.4,696,2.4,697,3.735,698,2.4,699,2.189,700,3.642,701,2.4,702,3.27,703,2.189,704,2.72,705,2.72,706,2.72,707,2.72,708,2.72,709,2.72,710,2.72,711,2.72,712,2.72,713,4.234,714,4.234,715,5.866,716,3.735,717,3.735,718,4.234,719,3.735,720,2.72,721,2.72,722,5.417,723,5.417,724,4.041,725,2.72,726,2.72,727,2.72,728,4.234,729,2.72,730,2.72,731,2.72,732,2.72,733,2.72,734,2.72,735,2.72,736,2.72,737,2.72,738,2.189]],["title/modules/AuthModule.html",[284,1.481,369,3.067]],["body/modules/AuthModule.html",[0,0.277,3,0.102,4,0.102,5,0.09,19,0.009,34,0.176,36,0.09,40,0.737,47,0.007,48,0.007,245,2.436,262,1.145,284,2.252,286,2.287,287,2.979,290,3.177,291,2.439,292,2.439,294,3.287,295,2.523,298,1.453,300,3.287,369,6.27,378,5.522,380,5.522,651,5.53,702,5.601,703,4.113,739,4.509,740,4.509,741,4.509,742,5.111,743,5.843,744,5.111,745,4.972,746,5.111,747,4.113,748,6.658,749,3.384,750,5.111,751,5.111,752,5.111,753,3.817,754,4.509,755,5.111,756,5.111,757,5.111,758,3.384]],["title/injectables/AuthService.html",[302,1.104,702,2.754]],["body/injectables/AuthService.html",[0,0.2,3,0.073,4,0.073,5,0.065,10,0.167,12,0.935,13,0.787,15,1.466,18,0.326,19,0.009,20,0.686,23,0.395,28,0.96,29,0.935,30,1.122,31,1.136,34,0.155,35,0.588,36,0.065,37,1.033,40,1.284,44,1.816,47,0.005,48,0.005,53,2.624,259,3.19,262,0.825,278,2.449,296,1.348,298,1.047,302,1.34,303,1.506,305,2.378,307,3.767,313,2.031,314,2.031,321,2.976,322,2.031,323,3.154,330,3.249,333,2.211,334,1.758,335,2.238,437,4.944,508,1.667,596,3.744,625,2.317,635,2.751,661,4.69,665,6.025,669,4.278,670,3.97,671,3.97,672,3.724,673,5.1,675,4.784,700,4.784,701,3.249,702,3.344,724,4.869,747,2.964,759,3.249,760,5.315,761,5.315,762,3.683,763,7.778,764,5.019,765,3.683,766,5.315,767,5.315,768,3.683,769,5.315,770,3.683,771,5.315,772,5.315,773,5.315,774,6.829,775,3.683,776,3.97,777,4.69,778,4.69,779,5.315,780,4.69,781,2.58,782,3.683,783,3.683,784,3.683,785,3.683,786,3.683,787,5.315,788,3.683,789,3.683,790,5.503,791,2.964,792,3.683,793,3.683,794,3.683,795,3.683,796,3.683]],["title/classes/BaseEntity.html",[0,0.237,478,2.022]],["body/classes/BaseEntity.html",[0,0.452,2,1.116,3,0.12,4,0.12,5,0.107,10,0.273,11,0.882,18,0.352,19,0.009,20,0.758,23,0.427,34,0.12,35,0.963,36,0.107,47,0.007,48,0.007,59,4.24,62,4.592,253,1.82,440,2.465,461,2.703,478,3.413,508,2.317,797,5.318,798,7.991,799,7.991,800,6.027,801,7.991,802,6.027,803,6.027]],["title/entities/Block.html",[193,2.415,461,1.481]],["body/entities/Block.html",[0,0.288,3,0.106,4,0.106,5,0.094,10,0.24,11,0.815,18,0.36,19,0.009,20,0.621,23,0.436,34,0.15,35,0.848,36,0.094,40,1.307,47,0.007,48,0.007,64,1.902,176,3.676,193,4.39,253,1.857,298,1.509,440,2.171,461,2.308,465,3.621,467,4.223,471,3.49,478,3.152,479,2.716,480,4.001,481,2.716,486,2.376,487,4.096,488,3.921,804,4.685,805,7.541,806,6.653,807,6.824,808,5.31,809,6.824,810,5.31,811,5.31,812,6.824,813,5.492]],["title/controllers/BlockController.html",[243,1.692,814,3.27]],["body/controllers/BlockController.html",[0,0.258,3,0.094,4,0.094,5,0.084,10,0.215,12,0.869,13,0.94,18,0.303,19,0.009,20,0.743,23,0.367,28,0.892,29,0.869,30,0.916,34,0.152,36,0.084,40,0.686,47,0.006,48,0.006,58,1.065,64,2.061,193,2.623,243,1.837,245,1.74,247,2.623,251,4.736,252,4.268,253,1.563,256,4.206,257,3.994,258,2.523,259,2.432,260,2.623,261,2.432,262,1.065,263,2.347,264,2.732,265,2.623,268,2.523,270,2.432,271,3.501,274,4.741,278,2.579,280,3.368,281,3.648,282,3.942,283,3.501,558,5.109,814,4.741,815,4.195,816,5.601,817,5.601,818,4.755,819,4.755,820,7.626,821,4.755,822,4.755,823,4.755,824,4.755,825,4.731,826,4.195,827,4.755,828,4.755,829,4.755,830,6.348,831,4.195,832,4.755,833,4.755,834,4.755,835,4.755,836,4.195,837,4.195,838,3.148,839,4.755]],["title/modules/BlockModule.html",[284,1.481,370,3.067]],["body/modules/BlockModule.html",[0,0.322,3,0.118,4,0.118,5,0.105,19,0.009,34,0.172,36,0.105,40,1.056,47,0.007,48,0.007,193,3.273,245,2.678,262,1.33,284,2.476,286,2.655,287,3.275,290,3.493,291,2.832,292,2.832,294,3.613,295,2.93,296,2.172,298,1.687,300,2.93,370,6.072,814,5.927,825,5.739,826,5.236,840,5.236,841,5.236,842,5.935,843,5.935,844,5.236,845,5.935]],["title/injectables/BlockService.html",[302,1.104,825,2.899]],["body/injectables/BlockService.html",[0,0.211,3,0.077,4,0.077,5,0.069,10,0.176,12,0.88,13,0.818,15,1.388,18,0.307,19,0.009,20,0.699,23,0.371,28,0.903,29,0.88,30,0.797,31,1.495,34,0.147,35,0.621,36,0.069,37,1.492,40,1.14,47,0.006,48,0.006,64,2.072,193,3.545,262,0.871,278,1.869,296,1.422,298,1.105,302,1.393,303,1.589,305,2.472,307,4.359,308,4.043,313,2.144,314,2.144,321,2.636,322,2.144,323,3.414,325,3.658,333,4.201,334,3.854,335,3.46,336,4.126,349,2.333,350,2.062,596,4.201,599,2.573,624,3.87,625,4.833,806,5.67,813,4.446,816,4.874,817,4.874,825,3.658,831,4.874,836,4.874,844,3.429,846,3.429,847,3.887,848,3.887,849,5.524,850,3.887,851,3.887,852,3.429,853,3.887,854,6.427,855,5.524,856,5.524,857,4.446,858,5.524,859,3.887,860,5.524,861,4.874,862,3.887,863,3.887,864,3.887,865,3.887,866,5.524,867,5.524,868,3.887,869,5.524,870,6.427,871,6.427,872,3.887,873,3.887,874,3.887]],["title/entities/Comment.html",[166,2.323,461,1.481]],["body/entities/Comment.html",[0,0.276,3,0.101,4,0.101,5,0.09,10,0.231,11,0.794,18,0.374,19,0.009,20,0.713,23,0.453,34,0.156,35,0.815,36,0.09,40,1.242,46,2.319,47,0.007,48,0.007,58,1.982,64,1.865,166,4.159,167,4.897,176,3.62,253,1.93,298,1.45,328,4.402,440,2.085,461,2.249,465,3.528,467,4.159,471,3.4,478,3.07,479,2.608,480,3.925,481,2.608,486,2.282,487,3.991,488,3.82,875,4.499,876,6.526,877,6.648,878,5.1,879,5.1,880,6.648,881,5.1,882,5.1,883,4.104,884,5.1]],["title/classes/CreateCommentDto.html",[0,0.237,885,3.27]],["body/classes/CreateCommentDto.html",[0,0.418,2,1.197,3,0.128,4,0.128,5,0.114,10,0.292,11,0.92,18,0.308,19,0.009,20,0.701,23,0.373,34,0.128,36,0.114,47,0.008,48,0.008,167,5.454,253,1.592,491,4.09,494,2.892,885,5.757,886,6.801,887,5.202,888,6.464,889,6.464,890,5.703,891,5.703]],["title/classes/CreatePostDto.html",[0,0.237,892,3.27]],["body/classes/CreatePostDto.html",[0,0.368,2,0.976,3,0.105,4,0.105,5,0.093,10,0.239,11,0.811,18,0.418,19,0.009,20,0.803,23,0.486,34,0.135,36,0.093,47,0.007,48,0.007,58,1.522,66,4.977,67,4.977,68,6.049,69,4.977,70,4.833,253,2.023,491,4.686,494,2.36,508,1.653,680,5.074,887,4.244,892,5.074,893,7.549,894,4.76,895,5.274,896,5.274,897,5.274,898,5.274,899,5.274,900,4.653,901,5.274,902,3.695,903,3.939,904,4.653]],["title/classes/CreateScrapBookDto.html",[0,0.237,905,3.27]],["body/classes/CreateScrapBookDto.html",[0,0.38,2,1.025,3,0.11,4,0.11,5,0.098,10,0.251,11,0.837,18,0.386,19,0.009,20,0.735,23,0.467,29,0.758,34,0.153,36,0.098,47,0.007,48,0.007,58,1.723,66,5.092,69,5.092,70,4.895,88,3.585,253,1.894,491,4.52,494,2.478,508,1.736,601,4.42,680,5.235,894,4.911,900,4.886,902,3.88,903,4.136,904,4.886,905,5.235,906,7.358,907,4.886,908,5.538,909,5.538,910,5.538,911,5.538,912,4.886,913,5.538]],["title/injectables/EncryptionService.html",[302,1.104,781,3.067]],["body/injectables/EncryptionService.html",[0,0.258,3,0.095,4,0.095,5,0.084,10,0.216,12,0.87,13,0.941,15,1.478,18,0.303,19,0.009,20,0.781,23,0.367,28,0.893,29,0.87,30,1.101,31,1.631,34,0.126,36,0.084,37,1.235,47,0.006,48,0.006,259,3.658,262,1.067,278,2.15,302,1.603,303,1.948,323,2.2,349,3.816,350,3.373,437,5.428,444,5.608,508,2.243,716,6.733,717,5.608,781,4.453,914,4.204,915,4.747,916,6.357,917,6.357,918,6.357,919,6.357,920,6.357,921,7.951,922,4.765,923,6.357,924,7.632,925,7.951,926,6.357,927,6.357,928,4.765,929,6.357,930,6.357,931,4.765,932,4.204,933,6.357,934,3.834,935,4.765,936,4.765]],["title/controllers/FeedController.html",[243,1.692,937,3.27]],["body/controllers/FeedController.html",[0,0.293,3,0.107,4,0.107,5,0.096,10,0.245,12,0.74,13,1.022,18,0.258,19,0.009,23,0.312,28,0.76,29,0.74,30,0.78,34,0.165,36,0.096,47,0.007,48,0.007,243,2.09,245,1.979,247,2.983,251,4.567,252,4.098,253,1.332,256,3.809,257,3.403,258,2.87,260,2.983,261,2.766,262,1.212,263,2.67,264,3.108,265,2.983,268,2.87,270,2.766,271,2.983,278,2.336,280,2.87,281,3.108,282,2.983,283,2.983,511,4.158,531,4.572,532,2.67,533,2.983,937,5.157,938,4.772,939,5.409,940,6.093,941,5.409,942,5.409,943,5.409,944,5.037,945,4.772,946,5.409,947,5.409,948,5.409,949,5.409,950,4.353,951,4.353]],["title/modules/FeedModule.html",[284,1.481,371,3.067]],["body/modules/FeedModule.html",[0,0.322,3,0.118,4,0.118,5,0.105,19,0.009,34,0.172,36,0.105,40,1.056,47,0.007,48,0.007,58,1.33,245,2.678,262,1.33,284,2.476,286,2.655,287,3.275,290,3.493,291,2.832,292,2.832,294,3.613,295,2.93,296,2.172,297,2.93,298,1.687,300,2.93,301,4.776,371,6.072,937,5.927,944,5.739,945,5.236,952,5.236,953,5.236,954,5.935,955,5.935]],["title/injectables/FeedService.html",[302,1.104,944,2.899]],["body/injectables/FeedService.html",[0,0.233,3,0.086,4,0.086,5,0.076,10,0.195,12,0.812,13,0.878,15,1.227,18,0.283,19,0.009,23,0.343,28,0.834,29,0.812,30,0.621,31,1.268,34,0.167,35,0.688,36,0.076,37,1.153,40,0.856,47,0.006,48,0.006,58,1.329,64,1.086,70,3.41,262,0.964,278,1.456,296,1.575,297,2.125,298,1.224,302,1.496,303,1.76,305,2.655,306,3.798,307,4.486,308,4.272,310,4.157,313,2.375,314,2.375,320,3.016,321,2.832,322,2.375,323,3.665,325,3.929,326,3.016,328,2.85,333,2.584,334,2.054,335,3.233,440,1.76,511,3.954,532,2.929,533,2.375,587,4.608,588,3.016,589,2.708,590,3.215,596,2.584,601,4.412,609,3.798,610,3.798,620,3.929,621,2.375,622,3.215,623,4.432,624,3.016,625,2.708,903,3.215,940,5.236,944,3.929,956,3.798,957,4.305,958,5.934,959,4.305,960,2.85,961,4.305,962,4.305,963,4.305,964,4.305,965,4.305,966,4.305,967,4.305,968,4.305,969,4.305,970,3.215,971,4.305,972,4.305,973,4.305,974,4.305,975,4.305,976,4.305,977,4.305,978,5.934,979,4.305,980,5.236,981,2.474,982,5.236,983,4.305]],["title/injectables/FirebaseStorageService.html",[302,1.104,984,2.899]],["body/injectables/FirebaseStorageService.html",[0,0.126,3,0.046,4,0.046,5,0.095,10,0.106,11,0.448,12,0.942,13,0.555,15,1.504,18,0.316,19,0.009,20,0.8,21,0.498,22,0.475,23,0.398,28,0.93,29,0.906,30,1.025,34,0.107,36,0.041,37,1.498,40,0.908,47,0.004,48,0.004,63,1.677,64,1.839,67,4.17,80,2.103,81,2.814,89,5.266,158,6.108,169,3.77,259,3.016,262,0.522,278,1.995,280,1.989,302,0.945,303,0.954,323,3.792,334,1.789,335,1.979,508,1.975,509,2.957,663,2.358,672,4.132,674,3.307,719,4.749,915,3.51,984,2.482,985,5.306,986,2.057,987,3.51,988,5.717,989,6.884,990,3.748,991,3.748,992,3.748,993,3.748,994,3.748,995,3.748,996,3.748,997,3.748,998,2.332,999,3.748,1000,2.332,1001,3.748,1002,2.332,1003,3.748,1004,2.332,1005,3.748,1006,5.383,1007,2.332,1008,5.897,1009,8.146,1010,5.383,1011,3.748,1012,6.251,1013,6.62,1014,3.804,1015,3.748,1016,2.332,1017,5.383,1018,3.748,1019,2.332,1020,3.748,1021,4.7,1022,3.748,1023,5.383,1024,3.748,1025,2.332,1026,6.62,1027,5.383,1028,1.741,1029,2.057,1030,6.299,1031,4.7,1032,2.057,1033,6.299,1034,2.332,1035,2.332,1036,2.332,1037,2.332,1038,2.332,1039,2.057,1040,2.332,1041,4.7,1042,5.897,1043,5.203,1044,5.897,1045,5.897,1046,7.291,1047,4.7,1048,2.332,1049,2.332,1050,5.383,1051,3.748,1052,6.299,1053,6.299,1054,3.307,1055,2.332,1056,3.748,1057,2.332,1058,3.307,1059,3.748,1060,3.748,1061,3.748,1062,3.748]],["title/entities/Follow.html",[200,2.415,461,1.481]],["body/entities/Follow.html",[0,0.293,3,0.107,4,0.107,5,0.096,10,0.245,11,0.824,18,0.363,19,0.009,20,0.628,23,0.439,34,0.151,35,0.864,36,0.096,40,1.3,47,0.007,48,0.007,64,1.918,176,3.701,200,3.809,253,1.873,298,1.537,440,2.212,461,2.336,465,3.664,467,4.252,471,3.531,478,3.189,479,2.766,480,4.036,481,2.766,486,2.42,960,3.581,1063,4.772,1064,5.985,1065,6.712,1066,6.905,1067,5.409,1068,6.905,1069,5.409,1070,5.409,1071,4.772,1072,4.772]],["title/controllers/FollowController.html",[243,1.692,1073,3.27]],["body/controllers/FollowController.html",[0,0.143,3,0.052,4,0.052,5,0.047,10,0.119,12,0.983,13,0.611,15,1.555,18,0.343,19,0.009,20,0.712,23,0.415,28,1.01,29,0.983,30,1.036,34,0.132,36,0.047,47,0.004,48,0.004,58,0.589,64,1.674,80,1.177,200,3.661,243,1.017,245,0.963,247,1.451,251,4.877,252,4.418,253,1.769,256,4.523,258,1.396,259,1.345,260,1.451,261,3.395,262,0.589,263,1.299,264,1.512,265,1.451,268,1.396,270,1.345,271,3.963,274,3.08,278,2.773,280,3.813,281,4.129,282,4.17,283,3.963,507,2.117,511,4.177,525,2.117,530,2.117,531,4.143,532,1.299,533,1.451,547,2.321,553,2.321,558,4.636,837,3.639,838,2.731,960,1.742,1073,3.08,1074,2.321,1075,3.639,1076,4.489,1077,4.489,1078,4.489,1079,4.489,1080,3.639,1081,3.639,1082,4.489,1083,2.631,1084,6.638,1085,2.631,1086,5.761,1087,2.631,1088,2.631,1089,2.631,1090,2.631,1091,2.631,1092,2.631,1093,2.631,1094,2.631,1095,4.125,1096,5.857,1097,5.088,1098,2.631,1099,2.631,1100,4.489,1101,2.631,1102,2.631,1103,2.631,1104,2.631,1105,2.631,1106,2.631,1107,4.125,1108,2.631,1109,2.631,1110,2.631,1111,2.631,1112,2.117,1113,3.369,1114,2.321,1115,2.631,1116,2.631,1117,2.631,1118,7.185,1119,2.321,1120,5.857,1121,6.638,1122,2.631,1123,4.125,1124,2.631,1125,2.631,1126,2.631,1127,2.117,1128,2.631,1129,2.631,1130,2.321,1131,2.631,1132,2.117,1133,2.631,1134,2.631,1135,2.631,1136,2.631,1137,4.125,1138,2.631,1139,2.631]],["title/modules/FollowModule.html",[284,1.481,372,3.067]],["body/modules/FollowModule.html",[0,0.316,3,0.116,4,0.116,5,0.103,19,0.009,34,0.174,36,0.103,40,0.841,47,0.007,48,0.007,200,3.993,245,2.649,262,1.306,284,2.449,286,2.609,287,3.239,290,3.455,291,2.782,292,2.782,294,3.574,295,2.878,296,2.133,298,1.657,300,2.878,372,6.046,407,4.554,409,4.354,758,3.86,1073,5.88,1113,5.714,1114,5.144,1140,5.144,1141,5.144,1142,5.83,1143,5.144,1144,5.144,1145,5.83]],["title/entities/FollowRequest.html",[407,2.754,461,1.481]],["body/entities/FollowRequest.html",[0,0.271,3,0.099,4,0.099,5,0.088,10,0.226,11,0.784,18,0.371,19,0.009,20,0.597,21,1.402,22,1.019,23,0.449,34,0.155,35,0.799,36,0.088,40,1.287,46,2.058,47,0.007,48,0.007,64,1.848,98,3.617,141,3.002,176,3.593,253,1.916,298,1.421,407,4.129,440,2.045,461,2.22,465,3.483,467,4.128,471,3.357,475,3.146,478,3.031,479,2.557,480,3.888,481,2.557,484,2.874,486,2.238,960,3.311,1064,3.735,1071,4.412,1072,4.412,1146,7.127,1147,4.412,1148,6.464,1149,6.464,1150,5.001,1151,6.564,1152,5.001,1153,6.564,1154,5.001,1155,5.896,1156,6.464,1157,5.001,1158,5.001]],["title/injectables/FollowService.html",[302,1.104,1113,2.899]],["body/injectables/FollowService.html",[0,0.103,3,0.038,4,0.038,5,0.034,10,0.086,12,0.904,13,0.471,15,1.478,18,0.315,19,0.009,20,0.651,23,0.382,28,0.928,29,0.904,30,0.918,31,1.632,34,0.135,35,0.305,36,0.034,37,1.532,40,1.137,47,0.003,48,0.003,64,2.006,98,1.57,200,3.861,261,3.579,262,0.427,278,2.306,296,0.698,298,0.542,302,0.802,303,0.78,305,1.423,307,3.76,313,1.052,314,1.052,321,1.951,322,1.052,323,3.857,325,4.213,333,3.437,334,3.88,335,3.585,336,3.959,349,1.145,350,1.012,407,4.157,409,1.425,440,1.951,484,1.096,507,1.535,511,4.003,525,1.535,532,1.57,533,1.052,587,4.638,588,1.337,589,1.2,590,1.425,596,4.092,599,3.159,620,4.213,621,2.632,622,3.563,623,4.752,625,4.003,695,1.683,764,2.559,852,1.683,857,2.559,960,3.51,981,2.742,1064,1.425,1065,1.683,1075,2.806,1076,2.806,1077,2.806,1078,3.608,1079,3.608,1080,2.806,1081,2.806,1082,3.608,1113,2.106,1119,2.806,1127,2.559,1130,2.806,1132,1.535,1143,1.683,1144,1.683,1148,2.806,1149,2.806,1155,1.535,1156,1.683,1159,1.683,1160,1.683,1161,4.089,1162,4.089,1163,1.908,1164,3.18,1165,6.608,1166,1.908,1167,3.18,1168,1.908,1169,3.18,1170,1.908,1171,1.908,1172,1.908,1173,1.908,1174,1.908,1175,3.18,1176,1.908,1177,1.908,1178,1.908,1179,1.683,1180,1.425,1181,1.908,1182,1.908,1183,3.18,1184,3.18,1185,5.614,1186,4.089,1187,2.806,1188,3.18,1189,5.302,1190,1.908,1191,1.908,1192,4.089,1193,5.302,1194,1.908,1195,4.089,1196,4.21,1197,2.806,1198,1.908,1199,3.18,1200,4.771,1201,3.18,1202,3.18,1203,2.106,1204,4.089,1205,4.771,1206,2.806,1207,4.089,1208,3.18,1209,2.806,1210,2.806,1211,1.908,1212,3.18,1213,1.908,1214,3.18,1215,1.908,1216,1.908,1217,1.908,1218,3.159,1219,1.908,1220,3.18,1221,1.908,1222,1.683,1223,1.908,1224,1.908,1225,1.908,1226,1.908,1227,1.908,1228,3.18,1229,3.18,1230,3.18,1231,1.908,1232,4.089,1233,3.18,1234,1.908,1235,1.908,1236,3.18,1237,3.18,1238,1.908,1239,1.908,1240,1.908]],["title/injectables/JwtAuthGuard.html",[263,2.161,302,1.104]],["body/injectables/JwtAuthGuard.html",[0,0.364,3,0.133,4,0.133,5,0.119,19,0.009,34,0.157,36,0.119,47,0.008,48,0.008,262,1.503,263,3.889,302,1.987,303,2.743,486,3.001,749,4.441,1241,5.917,1242,5.397,1243,5.917,1244,6.707]],["title/injectables/JwtStrategy.html",[302,1.104,743,3.067]],["body/injectables/JwtStrategy.html",[0,0.301,3,0.11,4,0.11,5,0.098,10,0.251,12,0.76,13,1.039,15,1.391,18,0.265,19,0.009,23,0.406,28,0.78,29,0.76,30,0.801,34,0.161,36,0.098,47,0.007,48,0.007,53,2.741,64,1.4,262,1.244,278,1.878,302,1.77,303,2.27,305,3.445,350,2.946,423,4.467,486,2.484,671,4.146,672,3.889,673,4.146,675,5.668,724,3.332,743,4.918,749,3.676,753,4.146,754,4.898,776,5.243,791,4.467,1245,4.898,1246,5.551,1247,7.02,1248,5.551,1249,5.551,1250,5.65,1251,4.898,1252,4.898,1253,4.898,1254,5.551,1255,5.551,1256,5.551,1257,5.551,1258,5.551,1259,5.551,1260,4.467,1261,5.551,1262,4.467,1263,5.551,1264,5.551,1265,5.551,1266,5.551,1267,5.551,1268,5.551,1269,5.551,1270,5.551]],["title/entities/Like.html",[461,1.855]],["body/entities/Like.html",[0,0.288,3,0.106,4,0.106,5,0.094,10,0.241,11,0.816,18,0.36,19,0.009,20,0.622,23,0.436,34,0.158,35,0.85,36,0.094,40,1.253,47,0.007,48,0.007,58,1.889,64,1.904,176,3.679,253,1.859,298,1.513,440,2.176,461,2.312,465,3.626,467,4.227,471,3.495,478,3.156,479,2.722,480,4.006,481,2.722,486,2.381,487,3.195,488,3.058,883,4.283,970,3.975,1271,7.028,1272,4.696,1273,7.549,1274,7.549,1275,5.322,1276,6.834,1277,5.322,1278,6.834,1279,5.322,1280,5.322]],["title/injectables/LocalAuthGuard.html",[302,1.104,667,3.27]],["body/injectables/LocalAuthGuard.html",[0,0.364,3,0.133,4,0.133,5,0.119,19,0.009,34,0.157,36,0.119,47,0.008,48,0.008,262,1.503,302,1.987,303,2.743,486,3.001,667,5.884,749,4.441,1242,5.397,1243,5.917,1281,5.917,1282,6.707]],["title/injectables/LocalStrategy.html",[302,1.104,380,2.899]],["body/injectables/LocalStrategy.html",[0,0.261,3,0.096,4,0.096,5,0.085,10,0.218,12,0.876,13,0.947,15,1.299,18,0.305,19,0.009,20,0.746,23,0.37,28,0.899,29,0.876,30,0.923,31,1.368,34,0.152,36,0.085,37,0.935,40,1.28,47,0.006,48,0.006,259,3.273,262,1.079,270,2.462,278,1.628,302,1.614,303,1.969,305,2.154,323,2.223,334,2.297,335,2.027,380,4.238,437,5.261,486,2.154,508,2.007,596,3.842,669,5.151,670,5.37,671,5.37,702,5.161,703,3.874,724,4.789,749,3.187,776,4.78,777,5.647,778,5.647,780,5.647,1250,5.787,1251,4.247,1252,4.247,1253,4.247,1283,4.247,1284,4.814,1285,4.814,1286,6.401,1287,4.814,1288,5.647,1289,6.401,1290,7.663,1291,4.814,1292,4.814]],["title/controllers/NotificationController.html",[243,1.692,1293,3.27]],["body/controllers/NotificationController.html",[0,0.246,3,0.09,4,0.09,5,0.08,10,0.205,12,0.842,13,0.911,18,0.294,19,0.009,20,0.635,23,0.356,28,0.865,29,0.842,30,0.888,34,0.167,36,0.08,42,2.726,47,0.006,48,0.006,53,2.242,58,1.017,212,5.589,243,1.755,245,1.662,247,2.505,251,4.691,252,4.218,253,1.516,256,4.128,257,3.872,258,2.409,259,2.322,260,2.505,261,2.322,262,1.017,263,2.242,264,2.609,265,2.505,268,2.409,270,2.322,271,3.851,278,2.531,280,3.266,281,3.537,282,4.128,283,3.395,315,2.857,529,4.151,534,3.181,535,3.872,536,3.654,549,3.391,675,3.181,838,4.075,1100,4.006,1293,4.596,1294,4.006,1295,5.43,1296,5.43,1297,5.43,1298,4.541,1299,5.243,1300,4.541,1301,4.541,1302,4.541,1303,4.541,1304,4.541,1305,4.006,1306,4.006,1307,4.392,1308,4.006,1309,4.541,1310,4.541,1311,4.541,1312,4.541,1313,5.43,1314,4.541,1315,4.541,1316,4.541,1317,4.541,1318,4.541,1319,4.541]],["title/modules/NotificationModule.html",[284,1.481,373,2.899]],["body/modules/NotificationModule.html",[0,0.318,3,0.116,4,0.116,5,0.104,19,0.009,34,0.168,36,0.104,40,0.845,47,0.007,48,0.007,245,2.657,262,1.313,284,2.456,286,2.622,287,3.249,290,3.465,291,2.796,292,2.796,294,3.585,295,2.893,296,2.144,298,1.666,300,2.893,373,5.8,745,5.424,758,3.88,1293,5.894,1307,5.707,1308,5.17,1320,5.17,1321,5.17,1322,5.17,1323,5.86,1324,5.86]],["title/injectables/NotificationService.html",[302,1.104,1307,2.754]],["body/injectables/NotificationService.html",[0,0.139,3,0.051,4,0.051,5,0.045,10,0.116,12,0.941,13,0.599,15,1.46,18,0.328,19,0.009,20,0.789,23,0.397,28,0.966,29,0.941,30,0.947,31,1.663,34,0.146,35,0.41,36,0.045,37,1.384,40,0.82,47,0.004,48,0.004,53,3.053,64,1.02,89,3.575,163,2.561,212,5.813,215,5.321,262,0.575,278,2.734,296,0.939,298,0.729,302,1.02,303,1.05,305,1.81,307,3.135,313,1.416,314,1.416,315,1.615,321,1.225,322,1.416,323,3.692,334,2.951,335,2.604,529,4.586,675,3.981,764,3.256,791,5.533,981,2.877,1029,2.264,1160,2.264,1180,1.917,1185,2.264,1218,3.315,1295,6.066,1296,3.569,1297,3.569,1299,4.332,1305,2.264,1306,2.264,1307,2.545,1325,2.264,1326,4.046,1327,4.046,1328,4.046,1329,3.569,1330,2.567,1331,4.046,1332,2.567,1333,4.046,1334,2.567,1335,7.317,1336,4.046,1337,2.567,1338,4.046,1339,2.567,1340,4.046,1341,2.567,1342,4.046,1343,2.567,1344,2.065,1345,2.065,1346,2.065,1347,3.256,1348,2.065,1349,2.264,1350,2.264,1351,2.567,1352,5.683,1353,2.567,1354,4.046,1355,2.567,1356,2.567,1357,2.567,1358,5.007,1359,5.683,1360,2.567,1361,2.567,1362,2.567,1363,2.567,1364,2.567,1365,2.567,1366,5.007,1367,5.007,1368,4.046,1369,4.046,1370,4.418,1371,6.569,1372,5.683,1373,5.683,1374,6.569,1375,5.007,1376,5.007,1377,5.007,1378,5.683,1379,5.007,1380,5.007,1381,4.046,1382,2.567,1383,4.046,1384,2.567,1385,2.567]],["title/classes/PageDto.html",[0,0.237,589,2.754]],["body/classes/PageDto.html",[0,0.381,2,1.03,3,0.111,4,0.111,5,0.098,10,0.252,11,0.839,12,0.762,18,0.368,19,0.009,23,0.445,28,0.782,29,0.762,34,0.14,36,0.098,47,0.007,48,0.007,253,1.37,305,2.49,494,2.49,508,2.204,509,3.501,587,5.12,588,3.899,589,5.095,1386,4.91,1387,5.976,1388,7.642,1389,6.469,1390,7.031,1391,8.352,1392,7.031,1393,7.708,1394,5.565,1395,4.156,1396,5.565,1397,4.91,1398,5.565,1399,5.565]],["title/classes/PageMetaDto.html",[0,0.237,587,2.628]],["body/classes/PageMetaDto.html",[0,0.392,2,0.901,3,0.097,4,0.097,5,0.086,10,0.22,11,0.769,12,0.666,18,0.4,19,0.009,23,0.485,28,0.684,29,0.666,34,0.097,36,0.086,47,0.006,48,0.006,305,2.884,508,1.525,511,2.321,532,4.207,587,4.619,620,5.301,621,4.7,980,4.292,981,2.795,982,4.292,1387,6.349,1389,3.633,1395,5.747,1397,5.686,1400,4.292,1401,4.055,1402,5.686,1403,5.686,1404,7.228,1405,7.228,1406,7.228,1407,6.377,1408,4.865,1409,5.747,1410,6.445,1411,5.391,1412,4.865,1413,4.865,1414,4.865,1415,4.865,1416,4.865,1417,4.865,1418,6.377,1419,5.686,1420,4.865,1421,4.865,1422,4.865,1423,4.865,1424,4.865]],["title/interfaces/PageMetaDtoParameters.html",[1409,3.27,1425,3.27]],["body/interfaces/PageMetaDtoParameters.html",[3,0.122,4,0.122,5,0.109,10,0.278,11,0.894,18,0.357,19,0.009,28,0.865,34,0.122,36,0.109,47,0.008,48,0.008,508,2.347,511,4.262,532,3.039,533,3.395,620,5.556,621,4.449,663,3.872,1389,6.024,1395,6.024,1409,6.267,1425,4.597,1426,6.155,1427,5.431,1428,6.155]],["title/classes/PageOptionsDto.html",[0,0.237,511,2.089]],["body/classes/PageOptionsDto.html",[0,0.337,2,0.854,3,0.092,4,0.092,5,0.082,10,0.209,11,0.743,18,0.336,19,0.009,21,1.61,22,1.434,23,0.435,29,1.109,30,0.665,34,0.124,36,0.082,47,0.008,48,0.006,253,1.733,278,1.56,443,4.07,494,2.064,508,2.596,511,3.595,532,3.882,621,4.707,663,2.902,894,3.232,902,3.232,934,5.664,981,4.329,1387,5.978,1395,6.051,1407,6.209,1418,4.07,1419,4.07,1429,4.07,1430,7.307,1431,6.22,1432,7.533,1433,6.22,1434,4.613,1435,4.613,1436,4.613,1437,4.613,1438,4.613,1439,4.613,1440,4.613,1441,4.613,1442,7.038,1443,6.062,1444,4.613,1445,4.07,1446,4.613,1447,4.613,1448,4.613,1449,4.613,1450,4.613,1451,3.712,1452,4.07,1453,4.613,1454,6.22,1455,4.613,1456,4.613]],["title/controllers/PaymentController.html",[243,1.692,1457,3.27]],["body/controllers/PaymentController.html",[0,0.189,3,0.069,4,0.069,5,0.062,10,0.158,12,0.97,13,0.756,15,1.546,18,0.338,19,0.009,20,0.673,23,0.409,28,0.996,29,0.97,30,1.022,34,0.141,36,0.062,47,0.005,48,0.005,58,0.782,243,1.348,245,1.277,247,1.925,251,4.864,252,4.404,253,1.745,256,4.548,258,1.851,260,1.925,261,3.093,262,0.782,263,1.722,264,2.005,265,1.925,268,1.851,270,1.784,271,2.819,278,2.751,280,3.76,281,4.072,282,4.487,283,3.909,531,2.31,790,5.335,838,4.692,1012,3.817,1112,2.808,1120,5.335,1387,2.444,1457,3.817,1458,3.078,1459,6.252,1460,4.509,1461,5.335,1462,5.335,1463,4.509,1464,4.509,1465,3.489,1466,6.657,1467,5.111,1468,4.509,1469,3.489,1470,3.489,1471,6.533,1472,5.111,1473,3.489,1474,3.489,1475,5.111,1476,3.489,1477,3.489,1478,3.489,1479,3.489,1480,3.489,1481,3.489,1482,3.489,1483,4.004,1484,3.078,1485,3.489,1486,3.489,1487,3.489,1488,7.086,1489,3.489,1490,6.047,1491,3.489,1492,3.489,1493,3.489,1494,5.111,1495,3.078,1496,3.078,1497,3.489,1498,3.489,1499,3.489,1500,3.489,1501,3.489]],["title/modules/PaymentModule.html",[284,1.481,374,3.067]],["body/modules/PaymentModule.html",[0,0.314,3,0.115,4,0.115,5,0.103,19,0.009,34,0.171,36,0.103,40,0.837,47,0.007,48,0.007,245,2.641,262,1.3,284,2.441,286,2.596,287,3.229,290,3.444,291,2.768,292,2.768,294,3.563,295,2.864,296,2.123,298,1.649,300,3.563,373,5.707,374,6.189,758,3.841,1457,5.867,1483,5.707,1484,5.118,1502,5.118,1503,5.801,1504,5.118,1505,5.801,1506,5.801,1507,5.801]],["title/injectables/PaymentService.html",[302,1.104,1483,2.899]],["body/injectables/PaymentService.html",[0,0.133,3,0.049,4,0.049,5,0.043,10,0.111,11,0.465,12,0.924,13,0.577,15,1.429,18,0.334,19,0.009,20,0.687,21,1.182,22,0.989,23,0.417,28,0.904,29,0.881,30,0.871,31,1.442,34,0.139,35,0.391,36,0.043,37,1.57,40,1.041,47,0.004,48,0.004,64,0.982,126,3.135,163,1.252,234,1.97,235,5.638,236,4.806,262,0.548,278,2.283,280,2.575,283,1.35,296,0.896,298,0.696,302,0.982,303,1.001,305,1.743,307,3.052,308,2.451,313,1.35,314,1.35,321,3.605,322,1.35,323,3.766,333,2.339,334,2.641,335,2.842,349,3.322,350,2.067,529,2.575,596,2.339,599,1.62,623,4.133,624,4.233,625,1.54,635,2.91,672,1.715,686,2.91,724,1.469,981,1.406,1012,3.625,1054,2.159,1180,1.828,1307,4.246,1313,4.282,1329,3.437,1387,1.715,1451,3.135,1459,4.282,1460,3.437,1461,3.437,1462,3.437,1463,3.437,1464,3.437,1471,3.437,1483,2.58,1495,2.159,1496,3.437,1508,2.159,1509,4.854,1510,4.512,1511,2.159,1512,3.896,1513,3.896,1514,2.447,1515,3.896,1516,2.447,1517,2.447,1518,3.896,1519,2.447,1520,3.896,1521,2.447,1522,3.896,1523,2.447,1524,3.437,1525,3.437,1526,3.437,1527,3.135,1528,3.437,1529,2.447,1530,3.896,1531,2.447,1532,3.437,1533,2.159,1534,2.159,1535,2.447,1536,2.159,1537,3.896,1538,4.854,1539,6.436,1540,2.447,1541,4.854,1542,4.882,1543,4.854,1544,2.447,1545,2.447,1546,2.447,1547,2.447,1548,2.447,1549,2.447,1550,2.447,1551,5.534,1552,5.534,1553,4.854,1554,4.282,1555,2.447,1556,2.159,1557,2.447,1558,2.447,1559,3.896,1560,2.447,1561,2.447,1562,2.447,1563,2.447,1564,2.447,1565,2.447,1566,2.447,1567,2.447,1568,2.447,1569,2.447,1570,2.447,1571,2.447,1572,2.159,1573,2.447,1574,2.447,1575,3.896,1576,3.896,1577,3.135,1578,3.896,1579,3.896,1580,3.437,1581,4.854,1582,2.447,1583,2.447,1584,2.447,1585,2.447,1586,2.447,1587,2.447,1588,3.896,1589,4.854,1590,2.447,1591,2.447,1592,4.854,1593,2.447,1594,4.854,1595,2.447,1596,3.896,1597,2.447,1598,2.447,1599,2.447,1600,2.447,1601,2.447,1602,2.447,1603,4.854,1604,4.854,1605,2.447,1606,2.447,1607,2.447,1608,2.447,1609,3.896,1610,2.447,1611,2.447,1612,2.447,1613,2.447,1614,2.447,1615,2.447,1616,2.447,1617,2.447,1618,3.896,1619,2.447,1620,2.447,1621,2.447,1622,2.159,1623,2.447,1624,2.447,1625,2.447,1626,2.447,1627,2.447]],["title/entities/Post.html",[58,0.981,461,1.481]],["body/entities/Post.html",[0,0.359,3,0.059,4,0.059,5,0.053,10,0.135,11,0.543,18,0.414,19,0.009,20,0.75,21,1.639,22,1.255,23,0.488,34,0.155,35,0.476,36,0.053,39,1.446,40,1.178,46,2.631,47,0.005,48,0.005,58,1.627,64,1.389,66,3.646,67,3.646,68,4.431,69,3.646,70,4.014,88,4.068,134,3.305,154,3.394,155,3.394,158,4.431,159,4.858,160,3.657,163,3.149,166,3.706,176,2.099,185,3.706,227,4.858,253,2.081,298,0.848,326,3.858,327,4.112,328,3.646,329,4.077,350,3.268,394,3.853,396,1.876,415,2.227,428,3.697,440,1.22,461,2.083,465,2.412,467,2.412,471,2.324,475,3.464,478,2.099,479,1.525,480,2.922,481,1.525,486,1.334,487,2.728,488,3.809,508,0.935,571,2.227,601,2.612,605,2.089,621,2.507,970,4.599,984,1.975,1014,2.612,1218,1.975,1345,2.4,1401,2.859,1411,3.184,1628,2.631,1629,3.009,1630,3.009,1631,3.009,1632,3.009,1633,3.009,1634,4.956,1635,4.545,1636,2.982,1637,2.982,1638,4.545,1639,2.982,1640,2.982,1641,4.01,1642,2.982,1643,2.982,1644,2.982,1645,2.982,1646,4.545,1647,2.982,1648,2.982,1649,2.982,1650,4.545,1651,2.982,1652,4.545,1653,2.982,1654,4.545,1655,2.982,1656,2.982,1657,2.982,1658,2.982,1659,5.334,1660,2.631,1661,2.631,1662,2.982,1663,2.982,1664,2.4,1665,2.631,1666,2.227,1667,2.982]],["title/classes/PostAnalyticResposneDto.html",[0,0.237,316,3.27]],["body/classes/PostAnalyticResposneDto.html",[0,0.339,2,0.861,3,0.092,4,0.092,5,0.082,10,0.21,11,0.747,18,0.408,19,0.009,20,0.569,23,0.494,34,0.092,36,0.082,47,0.006,48,0.006,59,3.75,90,6.235,134,4.242,253,2.105,316,4.671,318,6.951,341,6.235,343,6.235,345,6.235,347,6.235,351,6.235,491,4.535,494,2.081,621,4.764,1014,3.594,1411,5.295,1443,5.033,1445,4.103,1668,7.621,1669,4.103,1670,7.066,1671,7.886,1672,4.65,1673,4.65,1674,4.65,1675,4.65,1676,4.65,1677,6.254,1678,4.65,1679,4.65,1680,4.65,1681,4.65,1682,4.103,1683,4.65,1684,7.066,1685,6.254,1686,8.121,1687,5.518,1688,7.886]],["title/controllers/PostController.html",[243,1.692,1689,3.27]],["body/controllers/PostController.html",[0,0.086,3,0.032,4,0.032,5,0.092,10,0.072,12,0.981,13,0.405,18,0.342,19,0.009,20,0.702,23,0.414,28,1.007,29,0.981,30,1.113,34,0.127,36,0.028,40,0.613,47,0.003,48,0.003,58,1.249,64,1.072,70,1.571,80,0.714,88,3.142,89,1.72,169,3.736,243,0.617,245,0.584,247,0.88,251,4.901,252,4.49,253,1.765,256,4.575,257,4.508,258,0.847,259,3.908,260,0.88,261,4.097,262,0.357,263,0.788,264,0.917,265,0.88,268,1.451,270,0.816,271,3.953,274,3.895,278,2.769,280,3.736,281,4.046,282,3.953,283,3.884,313,0.88,317,1.408,328,1.81,334,0.761,335,1.511,508,1.499,509,4.897,511,3.888,516,1.284,520,2.2,529,3.736,530,1.284,531,3.166,532,0.788,533,0.88,556,1.284,559,2.2,601,2.443,696,1.408,697,2.412,698,1.408,699,1.284,838,1.056,885,3.175,892,3.175,903,1.192,905,3.175,950,2.887,951,2.887,1622,1.408,1689,2.042,1690,1.408,1691,3.588,1692,2.734,1693,3.588,1694,2.734,1695,2.734,1696,2.734,1697,2.734,1698,3.588,1699,3.588,1700,2.734,1701,2.734,1702,2.734,1703,2.734,1704,2.734,1705,2.734,1706,1.596,1707,1.596,1708,1.596,1709,3.588,1710,1.596,1711,6.597,1712,1.596,1713,4.251,1714,1.596,1715,2.734,1716,1.596,1717,1.596,1718,1.596,1719,1.596,1720,1.596,1721,1.596,1722,2.734,1723,1.596,1724,4.251,1725,1.596,1726,1.596,1727,1.596,1728,1.596,1729,1.596,1730,2.734,1731,1.596,1732,1.596,1733,2.734,1734,4.251,1735,1.596,1736,2.734,1737,1.596,1738,1.596,1739,1.596,1740,4.251,1741,1.596,1742,1.596,1743,1.596,1744,2.734,1745,1.596,1746,1.596,1747,3.751,1748,1.596,1749,1.596,1750,1.596,1751,1.596,1752,1.596,1753,1.596,1754,1.596,1755,2.412,1756,1.596,1757,1.596,1758,1.596,1759,1.596,1760,2.734,1761,1.596,1762,1.596,1763,2.679,1764,1.408,1765,1.596,1766,1.596,1767,1.596,1768,1.596,1769,1.596,1770,6.372,1771,7.041,1772,1.596,1773,5.883,1774,1.596,1775,1.596,1776,1.596,1777,1.596,1778,1.596,1779,1.596,1780,1.596,1781,2.734,1782,1.596,1783,1.596,1784,1.596,1785,1.596,1786,1.596,1787,1.596,1788,1.596,1789,1.596,1790,1.596,1791,1.596,1792,1.596,1793,1.596,1794,1.596,1795,1.596,1796,1.596,1797,1.596,1798,1.596,1799,1.596,1800,1.596,1801,1.596,1802,1.596,1803,1.596,1804,2.734,1805,2.734,1806,1.596,1807,1.596,1808,1.596,1809,1.596,1810,1.596,1811,1.596,1812,1.596,1813,1.596,1814,1.596,1815,1.596]],["title/modules/PostModule.html",[284,1.481,375,3.067]],["body/modules/PostModule.html",[0,0.3,3,0.11,4,0.11,5,0.098,19,0.009,34,0.176,36,0.098,40,1.011,47,0.007,48,0.007,58,1.241,88,3.585,166,3.72,245,2.565,262,1.241,284,2.371,286,2.478,287,3.136,290,3.345,291,2.643,292,2.643,294,3.46,295,2.734,296,2.027,298,1.574,300,2.734,301,4.457,375,6.062,415,4.136,745,5.235,912,4.886,1689,5.744,1763,6.724,1764,4.886,1816,4.886,1817,4.886,1818,4.886,1819,5.538,1820,5.538,1821,5.538,1822,5.538,1823,4.457]],["title/entities/PostReport.html",[394,2.415,461,1.481]],["body/entities/PostReport.html",[0,0.418,3,0.086,4,0.086,5,0.077,10,0.197,11,0.714,18,0.368,19,0.009,20,0.669,21,1.278,22,0.887,23,0.445,34,0.158,35,0.695,36,0.077,39,1.727,40,1.252,46,2.306,47,0.006,48,0.006,58,1.861,64,1.722,98,3.372,99,5.101,141,2.613,176,3.396,186,4.297,253,1.898,297,2.149,298,1.237,394,3.298,428,4.414,440,1.78,461,2.487,465,3.173,467,3.902,471,3.058,474,4.785,475,2.739,478,2.762,479,2.226,480,3.624,481,2.226,482,2.882,483,4.812,484,2.502,485,3.251,486,1.948,487,3.59,488,3.436,508,1.365,607,5.276,1401,3.762,1629,3.959,1630,3.959,1631,3.959,1632,3.959,1633,3.959,1666,3.251,1824,7.026,1825,3.503,1826,5.497,1827,6.027,1828,4.353,1829,4.353,1830,5.98,1831,4.353,1832,4.353,1833,4.353,1834,4.785,1835,4.466]],["title/controllers/ReportController.html",[243,1.692,1836,3.27]],["body/controllers/ReportController.html",[0,0.108,3,0.04,4,0.04,5,0.035,10,0.09,12,0.92,13,0.488,18,0.321,19,0.009,23,0.388,28,1.097,29,0.92,30,0.969,34,0.138,36,0.035,40,1.066,42,1.198,47,0.003,48,0.003,53,0.985,58,1.73,64,1.634,89,2.655,169,2.24,243,0.771,245,0.73,247,1.1,251,4.849,252,4.479,253,1.655,256,4.618,257,4.228,258,1.059,259,4.24,260,1.1,261,4.24,262,0.447,263,0.985,264,1.146,265,1.1,268,1.059,270,1.02,271,4.145,278,2.668,280,3.566,281,3.862,282,3.918,283,3.707,315,1.255,502,2.656,508,1.943,509,5.291,511,3.996,516,1.605,520,1.605,526,1.76,529,3.923,531,3.597,532,0.985,533,1.1,534,1.398,535,3.683,536,1.605,542,1.76,549,4.058,551,1.76,556,1.605,559,1.605,601,1.146,605,3.436,738,3.397,838,2.185,950,2.656,951,2.656,1112,1.605,1218,1.321,1711,6.63,1834,3.807,1835,3.663,1836,2.465,1837,1.76,1838,3.724,1839,3.724,1840,3.724,1841,2.912,1842,2.912,1843,3.724,1844,2.912,1845,2.912,1846,1.995,1847,5.718,1848,3.3,1849,1.995,1850,1.995,1851,3.947,1852,1.995,1853,1.995,1854,1.995,1855,1.995,1856,4.905,1857,1.995,1858,1.995,1859,3.3,1860,1.995,1861,1.995,1862,1.995,1863,1.995,1864,1.995,1865,1.995,1866,1.995,1867,4.627,1868,3.3,1869,1.995,1870,1.995,1871,1.995,1872,1.995,1873,1.995,1874,1.995,1875,1.995,1876,3.3,1877,4.221,1878,1.995,1879,2.795,1880,1.76,1881,1.995,1882,3.3,1883,6.72,1884,1.995,1885,3.3,1886,3.3,1887,1.995,1888,1.995,1889,1.995,1890,4.221,1891,4.221,1892,1.995,1893,3.3,1894,1.995,1895,1.995,1896,3.3,1897,1.76,1898,1.995,1899,1.76,1900,1.995,1901,1.995,1902,1.995,1903,1.995,1904,3.3,1905,1.995,1906,1.76,1907,1.995,1908,1.76]],["title/classes/ReportDto.html",[0,0.237,1867,3.27]],["body/classes/ReportDto.html",[0,0.396,2,1.096,3,0.118,4,0.118,5,0.105,10,0.268,11,0.873,18,0.349,19,0.009,20,0.665,23,0.422,34,0.145,36,0.105,40,1.054,47,0.007,48,0.007,58,1.637,64,1.999,99,5.921,186,4.987,253,1.8,485,4.421,491,4.393,494,2.649,508,1.856,591,4.421,680,5.458,894,5.12,902,4.147,1835,5.458,1867,5.458,1909,5.223,1910,7.308,1911,5.92,1912,5.92,1913,5.92,1914,5.92]],["title/modules/ReportModule.html",[284,1.481,376,3.067]],["body/modules/ReportModule.html",[0,0.305,3,0.112,4,0.112,5,0.1,19,0.009,34,0.176,36,0.1,40,1.022,47,0.007,48,0.007,58,1.587,245,2.593,262,1.262,284,2.396,286,2.52,287,3.17,290,3.381,291,2.688,292,2.688,294,3.497,295,2.78,296,2.061,297,2.78,298,1.601,300,2.78,376,5.994,394,3.908,396,4.457,397,3.543,400,4.071,401,3.729,1823,4.532,1836,5.789,1879,5.665,1880,4.969,1915,4.969,1916,4.969,1917,5.632,1918,6.251,1919,5.632,1920,5.632]],["title/injectables/ReportService.html",[302,1.104,1879,2.899]],["body/injectables/ReportService.html",[0,0.093,3,0.034,4,0.034,5,0.03,10,0.077,12,0.896,13,0.43,15,1.475,18,0.312,19,0.009,20,0.713,23,0.378,28,0.92,29,0.896,30,0.913,31,1.626,34,0.137,35,0.274,36,0.03,37,1.442,40,1.085,47,0.003,48,0.003,58,1.639,64,2.008,89,1.827,98,2.198,113,1.923,134,1.743,169,1.541,218,1.279,252,1.485,258,0.909,262,0.384,278,2.628,296,0.627,297,0.845,298,0.487,302,0.732,303,0.7,305,1.299,307,4.095,308,2.378,310,2.649,313,0.944,314,0.944,320,1.2,321,2.379,322,0.944,323,3.842,324,3.042,325,2.948,326,3.12,332,1.378,333,2.673,334,3.59,335,3.418,340,2.562,349,1.743,350,1.541,394,2.456,396,1.827,397,2.801,400,1.669,401,1.134,440,1.821,474,3.12,482,1.134,484,0.984,502,2.337,511,3.851,529,2.874,532,1.433,533,0.944,576,3.336,587,4.515,588,1.2,589,1.077,590,1.279,591,1.279,593,1.511,596,3.799,599,2.948,603,2.562,604,2.562,605,3.12,620,4.021,621,2.456,622,3.326,624,2.034,625,1.827,635,4.045,637,2.562,639,3.929,640,3.929,642,3.929,643,3.929,645,3.929,647,3.929,686,3.326,857,1.378,981,0.984,1180,1.279,1451,2.337,1572,2.562,1577,2.337,1580,2.562,1823,1.378,1826,3.584,1827,1.511,1834,4.255,1838,2.562,1839,2.562,1840,2.562,1841,2.562,1842,2.562,1843,2.562,1844,2.562,1845,2.562,1847,5.358,1879,1.923,1897,2.562,1899,2.562,1906,2.562,1908,2.562,1918,2.562,1921,1.511,1922,1.712,1923,3.336,1924,1.712,1925,2.904,1926,1.712,1927,1.712,1928,2.904,1929,1.712,1930,1.712,1931,1.712,1932,2.904,1933,1.712,1934,2.904,1935,1.712,1936,2.904,1937,1.712,1938,2.904,1939,1.712,1940,1.712,1941,1.712,1942,1.511,1943,2.904,1944,2.904,1945,3.336,1946,2.904,1947,3.781,1948,5.773,1949,4.453,1950,4.453,1951,2.904,1952,1.712,1953,2.904,1954,1.511,1955,1.712,1956,1.712,1957,2.904,1958,1.712,1959,2.904,1960,1.712,1961,1.712,1962,1.712,1963,1.712,1964,3.781,1965,1.712,1966,1.712,1967,2.904,1968,2.904,1969,1.712,1970,3.781,1971,2.904,1972,2.904,1973,1.712,1974,1.511,1975,1.712,1976,1.712,1977,1.712,1978,1.712,1979,1.712,1980,1.712,1981,1.712,1982,1.712,1983,1.712,1984,4.453,1985,2.904,1986,2.904,1987,2.904,1988,1.712,1989,1.712,1990,1.712,1991,1.712,1992,1.712,1993,4.453,1994,4.453,1995,2.904,1996,2.904,1997,2.904,1998,1.712,1999,1.712,2000,1.712,2001,1.712,2002,1.712,2003,1.712,2004,2.562,2005,2.904,2006,1.712,2007,1.712,2008,1.712,2009,2.562,2010,1.712,2011,1.712,2012,1.712,2013,2.904,2014,1.712,2015,1.712,2016,1.712,2017,1.712,2018,1.712,2019,2.904,2020,2.904,2021,2.904,2022,1.712,2023,1.712,2024,1.712,2025,1.712,2026,1.712,2027,1.712,2028,1.712,2029,1.712,2030,1.712,2031,1.712,2032,1.712,2033,1.712,2034,1.712,2035,1.712]],["title/guards/RolesGuard.html",[535,2.754,662,3.27]],["body/guards/RolesGuard.html",[0,0.299,3,0.11,4,0.11,5,0.098,8,1.529,10,0.249,12,0.956,13,1.034,18,0.333,19,0.009,23,0.404,28,0.982,29,0.956,30,0.795,34,0.16,36,0.098,40,0.795,47,0.007,48,0.007,53,2.721,262,1.235,270,2.819,278,2.364,302,1.762,305,2.466,315,3.468,323,3.228,349,3.309,534,3.861,535,4.397,1411,4.896,2036,5.512,2037,4.863,2038,8.07,2039,5.512,2040,8.509,2041,5.512,2042,6.989,2043,8.07,2044,5.512,2045,5.512,2046,4.863,2047,4.436,2048,6.989,2049,5.512,2050,5.512,2051,5.512,2052,5.512,2053,5.512,2054,5.512]],["title/entities/Scrapbook.html",[88,2.239,461,1.481]],["body/entities/Scrapbook.html",[0,0.423,3,0.09,4,0.09,5,0.08,10,0.204,11,0.732,18,0.384,19,0.009,20,0.732,23,0.465,34,0.155,35,0.721,36,0.08,39,1.754,40,1.282,46,2.582,47,0.006,48,0.006,58,1.804,64,1.755,66,4.608,69,4.608,70,4.626,88,3.992,176,2.831,253,1.983,298,1.283,348,5.408,428,4.482,440,1.846,461,2.525,465,2.395,467,3.253,471,3.135,478,2.831,479,2.309,480,3.253,481,2.309,486,2.02,487,2.71,488,3.523,508,1.415,601,4.29,883,3.633,1401,3.856,1629,4.059,1630,4.059,1631,4.059,1632,4.059,1633,4.059,1634,3.633,1659,4.933,1661,3.983,1666,3.371,2055,3.983,2056,4.514,2057,4.514,2058,4.514,2059,4.514,2060,6.13,2061,4.514,2062,4.514]],["title/classes/SendNotificationDto.html",[0,0.237,1299,3.067]],["body/classes/SendNotificationDto.html",[0,0.385,2,1.048,3,0.112,4,0.112,5,0.1,10,0.256,11,0.848,18,0.389,19,0.009,20,0.779,23,0.471,34,0.141,36,0.1,47,0.007,48,0.007,253,2.006,491,4.454,494,2.532,529,4.122,902,3.965,1299,4.979,1335,6.854,1346,6.252,1347,4.555,1348,4.555,1349,4.993,1443,5.719,1682,4.993,1687,6.27,2063,7.406,2064,4.993,2065,7.768,2066,7.768,2067,5.66,2068,7.106,2069,5.66,2070,5.66,2071,5.66]],["title/classes/SignUpUserDto.html",[0,0.237,677,3.27]],["body/classes/SignUpUserDto.html",[0,0.323,2,0.803,3,0.086,4,0.086,5,0.077,10,0.196,11,0.712,17,1.616,18,0.402,19,0.009,20,0.814,23,0.487,34,0.086,36,0.077,40,1.147,47,0.006,48,0.006,182,5.486,253,2.044,261,3.05,334,2.846,435,5.091,437,4.092,449,5.262,491,4.69,494,1.941,508,1.36,529,3.165,663,3.752,668,3.949,677,4.455,683,4.8,686,4.455,691,5.262,722,5.486,723,5.486,724,4.092,776,4.455,894,4.179,1014,3.427,1203,3.949,1288,5.262,1388,7.018,2072,7.52,2073,3.827,2074,4.8,2075,5.965,2076,5.965,2077,5.965,2078,5.965,2079,5.965,2080,5.262,2081,5.965,2082,6.015,2083,5.486,2084,5.486,2085,4.337,2086,4.337,2087,4.337,2088,6.015,2089,4.337,2090,4.337,2091,4.337,2092,4.337,2093,5.262,2094,4.337,2095,4.337,2096,3.827]],["title/injectables/StripeService.html",[302,1.104,2097,3.523]],["body/injectables/StripeService.html",[0,0.31,3,0.114,4,0.114,5,0.101,10,0.259,11,0.854,12,0.782,13,1.058,15,1.41,18,0.273,19,0.009,20,0.71,21,1.221,22,1.165,23,0.413,28,0.803,29,0.782,30,0.824,31,1.528,34,0.155,36,0.101,37,1.11,47,0.007,48,0.007,262,1.28,302,1.803,303,2.337,321,3.724,335,3.011,1510,6.287,1524,6.309,1525,6.309,1526,6.309,1527,5.754,1528,6.309,1532,6.309,1536,5.043,2097,5.754,2098,5.043,2099,7.15,2100,7.15,2101,5.715,2102,5.715,2103,5.715,2104,5.715]],["title/modules/TasksModule.html",[284,1.481,377,3.067]],["body/modules/TasksModule.html",[0,0.323,3,0.119,4,0.119,5,0.106,19,0.009,34,0.172,36,0.106,40,0.86,47,0.007,48,0.007,58,1.645,262,1.336,284,2.484,286,2.669,287,3.285,290,3.504,291,2.847,292,2.847,294,3.625,295,2.945,296,2.183,297,2.945,298,1.695,300,2.945,377,6.08,400,4.219,401,3.95,758,3.95,2105,5.263,2106,5.263,2107,6.08,2108,5.965,2109,5.965,2110,4.801]],["title/injectables/TasksService.html",[302,1.104,2107,3.067]],["body/injectables/TasksService.html",[0,0.218,3,0.08,4,0.08,5,0.071,10,0.182,12,0.55,13,0.838,15,1.442,18,0.192,19,0.009,23,0.411,28,0.565,29,0.55,30,0.944,34,0.165,35,0.642,36,0.071,37,0.781,40,0.58,47,0.006,48,0.006,58,1.268,153,3.236,163,3.349,253,1.612,262,0.901,296,1.472,297,1.985,298,1.143,302,1.427,303,1.644,305,2.532,307,4.63,308,3.56,310,4.587,314,2.218,320,2.817,321,3.125,322,2.218,323,1.857,335,1.693,400,2.311,401,2.663,418,3.236,450,5.718,484,2.311,508,1.261,601,2.311,663,3.56,915,4.226,981,2.311,984,2.663,985,3.003,1012,4.89,1058,3.548,1218,4.705,1260,3.236,1511,3.548,1577,3.236,1664,3.236,1755,3.548,1851,3.236,1923,5.777,1942,3.548,1945,3.548,2004,3.548,2009,3.548,2074,4.554,2107,3.965,2110,3.236,2111,3.548,2112,5.659,2113,5.659,2114,5.659,2115,5.659,2116,5.659,2117,5.659,2118,5.659,2119,5.659,2120,5.659,2121,5.659,2122,6.548,2123,6.548,2124,7.106,2125,4.021,2126,7.106,2127,4.021,2128,7.106,2129,7.106,2130,7.106,2131,7.106,2132,4.021,2133,6.548,2134,7.768,2135,6.548,2136,7.106,2137,4.021,2138,7.106,2139,4.021,2140,4.021,2141,3.236,2142,3.548,2143,4.021,2144,4.021,2145,3.548,2146,4.021,2147,4.021]],["title/classes/UpdateUserBioDto.html",[0,0.237,2148,3.523]],["body/classes/UpdateUserBioDto.html",[0,0.407,2,1.146,3,0.123,4,0.123,5,0.109,10,0.28,11,0.897,18,0.295,19,0.009,20,0.683,23,0.357,34,0.123,36,0.109,47,0.008,48,0.008,242,6.506,253,1.524,491,3.984,494,2.769,508,1.94,668,4.972,890,5.46,891,5.46,1014,4.315,1203,4.972,2148,6.043,2149,6.625,2150,4.097,2151,5.608,2152,6.043,2153,6.188,2154,5.46,2155,7.509]],["title/classes/UpdateUserDateOfBirthDto.html",[0,0.237,2156,3.523]],["body/classes/UpdateUserDateOfBirthDto.html",[0,0.41,2,1.158,3,0.124,4,0.124,5,0.111,10,0.283,11,0.902,18,0.298,19,0.009,23,0.361,34,0.124,36,0.111,47,0.008,48,0.008,253,1.54,491,4.31,494,2.799,508,1.961,668,5.004,1014,4.848,1203,5.004,2083,6.536,2150,4.141,2151,5.644,2152,6.082,2156,6.082,2157,6.668,2158,5.034]],["title/classes/UpdateUserEmailDto.html",[0,0.237,2159,3.523]],["body/classes/UpdateUserEmailDto.html",[0,0.41,2,1.158,3,0.124,4,0.124,5,0.111,10,0.283,11,0.902,18,0.298,19,0.009,20,0.687,23,0.361,34,0.124,36,0.111,47,0.008,48,0.008,253,1.54,494,2.799,508,1.961,668,5.004,724,5.185,1203,5.004,2088,7.166,2150,4.141,2151,5.644,2158,5.034,2159,6.082,2160,6.668,2161,7.558]],["title/classes/UpdateUserPasseordDto.html",[0,0.237,2162,3.523]],["body/classes/UpdateUserPasseordDto.html",[0,0.399,2,1.107,3,0.119,4,0.119,5,0.106,10,0.271,11,0.878,18,0.38,19,0.009,20,0.79,23,0.46,34,0.119,36,0.106,47,0.007,48,0.007,253,1.961,437,4.781,491,4.526,494,2.676,2082,7.026,2150,3.96,2154,5.277,2162,5.918,2163,7.33,2164,7.964,2165,7.354,2166,5.981,2167,5.981,2168,5.981,2169,7.354]],["title/classes/UpdateUserPhoneNumberDto.html",[0,0.237,2170,3.523]],["body/classes/UpdateUserPhoneNumberDto.html",[0,0.41,2,1.158,3,0.124,4,0.124,5,0.111,10,0.283,11,0.902,18,0.298,19,0.009,20,0.687,23,0.361,34,0.124,36,0.111,47,0.008,48,0.008,253,1.54,494,2.799,508,1.961,668,5.004,1014,4.343,1203,5.004,2084,6.536,2093,6.668,2096,5.518,2150,4.141,2151,5.644,2152,6.082,2158,5.034,2170,6.082,2171,6.668]],["title/entities/User.html",[40,0.631,461,1.481]],["body/entities/User.html",[0,0.275,3,0.035,4,0.035,5,0.031,10,0.08,11,0.356,15,0.319,18,0.41,19,0.009,20,0.742,21,1.753,22,1.452,23,0.494,34,0.154,35,0.282,36,0.031,37,0.343,39,1.066,40,1.138,46,2.61,47,0.003,48,0.003,53,2.716,58,1.233,64,0.975,88,2.814,138,4.109,141,2.32,144,2.886,153,3.11,154,2.224,155,2.224,160,2.397,163,3.147,166,2.919,182,3.11,185,2.919,193,3.85,200,4.004,212,2.886,215,4.109,218,2.886,234,3.11,235,3.11,236,4.109,240,3.41,241,3.41,242,3.11,253,2.106,297,0.871,327,2.886,328,3.006,329,3.006,335,0.743,350,3.515,394,3.035,396,1.874,397,4.287,400,3.162,401,1.168,406,1.557,407,4.287,408,1.557,409,1.318,415,1.318,428,3.045,435,2.886,437,2.32,440,0.721,461,1.536,471,1.523,475,4.392,478,1.375,479,0.902,481,0.902,486,0.789,488,4.172,508,0.553,571,1.318,601,3.162,605,1.236,615,2.628,621,2.504,683,1.42,722,3.11,723,3.11,724,2.32,781,1.236,813,3.11,861,1.557,960,2.559,970,3.391,984,1.168,1014,2.609,1064,1.318,1096,2.628,1132,3.11,1187,3.41,1196,2.628,1197,2.628,1209,2.628,1210,2.628,1218,3.643,1222,3.41,1345,1.42,1350,1.557,1370,3.41,1401,1.874,1411,3.181,1534,1.557,1542,3.41,1629,1.972,1630,1.972,1631,1.972,1632,1.972,1633,1.972,1634,5.937,1641,2.628,1659,6.022,1660,1.557,1664,1.42,1665,1.557,1747,3.41,1834,2.087,1851,3.11,1954,3.41,1974,3.41,2083,3.11,2084,3.11,2110,2.397,2145,3.41,2172,1.557,2173,3.865,2174,1.764,2175,2.978,2176,1.764,2177,2.978,2178,1.764,2179,1.764,2180,2.978,2181,1.764,2182,2.978,2183,1.764,2184,2.978,2185,1.764,2186,1.764,2187,1.764,2188,1.764,2189,1.764,2190,1.764,2191,1.764,2192,1.764,2193,1.764,2194,1.764,2195,1.764,2196,3.865,2197,1.764,2198,1.764,2199,1.764,2200,1.764,2201,1.764,2202,2.978,2203,1.764,2204,1.764,2205,1.764,2206,1.764,2207,1.764,2208,1.764,2209,1.764,2210,1.764,2211,1.764,2212,2.978,2213,1.764,2214,2.978,2215,1.764,2216,2.978,2217,1.764,2218,1.764,2219,2.978,2220,1.764,2221,1.764,2222,1.764,2223,1.764,2224,3.865,2225,1.764,2226,1.764,2227,1.764,2228,1.764,2229,1.764,2230,1.764,2231,1.764,2232,1.764,2233,1.764,2234,1.764,2235,2.978,2236,1.764,2237,1.764,2238,1.764,2239,1.764,2240,1.764,2241,1.764,2242,1.764,2243,1.764,2244,1.764,2245,1.764,2246,1.764]],["title/entities/UserBan.html",[400,2.516,461,1.481]],["body/entities/UserBan.html",[0,0.428,3,0.093,4,0.093,5,0.082,10,0.211,11,0.748,18,0.376,19,0.009,20,0.688,21,1.338,22,0.949,23,0.456,34,0.15,35,0.744,36,0.082,39,1.776,40,1.257,46,2.548,47,0.006,48,0.006,64,1.784,98,3.492,127,6.241,129,6.241,141,2.797,176,2.892,253,1.943,298,1.324,400,3.599,428,4.54,440,1.905,461,2.558,465,2.472,467,3.323,471,3.203,475,2.931,478,2.892,479,2.383,480,3.323,481,2.383,484,2.677,486,2.085,508,1.461,738,3.75,1014,4.346,1401,3.94,1629,4.146,1630,4.146,1631,4.146,1632,4.146,1633,4.146,2141,3.75,2247,6.54,2248,4.111,2249,7.074,2250,6.262,2251,4.659,2252,4.659,2253,4.659,2254,4.659,2255,7.074,2256,4.659,2257,4.659,2258,4.659,2259,4.659]],["title/modules/UserModule.html",[284,1.481,378,2.899]],["body/modules/UserModule.html",[0,0.318,3,0.116,4,0.116,5,0.104,19,0.009,34,0.168,36,0.104,40,0.845,47,0.007,48,0.007,245,2.657,262,1.313,284,2.456,286,2.622,287,3.249,290,3.465,291,2.796,292,2.796,294,3.585,295,2.893,296,2.144,300,2.893,378,5.8,700,6.355,745,5.424,758,3.88,2260,5.17,2261,5.17,2262,5.17,2263,5.86,2264,6.963,2265,5.86,2266,5.86,2267,5.86]],["title/entities/UserReport.html",[397,2.754,461,1.481]],["body/entities/UserReport.html",[0,0.419,3,0.087,4,0.087,5,0.078,10,0.199,11,0.719,18,0.369,19,0.009,20,0.671,21,1.286,22,0.895,23,0.447,34,0.154,35,0.702,36,0.078,39,1.734,40,1.297,46,2.315,47,0.006,48,0.006,64,1.731,98,3.389,99,5.126,141,2.638,176,3.41,186,4.318,253,1.904,298,1.249,397,3.786,428,4.432,440,1.797,461,2.497,465,3.194,467,3.917,471,3.078,474,4.809,475,2.765,478,2.78,479,2.247,480,3.642,481,2.247,482,2.91,483,4.844,484,2.525,485,3.282,486,1.966,487,3.613,488,3.459,508,1.378,1401,3.786,1629,3.985,1630,3.985,1631,3.985,1632,3.985,1633,3.985,1666,3.282,1825,3.537,1826,5.524,1834,4.809,1835,4.495,2247,6.427,2268,6.864,2269,4.395,2270,4.395,2271,6.019,2272,4.395,2273,6.019,2274,4.395,2275,4.395]],["title/coverage.html",[2276,5.296]],["body/coverage.html",[0,0.486,1,1.827,5,0.04,6,2.003,7,2.414,18,0.108,19,0.009,39,0.533,40,0.327,42,1.363,47,0.004,48,0.004,49,1.827,50,2.003,54,1.827,55,2.003,58,0.509,83,1.827,84,2.003,85,1.827,86,2.003,88,1.161,94,1.827,95,2.003,109,1.827,110,2.003,117,1.827,118,2.003,121,1.827,122,2.003,123,1.827,124,2.003,132,1.827,133,2.003,136,1.827,137,2.003,139,1.827,140,2.003,142,1.827,143,2.003,151,1.827,152,2.003,156,1.827,157,2.003,161,1.827,162,2.003,163,4.671,164,1.827,165,2.003,166,1.205,172,1.827,173,2.003,174,1.827,175,2.003,177,1.827,178,2.003,180,1.827,181,2.003,183,1.827,184,2.003,185,1.205,191,1.827,192,2.003,193,1.252,198,1.827,199,2.003,200,1.252,210,1.827,211,2.003,213,1.827,214,2.003,216,1.827,217,2.003,219,1.827,220,2.003,225,1.827,226,2.003,229,1.827,230,2.003,232,1.827,233,2.003,238,1.827,239,2.003,243,2.857,244,1.695,246,2.003,263,1.121,266,1.503,302,2.075,304,2.003,316,1.695,318,1.827,335,0.956,379,1.591,380,1.503,384,1.827,394,1.252,397,1.428,400,1.305,407,1.428,431,6.211,456,2.003,461,2.548,462,2.003,478,1.048,489,1.591,490,2.003,495,1.695,496,2.003,511,1.083,532,2.279,535,1.428,537,1.503,573,2.003,587,1.363,589,1.428,651,1.695,652,2.003,662,1.695,667,1.695,677,1.695,700,1.591,702,1.428,743,1.591,753,1.695,759,2.003,781,1.591,797,2.003,804,2.003,814,1.695,815,2.003,825,1.503,846,2.003,875,2.003,885,1.695,886,2.003,887,2.952,892,1.695,893,2.003,905,1.695,906,2.003,907,2.003,914,2.003,934,1.827,937,1.695,938,2.003,944,1.503,956,2.003,984,1.503,985,4.647,986,2.003,988,1.827,1028,1.695,1039,2.003,1063,2.003,1073,1.695,1074,2.003,1113,1.503,1146,2.003,1147,2.003,1159,2.003,1241,2.003,1242,2.952,1245,2.003,1271,2.003,1272,2.003,1281,2.003,1283,2.003,1293,1.695,1294,2.003,1299,1.591,1307,1.428,1325,2.003,1344,1.827,1386,2.003,1389,1.695,1400,2.003,1409,1.695,1425,1.695,1427,2.003,1429,2.003,1457,1.695,1458,2.003,1483,1.503,1508,2.003,1628,2.003,1668,2.003,1669,2.003,1689,1.695,1690,2.003,1763,1.695,1824,2.003,1825,2.952,1836,1.695,1837,2.003,1867,1.695,1879,1.503,1909,2.003,1921,2.003,2037,2.003,2047,1.827,2055,2.003,2063,2.003,2064,2.003,2072,2.003,2073,2.003,2097,1.827,2098,2.003,2107,1.591,2111,2.003,2148,1.827,2149,2.003,2150,3.852,2156,1.827,2157,2.003,2159,1.827,2160,2.003,2162,1.827,2163,2.003,2170,1.827,2171,2.003,2172,2.003,2247,2.952,2248,2.003,2264,2.003,2276,2.003,2277,2.27,2278,2.27,2279,2.27,2280,8.746,2281,5.3,2282,4.616,2283,4.616,2284,2.003,2285,2.27,2286,3.668,2287,3.668,2288,7.23,2289,2.27,2290,5.133,2291,7.866,2292,2.003,2293,7.04,2294,2.003,2295,2.27,2296,2.27,2297,6.816,2298,3.236,2299,2.003,2300,2.003,2301,4.616,2302,3.668,2303,2.27,2304,3.668,2305,2.27,2306,2.27,2307,2.27,2308,2.27,2309,2.003,2310,2.27,2311,2.27,2312,2.27,2313,2.27,2314,2.27,2315,2.27,2316,2.27,2317,2.27,2318,2.003,2319,2.27,2320,2.27,2321,2.27,2322,2.27,2323,2.27,2324,2.27,2325,2.27,2326,2.27,2327,2.27,2328,2.27,2329,2.27,2330,4.676,2331,5.3,2332,2.27,2333,2.27,2334,2.27,2335,2.27,2336,2.27,2337,2.003,2338,2.27]],["title/dependencies.html",[287,2.359,2339,3.214]],["body/dependencies.html",[0,0.392,19,0.009,35,0.929,47,0.007,48,0.007,262,1.303,268,3.086,287,2.602,296,2.128,385,5.131,418,4.68,494,2.602,670,4.343,673,4.343,699,4.68,747,4.68,749,3.851,932,5.131,987,5.398,1032,5.131,1250,6.329,1402,5.131,1510,4.343,2046,5.131,2340,8.461,2341,5.816,2342,5.816,2343,5.816,2344,5.816,2345,5.816,2346,5.816,2347,5.816,2348,5.816,2349,5.816,2350,4.68,2351,5.816,2352,5.816,2353,5.816,2354,5.816,2355,5.816,2356,5.816,2357,5.816,2358,5.816,2359,5.816,2360,5.816,2361,5.816,2362,5.816,2363,5.816,2364,5.816]],["title/miscellaneous/enumerations.html",[2365,2.412,2366,4.652]],["body/miscellaneous/enumerations.html",[10,0.203,14,1.694,19,0.009,22,1.883,47,0.006,48,0.006,53,3.014,70,3.509,113,4.595,114,3.352,126,4.914,138,4.56,141,3.665,186,3.841,215,4.56,236,4.56,237,5.387,321,2.914,482,4.043,591,4.56,1127,5.994,1155,4.914,1179,3.96,1206,6.571,1260,4.914,1346,4.914,1347,4.914,1348,4.914,1430,5.387,1452,5.387,1533,3.96,2141,4.914,2142,3.96,2350,4.914,2365,2.972,2366,3.96,2367,4.488,2368,8.037,2369,4.488,2370,4.488,2371,6.106,2372,6.106,2373,6.106,2374,4.488,2375,6.106,2376,6.106,2377,4.488,2378,4.488,2379,6.106,2380,4.488,2381,4.488,2382,6.106,2383,6.106,2384,6.106,2385,6.106,2386,6.106,2387,6.106,2388,6.106,2389,7.448,2390,4.488,2391,6.106,2392,6.106,2393,6.106,2394,4.488,2395,4.488,2396,4.488,2397,4.488,2398,4.488,2399,6.106,2400,6.106,2401,6.106,2402,6.106,2403,4.488]],["title/miscellaneous/functions.html",[2365,2.412,2404,4.652]],["body/miscellaneous/functions.html",[10,0.318,19,0.008,47,0.008,48,0.008,2299,6.204,2300,7.526,2365,4.656,2404,6.204,2405,7.032]],["title/index.html",[10,0.165,2406,3.642,2407,3.642]],["body/index.html",[12,0.812,18,0.283,19,0.007,47,0.007,48,0.007,64,1.846,73,3.38,321,2.832,426,5.466,428,4.974,430,5.236,433,5.236,435,4.432,437,3.562,445,7.002,450,6.668,452,5.236,663,3.734,690,5.236,987,6.188,1028,4.432,1262,5.89,1403,5.236,1468,5.236,1510,5.466,1554,5.236,1556,6.458,2074,5.89,2080,5.236,2408,7.319,2409,5.935,2410,5.935,2411,5.236,2412,5.935,2413,7.319,2414,5.935,2415,7.319,2416,5.935,2417,5.236,2418,5.935,2419,7.937,2420,5.935,2421,5.935,2422,5.935,2423,5.935,2424,5.935,2425,5.935,2426,5.935,2427,5.935]],["title/modules.html",[286,2.686]],["body/modules.html",[19,0.007,47,0.007,48,0.007,285,4.19,286,2.676,364,4.467,368,4.19,369,4.19,370,4.19,371,4.19,372,4.19,373,3.96,374,4.19,375,4.19,376,4.19,377,4.19,378,3.96,2428,9.128,2429,9.128,2430,9.128,2431,9.128]],["title/overview.html",[2432,5.296]],["body/overview.html",[2,0.748,19,0.009,47,0.006,48,0.006,245,1.479,266,4.348,285,5.257,286,1.809,287,2.541,288,3.567,289,3.567,290,2.71,291,1.929,292,1.929,303,1.653,364,6.82,365,3.567,366,3.567,367,3.567,368,5.257,369,6.007,370,5.257,371,5.257,372,5.257,373,5.292,374,5.599,375,5.451,376,5.257,377,5.257,378,5.292,379,4.6,380,4.716,440,1.653,537,4.348,566,3.567,567,3.567,662,3.019,700,5.599,702,5.028,739,3.567,740,3.567,741,3.567,743,4.6,825,4.348,840,3.567,841,3.567,944,4.348,952,3.567,953,3.567,981,3.264,1113,4.348,1140,3.567,1141,3.567,1307,5.028,1320,3.567,1321,3.567,1322,3.567,1425,3.019,1483,4.348,1502,3.567,1504,3.567,1527,3.253,1763,5.969,1816,3.567,1817,3.567,1818,3.567,1879,4.348,1915,3.567,1916,3.567,2105,3.567,2106,3.567,2107,4.6,2260,3.567,2261,3.567,2262,3.567,2284,3.567,2318,3.567,2330,3.567,2432,3.567,2433,4.042]],["title/properties.html",[11,0.63,2339,3.214]],["body/properties.html",[11,0.832,19,0.009,47,0.008,48,0.008,508,2.185,876,6.148,1043,6.148,2434,6.969,2435,6.969,2436,6.969]],["title/miscellaneous/variables.html",[426,3.938,2365,2.412]],["body/miscellaneous/variables.html",[10,0.239,18,0.359,19,0.009,20,0.48,21,1.871,22,1.785,36,0.093,42,4.932,47,0.007,48,0.007,53,2.603,73,2.436,335,2.221,384,6.049,426,3.939,509,4.274,753,5.074,915,3.939,985,3.939,987,5.929,988,6.049,1028,5.074,1262,4.244,1344,6.049,2047,5.468,2290,7.421,2292,5.994,2294,5.994,2298,4.653,2309,4.653,2337,5.994,2350,4.244,2365,3.492,2411,4.653,2417,5.994,2437,8.215,2438,5.274,2439,6.794,2440,5.274,2441,5.274,2442,5.274,2443,5.274,2444,5.274,2445,5.274,2446,5.274,2447,5.274,2448,5.274,2449,5.274,2450,5.274,2451,5.274,2452,5.274,2453,5.274,2454,5.274]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":163,"title":{},"body":{"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"injectables/AnalyticsService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2434,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":2358,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":2348,"title":{},"body":{"dependencies.html":{}}}],["0.3.11",{"_index":2364,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2347,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":2354,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2291,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2301,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2327,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2281,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2297,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2280,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2314,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2315,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2304,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2313,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":981,"title":{},"body":{"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/NotificationService.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["1.0.0",{"_index":2356,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":2293,"title":{},"body":{"coverage.html":{}}}],["1/10",{"_index":2310,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":2331,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2283,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":2287,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":2319,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":2317,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":2285,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":934,"title":{},"body":{"injectables/EncryptionService.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["10.0.1",{"_index":2342,"title":{},"body":{"dependencies.html":{}}}],["10.6.152.189",{"_index":1530,"title":{},"body":{"injectables/PaymentService.html":{}}}],["100",{"_index":2288,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":1024,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["11",{"_index":1527,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{},"overview.html":{}}}],["11.4.1",{"_index":2351,"title":{},"body":{"dependencies.html":{}}}],["11.7.0",{"_index":2363,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":2284,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["12:00:00",{"_index":2120,"title":{},"body":{"injectables/TasksService.html":{}}}],["13",{"_index":2433,"title":{},"body":{"overview.html":{}}}],["14",{"_index":2316,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":1528,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["15/21",{"_index":2333,"title":{},"body":{"coverage.html":{}}}],["2.1.0",{"_index":2343,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":2341,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":2353,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":2345,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":2312,"title":{},"body":{"coverage.html":{}}}],["2/5",{"_index":2308,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2318,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["2022",{"_index":1526,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["21/29",{"_index":2336,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":1022,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["25",{"_index":2286,"title":{},"body":{"coverage.html":{}}}],["27",{"_index":2323,"title":{},"body":{"coverage.html":{}}}],["2h",{"_index":2453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":2360,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":2289,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":2306,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":2282,"title":{},"body":{"coverage.html":{}}}],["4.0.1",{"_index":2355,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":2329,"title":{},"body":{"coverage.html":{}}}],["4/9",{"_index":2296,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":2307,"title":{},"body":{"coverage.html":{}}}],["43",{"_index":2320,"title":{},"body":{"coverage.html":{}}}],["44",{"_index":2295,"title":{},"body":{"coverage.html":{}}}],["450d",{"_index":147,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{}}}],["4bf8",{"_index":148,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{}}}],["5/18",{"_index":2324,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":2303,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":2330,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["6",{"_index":1021,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["60",{"_index":1023,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["604800000",{"_index":2006,"title":{},"body":{"injectables/ReportService.html":{}}}],["6183a.appspot.com",{"_index":2444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6183a.appspot.com/o/avatars%2favatars%2fdefaultimage.png?alt=media&token=4482a7ff",{"_index":146,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{}}}],["66",{"_index":2311,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":2362,"title":{},"body":{"dependencies.html":{}}}],["7/10",{"_index":2326,"title":{},"body":{"coverage.html":{}}}],["7/16",{"_index":2321,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":2325,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":2302,"title":{},"body":{"coverage.html":{}}}],["72",{"_index":2335,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":2305,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":2328,"title":{},"body":{"coverage.html":{}}}],["8b4a1a6ebbd2",{"_index":150,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{}}}],["9.0.0",{"_index":2340,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":2344,"title":{},"body":{"dependencies.html":{}}}],["9.15.0",{"_index":2349,"title":{},"body":{"dependencies.html":{}}}],["a4d7",{"_index":149,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{}}}],["above",{"_index":2076,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["abstract",{"_index":803,"title":{},"body":{"classes/BaseEntity.html":{}}}],["acceess",{"_index":424,"title":{},"body":{"modules/AppModule.html":{}}}],["accept",{"_index":507,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["accepted",{"_index":1206,"title":{},"body":{"injectables/FollowService.html":{},"miscellaneous/enumerations.html":{}}}],["acceptfollow",{"_index":1075,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["acceptfollow(@request",{"_index":1122,"title":{},"body":{"controllers/FollowController.html":{}}}],["acceptfollow(id",{"_index":1164,"title":{},"body":{"injectables/FollowService.html":{}}}],["acceptfollow(req",{"_index":1083,"title":{},"body":{"controllers/FollowController.html":{}}}],["acceptfollow(requestid",{"_index":1124,"title":{},"body":{"controllers/FollowController.html":{}}}],["acceptpostappeal",{"_index":497,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["acceptpostappeal(@request",{"_index":550,"title":{},"body":{"controllers/AppealsController.html":{}}}],["acceptpostappeal(postid",{"_index":552,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["acceptpostappeal(req",{"_index":503,"title":{},"body":{"controllers/AppealsController.html":{}}}],["access",{"_index":674,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FirebaseStorageService.html":{}}}],["access_token",{"_index":794,"title":{},"body":{"injectables/AuthService.html":{}}}],["accessible",{"_index":666,"title":{},"body":{"controllers/AuthController.html":{}}}],["accessors",{"_index":1431,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["account",{"_index":2448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["action",{"_index":81,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{},"injectables/FirebaseStorageService.html":{}}}],["active",{"_index":126,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"injectables/PaymentService.html":{},"miscellaneous/enumerations.html":{}}}],["add",{"_index":41,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{}}}],["addcomment",{"_index":1691,"title":{},"body":{"controllers/PostController.html":{}}}],["addcomment(body",{"_index":1706,"title":{},"body":{"controllers/PostController.html":{}}}],["addcomment(req.user",{"_index":1803,"title":{},"body":{"controllers/PostController.html":{}}}],["addgroupby('postreport.reason",{"_index":2024,"title":{},"body":{"injectables/ReportService.html":{}}}],["addgroupby('userreport.reason",{"_index":2031,"title":{},"body":{"injectables/ReportService.html":{}}}],["addposttoscrapbook",{"_index":1692,"title":{},"body":{"controllers/PostController.html":{}}}],["addposttoscrapbook(@request",{"_index":1789,"title":{},"body":{"controllers/PostController.html":{}}}],["addposttoscrapbook(req",{"_index":1710,"title":{},"body":{"controllers/PostController.html":{}}}],["addposttoscrapbook(req.user",{"_index":1790,"title":{},"body":{"controllers/PostController.html":{}}}],["address",{"_index":182,"title":{},"body":{"classes/$npmConfigName1673337064308.html":{},"classes/SignUpUserDto.html":{},"entities/User.html":{}}}],["adds",{"_index":1715,"title":{},"body":{"controllers/PostController.html":{}}}],["admin",{"_index":2350,"title":{},"body":{"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["admin.service",{"_index":1029,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/NotificationService.html":{}}}],["admin.service.ts",{"_index":2290,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin/signup",{"_index":681,"title":{},"body":{"controllers/AuthController.html":{}}}],["aed",{"_index":1561,"title":{},"body":{"injectables/PaymentService.html":{}}}],["afterload",{"_index":1660,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["allows",{"_index":1060,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["already",{"_index":599,"title":{},"body":{"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/BlockService.html":{},"injectables/FollowService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["analytic",{"_index":318,"title":{},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{},"coverage.html":{}}}],["analytics",{"_index":248,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{}}}],["analytics.controller",{"_index":299,"title":{},"body":{"modules/AnalyticsModule.html":{}}}],["analytics.service",{"_index":267,"title":{},"body":{"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{}}}],["analyticscontroller",{"_index":244,"title":{"controllers/AnalyticsController.html":{}},"body":{"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"coverage.html":{}}}],["analyticsmodule",{"_index":285,"title":{"modules/AnalyticsModule.html":{}},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["analyticsservice",{"_index":266,"title":{"injectables/AnalyticsService.html":{}},"body":{"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"coverage.html":{},"overview.html":{}}}],["annotation",{"_index":2075,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["apis",{"_index":1709,"title":{},"body":{"controllers/PostController.html":{}}}],["apiversion",{"_index":1525,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["app",{"_index":451,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":382,"title":{},"body":{"modules/AppModule.html":{}}}],["appeal",{"_index":185,"title":{"entities/Appeal.html":{}},"body":{"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1674493007150.html":{},"modules/AppModule.html":{},"entities/Appeal.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"entities/User.html":{},"coverage.html":{}}}],["appeal.appealedby",{"_index":2175,"title":{},"body":{"entities/User.html":{}}}],["appeal.appealedpost",{"_index":1635,"title":{},"body":{"entities/Post.html":{}}}],["appeal.status",{"_index":598,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appeal/:postid",{"_index":548,"title":{},"body":{"controllers/AppealsController.html":{}}}],["appeal/:postid')@roles(role.admin",{"_index":505,"title":{},"body":{"controllers/AppealsController.html":{}}}],["appealcount",{"_index":345,"title":{},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["appealdto",{"_index":489,"title":{"classes/AppealDto.html":{}},"body":{"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"coverage.html":{}}}],["appealed",{"_index":600,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appealedby",{"_index":463,"title":{},"body":{"entities/Appeal.html":{}}}],["appealedbyid",{"_index":188,"title":{},"body":{"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["appealedpost",{"_index":464,"title":{},"body":{"entities/Appeal.html":{}}}],["appealedpostid",{"_index":187,"title":{},"body":{"classes/$npmConfigName1673770456243.html":{}}}],["appealpost",{"_index":574,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appealpost(req.user",{"_index":544,"title":{},"body":{"controllers/AppealsController.html":{}}}],["appealpost(user",{"_index":580,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appealrepository",{"_index":578,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appeals",{"_index":329,"title":{},"body":{"injectables/AnalyticsService.html":{},"entities/Appeal.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["appeals')@roles(role.admin",{"_index":513,"title":{},"body":{"controllers/AppealsController.html":{}}}],["appeals.controller",{"_index":569,"title":{},"body":{"modules/AppealsModule.html":{}}}],["appeals.items",{"_index":650,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appeals.itemscount",{"_index":649,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appeals.service",{"_index":538,"title":{},"body":{"controllers/AppealsController.html":{},"modules/AppealsModule.html":{}}}],["appeals/:postid",{"_index":517,"title":{},"body":{"controllers/AppealsController.html":{}}}],["appeals/entities/appeal.entity",{"_index":1665,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["appealsandcount[0",{"_index":646,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appealsandcount[0].length",{"_index":648,"title":{},"body":{"injectables/AppealsService.html":{}}}],["appealscontroller",{"_index":495,"title":{"controllers/AppealsController.html":{}},"body":{"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"coverage.html":{}}}],["appealsmodule",{"_index":368,"title":{"modules/AppealsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules.html":{},"overview.html":{}}}],["appealsservice",{"_index":537,"title":{"injectables/AppealsService.html":{}},"body":{"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"coverage.html":{},"overview.html":{}}}],["application",{"_index":1630,"title":{},"body":{"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["appmodule",{"_index":364,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":379,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["asc",{"_index":1452,"title":{},"body":{"classes/PageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["async",{"_index":15,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["atlas",{"_index":2411,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":653,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":752,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":265,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["auth.guard.ts",{"_index":1242,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":703,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/guards/jwt",{"_index":264,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["auth/guards/roles.guard",{"_index":536,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/NotificationController.html":{},"controllers/ReportController.html":{}}}],["authcontroller",{"_index":651,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":665,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["authguard",{"_index":1243,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":1244,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":1282,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":369,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":876,"title":{},"body":{"entities/Comment.html":{},"properties.html":{}}}],["authorid",{"_index":168,"title":{},"body":{"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["authorization",{"_index":1255,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authorized",{"_index":337,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["authservice",{"_index":702,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":442,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":449,"title":{},"body":{"modules/AppModule.html":{},"classes/SignUpUserDto.html":{}}}],["avatar",{"_index":1008,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["await",{"_index":37,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["b",{"_index":610,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{}}}],["back",{"_index":684,"title":{},"body":{"controllers/AuthController.html":{}}}],["badrequestexception",{"_index":313,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"injectables/ReportService.html":{}}}],["badrequestexception(\"user",{"_index":1571,"title":{},"body":{"injectables/PaymentService.html":{}}}],["badrequestexception('follow",{"_index":1200,"title":{},"body":{"injectables/FollowService.html":{}}}],["badrequestexception('invalid",{"_index":1785,"title":{},"body":{"controllers/PostController.html":{}}}],["badrequestexception('no",{"_index":1372,"title":{},"body":{"injectables/NotificationService.html":{}}}],["badrequestexception('post",{"_index":339,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{}}}],["badrequestexception('target",{"_index":1355,"title":{},"body":{"injectables/NotificationService.html":{}}}],["badrequestexception('this",{"_index":1205,"title":{},"body":{"injectables/FollowService.html":{}}}],["badrequestexception('user",{"_index":625,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["badrequestexception('you",{"_index":336,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/BlockService.html":{},"injectables/FollowService.html":{}}}],["badrequestexception(`webhook",{"_index":1586,"title":{},"body":{"injectables/PaymentService.html":{}}}],["ban",{"_index":2004,"title":{},"body":{"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["ban.entity",{"_index":401,"title":{},"body":{"modules/AppModule.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["ban.entity.ts",{"_index":2248,"title":{},"body":{"entities/UserBan.html":{},"coverage.html":{}}}],["ban.entity.ts:14",{"_index":2253,"title":{},"body":{"entities/UserBan.html":{}}}],["ban.entity.ts:17",{"_index":2256,"title":{},"body":{"entities/UserBan.html":{}}}],["ban.entity.ts:20",{"_index":2254,"title":{},"body":{"entities/UserBan.html":{}}}],["ban.entity.ts:23",{"_index":2252,"title":{},"body":{"entities/UserBan.html":{}}}],["ban.entity.ts:29",{"_index":2251,"title":{},"body":{"entities/UserBan.html":{}}}],["banned",{"_index":738,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReportController.html":{},"entities/UserBan.html":{}}}],["banneduser",{"_index":2249,"title":{},"body":{"entities/UserBan.html":{}}}],["banneduserid",{"_index":130,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["banpost",{"_index":1838,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["banpost(postid",{"_index":1899,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["banpost(req",{"_index":1846,"title":{},"body":{"controllers/ReportController.html":{}}}],["bans",{"_index":1851,"title":{},"body":{"controllers/ReportController.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["banstatus",{"_index":2141,"title":{},"body":{"injectables/TasksService.html":{},"entities/UserBan.html":{},"miscellaneous/enumerations.html":{}}}],["banstatus.active",{"_index":2255,"title":{},"body":{"entities/UserBan.html":{}}}],["banuser",{"_index":1839,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["banuser(req",{"_index":1852,"title":{},"body":{"controllers/ReportController.html":{}}}],["banuser(userid",{"_index":1897,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["base",{"_index":798,"title":{},"body":{"classes/BaseEntity.html":{}}}],["baseentity",{"_index":478,"title":{"classes/BaseEntity.html":{}},"body":{"entities/Appeal.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["basic",{"_index":237,"title":{},"body":{"classes/$npmConfigName1674544597118.html":{},"miscellaneous/enumerations.html":{}}}],["bcryptjs",{"_index":932,"title":{},"body":{"injectables/EncryptionService.html":{},"dependencies.html":{}}}],["before",{"_index":2239,"title":{},"body":{"entities/User.html":{}}}],["beforeinsert",{"_index":2224,"title":{},"body":{"entities/User.html":{}}}],["being",{"_index":1072,"title":{},"body":{"entities/Follow.html":{},"entities/FollowRequest.html":{}}}],["bio",{"_index":242,"title":{},"body":{"classes/$npmConfigName1675177507147.html":{},"classes/UpdateUserBioDto.html":{},"entities/User.html":{}}}],["block",{"_index":193,"title":{"entities/Block.html":{}},"body":{"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1674493007150.html":{},"modules/AppModule.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/User.html":{},"coverage.html":{}}}],["block.blockeduser",{"_index":2180,"title":{},"body":{"entities/User.html":{}}}],["block.blockeduser.id",{"_index":860,"title":{},"body":{"injectables/BlockService.html":{}}}],["block.blockinguser",{"_index":2182,"title":{},"body":{"entities/User.html":{}}}],["block.controller",{"_index":843,"title":{},"body":{"modules/BlockModule.html":{}}}],["block.id",{"_index":873,"title":{},"body":{"injectables/BlockService.html":{}}}],["block.service",{"_index":826,"title":{},"body":{"controllers/BlockController.html":{},"modules/BlockModule.html":{}}}],["block/entities/block.entity",{"_index":2230,"title":{},"body":{"entities/User.html":{}}}],["blockcontroller",{"_index":814,"title":{"controllers/BlockController.html":{}},"body":{"controllers/BlockController.html":{},"modules/BlockModule.html":{},"coverage.html":{}}}],["blocked",{"_index":861,"title":{},"body":{"injectables/BlockService.html":{},"entities/User.html":{}}}],["blockedby",{"_index":2173,"title":{},"body":{"entities/User.html":{}}}],["blockeduser",{"_index":805,"title":{},"body":{"entities/Block.html":{}}}],["blockeduserid",{"_index":195,"title":{},"body":{"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["blockid",{"_index":871,"title":{},"body":{"injectables/BlockService.html":{}}}],["blockinguser",{"_index":806,"title":{},"body":{"entities/Block.html":{},"injectables/BlockService.html":{}}}],["blockinguser.blocks.map((block",{"_index":859,"title":{},"body":{"injectables/BlockService.html":{}}}],["blockinguserid",{"_index":194,"title":{},"body":{"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["blockmodule",{"_index":370,"title":{"modules/BlockModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BlockModule.html":{},"modules.html":{},"overview.html":{}}}],["blockrepository",{"_index":849,"title":{},"body":{"injectables/BlockService.html":{}}}],["blocks",{"_index":813,"title":{},"body":{"entities/Block.html":{},"injectables/BlockService.html":{},"entities/User.html":{}}}],["blocks.blockeduser",{"_index":858,"title":{},"body":{"injectables/BlockService.html":{}}}],["blockservice",{"_index":825,"title":{"injectables/BlockService.html":{}},"body":{"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"coverage.html":{},"overview.html":{}}}],["blockuser",{"_index":816,"title":{},"body":{"controllers/BlockController.html":{},"injectables/BlockService.html":{}}}],["blockuser(@request",{"_index":829,"title":{},"body":{"controllers/BlockController.html":{}}}],["blockuser(id",{"_index":831,"title":{},"body":{"controllers/BlockController.html":{},"injectables/BlockService.html":{}}}],["blockuser(req",{"_index":818,"title":{},"body":{"controllers/BlockController.html":{}}}],["body",{"_index":529,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{}}}],["body).then((post",{"_index":1787,"title":{},"body":{"controllers/PostController.html":{}}}],["body.confirmpassword",{"_index":714,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.id",{"_index":1946,"title":{},"body":{"injectables/ReportService.html":{}}}],["body.password",{"_index":713,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.postid",{"_index":595,"title":{},"body":{"injectables/AppealsService.html":{}}}],["body.reason",{"_index":1968,"title":{},"body":{"injectables/ReportService.html":{}}}],["body.text",{"_index":617,"title":{},"body":{"injectables/AppealsService.html":{}}}],["boilerplate",{"_index":2427,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":1411,"title":{},"body":{"classes/PageMetaDto.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"guards/RolesGuard.html":{},"entities/User.html":{}}}],["bootstrap",{"_index":2300,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":1910,"title":{},"body":{"classes/ReportDto.html":{}}}],["break",{"_index":1604,"title":{},"body":{"injectables/PaymentService.html":{}}}],["broadcast",{"_index":2386,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["browse",{"_index":2431,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2428,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1028,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["bucket(process.env.firebase_bucket_name",{"_index":1052,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["bucket.file(`users/${userid}/avatars/${imageid}.png",{"_index":1040,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["bucket.file(`users/${userid}/avatars/${previousimageid}.png",{"_index":1049,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["bucket.file(`users/${userid}/posts/${postid}/${imageid}.png",{"_index":1055,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["bulk",{"_index":2112,"title":{},"body":{"injectables/TasksService.html":{}}}],["bullying",{"_index":2395,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["bullyingorharrassement",{"_index":2394,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["called",{"_index":772,"title":{},"body":{"injectables/AuthService.html":{}}}],["canactivate",{"_index":2038,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":2042,"title":{},"body":{"guards/RolesGuard.html":{}}}],["cancel_url",{"_index":1568,"title":{},"body":{"injectables/PaymentService.html":{}}}],["caption",{"_index":66,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"entities/Post.html":{},"entities/Scrapbook.html":{}}}],["card",{"_index":1558,"title":{},"body":{"injectables/PaymentService.html":{}}}],["cascade",{"_index":176,"title":{},"body":{"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{},"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["case",{"_index":1589,"title":{},"body":{"injectables/PaymentService.html":{}}}],["catch",{"_index":1585,"title":{},"body":{"injectables/PaymentService.html":{}}}],["catch((err",{"_index":280,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["celebrity",{"_index":2389,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["change",{"_index":52,"title":{},"body":{"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673337064308.html":{}}}],["check",{"_index":668,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["class",{"_index":0,"title":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/AppealDto.html":{},"classes/BaseEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PostAnalyticResposneDto.html":{},"classes/ReportDto.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"classes/AppealDto.html":{},"classes/BaseEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PostAnalyticResposneDto.html":{},"classes/ReportDto.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"overview.html":{}}}],["cloud/storage",{"_index":1035,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["cluster_analyticsmodule",{"_index":288,"title":{},"body":{"modules/AnalyticsModule.html":{},"overview.html":{}}}],["cluster_analyticsmodule_providers",{"_index":289,"title":{},"body":{"modules/AnalyticsModule.html":{},"overview.html":{}}}],["cluster_appealsmodule",{"_index":566,"title":{},"body":{"modules/AppealsModule.html":{},"overview.html":{}}}],["cluster_appealsmodule_providers",{"_index":567,"title":{},"body":{"modules/AppealsModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":365,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":367,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":366,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":739,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":740,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":742,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":741,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_blockmodule",{"_index":840,"title":{},"body":{"modules/BlockModule.html":{},"overview.html":{}}}],["cluster_blockmodule_providers",{"_index":841,"title":{},"body":{"modules/BlockModule.html":{},"overview.html":{}}}],["cluster_feedmodule",{"_index":952,"title":{},"body":{"modules/FeedModule.html":{},"overview.html":{}}}],["cluster_feedmodule_providers",{"_index":953,"title":{},"body":{"modules/FeedModule.html":{},"overview.html":{}}}],["cluster_followmodule",{"_index":1140,"title":{},"body":{"modules/FollowModule.html":{},"overview.html":{}}}],["cluster_followmodule_providers",{"_index":1141,"title":{},"body":{"modules/FollowModule.html":{},"overview.html":{}}}],["cluster_notificationmodule",{"_index":1320,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_notificationmodule_exports",{"_index":1321,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_notificationmodule_providers",{"_index":1322,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_paymentmodule",{"_index":1502,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_paymentmodule_imports",{"_index":1503,"title":{},"body":{"modules/PaymentModule.html":{}}}],["cluster_paymentmodule_providers",{"_index":1504,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":1816,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_exports",{"_index":1818,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_providers",{"_index":1817,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_reportmodule",{"_index":1915,"title":{},"body":{"modules/ReportModule.html":{},"overview.html":{}}}],["cluster_reportmodule_providers",{"_index":1916,"title":{},"body":{"modules/ReportModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":2105,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_providers",{"_index":2106,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":2260,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2261,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":2262,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":46,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"entities/Appeal.html":{},"entities/Comment.html":{},"entities/FollowRequest.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["column({default",{"_index":475,"title":{},"body":{"entities/Appeal.html":{},"entities/FollowRequest.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["column({select",{"_index":2205,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":1641,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["comment",{"_index":166,"title":{"entities/Comment.html":{}},"body":{"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1674493007150.html":{},"modules/AppModule.html":{},"entities/Comment.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"entities/User.html":{},"coverage.html":{}}}],["comment.author",{"_index":2184,"title":{},"body":{"entities/User.html":{}}}],["comment.entity",{"_index":1663,"title":{},"body":{"entities/Post.html":{}}}],["comment.post",{"_index":1638,"title":{},"body":{"entities/Post.html":{}}}],["commentcount",{"_index":341,"title":{},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["commentid",{"_index":1724,"title":{},"body":{"controllers/PostController.html":{}}}],["comments",{"_index":328,"title":{},"body":{"injectables/AnalyticsService.html":{},"entities/Comment.html":{},"injectables/FeedService.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"entities/User.html":{}}}],["comments.author",{"_index":972,"title":{},"body":{"injectables/FeedService.html":{}}}],["comments/:id",{"_index":1734,"title":{},"body":{"controllers/PostController.html":{}}}],["common/entities/base.entity",{"_index":479,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["common/services/encryption.service",{"_index":2225,"title":{},"body":{"entities/User.html":{}}}],["common/services/firebase",{"_index":1345,"title":{},"body":{"injectables/NotificationService.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["compare",{"_index":925,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["compare(password",{"_index":936,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["comparepasswords",{"_index":918,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["comparepasswords(password",{"_index":920,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["compares",{"_index":923,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["comparing",{"_index":917,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["concat(publicposts",{"_index":975,"title":{},"body":{"injectables/FeedService.html":{}}}],["config",{"_index":2445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configmodule",{"_index":383,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":420,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":384,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('database_host",{"_index":434,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_name",{"_index":439,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_password",{"_index":438,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_username",{"_index":436,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":685,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmpassword",{"_index":2082,"title":{},"body":{"classes/SignUpUserDto.html":{},"classes/UpdateUserPasseordDto.html":{}}}],["console.log(`unhandled",{"_index":1627,"title":{},"body":{"injectables/PaymentService.html":{}}}],["console.log(err",{"_index":1603,"title":{},"body":{"injectables/PaymentService.html":{}}}],["console.log(users.length",{"_index":2147,"title":{},"body":{"injectables/TasksService.html":{}}}],["const",{"_index":323,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{}}}],["constants",{"_index":754,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["constants/ban",{"_index":2257,"title":{},"body":{"entities/UserBan.html":{}}}],["constants/follow",{"_index":1158,"title":{},"body":{"entities/FollowRequest.html":{}}}],["constants/gender.enum",{"_index":2229,"title":{},"body":{"entities/User.html":{}}}],["constants/notification",{"_index":2231,"title":{},"body":{"entities/User.html":{}}}],["constants/report",{"_index":483,"title":{},"body":{"entities/Appeal.html":{},"entities/PostReport.html":{},"entities/UserReport.html":{}}}],["constants/role.enum",{"_index":2226,"title":{},"body":{"entities/User.html":{}}}],["constants/subscription",{"_index":2233,"title":{},"body":{"entities/User.html":{}}}],["constants/visibility.enum",{"_index":1661,"title":{},"body":{"entities/Post.html":{},"entities/Scrapbook.html":{}}}],["constraint",{"_index":75,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["constructor",{"_index":305,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{}}}],["constructor(appealrepository",{"_index":575,"title":{},"body":{"injectables/AppealsService.html":{}}}],["constructor(authservice",{"_index":1284,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(blockrepository",{"_index":847,"title":{},"body":{"injectables/BlockService.html":{}}}],["constructor(data",{"_index":1390,"title":{},"body":{"classes/PageDto.html":{}}}],["constructor(postrepository",{"_index":306,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/FeedService.html":{}}}],["constructor(private",{"_index":270,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"guards/RolesGuard.html":{}}}],["constructor(reflector",{"_index":2039,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(undefined",{"_index":1408,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["constructor(userreportsrepository",{"_index":1922,"title":{},"body":{"injectables/ReportService.html":{}}}],["constructor(userrepository",{"_index":1511,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/TasksService.html":{}}}],["constructor(usersrepository",{"_index":1160,"title":{},"body":{"injectables/FollowService.html":{},"injectables/NotificationService.html":{}}}],["constructor(usersservice",{"_index":762,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":2045,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":2051,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":2050,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":2052,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":243,"title":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"coverage.html":{}}}],["controller('analytics",{"_index":269,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["controller('appeals",{"_index":540,"title":{},"body":{"controllers/AppealsController.html":{}}}],["controller('auth",{"_index":709,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('block",{"_index":827,"title":{},"body":{"controllers/BlockController.html":{}}}],["controller('feed",{"_index":946,"title":{},"body":{"controllers/FeedController.html":{}}}],["controller('follow",{"_index":1115,"title":{},"body":{"controllers/FollowController.html":{}}}],["controller('notification",{"_index":1309,"title":{},"body":{"controllers/NotificationController.html":{}}}],["controller('payment",{"_index":1485,"title":{},"body":{"controllers/PaymentController.html":{}}}],["controller('post",{"_index":1765,"title":{},"body":{"controllers/PostController.html":{}}}],["controller('report",{"_index":1881,"title":{},"body":{"controllers/ReportController.html":{}}}],["controllers",{"_index":245,"title":{},"body":{"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"controllers/ReportController.html":{},"modules/ReportModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":2276,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":690,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["create.dto",{"_index":1760,"title":{},"body":{"controllers/PostController.html":{}}}],["create.dto.ts",{"_index":887,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"coverage.html":{}}}],["create.dto.ts:11",{"_index":896,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["create.dto.ts:14",{"_index":898,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["create.dto.ts:17",{"_index":899,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["create.dto.ts:20",{"_index":897,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["create.dto.ts:24",{"_index":901,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["create.dto.ts:6",{"_index":889,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["create.dto.ts:9",{"_index":895,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["create.dts",{"_index":1762,"title":{},"body":{"controllers/PostController.html":{}}}],["create.dts.ts",{"_index":907,"title":{},"body":{"classes/CreateScrapBookDto.html":{},"coverage.html":{}}}],["create.dts.ts:10",{"_index":908,"title":{},"body":{"classes/CreateScrapBookDto.html":{}}}],["create.dts.ts:13",{"_index":910,"title":{},"body":{"classes/CreateScrapBookDto.html":{}}}],["create.dts.ts:16",{"_index":909,"title":{},"body":{"classes/CreateScrapBookDto.html":{}}}],["create.dts.ts:20",{"_index":911,"title":{},"body":{"classes/CreateScrapBookDto.html":{}}}],["createcommentdto",{"_index":885,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["createdat",{"_index":59,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"injectables/AnalyticsService.html":{},"classes/BaseEntity.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["createdatecolumn",{"_index":799,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createpost",{"_index":1693,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost(body",{"_index":1716,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost(req.user",{"_index":1772,"title":{},"body":{"controllers/PostController.html":{}}}],["createpostdto",{"_index":892,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["createquerybuilder",{"_index":635,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["creates",{"_index":1722,"title":{},"body":{"controllers/PostController.html":{}}}],["createscrapbook",{"_index":1694,"title":{},"body":{"controllers/PostController.html":{}}}],["createscrapbook(@body",{"_index":1783,"title":{},"body":{"controllers/PostController.html":{}}}],["createscrapbook(body",{"_index":1719,"title":{},"body":{"controllers/PostController.html":{}}}],["createscrapbookdto",{"_index":905,"title":{"classes/CreateScrapBookDto.html":{}},"body":{"classes/CreateScrapBookDto.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["creating",{"_index":680,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"classes/ReportDto.html":{}}}],["credential",{"_index":2441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["credential.cert(serviceaccount",{"_index":2442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cron",{"_index":2139,"title":{},"body":{"injectables/TasksService.html":{}}}],["cron(cronexpression.every_day_at_midnight",{"_index":2126,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronexpression",{"_index":2140,"title":{},"body":{"injectables/TasksService.html":{}}}],["currency",{"_index":1560,"title":{},"body":{"injectables/PaymentService.html":{}}}],["current_timestamp",{"_index":155,"title":{},"body":{"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["current_timestamp(6",{"_index":61,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{}}}],["currentpassword",{"_index":2164,"title":{},"body":{"classes/UpdateUserPasseordDto.html":{}}}],["customer",{"_index":1539,"title":{},"body":{"injectables/PaymentService.html":{}}}],["customer.id",{"_index":1551,"title":{},"body":{"injectables/PaymentService.html":{}}}],["customer.subscription.deleted",{"_index":1614,"title":{},"body":{"injectables/PaymentService.html":{}}}],["customerid",{"_index":2102,"title":{},"body":{"injectables/StripeService.html":{}}}],["data",{"_index":1388,"title":{},"body":{"classes/PageDto.html":{},"classes/SignUpUserDto.html":{}}}],["database",{"_index":428,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"index.html":{}}}],["database_host",{"_index":432,"title":{},"body":{"modules/AppModule.html":{}}}],["databse",{"_index":2415,"title":{},"body":{"index.html":{}}}],["date",{"_index":1014,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{}}}],["date(a.createdat).gettime",{"_index":977,"title":{},"body":{"injectables/FeedService.html":{}}}],["date(b.createdat).gettime",{"_index":976,"title":{},"body":{"injectables/FeedService.html":{}}}],["date(date.now",{"_index":2009,"title":{},"body":{"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["date(post.createdat",{"_index":353,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["date.now",{"_index":1020,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["date.parse(a.createdat))[0].reason",{"_index":612,"title":{},"body":{"injectables/AppealsService.html":{}}}],["date.parse(b.createdat",{"_index":611,"title":{},"body":{"injectables/AppealsService.html":{}}}],["dateofbirth",{"_index":2083,"title":{},"body":{"classes/SignUpUserDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"entities/User.html":{}}}],["dates",{"_index":2152,"title":{},"body":{"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["datetime",{"_index":128,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{}}}],["datetime(6",{"_index":60,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{}}}],["days",{"_index":1037,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["dbuser",{"_index":623,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/PaymentService.html":{}}}],["dbuser.appeals",{"_index":627,"title":{},"body":{"injectables/AppealsService.html":{}}}],["dbuser.appeals.length",{"_index":626,"title":{},"body":{"injectables/AppealsService.html":{}}}],["dbuser.email",{"_index":1545,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dbuser.firstname",{"_index":1546,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dbuser.followers.map((follow",{"_index":1219,"title":{},"body":{"injectables/FollowService.html":{}}}],["dbuser.following.map((follow",{"_index":1221,"title":{},"body":{"injectables/FollowService.html":{}}}],["dbuser.following.map((user",{"_index":973,"title":{},"body":{"injectables/FeedService.html":{}}}],["dbuser.followrequestsreceived",{"_index":1225,"title":{},"body":{"injectables/FollowService.html":{}}}],["dbuser.followrequestsreceived.length",{"_index":1224,"title":{},"body":{"injectables/FollowService.html":{}}}],["dbuser.followrequestssent",{"_index":1227,"title":{},"body":{"injectables/FollowService.html":{}}}],["dbuser.followrequestssent.length",{"_index":1226,"title":{},"body":{"injectables/FollowService.html":{}}}],["dbuser.hasstripaccount",{"_index":1543,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dbuser.lastname",{"_index":1547,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dbuser.phonenumber",{"_index":1549,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dbuser.stripecustomerid",{"_index":1559,"title":{},"body":{"injectables/PaymentService.html":{}}}],["dbuser.subscriptionplan",{"_index":1541,"title":{},"body":{"injectables/PaymentService.html":{}}}],["decorator",{"_index":693,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators",{"_index":253,"title":{},"body":{"controllers/AnalyticsController.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"controllers/FeedController.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"controllers/NotificationController.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["default",{"_index":21,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"entities/Appeal.html":{},"injectables/FirebaseStorageService.html":{},"entities/FollowRequest.html":{},"classes/PageOptionsDto.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"injectables/StripeService.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":2412,"title":{},"body":{"index.html":{}}}],["defined",{"_index":23,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["delete",{"_index":80,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"controllers/PostController.html":{}}}],["delete('/:id",{"_index":1778,"title":{},"body":{"controllers/PostController.html":{}}}],["delete('comment/:id",{"_index":1806,"title":{},"body":{"controllers/PostController.html":{}}}],["delete('unfollow/:id",{"_index":1128,"title":{},"body":{"controllers/FollowController.html":{}}}],["delete('unlike/:id",{"_index":1812,"title":{},"body":{"controllers/PostController.html":{}}}],["deleteavatar",{"_index":990,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["deleteavatar(imageid",{"_index":997,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["deletecomment",{"_index":1695,"title":{},"body":{"controllers/PostController.html":{}}}],["deletecomment(@request",{"_index":1807,"title":{},"body":{"controllers/PostController.html":{}}}],["deletecomment(req",{"_index":1723,"title":{},"body":{"controllers/PostController.html":{}}}],["deletecomment(req.user",{"_index":1808,"title":{},"body":{"controllers/PostController.html":{}}}],["deletecustomer",{"_index":2099,"title":{},"body":{"injectables/StripeService.html":{}}}],["deletecustomer(customerid",{"_index":2100,"title":{},"body":{"injectables/StripeService.html":{}}}],["deletedcustomer",{"_index":1616,"title":{},"body":{"injectables/PaymentService.html":{}}}],["deletedcustomer.id",{"_index":1619,"title":{},"body":{"injectables/PaymentService.html":{}}}],["deleteduser",{"_index":1618,"title":{},"body":{"injectables/PaymentService.html":{}}}],["deleteduser.id",{"_index":1626,"title":{},"body":{"injectables/PaymentService.html":{}}}],["deletepostbyid",{"_index":1696,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepostbyid(@request",{"_index":1779,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepostbyid(req",{"_index":1727,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepostbyid(req.user",{"_index":1780,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepostimage",{"_index":991,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["deletepostimage(imageid",{"_index":999,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["deleteresult",{"_index":852,"title":{},"body":{"injectables/BlockService.html":{},"injectables/FollowService.html":{}}}],["dependencies",{"_index":287,"title":{"dependencies.html":{}},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":2391,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["description",{"_index":508,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/LocalStrategy.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"entities/Scrapbook.html":{},"classes/SignUpUserDto.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"properties.html":{}}}],["details",{"_index":778,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["developer",{"_index":2422,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":2277,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":1572,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["doing",{"_index":1071,"title":{},"body":{"entities/Follow.html":{},"entities/FollowRequest.html":{}}}],["done",{"_index":812,"title":{},"body":{"entities/Block.html":{}}}],["dotenv",{"_index":1532,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["dotenv.config",{"_index":1536,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["down",{"_index":16,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"injectables/AppealsService.html":{}}}],["down(queryrunner",{"_index":25,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{}}}],["driver",{"_index":2416,"title":{},"body":{"index.html":{}}}],["drop",{"_index":45,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{}}}],["dto",{"_index":894,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"classes/PageOptionsDto.html":{},"classes/ReportDto.html":{},"classes/SignUpUserDto.html":{}}}],["dto/appeal.dto",{"_index":539,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["dto/comment",{"_index":1759,"title":{},"body":{"controllers/PostController.html":{}}}],["dto/post",{"_index":317,"title":{},"body":{"injectables/AnalyticsService.html":{},"controllers/PostController.html":{}}}],["dto/report.dto",{"_index":1878,"title":{},"body":{"controllers/ReportController.html":{}}}],["dto/scrapbook",{"_index":1761,"title":{},"body":{"controllers/PostController.html":{}}}],["dto/send",{"_index":1305,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["dto/user",{"_index":704,"title":{},"body":{"controllers/AuthController.html":{}}}],["each",{"_index":2077,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["email",{"_index":724,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PaymentService.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserEmailDto.html":{},"entities/User.html":{}}}],["emails",{"_index":2161,"title":{},"body":{"classes/UpdateUserEmailDto.html":{}}}],["emailtolowercase",{"_index":2241,"title":{},"body":{"entities/User.html":{}}}],["empty",{"_index":2081,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["encrypt",{"_index":444,"title":{},"body":{"modules/AppModule.html":{},"injectables/EncryptionService.html":{}}}],["encrypted",{"_index":930,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encrypting",{"_index":916,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryptionservice",{"_index":781,"title":{"injectables/EncryptionService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/EncryptionService.html":{},"entities/User.html":{},"coverage.html":{}}}],["encryptionservice().comparepasswords(pass",{"_index":788,"title":{},"body":{"injectables/AuthService.html":{}}}],["encryptionservice().encryptpassword(this.password",{"_index":2246,"title":{},"body":{"entities/User.html":{}}}],["encryptpassword",{"_index":919,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryptpassword(password",{"_index":927,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encrypts",{"_index":929,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["enddate",{"_index":129,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"entities/UserBan.html":{}}}],["endpointsecret",{"_index":1509,"title":{},"body":{"injectables/PaymentService.html":{}}}],["engine=innodb",{"_index":74,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{}}}],["ensure",{"_index":1259,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["entities",{"_index":440,"title":{},"body":{"modules/AppModule.html":{},"entities/Appeal.html":{},"injectables/AppealsService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"entities/Comment.html":{},"injectables/FeedService.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"injectables/ReportService.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"overview.html":{}}}],["entities/appeal.entity",{"_index":570,"title":{},"body":{"modules/AppealsModule.html":{},"injectables/AppealsService.html":{}}}],["entities/block.entity",{"_index":844,"title":{},"body":{"modules/BlockModule.html":{},"injectables/BlockService.html":{}}}],["entities/comment.entity",{"_index":1822,"title":{},"body":{"modules/PostModule.html":{}}}],["entities/follow",{"_index":1143,"title":{},"body":{"modules/FollowModule.html":{},"injectables/FollowService.html":{}}}],["entities/follow.entity",{"_index":1144,"title":{},"body":{"modules/FollowModule.html":{},"injectables/FollowService.html":{}}}],["entities/post",{"_index":1823,"title":{},"body":{"modules/PostModule.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{}}}],["entities/post.entity",{"_index":912,"title":{},"body":{"classes/CreateScrapBookDto.html":{},"modules/PostModule.html":{}}}],["entities/scrapbook.entity",{"_index":1821,"title":{},"body":{"modules/PostModule.html":{}}}],["entities/user",{"_index":1918,"title":{},"body":{"modules/ReportModule.html":{},"injectables/ReportService.html":{}}}],["entities/user.entity",{"_index":2266,"title":{},"body":{"modules/UserModule.html":{}}}],["entity",{"_index":461,"title":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}},"body":{"entities/Appeal.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["enumerations",{"_index":2366,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":2413,"title":{},"body":{"index.html":{}}}],["environment",{"_index":425,"title":{},"body":{"modules/AppModule.html":{}}}],["envs",{"_index":2414,"title":{},"body":{"index.html":{}}}],["err",{"_index":1054,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/PaymentService.html":{}}}],["err.message",{"_index":283,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["error",{"_index":686,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"classes/SignUpUserDto.html":{}}}],["event",{"_index":1581,"title":{},"body":{"injectables/PaymentService.html":{}}}],["event.data.object",{"_index":1592,"title":{},"body":{"injectables/PaymentService.html":{}}}],["event.type",{"_index":1588,"title":{},"body":{"injectables/PaymentService.html":{}}}],["everyday",{"_index":2119,"title":{},"body":{"injectables/TasksService.html":{}}}],["excluding",{"_index":779,"title":{},"body":{"injectables/AuthService.html":{}}}],["execute",{"_index":1580,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["executed",{"_index":2238,"title":{},"body":{"entities/User.html":{}}}],["executioncontext",{"_index":2043,"title":{},"body":{"guards/RolesGuard.html":{}}}],["exist",{"_index":340,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/ReportService.html":{}}}],["exists",{"_index":719,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FirebaseStorageService.html":{}}}],["exists[0",{"_index":1059,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["expire",{"_index":2135,"title":{},"body":{"injectables/TasksService.html":{}}}],["expired",{"_index":1260,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"miscellaneous/enumerations.html":{}}}],["expires",{"_index":1045,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["expiresin",{"_index":2452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiry",{"_index":1013,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["expirydate",{"_index":989,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["export",{"_index":36,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"miscellaneous/variables.html":{}}}],["exports",{"_index":745,"title":{},"body":{"modules/AuthModule.html":{},"modules/NotificationModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":268,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"dependencies.html":{}}}],["extends",{"_index":486,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["extract",{"_index":1254,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":1249,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1258,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failcustomer",{"_index":1607,"title":{},"body":{"injectables/PaymentService.html":{}}}],["failcustomer.id",{"_index":1610,"title":{},"body":{"injectables/PaymentService.html":{}}}],["failed",{"_index":1497,"title":{},"body":{"controllers/PaymentController.html":{}}}],["failuser",{"_index":1609,"title":{},"body":{"injectables/PaymentService.html":{}}}],["failuser.id",{"_index":1613,"title":{},"body":{"injectables/PaymentService.html":{}}}],["false",{"_index":350,"title":{},"body":{"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppealsService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"injectables/ReportService.html":{},"entities/User.html":{}}}],["fcm",{"_index":1315,"title":{},"body":{"controllers/NotificationController.html":{}}}],["fcmtoken",{"_index":212,"title":{},"body":{"classes/$npmConfigName1674121256550.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"entities/User.html":{}}}],["fcmtokens",{"_index":1374,"title":{},"body":{"injectables/NotificationService.html":{}}}],["fcmtokens[0",{"_index":1377,"title":{},"body":{"injectables/NotificationService.html":{}}}],["feed",{"_index":939,"title":{},"body":{"controllers/FeedController.html":{}}}],["feed.controller",{"_index":955,"title":{},"body":{"modules/FeedModule.html":{}}}],["feed.service",{"_index":945,"title":{},"body":{"controllers/FeedController.html":{},"modules/FeedModule.html":{}}}],["feedcontroller",{"_index":937,"title":{"controllers/FeedController.html":{}},"body":{"controllers/FeedController.html":{},"modules/FeedModule.html":{},"coverage.html":{}}}],["feedmodule",{"_index":371,"title":{"modules/FeedModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FeedModule.html":{},"modules.html":{},"overview.html":{}}}],["feedservice",{"_index":944,"title":{"injectables/FeedService.html":{}},"body":{"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"coverage.html":{},"overview.html":{}}}],["female",{"_index":2383,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["field",{"_index":913,"title":{},"body":{"classes/CreateScrapBookDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["file(filename",{"_index":1053,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["file).then((post",{"_index":1769,"title":{},"body":{"controllers/PostController.html":{}}}],["file).then((user",{"_index":721,"title":{},"body":{"controllers/AuthController.html":{}}}],["file.getsignedurl(urloptions",{"_index":1047,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["file.save(image",{"_index":1041,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["fileinterceptor",{"_index":698,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["filename",{"_index":1050,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["filter((appeal",{"_index":629,"title":{},"body":{"injectables/AppealsService.html":{}}}],["filter((report",{"_index":608,"title":{},"body":{"injectables/AppealsService.html":{}}}],["find",{"_index":1945,"title":{},"body":{"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["findone",{"_index":1953,"title":{},"body":{"injectables/ReportService.html":{}}}],["firebase",{"_index":987,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["firebaseconfig",{"_index":2292,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebasestorageservice",{"_index":984,"title":{"injectables/FirebaseStorageService.html":{}},"body":{"injectables/FirebaseStorageService.html":{},"entities/Post.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"coverage.html":{}}}],["firstname",{"_index":722,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignUpUserDto.html":{},"entities/User.html":{}}}],["fk_22b6df8103e450a49ea0f9ff939",{"_index":107,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672417201262.html":{}}}],["fk_276779da446413a0d79598d4fbd",{"_index":170,"title":{},"body":{"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_288f29161615bed72435a2f90ee",{"_index":223,"title":{},"body":{"classes/$npmConfigName1674486373359.html":{}}}],["fk_2d3711064572aa0203cba01242b",{"_index":120,"title":{},"body":{"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_2e595b9d3a37e4b72879dddb5ce",{"_index":106,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_37ecc4fc7d8451a768b704c43e0",{"_index":209,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_43cb4b8de8f8cfa4fd2857369c2",{"_index":131,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_48750d6b207c4bd82d30c5dd722",{"_index":224,"title":{},"body":{"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_7b9ec6db412ee31e791072faf29",{"_index":189,"title":{},"body":{"classes/$npmConfigName1673770456243.html":{}}}],["fk_7c5f8647272441265e4c2e61071",{"_index":208,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_929dcdf74558612cc6166981480",{"_index":103,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_94a85bb16d24033a2afdd5df060",{"_index":171,"title":{},"body":{"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{}}}],["fk_a9aad25ed05e8f5a9dffbc17a4a",{"_index":115,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1673027114310.html":{}}}],["fk_aea779e51a733247bccf1f61d9a",{"_index":104,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{}}}],["fk_b5db9533f87c9bc26bbb8ed3d06",{"_index":91,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_baa1c30b37f90c0df2e56257f16",{"_index":92,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{}}}],["fk_c2159058051b11b2f9bb1b36983",{"_index":206,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_c9a8df2f7cbbae1cda940694409",{"_index":197,"title":{},"body":{"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_cac6c15bcaa655e31e86e48f59a",{"_index":196,"title":{},"body":{"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_f4a9d59861c87ba252ead40d84d",{"_index":207,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_f975f729d8f811976339e642f1b",{"_index":190,"title":{},"body":{"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["fk_fb7ffd0860cbcc5cf22c96d3c05",{"_index":76,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["folder",{"_index":447,"title":{},"body":{"modules/AppModule.html":{}}}],["follow",{"_index":200,"title":{"entities/Follow.html":{}},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{},"modules/AppModule.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"injectables/FollowService.html":{},"entities/User.html":{},"coverage.html":{}}}],["follow.controller",{"_index":1145,"title":{},"body":{"modules/FollowModule.html":{}}}],["follow.followed",{"_index":1210,"title":{},"body":{"injectables/FollowService.html":{},"entities/User.html":{}}}],["follow.followed.id",{"_index":1195,"title":{},"body":{"injectables/FollowService.html":{}}}],["follow.followedby",{"_index":1209,"title":{},"body":{"injectables/FollowService.html":{},"entities/User.html":{}}}],["follow.followedby.id",{"_index":1211,"title":{},"body":{"injectables/FollowService.html":{}}}],["follow.id",{"_index":1235,"title":{},"body":{"injectables/FollowService.html":{}}}],["follow.service",{"_index":1114,"title":{},"body":{"controllers/FollowController.html":{},"modules/FollowModule.html":{}}}],["follow/:id",{"_index":1107,"title":{},"body":{"controllers/FollowController.html":{}}}],["follow/:requestid",{"_index":1086,"title":{},"body":{"controllers/FollowController.html":{}}}],["follow_request",{"_index":203,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["followcontroller",{"_index":1073,"title":{"controllers/FollowController.html":{}},"body":{"controllers/FollowController.html":{},"modules/FollowModule.html":{},"coverage.html":{}}}],["followed",{"_index":1064,"title":{},"body":{"entities/Follow.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/User.html":{}}}],["followed.followerscount",{"_index":1214,"title":{},"body":{"injectables/FollowService.html":{}}}],["followedby",{"_index":1065,"title":{},"body":{"entities/Follow.html":{},"injectables/FollowService.html":{}}}],["followedby.followingcount",{"_index":1212,"title":{},"body":{"injectables/FollowService.html":{}}}],["followedbyid",{"_index":201,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["followedid",{"_index":202,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["followers",{"_index":1132,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{},"entities/User.html":{}}}],["followers.followedby",{"_index":1217,"title":{},"body":{"injectables/FollowService.html":{}}}],["followerscount",{"_index":240,"title":{},"body":{"classes/$npmConfigName1675177507147.html":{},"entities/User.html":{}}}],["followid",{"_index":1233,"title":{},"body":{"injectables/FollowService.html":{}}}],["following",{"_index":960,"title":{},"body":{"injectables/FeedService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/User.html":{}}}],["following.followed",{"_index":1186,"title":{},"body":{"injectables/FollowService.html":{}}}],["following.followed.posts",{"_index":961,"title":{},"body":{"injectables/FeedService.html":{}}}],["following.followed.posts.comments",{"_index":965,"title":{},"body":{"injectables/FeedService.html":{}}}],["following.followed.posts.comments.author",{"_index":966,"title":{},"body":{"injectables/FeedService.html":{}}}],["following.followed.posts.likes",{"_index":963,"title":{},"body":{"injectables/FeedService.html":{}}}],["following.followed.posts.likes.likedby",{"_index":964,"title":{},"body":{"injectables/FeedService.html":{}}}],["following.followed.posts.postedby",{"_index":962,"title":{},"body":{"injectables/FeedService.html":{}}}],["followingcount",{"_index":241,"title":{},"body":{"classes/$npmConfigName1675177507147.html":{},"entities/User.html":{}}}],["followmodule",{"_index":372,"title":{"modules/FollowModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FollowModule.html":{},"modules.html":{},"overview.html":{}}}],["followrequest",{"_index":407,"title":{"entities/FollowRequest.html":{}},"body":{"modules/AppModule.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/User.html":{},"coverage.html":{}}}],["followrequest.requestedby",{"_index":1196,"title":{},"body":{"injectables/FollowService.html":{},"entities/User.html":{}}}],["followrequest.requesteduser",{"_index":1197,"title":{},"body":{"injectables/FollowService.html":{},"entities/User.html":{}}}],["followrequest.requesteduser.id",{"_index":1192,"title":{},"body":{"injectables/FollowService.html":{}}}],["followrequest.status",{"_index":1193,"title":{},"body":{"injectables/FollowService.html":{}}}],["followrequestsreceived",{"_index":1222,"title":{},"body":{"injectables/FollowService.html":{},"entities/User.html":{}}}],["followrequestsreceived.requestedby",{"_index":1223,"title":{},"body":{"injectables/FollowService.html":{}}}],["followrequestsrepository",{"_index":1161,"title":{},"body":{"injectables/FollowService.html":{}}}],["followrequestssent",{"_index":1187,"title":{},"body":{"injectables/FollowService.html":{},"entities/User.html":{}}}],["followrequestssent.requesteduser",{"_index":1188,"title":{},"body":{"injectables/FollowService.html":{}}}],["followservice",{"_index":1113,"title":{"injectables/FollowService.html":{}},"body":{"controllers/FollowController.html":{},"modules/FollowModule.html":{},"injectables/FollowService.html":{},"coverage.html":{},"overview.html":{}}}],["followsrepository",{"_index":1162,"title":{},"body":{"injectables/FollowService.html":{}}}],["followstatus",{"_index":1155,"title":{},"body":{"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"miscellaneous/enumerations.html":{}}}],["followstatus.accepted",{"_index":1204,"title":{},"body":{"injectables/FollowService.html":{}}}],["followstatus.pending",{"_index":1156,"title":{},"body":{"entities/FollowRequest.html":{},"injectables/FollowService.html":{}}}],["followstatus.rejected",{"_index":1207,"title":{},"body":{"injectables/FollowService.html":{}}}],["forbiddenexception",{"_index":695,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FollowService.html":{}}}],["forbiddenexception('user",{"_index":737,"title":{},"body":{"controllers/AuthController.html":{}}}],["forbiddenexception('you",{"_index":1201,"title":{},"body":{"injectables/FollowService.html":{}}}],["foreign",{"_index":77,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["found",{"_index":596,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/LocalStrategy.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["frontend",{"_index":1449,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["function",{"_index":1039,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"coverage.html":{}}}],["functions",{"_index":2404,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":138,"title":{},"body":{"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["gender.undefined",{"_index":2196,"title":{},"body":{"entities/User.html":{}}}],["generate",{"_index":1428,"title":{},"body":{"interfaces/PageMetaDtoParameters.html":{}}}],["get('/:id",{"_index":1776,"title":{},"body":{"controllers/PostController.html":{}}}],["get('cancel",{"_index":1472,"title":{},"body":{"controllers/PaymentController.html":{}}}],["get('follow",{"_index":1137,"title":{},"body":{"controllers/FollowController.html":{}}}],["get('followers",{"_index":1133,"title":{},"body":{"controllers/FollowController.html":{}}}],["get('following",{"_index":1135,"title":{},"body":{"controllers/FollowController.html":{}}}],["get('post",{"_index":556,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["get('post/:id",{"_index":272,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["get('reported",{"_index":1904,"title":{},"body":{"controllers/ReportController.html":{}}}],["get('scrapbook/:id",{"_index":1799,"title":{},"body":{"controllers/PostController.html":{}}}],["get('scrapbook/user",{"_index":1796,"title":{},"body":{"controllers/PostController.html":{}}}],["get('success",{"_index":1475,"title":{},"body":{"controllers/PaymentController.html":{}}}],["get('user",{"_index":559,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["getfeed",{"_index":940,"title":{},"body":{"controllers/FeedController.html":{},"injectables/FeedService.html":{}}}],["getfeed(@request",{"_index":947,"title":{},"body":{"controllers/FeedController.html":{}}}],["getfeed(req",{"_index":941,"title":{},"body":{"controllers/FeedController.html":{}}}],["getfeed(req.user",{"_index":949,"title":{},"body":{"controllers/FeedController.html":{}}}],["getfeed(user",{"_index":958,"title":{},"body":{"injectables/FeedService.html":{}}}],["getfollowers",{"_index":1076,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["getfollowers(req",{"_index":1088,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowers(req.user",{"_index":1134,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowers(user",{"_index":1167,"title":{},"body":{"injectables/FollowService.html":{}}}],["getfollowing",{"_index":1077,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["getfollowing(req",{"_index":1091,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowing(req.user",{"_index":1136,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowing(user",{"_index":1169,"title":{},"body":{"injectables/FollowService.html":{}}}],["getfollowrequestsreceived",{"_index":1078,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["getfollowrequestsreceived(req",{"_index":1094,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowrequestsreceived(req.user",{"_index":1138,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowrequestsreceived(user",{"_index":1171,"title":{},"body":{"injectables/FollowService.html":{}}}],["getfollowrequestssent",{"_index":1079,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["getfollowrequestssent(req",{"_index":1099,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowrequestssent(req.user",{"_index":1139,"title":{},"body":{"controllers/FollowController.html":{}}}],["getfollowrequestssent(user",{"_index":1173,"title":{},"body":{"injectables/FollowService.html":{}}}],["gethello",{"_index":457,"title":{},"body":{"injectables/AppService.html":{}}}],["getmanyandcount",{"_index":643,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["getmessaging",{"_index":2446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getpostanalytics",{"_index":249,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{}}}],["getpostanalytics(@request",{"_index":273,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["getpostanalytics(req",{"_index":250,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["getpostanalytics(req.user",{"_index":276,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["getpostanalytics(user",{"_index":311,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["getpostappeals",{"_index":498,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["getpostappeals(@request",{"_index":562,"title":{},"body":{"controllers/AppealsController.html":{}}}],["getpostappeals(pageoptionsdto",{"_index":563,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["getpostappeals(req",{"_index":510,"title":{},"body":{"controllers/AppealsController.html":{}}}],["getpostappealsbyid",{"_index":499,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["getpostappealsbyid(postid",{"_index":557,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["getpostappealsbyid(req",{"_index":515,"title":{},"body":{"controllers/AppealsController.html":{}}}],["getpostbyid",{"_index":1697,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostbyid(@param('id",{"_index":1777,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostbyid(id",{"_index":1730,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostcomments",{"_index":1698,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostcomments(postid",{"_index":1733,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostimagesignedurl",{"_index":992,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["getpostimagesignedurl(imageid",{"_index":1001,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["getpostreports",{"_index":1840,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["getpostreports(id",{"_index":1928,"title":{},"body":{"injectables/ReportService.html":{}}}],["getpostreports(params.id",{"_index":1889,"title":{},"body":{"controllers/ReportController.html":{}}}],["getpostreports(req",{"_index":1855,"title":{},"body":{"controllers/ReportController.html":{}}}],["getrawone",{"_index":786,"title":{},"body":{"injectables/AuthService.html":{}}}],["getreportedposts",{"_index":1841,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["getreportedposts(@request",{"_index":1905,"title":{},"body":{"controllers/ReportController.html":{}}}],["getreportedposts(pageoptionsdto",{"_index":1906,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["getreportedposts(req",{"_index":1858,"title":{},"body":{"controllers/ReportController.html":{}}}],["getreportedusers",{"_index":1842,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["getreportedusers(@request",{"_index":1907,"title":{},"body":{"controllers/ReportController.html":{}}}],["getreportedusers(pageoptionsdto",{"_index":1908,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["getreportedusers(req",{"_index":1862,"title":{},"body":{"controllers/ReportController.html":{}}}],["getscrapbookbyid(params.id",{"_index":1801,"title":{},"body":{"controllers/PostController.html":{}}}],["getsignedurl",{"_index":993,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["getsignedurl(urloptions",{"_index":1062,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["getsignedurl(userid",{"_index":1003,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["getsignedurlconfig",{"_index":1033,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["getskip",{"_index":1440,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["getstorage",{"_index":2449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getstorage().bucket",{"_index":2440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getting",{"_index":2406,"title":{"index.html":{}},"body":{}}],["getuserappeals",{"_index":500,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["getuserappeals(@request",{"_index":560,"title":{},"body":{"controllers/AppealsController.html":{}}}],["getuserappeals(req",{"_index":519,"title":{},"body":{"controllers/AppealsController.html":{}}}],["getuserappeals(req.user",{"_index":561,"title":{},"body":{"controllers/AppealsController.html":{}}}],["getuserappeals(user",{"_index":584,"title":{},"body":{"injectables/AppealsService.html":{}}}],["getusercomments",{"_index":1699,"title":{},"body":{"controllers/PostController.html":{}}}],["getusercomments(userid",{"_index":1736,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserposts",{"_index":1700,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserposts(@request",{"_index":1774,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserposts(req",{"_index":1738,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserposts(req.user",{"_index":1775,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserreports",{"_index":1843,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["getuserreports(id",{"_index":1932,"title":{},"body":{"injectables/ReportService.html":{}}}],["getuserreports(params.id",{"_index":1892,"title":{},"body":{"controllers/ReportController.html":{}}}],["getuserreports(req",{"_index":1865,"title":{},"body":{"controllers/ReportController.html":{}}}],["getuserscrapbook",{"_index":1701,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserscrapbook(@request",{"_index":1800,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserscrapbook(req",{"_index":1741,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserscrapbooks",{"_index":1702,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserscrapbooks(@request",{"_index":1797,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserscrapbooks(req",{"_index":1745,"title":{},"body":{"controllers/PostController.html":{}}}],["getuserscrapbooks(req.user",{"_index":1798,"title":{},"body":{"controllers/PostController.html":{}}}],["given",{"_index":1744,"title":{},"body":{"controllers/PostController.html":{}}}],["go",{"_index":1625,"title":{},"body":{"injectables/PaymentService.html":{}}}],["google",{"_index":1034,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["group.enum",{"_index":1349,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SendNotificationDto.html":{}}}],["group.enum.ts",{"_index":2373,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["groupby('post.id",{"_index":2023,"title":{},"body":{"injectables/ReportService.html":{}}}],["groupby('user.id",{"_index":2030,"title":{},"body":{"injectables/ReportService.html":{}}}],["guard",{"_index":662,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AuthController.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":2036,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":706,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/local",{"_index":707,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/roles.guard",{"_index":708,"title":{},"body":{"controllers/AuthController.html":{}}}],["harrassement",{"_index":2396,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hash",{"_index":931,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["hash(password",{"_index":935,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["hashed",{"_index":924,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["hashedpassword",{"_index":921,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["hashpassword",{"_index":2244,"title":{},"body":{"entities/User.html":{}}}],["hasnextpage",{"_index":1404,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["haspreviouspage",{"_index":1405,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["hasstripaccount",{"_index":234,"title":{},"body":{"classes/$npmConfigName1674544597118.html":{},"injectables/PaymentService.html":{},"entities/User.html":{}}}],["header",{"_index":1256,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["hello",{"_index":459,"title":{},"body":{"injectables/AppService.html":{}}}],["hook",{"_index":2237,"title":{},"body":{"entities/User.html":{}}}],["host",{"_index":433,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["http://${this.url}:3000/payment/cancel?session_id={checkout_session_id",{"_index":1569,"title":{},"body":{"injectables/PaymentService.html":{}}}],["http://${this.url}:3000/payment/success?session_id={checkout_session_id",{"_index":1567,"title":{},"body":{"injectables/PaymentService.html":{}}}],["httpexception",{"_index":1940,"title":{},"body":{"injectables/ReportService.html":{}}}],["httpexception('post",{"_index":1947,"title":{},"body":{"injectables/ReportService.html":{}}}],["httpexception('report",{"_index":2013,"title":{},"body":{"injectables/ReportService.html":{}}}],["httpexception('user",{"_index":1971,"title":{},"body":{"injectables/ReportService.html":{}}}],["httpexception('you",{"_index":1949,"title":{},"body":{"injectables/ReportService.html":{}}}],["https://firebasestorage.googleapis.com/v0/b/atlas",{"_index":145,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{}}}],["https://github.com/narhakobyan/awesome",{"_index":2426,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":258,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["httpstatus.bad_request",{"_index":1950,"title":{},"body":{"injectables/ReportService.html":{}}}],["httpstatus.no_content",{"_index":1948,"title":{},"body":{"injectables/ReportService.html":{}}}],["id",{"_index":64,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"injectables/AnalyticsService.html":{},"entities/Appeal.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"injectables/ReportService.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"index.html":{}}}],["identifier",{"_index":2278,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":1261,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":1009,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["imageexpirydate",{"_index":159,"title":{},"body":{"classes/$npmConfigName1672832148243.html":{},"entities/Post.html":{}}}],["imageid",{"_index":158,"title":{},"body":{"classes/$npmConfigName1672832148243.html":{},"injectables/FirebaseStorageService.html":{},"entities/Post.html":{}}}],["images",{"_index":1036,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["imageurl",{"_index":67,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/CreatePostDto.html":{},"injectables/FirebaseStorageService.html":{},"entities/Post.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":34,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{}}}],["imports",{"_index":300,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["inappropriate",{"_index":2393,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["influencer",{"_index":2400,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["influencers",{"_index":2388,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{}}}],["inject",{"_index":455,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{}}}],["injectable",{"_index":302,"title":{"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{}},"body":{"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["injectables",{"_index":303,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["injectrepository",{"_index":314,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["injectrepository(appeal",{"_index":592,"title":{},"body":{"injectables/AppealsService.html":{}}}],["injectrepository(block",{"_index":853,"title":{},"body":{"injectables/BlockService.html":{}}}],["injectrepository(follow",{"_index":1182,"title":{},"body":{"injectables/FollowService.html":{}}}],["injectrepository(followrequest",{"_index":1181,"title":{},"body":{"injectables/FollowService.html":{}}}],["injectrepository(post",{"_index":320,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["injectrepository(postreport",{"_index":593,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["injectrepository(user",{"_index":322,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["injectrepository(userban",{"_index":1942,"title":{},"body":{"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["injectrepository(userreport",{"_index":1941,"title":{},"body":{"injectables/ReportService.html":{}}}],["input",{"_index":777,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["inserted",{"_index":2240,"title":{},"body":{"entities/User.html":{}}}],["int",{"_index":228,"title":{},"body":{"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1675177507147.html":{}}}],["interact",{"_index":1629,"title":{},"body":{"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["interactioncount",{"_index":351,"title":{},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["interface",{"_index":1425,"title":{"interfaces/PageMetaDtoParameters.html":{}},"body":{"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":1426,"title":{},"body":{"interfaces/PageMetaDtoParameters.html":{}}}],["interval",{"_index":2130,"title":{},"body":{"injectables/TasksService.html":{}}}],["invalid",{"_index":780,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["invoice.payment_failed",{"_index":1605,"title":{},"body":{"injectables/PaymentService.html":{}}}],["invoice.payment_succeeded",{"_index":1590,"title":{},"body":{"injectables/PaymentService.html":{}}}],["invoicingwebhook",{"_index":1460,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["invoicingwebhook(@req",{"_index":1498,"title":{},"body":{"controllers/PaymentController.html":{}}}],["invoicingwebhook(req",{"_index":1465,"title":{},"body":{"controllers/PaymentController.html":{}}}],["invoicingwebhook(req.headers['stripe",{"_index":1499,"title":{},"body":{"controllers/PaymentController.html":{}}}],["invoicingwebhook(stripesignature",{"_index":1513,"title":{},"body":{"injectables/PaymentService.html":{}}}],["invoked",{"_index":1266,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["isarray",{"_index":1393,"title":{},"body":{"classes/PageDto.html":{}}}],["isbanned",{"_index":218,"title":{},"body":{"classes/$npmConfigName1674453163372.html":{},"controllers/AuthController.html":{},"injectables/ReportService.html":{},"entities/User.html":{}}}],["isboolean",{"_index":1684,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["isboolean()@isnotempty",{"_index":1677,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["isdate",{"_index":1685,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["isdate()@isnotempty",{"_index":1674,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["isemail",{"_index":2088,"title":{},"body":{"classes/SignUpUserDto.html":{},"classes/UpdateUserEmailDto.html":{}}}],["isenum",{"_index":902,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"classes/PageOptionsDto.html":{},"classes/ReportDto.html":{},"classes/SendNotificationDto.html":{}}}],["isenum(notificationtargetgroup",{"_index":2068,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["isenum(order",{"_index":1453,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(order)@isoptional",{"_index":1434,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(reportreason",{"_index":1914,"title":{},"body":{"classes/ReportDto.html":{}}}],["isenum(reportreason)@isnotempty",{"_index":1912,"title":{},"body":{"classes/ReportDto.html":{}}}],["isenum(visibility",{"_index":904,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{}}}],["isenum(visibility)@isnotempty",{"_index":900,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{}}}],["isfollowing",{"_index":1232,"title":{},"body":{"injectables/FollowService.html":{}}}],["isint",{"_index":1442,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isint()@min(1)@isoptional",{"_index":1436,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isint()@min(1)@max(50)@isoptional",{"_index":1438,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isnotempty",{"_index":491,"title":{},"body":{"classes/AppealDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"classes/PostAnalyticResposneDto.html":{},"classes/ReportDto.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserPasseordDto.html":{}}}],["isnotempty()@maxlength(100",{"_index":888,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["isnotempty()@maxlength(100)@isstring",{"_index":2153,"title":{},"body":{"classes/UpdateUserBioDto.html":{}}}],["isnumber",{"_index":1686,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["isnumber()@min(0)@isnotempty",{"_index":1671,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["isoptional",{"_index":1443,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/PostAnalyticResposneDto.html":{},"classes/SendNotificationDto.html":{}}}],["isoptional()@isuuid",{"_index":1682,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{},"classes/SendNotificationDto.html":{}}}],["ispartofscrapbook",{"_index":347,"title":{},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["isphonenumber",{"_index":2096,"title":{},"body":{"classes/SignUpUserDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["isphonenumber('ae",{"_index":2093,"title":{},"body":{"classes/SignUpUserDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["isstring",{"_index":2155,"title":{},"body":{"classes/UpdateUserBioDto.html":{}}}],["istakendown",{"_index":134,"title":{},"body":{"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672833410692.html":{},"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"injectables/ReportService.html":{}}}],["isuserbanned",{"_index":760,"title":{},"body":{"injectables/AuthService.html":{}}}],["isuserbanned(user",{"_index":767,"title":{},"body":{"injectables/AuthService.html":{}}}],["isuuid",{"_index":1687,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{},"classes/SendNotificationDto.html":{}}}],["itemcount",{"_index":620,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"injectables/ReportService.html":{}}}],["items",{"_index":645,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["itemscount",{"_index":647,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["itself",{"_index":682,"title":{},"body":{"controllers/AuthController.html":{}}}],["json",{"_index":726,"title":{},"body":{"controllers/AuthController.html":{}}}],["json.parse(process.env?.firebase_private_key",{"_index":2447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt",{"_index":673,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":263,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"coverage.html":{}}}],["jwtconfig",{"_index":753,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig.secret",{"_index":1265,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":1257,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":746,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register(jwtconfig",{"_index":757,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":763,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":743,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":73,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["lastname",{"_index":723,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignUpUserDto.html":{},"entities/User.html":{}}}],["leftjoinandselect('appeal.appealedby",{"_index":638,"title":{},"body":{"injectables/AppealsService.html":{}}}],["leftjoinandselect('appeal.appealedpost",{"_index":636,"title":{},"body":{"injectables/AppealsService.html":{}}}],["leftjoinandselect('post.postedby",{"_index":637,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["leftjoinandselect('postreport.reportedby",{"_index":1987,"title":{},"body":{"injectables/ReportService.html":{}}}],["leftjoinandselect('postreport.reportedpost",{"_index":1986,"title":{},"body":{"injectables/ReportService.html":{}}}],["leftjoinandselect('userreport.reportedby",{"_index":1997,"title":{},"body":{"injectables/ReportService.html":{}}}],["leftjoinandselect('userreport.reporteduser",{"_index":1996,"title":{},"body":{"injectables/ReportService.html":{}}}],["lessthan",{"_index":2143,"title":{},"body":{"injectables/TasksService.html":{}}}],["lessthan(tomorrow",{"_index":2146,"title":{},"body":{"injectables/TasksService.html":{}}}],["license",{"_index":2435,"title":{},"body":{"properties.html":{}}}],["like.entity",{"_index":415,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"entities/User.html":{}}}],["like.entity.ts",{"_index":1272,"title":{},"body":{"entities/Like.html":{},"coverage.html":{}}}],["like.entity.ts:14",{"_index":1279,"title":{},"body":{"entities/Like.html":{}}}],["like.entity.ts:20",{"_index":1277,"title":{},"body":{"entities/Like.html":{}}}],["like.entity.ts:9",{"_index":1275,"title":{},"body":{"entities/Like.html":{}}}],["like.likedby",{"_index":2202,"title":{},"body":{"entities/User.html":{}}}],["like.likedpost",{"_index":1646,"title":{},"body":{"entities/Post.html":{}}}],["likecount",{"_index":1670,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["liked",{"_index":1280,"title":{},"body":{"entities/Like.html":{}}}],["likedby",{"_index":1273,"title":{},"body":{"entities/Like.html":{}}}],["likedbyid",{"_index":222,"title":{},"body":{"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["likedpost",{"_index":1274,"title":{},"body":{"entities/Like.html":{}}}],["likedpostid",{"_index":221,"title":{},"body":{"classes/$npmConfigName1674486373359.html":{}}}],["likepost",{"_index":1703,"title":{},"body":{"controllers/PostController.html":{}}}],["likepost(@request",{"_index":1810,"title":{},"body":{"controllers/PostController.html":{}}}],["likepost(req",{"_index":1749,"title":{},"body":{"controllers/PostController.html":{}}}],["likepost(req.user",{"_index":1811,"title":{},"body":{"controllers/PostController.html":{}}}],["likes",{"_index":970,"title":{},"body":{"injectables/FeedService.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["likes.likedby",{"_index":971,"title":{},"body":{"injectables/FeedService.html":{}}}],["likescount",{"_index":227,"title":{},"body":{"classes/$npmConfigName1674487677914.html":{},"entities/Post.html":{}}}],["line_items",{"_index":1562,"title":{},"body":{"injectables/PaymentService.html":{}}}],["list",{"_index":1403,"title":{},"body":{"classes/PageMetaDto.html":{},"index.html":{}}}],["local",{"_index":670,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":667,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":380,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["location",{"_index":69,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"entities/Post.html":{},"entities/Scrapbook.html":{}}}],["login",{"_index":661,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(user",{"_index":769,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuser",{"_index":654,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(@request",{"_index":734,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(req",{"_index":657,"title":{},"body":{"controllers/AuthController.html":{}}}],["longer",{"_index":1202,"title":{},"body":{"injectables/FollowService.html":{}}}],["longtext",{"_index":160,"title":{},"body":{"classes/$npmConfigName1672832148243.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["lot",{"_index":2115,"title":{},"body":{"injectables/TasksService.html":{}}}],["made",{"_index":884,"title":{},"body":{"entities/Comment.html":{}}}],["make",{"_index":2235,"title":{},"body":{"entities/User.html":{}}}],["male",{"_index":2382,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["many",{"_index":488,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserReport.html":{}}}],["manytoone",{"_index":480,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["manytoone(undefined",{"_index":465,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["map((appeal",{"_index":628,"title":{},"body":{"injectables/AppealsService.html":{}}}],["match",{"_index":717,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EncryptionService.html":{}}}],["matching",{"_index":48,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.itemcount",{"_index":1422,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["max",{"_index":1444,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["max(50",{"_index":1456,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["maxlength",{"_index":890,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/UpdateUserBioDto.html":{}}}],["maxlength(100",{"_index":891,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/UpdateUserBioDto.html":{}}}],["message",{"_index":282,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["message.dto",{"_index":1306,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["message.dto.ts",{"_index":2064,"title":{},"body":{"classes/SendNotificationDto.html":{},"coverage.html":{}}}],["message.dto.ts:12",{"_index":2069,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["message.dto.ts:16",{"_index":2070,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["message.dto.ts:6",{"_index":2071,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["message.dto.ts:9",{"_index":2067,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["messaging",{"_index":1344,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["messaging.send(payload",{"_index":1378,"title":{},"body":{"injectables/NotificationService.html":{}}}],["messaging.sendmulticast(payload",{"_index":1380,"title":{},"body":{"injectables/NotificationService.html":{}}}],["meta",{"_index":1389,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{}}}],["meta.dto",{"_index":588,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"classes/PageDto.html":{},"injectables/ReportService.html":{}}}],["meta.dto.ts",{"_index":1400,"title":{},"body":{"classes/PageMetaDto.html":{},"coverage.html":{}}}],["meta.dto.ts:10",{"_index":1415,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:11",{"_index":1412,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:12",{"_index":1410,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:7",{"_index":1414,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:8",{"_index":1416,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:9",{"_index":1413,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["metadata",{"_index":1402,"title":{},"body":{"classes/PageMetaDto.html":{},"dependencies.html":{}}}],["method",{"_index":771,"title":{},"body":{"injectables/AuthService.html":{}}}],["methods",{"_index":13,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{}}}],["migrationinterface",{"_index":9,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{}}}],["migrations",{"_index":445,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["migrations/*{.ts,.js",{"_index":448,"title":{},"body":{"modules/AppModule.html":{}}}],["migrations/1672082558971",{"_index":6,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"coverage.html":{}}}],["migrations/1672082713679",{"_index":50,"title":{},"body":{"classes/$npmConfigName1672082713679.html":{},"coverage.html":{}}}],["migrations/1672133224744",{"_index":55,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"coverage.html":{}}}],["migrations/1672166137042",{"_index":84,"title":{},"body":{"classes/$npmConfigName1672166137042.html":{},"coverage.html":{}}}],["migrations/1672251740346",{"_index":86,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{},"coverage.html":{}}}],["migrations/1672388811259",{"_index":95,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"coverage.html":{}}}],["migrations/1672399737695",{"_index":110,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{},"coverage.html":{}}}],["migrations/1672417201262",{"_index":118,"title":{},"body":{"classes/$npmConfigName1672417201262.html":{},"coverage.html":{}}}],["migrations/1672417384470",{"_index":122,"title":{},"body":{"classes/$npmConfigName1672417384470.html":{},"coverage.html":{}}}],["migrations/1672576067204",{"_index":124,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"coverage.html":{}}}],["migrations/1672585305519",{"_index":133,"title":{},"body":{"classes/$npmConfigName1672585305519.html":{},"coverage.html":{}}}],["migrations/1672600378154",{"_index":137,"title":{},"body":{"classes/$npmConfigName1672600378154.html":{},"coverage.html":{}}}],["migrations/1672678196724",{"_index":140,"title":{},"body":{"classes/$npmConfigName1672678196724.html":{},"coverage.html":{}}}],["migrations/1672744437528",{"_index":143,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"coverage.html":{}}}],["migrations/1672760070076",{"_index":152,"title":{},"body":{"classes/$npmConfigName1672760070076.html":{},"coverage.html":{}}}],["migrations/1672832148243",{"_index":157,"title":{},"body":{"classes/$npmConfigName1672832148243.html":{},"coverage.html":{}}}],["migrations/1672833410692",{"_index":162,"title":{},"body":{"classes/$npmConfigName1672833410692.html":{},"coverage.html":{}}}],["migrations/1673022319464",{"_index":165,"title":{},"body":{"classes/$npmConfigName1673022319464.html":{},"coverage.html":{}}}],["migrations/1673025398979",{"_index":173,"title":{},"body":{"classes/$npmConfigName1673025398979.html":{},"coverage.html":{}}}],["migrations/1673027114310",{"_index":175,"title":{},"body":{"classes/$npmConfigName1673027114310.html":{},"coverage.html":{}}}],["migrations/1673177373733",{"_index":178,"title":{},"body":{"classes/$npmConfigName1673177373733.html":{},"coverage.html":{}}}],["migrations/1673337064308",{"_index":181,"title":{},"body":{"classes/$npmConfigName1673337064308.html":{},"coverage.html":{}}}],["migrations/1673770456243",{"_index":184,"title":{},"body":{"classes/$npmConfigName1673770456243.html":{},"coverage.html":{}}}],["migrations/1673847605869",{"_index":192,"title":{},"body":{"classes/$npmConfigName1673847605869.html":{},"coverage.html":{}}}],["migrations/1673974513613",{"_index":199,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"coverage.html":{}}}],["migrations/1674121256550",{"_index":211,"title":{},"body":{"classes/$npmConfigName1674121256550.html":{},"coverage.html":{}}}],["migrations/1674198387677",{"_index":214,"title":{},"body":{"classes/$npmConfigName1674198387677.html":{},"coverage.html":{}}}],["migrations/1674453163372",{"_index":217,"title":{},"body":{"classes/$npmConfigName1674453163372.html":{},"coverage.html":{}}}],["migrations/1674486373359",{"_index":220,"title":{},"body":{"classes/$npmConfigName1674486373359.html":{},"coverage.html":{}}}],["migrations/1674487677914",{"_index":226,"title":{},"body":{"classes/$npmConfigName1674487677914.html":{},"coverage.html":{}}}],["migrations/1674493007150",{"_index":230,"title":{},"body":{"classes/$npmConfigName1674493007150.html":{},"coverage.html":{}}}],["migrations/1674544597118",{"_index":233,"title":{},"body":{"classes/$npmConfigName1674544597118.html":{},"coverage.html":{}}}],["migrations/1675177507147",{"_index":239,"title":{},"body":{"classes/$npmConfigName1675177507147.html":{},"coverage.html":{}}}],["migrationsrun",{"_index":454,"title":{},"body":{"modules/AppModule.html":{}}}],["migrationstablename",{"_index":446,"title":{},"body":{"modules/AppModule.html":{}}}],["millisecondsinaweek",{"_index":2005,"title":{},"body":{"injectables/ReportService.html":{}}}],["min",{"_index":1445,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["min(0",{"_index":1688,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["min(1",{"_index":1454,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["minlength",{"_index":2168,"title":{},"body":{"classes/UpdateUserPasseordDto.html":{}}}],["minlength(8",{"_index":2169,"title":{},"body":{"classes/UpdateUserPasseordDto.html":{}}}],["minlength(8)@isnotempty",{"_index":2165,"title":{},"body":{"classes/UpdateUserPasseordDto.html":{}}}],["miscellaneous",{"_index":2365,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1556,"title":{},"body":{"injectables/PaymentService.html":{},"index.html":{}}}],["module",{"_index":284,"title":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":286,"title":{"modules.html":{}},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/analytics/analytics.module",{"_index":412,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/appeals/appeals.module",{"_index":403,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/appeals/entities/appeal.entity",{"_index":402,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth/auth.module",{"_index":388,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth/strategies/local.strategy",{"_index":389,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/block/block.module",{"_index":404,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/block/entities/block.entity",{"_index":405,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/feed/feed.module",{"_index":413,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/follow/entities/follow",{"_index":408,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{}}}],["modules/follow/entities/follow.entity",{"_index":406,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{}}}],["modules/follow/follow.module",{"_index":410,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/notification/notification.module",{"_index":411,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/payment/payment.module",{"_index":416,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/post/entities/comment.entity",{"_index":393,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/post/entities/post",{"_index":414,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/post/entities/post.entity",{"_index":391,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/post/entities/scrapbook.entity",{"_index":392,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/post/post.module",{"_index":390,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/report/entities/post",{"_index":395,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/report/entities/user",{"_index":398,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/report/report.module",{"_index":399,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/tasks/tasks.module",{"_index":419,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/entities/user.entity",{"_index":387,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/user.module",{"_index":386,"title":{},"body":{"modules/AppModule.html":{}}}],["multiple",{"_index":2258,"title":{},"body":{"entities/UserBan.html":{}}}],["mysql",{"_index":430,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["mysql2",{"_index":2352,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":12,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["named",{"_index":2410,"title":{},"body":{"index.html":{}}}],["need",{"_index":1631,"title":{},"body":{"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["needed",{"_index":453,"title":{},"body":{"modules/AppModule.html":{}}}],["nest",{"_index":2080,"title":{},"body":{"classes/SignUpUserDto.html":{},"index.html":{}}}],["nestjs/common",{"_index":262,"title":{},"body":{"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"controllers/ReportController.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/common/decorators",{"_index":1112,"title":{},"body":{"controllers/FollowController.html":{},"controllers/PaymentController.html":{},"controllers/ReportController.html":{}}}],["nestjs/config",{"_index":385,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2046,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":747,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":749,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":699,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":418,"title":{},"body":{"modules/AppModule.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":296,"title":{},"body":{"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"modules/FollowModule.html":{},"injectables/FollowService.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm/dist/typeorm.module",{"_index":750,"title":{},"body":{"modules/AuthModule.html":{}}}],["new",{"_index":335,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newappeal",{"_index":594,"title":{},"body":{"injectables/AppealsService.html":{}}}],["newappeal.appealedby",{"_index":614,"title":{},"body":{"injectables/AppealsService.html":{}}}],["newappeal.appealedpost",{"_index":613,"title":{},"body":{"injectables/AppealsService.html":{}}}],["newappeal.reportreason",{"_index":618,"title":{},"body":{"injectables/AppealsService.html":{}}}],["newappeal.text",{"_index":616,"title":{},"body":{"injectables/AppealsService.html":{}}}],["newban",{"_index":2003,"title":{},"body":{"injectables/ReportService.html":{}}}],["newban.banneduser",{"_index":2007,"title":{},"body":{"injectables/ReportService.html":{}}}],["newban.enddate",{"_index":2010,"title":{},"body":{"injectables/ReportService.html":{}}}],["newban.startdate",{"_index":2008,"title":{},"body":{"injectables/ReportService.html":{}}}],["newblock",{"_index":862,"title":{},"body":{"injectables/BlockService.html":{}}}],["newblock.blockeduser",{"_index":863,"title":{},"body":{"injectables/BlockService.html":{}}}],["newblock.blockinguser",{"_index":864,"title":{},"body":{"injectables/BlockService.html":{}}}],["newreport",{"_index":1943,"title":{},"body":{"injectables/ReportService.html":{}}}],["newreport.reason",{"_index":1967,"title":{},"body":{"injectables/ReportService.html":{}}}],["newreport.reportedby",{"_index":1944,"title":{},"body":{"injectables/ReportService.html":{}}}],["newreport.reportedpost",{"_index":1966,"title":{},"body":{"injectables/ReportService.html":{}}}],["newreport.reporteduser",{"_index":1982,"title":{},"body":{"injectables/ReportService.html":{}}}],["newuser",{"_index":1538,"title":{},"body":{"injectables/PaymentService.html":{}}}],["none",{"_index":2384,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["normal",{"_index":2421,"title":{},"body":{"index.html":{}}}],["not(notificationpreference.none",{"_index":1384,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notfoundexception",{"_index":1531,"title":{},"body":{"injectables/PaymentService.html":{}}}],["notfoundexception('user",{"_index":1537,"title":{},"body":{"injectables/PaymentService.html":{}}}],["notification",{"_index":1295,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["notification.controller",{"_index":1324,"title":{},"body":{"modules/NotificationModule.html":{}}}],["notification.service",{"_index":1308,"title":{},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{}}}],["notification/notification.module",{"_index":1506,"title":{},"body":{"modules/PaymentModule.html":{}}}],["notification/notification.service",{"_index":1535,"title":{},"body":{"injectables/PaymentService.html":{}}}],["notificationcontroller",{"_index":1293,"title":{"controllers/NotificationController.html":{}},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"coverage.html":{}}}],["notificationmodule",{"_index":373,"title":{"modules/NotificationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules.html":{},"overview.html":{}}}],["notificationpreference",{"_index":215,"title":{},"body":{"classes/$npmConfigName1674198387677.html":{},"injectables/NotificationService.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["notificationpreference.all",{"_index":1370,"title":{},"body":{"injectables/NotificationService.html":{},"entities/User.html":{}}}],["notificationpreference.broadcast",{"_index":1382,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationpreference.selectedgroup",{"_index":1369,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationservice",{"_index":1307,"title":{"injectables/NotificationService.html":{}},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"coverage.html":{},"overview.html":{}}}],["notificationtargetgroup",{"_index":1346,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SendNotificationDto.html":{},"miscellaneous/enumerations.html":{}}}],["notificationtargetgroup.all",{"_index":1360,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationtargetgroup.celebrity",{"_index":1362,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationtargetgroup.influencers",{"_index":1364,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationtargetgroup.singleuser",{"_index":1353,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notified",{"_index":1373,"title":{},"body":{"injectables/NotificationService.html":{}}}],["now",{"_index":1038,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["npm",{"_index":2419,"title":{},"body":{"index.html":{}}}],["npm_config_name.ts",{"_index":7,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"coverage.html":{}}}],["npm_config_name.ts:10",{"_index":27,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674487677914.html":{}}}],["npm_config_name.ts:11",{"_index":56,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1673025398979.html":{}}}],["npm_config_name.ts:12",{"_index":51,"title":{},"body":{"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{}}}],["npm_config_name.ts:13",{"_index":87,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1673027114310.html":{}}}],["npm_config_name.ts:14",{"_index":111,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{}}}],["npm_config_name.ts:15",{"_index":179,"title":{},"body":{"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673974513613.html":{}}}],["npm_config_name.ts:17",{"_index":96,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{}}}],["npm_config_name.ts:39",{"_index":231,"title":{},"body":{"classes/$npmConfigName1674493007150.html":{}}}],["npm_config_name.ts:4",{"_index":24,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{}}}],["npm_config_name.ts:6",{"_index":33,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{}}}],["npmconfigname1672082558971",{"_index":1,"title":{"classes/$npmConfigName1672082558971.html":{}},"body":{"classes/$npmConfigName1672082558971.html":{},"coverage.html":{}}}],["npmconfigname1672082713679",{"_index":49,"title":{"classes/$npmConfigName1672082713679.html":{}},"body":{"classes/$npmConfigName1672082713679.html":{},"coverage.html":{}}}],["npmconfigname1672133224744",{"_index":54,"title":{"classes/$npmConfigName1672133224744.html":{}},"body":{"classes/$npmConfigName1672133224744.html":{},"coverage.html":{}}}],["npmconfigname1672166137042",{"_index":83,"title":{"classes/$npmConfigName1672166137042.html":{}},"body":{"classes/$npmConfigName1672166137042.html":{},"coverage.html":{}}}],["npmconfigname1672251740346",{"_index":85,"title":{"classes/$npmConfigName1672251740346.html":{}},"body":{"classes/$npmConfigName1672251740346.html":{},"coverage.html":{}}}],["npmconfigname1672388811259",{"_index":94,"title":{"classes/$npmConfigName1672388811259.html":{}},"body":{"classes/$npmConfigName1672388811259.html":{},"coverage.html":{}}}],["npmconfigname1672399737695",{"_index":109,"title":{"classes/$npmConfigName1672399737695.html":{}},"body":{"classes/$npmConfigName1672399737695.html":{},"coverage.html":{}}}],["npmconfigname1672417201262",{"_index":117,"title":{"classes/$npmConfigName1672417201262.html":{}},"body":{"classes/$npmConfigName1672417201262.html":{},"coverage.html":{}}}],["npmconfigname1672417384470",{"_index":121,"title":{"classes/$npmConfigName1672417384470.html":{}},"body":{"classes/$npmConfigName1672417384470.html":{},"coverage.html":{}}}],["npmconfigname1672576067204",{"_index":123,"title":{"classes/$npmConfigName1672576067204.html":{}},"body":{"classes/$npmConfigName1672576067204.html":{},"coverage.html":{}}}],["npmconfigname1672585305519",{"_index":132,"title":{"classes/$npmConfigName1672585305519.html":{}},"body":{"classes/$npmConfigName1672585305519.html":{},"coverage.html":{}}}],["npmconfigname1672600378154",{"_index":136,"title":{"classes/$npmConfigName1672600378154.html":{}},"body":{"classes/$npmConfigName1672600378154.html":{},"coverage.html":{}}}],["npmconfigname1672678196724",{"_index":139,"title":{"classes/$npmConfigName1672678196724.html":{}},"body":{"classes/$npmConfigName1672678196724.html":{},"coverage.html":{}}}],["npmconfigname1672744437528",{"_index":142,"title":{"classes/$npmConfigName1672744437528.html":{}},"body":{"classes/$npmConfigName1672744437528.html":{},"coverage.html":{}}}],["npmconfigname1672760070076",{"_index":151,"title":{"classes/$npmConfigName1672760070076.html":{}},"body":{"classes/$npmConfigName1672760070076.html":{},"coverage.html":{}}}],["npmconfigname1672832148243",{"_index":156,"title":{"classes/$npmConfigName1672832148243.html":{}},"body":{"classes/$npmConfigName1672832148243.html":{},"coverage.html":{}}}],["npmconfigname1672833410692",{"_index":161,"title":{"classes/$npmConfigName1672833410692.html":{}},"body":{"classes/$npmConfigName1672833410692.html":{},"coverage.html":{}}}],["npmconfigname1673022319464",{"_index":164,"title":{"classes/$npmConfigName1673022319464.html":{}},"body":{"classes/$npmConfigName1673022319464.html":{},"coverage.html":{}}}],["npmconfigname1673025398979",{"_index":172,"title":{"classes/$npmConfigName1673025398979.html":{}},"body":{"classes/$npmConfigName1673025398979.html":{},"coverage.html":{}}}],["npmconfigname1673027114310",{"_index":174,"title":{"classes/$npmConfigName1673027114310.html":{}},"body":{"classes/$npmConfigName1673027114310.html":{},"coverage.html":{}}}],["npmconfigname1673177373733",{"_index":177,"title":{"classes/$npmConfigName1673177373733.html":{}},"body":{"classes/$npmConfigName1673177373733.html":{},"coverage.html":{}}}],["npmconfigname1673337064308",{"_index":180,"title":{"classes/$npmConfigName1673337064308.html":{}},"body":{"classes/$npmConfigName1673337064308.html":{},"coverage.html":{}}}],["npmconfigname1673770456243",{"_index":183,"title":{"classes/$npmConfigName1673770456243.html":{}},"body":{"classes/$npmConfigName1673770456243.html":{},"coverage.html":{}}}],["npmconfigname1673847605869",{"_index":191,"title":{"classes/$npmConfigName1673847605869.html":{}},"body":{"classes/$npmConfigName1673847605869.html":{},"coverage.html":{}}}],["npmconfigname1673974513613",{"_index":198,"title":{"classes/$npmConfigName1673974513613.html":{}},"body":{"classes/$npmConfigName1673974513613.html":{},"coverage.html":{}}}],["npmconfigname1674121256550",{"_index":210,"title":{"classes/$npmConfigName1674121256550.html":{}},"body":{"classes/$npmConfigName1674121256550.html":{},"coverage.html":{}}}],["npmconfigname1674198387677",{"_index":213,"title":{"classes/$npmConfigName1674198387677.html":{}},"body":{"classes/$npmConfigName1674198387677.html":{},"coverage.html":{}}}],["npmconfigname1674453163372",{"_index":216,"title":{"classes/$npmConfigName1674453163372.html":{}},"body":{"classes/$npmConfigName1674453163372.html":{},"coverage.html":{}}}],["npmconfigname1674486373359",{"_index":219,"title":{"classes/$npmConfigName1674486373359.html":{}},"body":{"classes/$npmConfigName1674486373359.html":{},"coverage.html":{}}}],["npmconfigname1674487677914",{"_index":225,"title":{"classes/$npmConfigName1674487677914.html":{}},"body":{"classes/$npmConfigName1674487677914.html":{},"coverage.html":{}}}],["npmconfigname1674493007150",{"_index":229,"title":{"classes/$npmConfigName1674493007150.html":{}},"body":{"classes/$npmConfigName1674493007150.html":{},"coverage.html":{}}}],["npmconfigname1674544597118",{"_index":232,"title":{"classes/$npmConfigName1674544597118.html":{}},"body":{"classes/$npmConfigName1674544597118.html":{},"coverage.html":{}}}],["npmconfigname1675177507147",{"_index":238,"title":{"classes/$npmConfigName1675177507147.html":{}},"body":{"classes/$npmConfigName1675177507147.html":{},"coverage.html":{}}}],["null",{"_index":44,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"injectables/AuthService.html":{}}}],["number",{"_index":621,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"injectables/ReportService.html":{},"entities/User.html":{}}}],["object",{"_index":509,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"injectables/FirebaseStorageService.html":{},"classes/PageDto.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"miscellaneous/variables.html":{}}}],["object.values(visibility).includes(body.visibility",{"_index":1784,"title":{},"body":{"controllers/PostController.html":{}}}],["once",{"_index":2118,"title":{},"body":{"injectables/TasksService.html":{}}}],["ondelete",{"_index":467,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["one",{"_index":487,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/UserReport.html":{}}}],["onetomany",{"_index":1659,"title":{},"body":{"entities/Post.html":{},"entities/Scrapbook.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":1634,"title":{},"body":{"entities/Post.html":{},"entities/Scrapbook.html":{},"entities/User.html":{}}}],["optional",{"_index":29,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{}}}],["options",{"_index":443,"title":{},"body":{"modules/AppModule.html":{},"classes/PageOptionsDto.html":{}}}],["options.dto",{"_index":533,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"interfaces/PageMetaDtoParameters.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["options.dto.ts",{"_index":1429,"title":{},"body":{"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:15",{"_index":1435,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:23",{"_index":1437,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:32",{"_index":1439,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:37",{"_index":1441,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["order",{"_index":1430,"title":{},"body":{"classes/PageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["order.asc",{"_index":1433,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["orderby('appeal.createdat",{"_index":641,"title":{},"body":{"injectables/AppealsService.html":{}}}],["orderby('post.createdat",{"_index":2025,"title":{},"body":{"injectables/ReportService.html":{}}}],["orderby('postreport.createdat",{"_index":1989,"title":{},"body":{"injectables/ReportService.html":{}}}],["orderby('user.createdat",{"_index":2032,"title":{},"body":{"injectables/ReportService.html":{}}}],["orderby('userreport.createdat",{"_index":1999,"title":{},"body":{"injectables/ReportService.html":{}}}],["otherwise",{"_index":926,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["out",{"_index":292,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":2432,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":2339,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1395,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{}}}],["pagecount",{"_index":1406,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pagedto",{"_index":589,"title":{"classes/PageDto.html":{}},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"classes/PageDto.html":{},"injectables/ReportService.html":{},"coverage.html":{}}}],["pagedto(entities",{"_index":622,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/ReportService.html":{}}}],["pagemetadto",{"_index":587,"title":{"classes/PageMetaDto.html":{}},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/ReportService.html":{},"coverage.html":{}}}],["pagemetadtoparameters",{"_index":1409,"title":{"interfaces/PageMetaDtoParameters.html":{}},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{}}}],["pageoptionsdto",{"_index":511,"title":{"classes/PageOptionsDto.html":{}},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"coverage.html":{}}}],["pageoptionsdto.order",{"_index":642,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["pageoptionsdto.page",{"_index":980,"title":{},"body":{"injectables/FeedService.html":{},"classes/PageMetaDto.html":{}}}],["pageoptionsdto.take",{"_index":982,"title":{},"body":{"injectables/FeedService.html":{},"classes/PageMetaDto.html":{}}}],["paginated",{"_index":1397,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{}}}],["paginatedposts",{"_index":978,"title":{},"body":{"injectables/FeedService.html":{}}}],["pagination",{"_index":1447,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["param",{"_index":259,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/EncryptionService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["param('fcmtoken",{"_index":1312,"title":{},"body":{"controllers/NotificationController.html":{}}}],["param('id",{"_index":274,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/BlockController.html":{},"controllers/FollowController.html":{},"controllers/PostController.html":{}}}],["param('postid",{"_index":551,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/ReportController.html":{}}}],["param('reportid",{"_index":1896,"title":{},"body":{"controllers/ReportController.html":{}}}],["param('requestid",{"_index":1123,"title":{},"body":{"controllers/FollowController.html":{}}}],["param('userid",{"_index":1895,"title":{},"body":{"controllers/ReportController.html":{}}}],["parameters",{"_index":28,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{}}}],["parameters.dto",{"_index":1417,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["parameters.dto.ts",{"_index":1427,"title":{},"body":{"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{}}}],["params",{"_index":1711,"title":{},"body":{"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["params.postid",{"_index":1795,"title":{},"body":{"controllers/PostController.html":{}}}],["part",{"_index":1667,"title":{},"body":{"entities/Post.html":{}}}],["pass",{"_index":774,"title":{},"body":{"injectables/AuthService.html":{}}}],["passed",{"_index":1448,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["passport",{"_index":1250,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":748,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1251,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1252,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":437,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/EncryptionService.html":{},"injectables/LocalStrategy.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserPasseordDto.html":{},"entities/User.html":{},"index.html":{}}}],["passwords",{"_index":716,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EncryptionService.html":{}}}],["passwordsmatch",{"_index":787,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":530,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/FollowController.html":{},"controllers/PostController.html":{}}}],["patch('accept",{"_index":547,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/FollowController.html":{}}}],["patch('reject",{"_index":553,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/FollowController.html":{}}}],["patch('scrapbook/:id/remove",{"_index":1792,"title":{},"body":{"controllers/PostController.html":{}}}],["payload",{"_index":791,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{}}}],["payload.email",{"_index":1269,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.role",{"_index":1270,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":1268,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payment",{"_index":1459,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["payment.controller",{"_index":1507,"title":{},"body":{"modules/PaymentModule.html":{}}}],["payment.service",{"_index":1484,"title":{},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{}}}],["payment_method_types",{"_index":1557,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentcancel",{"_index":1461,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["paymentcancel(req",{"_index":1470,"title":{},"body":{"controllers/PaymentController.html":{}}}],["paymentcancel(sessionid",{"_index":1496,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["paymentcontroller",{"_index":1457,"title":{"controllers/PaymentController.html":{}},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"coverage.html":{}}}],["paymentfailedevent",{"_index":1606,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentfailedevent.customer",{"_index":1608,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentmodule",{"_index":374,"title":{"modules/PaymentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"modules.html":{},"overview.html":{}}}],["paymentservice",{"_index":1483,"title":{"injectables/PaymentService.html":{}},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"coverage.html":{},"overview.html":{}}}],["paymentsuccess",{"_index":1462,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["paymentsuccess(req",{"_index":1474,"title":{},"body":{"controllers/PaymentController.html":{}}}],["paymentsuccess(sessionid",{"_index":1495,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["paymentsuccessedevent",{"_index":1591,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentsuccessedevent.customer",{"_index":1595,"title":{},"body":{"injectables/PaymentService.html":{}}}],["pending",{"_index":113,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673974513613.html":{},"injectables/ReportService.html":{},"miscellaneous/enumerations.html":{}}}],["pendingreview",{"_index":2397,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["per",{"_index":1455,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["phone",{"_index":1548,"title":{},"body":{"injectables/PaymentService.html":{}}}],["phonenumber",{"_index":2084,"title":{},"body":{"classes/SignUpUserDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{}}}],["picture",{"_index":2134,"title":{},"body":{"injectables/TasksService.html":{}}}],["plan.enum",{"_index":1534,"title":{},"body":{"injectables/PaymentService.html":{},"entities/User.html":{}}}],["plan.enum.ts",{"_index":2379,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["post",{"_index":58,"title":{"entities/Post.html":{}},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"entities/Appeal.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"entities/Comment.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"controllers/FollowController.html":{},"entities/Like.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"entities/Scrapbook.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"coverage.html":{}}}],["post('admin/signup",{"_index":729,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('appeal",{"_index":541,"title":{},"body":{"controllers/AppealsController.html":{}}}],["post('ban",{"_index":1893,"title":{},"body":{"controllers/ReportController.html":{}}}],["post('block",{"_index":828,"title":{},"body":{"controllers/BlockController.html":{}}}],["post('comment/:id",{"_index":1802,"title":{},"body":{"controllers/PostController.html":{}}}],["post('create",{"_index":1766,"title":{},"body":{"controllers/PostController.html":{}}}],["post('invoicing",{"_index":1467,"title":{},"body":{"controllers/PaymentController.html":{}}}],["post('like/:id",{"_index":1809,"title":{},"body":{"controllers/PostController.html":{}}}],["post('login",{"_index":733,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('report",{"_index":1882,"title":{},"body":{"controllers/ReportController.html":{}}}],["post('request",{"_index":1116,"title":{},"body":{"controllers/FollowController.html":{}}}],["post('scrapbook/:id/add",{"_index":1788,"title":{},"body":{"controllers/PostController.html":{}}}],["post('scrapbook/create",{"_index":1782,"title":{},"body":{"controllers/PostController.html":{}}}],["post('send",{"_index":1317,"title":{},"body":{"controllers/NotificationController.html":{}}}],["post('signup",{"_index":711,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup')@useinterceptors(undefined",{"_index":688,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup/:fcmtoken",{"_index":1310,"title":{},"body":{"controllers/NotificationController.html":{}}}],["post('subscribe",{"_index":1486,"title":{},"body":{"controllers/PaymentController.html":{}}}],["post('unban",{"_index":1900,"title":{},"body":{"controllers/ReportController.html":{}}}],["post('unblock",{"_index":834,"title":{},"body":{"controllers/BlockController.html":{}}}],["post('unsubscribe",{"_index":1491,"title":{},"body":{"controllers/PaymentController.html":{}}}],["post.appeals",{"_index":469,"title":{},"body":{"entities/Appeal.html":{},"injectables/AppealsService.html":{}}}],["post.appeals.length",{"_index":346,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{}}}],["post.appeals.some((appeal",{"_index":597,"title":{},"body":{"injectables/AppealsService.html":{}}}],["post.comments",{"_index":880,"title":{},"body":{"entities/Comment.html":{}}}],["post.comments.length",{"_index":342,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["post.controller",{"_index":1820,"title":{},"body":{"modules/PostModule.html":{}}}],["post.entity",{"_index":883,"title":{},"body":{"entities/Comment.html":{},"entities/Like.html":{},"entities/Scrapbook.html":{}}}],["post.id",{"_index":1964,"title":{},"body":{"injectables/ReportService.html":{}}}],["post.istakendown",{"_index":352,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{}}}],["post.likes",{"_index":1278,"title":{},"body":{"entities/Like.html":{}}}],["post.postedby",{"_index":615,"title":{},"body":{"injectables/AppealsService.html":{},"entities/User.html":{}}}],["post.postedby.id",{"_index":332,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["post.reportsagainst",{"_index":607,"title":{},"body":{"injectables/AppealsService.html":{},"entities/PostReport.html":{}}}],["post.reportsagainst.length",{"_index":344,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["post.reportsagainst.some((report",{"_index":602,"title":{},"body":{"injectables/AppealsService.html":{}}}],["post.scrapbook",{"_index":348,"title":{},"body":{"injectables/AnalyticsService.html":{},"entities/Scrapbook.html":{}}}],["post.scrapbook.id",{"_index":363,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["post.service",{"_index":1764,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["post/:id",{"_index":1901,"title":{},"body":{"controllers/ReportController.html":{}}}],["post/:id')@roles(role.admin",{"_index":1874,"title":{},"body":{"controllers/ReportController.html":{}}}],["post/:postid",{"_index":1713,"title":{},"body":{"controllers/PostController.html":{}}}],["post/:postid/:reportid",{"_index":1898,"title":{},"body":{"controllers/ReportController.html":{}}}],["post/:postid/:reportid')@roles(role.admin",{"_index":1849,"title":{},"body":{"controllers/ReportController.html":{}}}],["post/entities/comment.entity",{"_index":2228,"title":{},"body":{"entities/User.html":{}}}],["post/entities/post",{"_index":2232,"title":{},"body":{"entities/User.html":{}}}],["post/entities/post.entity",{"_index":297,"title":{},"body":{"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"entities/Appeal.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"entities/PostReport.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["post/entities/scrapbook.entity",{"_index":2227,"title":{},"body":{"entities/User.html":{}}}],["post\\`(\\`id",{"_index":116,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1674486373359.html":{}}}],["post_report",{"_index":97,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["post_report\\`(\\`id",{"_index":105,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{}}}],["postalreadyreported",{"_index":1961,"title":{},"body":{"injectables/ReportService.html":{}}}],["postalreadyreported.includes(true",{"_index":1965,"title":{},"body":{"injectables/ReportService.html":{}}}],["postanalyticresposnedto",{"_index":316,"title":{"classes/PostAnalyticResposneDto.html":{}},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{},"coverage.html":{}}}],["postcontroller",{"_index":1689,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["posted",{"_index":1666,"title":{},"body":{"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/UserReport.html":{}}}],["postedby",{"_index":326,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"entities/Post.html":{},"injectables/ReportService.html":{}}}],["postedbyid",{"_index":71,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["postid",{"_index":169,"title":{},"body":{"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["postmodule",{"_index":375,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postreport",{"_index":394,"title":{"entities/PostReport.html":{}},"body":{"modules/AppModule.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"entities/User.html":{},"coverage.html":{}}}],["postreport.reportedby",{"_index":2212,"title":{},"body":{"entities/User.html":{}}}],["postreport.reportedpost",{"_index":1652,"title":{},"body":{"entities/Post.html":{}}}],["postreportsandcount[0",{"_index":1991,"title":{},"body":{"injectables/ReportService.html":{}}}],["postreportsandcount[1",{"_index":1992,"title":{},"body":{"injectables/ReportService.html":{}}}],["postreportsrepository",{"_index":576,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["postrepository",{"_index":310,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["posts",{"_index":601,"title":{},"body":{"injectables/AppealsService.html":{},"classes/CreateScrapBookDto.html":{},"injectables/FeedService.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"entities/Scrapbook.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["posts')@roles(role.admin",{"_index":1860,"title":{},"body":{"controllers/ReportController.html":{}}}],["posts.length",{"_index":983,"title":{},"body":{"injectables/FeedService.html":{}}}],["posts.slice",{"_index":979,"title":{},"body":{"injectables/FeedService.html":{}}}],["postsandcount[0",{"_index":2027,"title":{},"body":{"injectables/ReportService.html":{}}}],["postsandcount[0].length",{"_index":2028,"title":{},"body":{"injectables/ReportService.html":{}}}],["postservice",{"_index":1763,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{},"overview.html":{}}}],["power",{"_index":2117,"title":{},"body":{"injectables/TasksService.html":{}}}],["preference.enum",{"_index":1350,"title":{},"body":{"injectables/NotificationService.html":{},"entities/User.html":{}}}],["preference.enum.ts",{"_index":2372,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":247,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["premium",{"_index":2402,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["prerequisites",{"_index":2409,"title":{},"body":{"index.html":{}}}],["previous",{"_index":1011,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["previousimageid",{"_index":1006,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["price",{"_index":1563,"title":{},"body":{"injectables/PaymentService.html":{}}}],["price_1mthm0b4qqtc27uczovemolz",{"_index":1564,"title":{},"body":{"injectables/PaymentService.html":{}}}],["primary",{"_index":72,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{}}}],["primarygeneratedcolumn",{"_index":481,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":471,"title":{},"body":{"entities/Appeal.html":{},"entities/Block.html":{},"entities/Comment.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["private",{"_index":321,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["process.env?.secret",{"_index":2450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env?.stripe_webhook_secret",{"_index":1522,"title":{},"body":{"injectables/PaymentService.html":{}}}],["processing",{"_index":2116,"title":{},"body":{"injectables/TasksService.html":{}}}],["professional",{"_index":2401,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["profile",{"_index":2138,"title":{},"body":{"injectables/TasksService.html":{}}}],["profilepictureexpirydate",{"_index":153,"title":{},"body":{"classes/$npmConfigName1672760070076.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["profilepictureid",{"_index":2145,"title":{},"body":{"injectables/TasksService.html":{},"entities/User.html":{}}}],["profilepictureurl",{"_index":144,"title":{},"body":{"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"controllers/AuthController.html":{},"entities/User.html":{}}}],["project",{"_index":2417,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":31,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/StripeService.html":{}}}],["properties",{"_index":11,"title":{"properties.html":{}},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"entities/Like.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"entities/PostReport.html":{},"classes/ReportDto.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"properties.html":{}}}],["property",{"_index":2078,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["protect",{"_index":664,"title":{},"body":{"controllers/AuthController.html":{}}}],["providers",{"_index":294,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":14,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"miscellaneous/enumerations.html":{}}}],["publicposts",{"_index":967,"title":{},"body":{"injectables/FeedService.html":{}}}],["quantity",{"_index":1565,"title":{},"body":{"injectables/PaymentService.html":{}}}],["query",{"_index":531,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["query('session_id",{"_index":1494,"title":{},"body":{"controllers/PaymentController.html":{}}}],["queryresults",{"_index":1984,"title":{},"body":{"injectables/ReportService.html":{}}}],["queryresults.items",{"_index":1994,"title":{},"body":{"injectables/ReportService.html":{}}}],["queryresults.itemscount",{"_index":1993,"title":{},"body":{"injectables/ReportService.html":{}}}],["queryrunner",{"_index":26,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{}}}],["queryrunner.query(`alter",{"_index":38,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{}}}],["queryrunner.query(`create",{"_index":57,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{}}}],["queryrunner.query(`drop",{"_index":82,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{}}}],["quesries",{"_index":1633,"title":{},"body":{"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["rawbodyrequest",{"_index":1466,"title":{},"body":{"controllers/PaymentController.html":{}}}],["read",{"_index":1044,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["readonly",{"_index":1387,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["reason",{"_index":99,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"entities/PostReport.html":{},"classes/ReportDto.html":{},"entities/UserReport.html":{}}}],["reason.enum",{"_index":485,"title":{},"body":{"entities/Appeal.html":{},"entities/PostReport.html":{},"classes/ReportDto.html":{},"entities/UserReport.html":{}}}],["reason.enum.ts",{"_index":2376,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receive",{"_index":2236,"title":{},"body":{"entities/User.html":{}}}],["received",{"_index":1097,"title":{},"body":{"controllers/FollowController.html":{}}}],["references",{"_index":78,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["reflect",{"_index":2357,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2040,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reject",{"_index":525,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["rejected",{"_index":1127,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{},"miscellaneous/enumerations.html":{}}}],["rejectfollow",{"_index":1080,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["rejectfollow(@request",{"_index":1125,"title":{},"body":{"controllers/FollowController.html":{}}}],["rejectfollow(id",{"_index":1175,"title":{},"body":{"injectables/FollowService.html":{}}}],["rejectfollow(req",{"_index":1102,"title":{},"body":{"controllers/FollowController.html":{}}}],["rejectfollow(requestid",{"_index":1126,"title":{},"body":{"controllers/FollowController.html":{}}}],["rejectpostappeal",{"_index":501,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["rejectpostappeal(@request",{"_index":554,"title":{},"body":{"controllers/AppealsController.html":{}}}],["rejectpostappeal(postid",{"_index":555,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{}}}],["rejectpostappeal(req",{"_index":522,"title":{},"body":{"controllers/AppealsController.html":{}}}],["relations",{"_index":325,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/ReportService.html":{}}}],["removeexpiredbans",{"_index":2122,"title":{},"body":{"injectables/TasksService.html":{}}}],["removepostfromscrapbook",{"_index":1704,"title":{},"body":{"controllers/PostController.html":{}}}],["removepostfromscrapbook(@request",{"_index":1793,"title":{},"body":{"controllers/PostController.html":{}}}],["removepostfromscrapbook(params.id",{"_index":1794,"title":{},"body":{"controllers/PostController.html":{}}}],["removepostfromscrapbook(req",{"_index":1752,"title":{},"body":{"controllers/PostController.html":{}}}],["removes",{"_index":1755,"title":{},"body":{"controllers/PostController.html":{},"injectables/TasksService.html":{}}}],["repo",{"_index":2424,"title":{},"body":{"index.html":{}}}],["report",{"_index":1834,"title":{},"body":{"entities/PostReport.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"entities/User.html":{},"entities/UserReport.html":{}}}],["report.controller",{"_index":1919,"title":{},"body":{"modules/ReportModule.html":{}}}],["report.entity",{"_index":396,"title":{},"body":{"modules/AppModule.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"entities/User.html":{}}}],["report.entity.ts",{"_index":1825,"title":{},"body":{"entities/PostReport.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["report.entity.ts:15",{"_index":2269,"title":{},"body":{"entities/UserReport.html":{}}}],["report.entity.ts:16",{"_index":1828,"title":{},"body":{"entities/PostReport.html":{}}}],["report.entity.ts:18",{"_index":2275,"title":{},"body":{"entities/UserReport.html":{}}}],["report.entity.ts:19",{"_index":1833,"title":{},"body":{"entities/PostReport.html":{}}}],["report.entity.ts:21",{"_index":2270,"title":{},"body":{"entities/UserReport.html":{}}}],["report.entity.ts:22",{"_index":1829,"title":{},"body":{"entities/PostReport.html":{}}}],["report.entity.ts:27",{"_index":2274,"title":{},"body":{"entities/UserReport.html":{}}}],["report.entity.ts:28",{"_index":1832,"title":{},"body":{"entities/PostReport.html":{}}}],["report.entity.ts:33",{"_index":2272,"title":{},"body":{"entities/UserReport.html":{}}}],["report.entity.ts:34",{"_index":1831,"title":{},"body":{"entities/PostReport.html":{}}}],["report.service",{"_index":1880,"title":{},"body":{"controllers/ReportController.html":{},"modules/ReportModule.html":{}}}],["report.status",{"_index":603,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["report/entities/post",{"_index":571,"title":{},"body":{"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["report/entities/user",{"_index":2110,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["reportcontroller",{"_index":1836,"title":{"controllers/ReportController.html":{}},"body":{"controllers/ReportController.html":{},"modules/ReportModule.html":{},"coverage.html":{}}}],["reportcount",{"_index":343,"title":{},"body":{"injectables/AnalyticsService.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["reportdto",{"_index":1867,"title":{"classes/ReportDto.html":{}},"body":{"controllers/ReportController.html":{},"classes/ReportDto.html":{},"coverage.html":{}}}],["reported",{"_index":605,"title":{},"body":{"injectables/AppealsService.html":{},"entities/Post.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"entities/User.html":{}}}],["reportedby",{"_index":1826,"title":{},"body":{"entities/PostReport.html":{},"injectables/ReportService.html":{},"entities/UserReport.html":{}}}],["reportedbyid",{"_index":100,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["reportedpost",{"_index":1827,"title":{},"body":{"entities/PostReport.html":{},"injectables/ReportService.html":{}}}],["reportedpost.id",{"_index":1963,"title":{},"body":{"injectables/ReportService.html":{}}}],["reportedpostid",{"_index":112,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1673027114310.html":{}}}],["reportedposts",{"_index":1954,"title":{},"body":{"injectables/ReportService.html":{},"entities/User.html":{}}}],["reportedposts.reportedpost",{"_index":1955,"title":{},"body":{"injectables/ReportService.html":{}}}],["reportedposts.reportedpost.postedby",{"_index":1956,"title":{},"body":{"injectables/ReportService.html":{}}}],["reporteduser",{"_index":2268,"title":{},"body":{"entities/UserReport.html":{}}}],["reporteduser.id",{"_index":1980,"title":{},"body":{"injectables/ReportService.html":{}}}],["reporteduserid",{"_index":119,"title":{},"body":{"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["reportedusers",{"_index":1974,"title":{},"body":{"injectables/ReportService.html":{},"entities/User.html":{}}}],["reportedusers.reporteduser",{"_index":1975,"title":{},"body":{"injectables/ReportService.html":{}}}],["reportid",{"_index":1847,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["reportmodule",{"_index":376,"title":{"modules/ReportModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ReportModule.html":{},"modules.html":{},"overview.html":{}}}],["reportpost",{"_index":502,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["reportpost(@body",{"_index":542,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/ReportController.html":{}}}],["reportpost(body",{"_index":526,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/ReportController.html":{}}}],["reportpost(req.user",{"_index":1884,"title":{},"body":{"controllers/ReportController.html":{}}}],["reportpost(user",{"_index":1934,"title":{},"body":{"injectables/ReportService.html":{}}}],["reportreason",{"_index":186,"title":{},"body":{"classes/$npmConfigName1673770456243.html":{},"entities/Appeal.html":{},"injectables/AppealsService.html":{},"entities/PostReport.html":{},"classes/ReportDto.html":{},"entities/UserReport.html":{},"miscellaneous/enumerations.html":{}}}],["reports",{"_index":1835,"title":{},"body":{"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"entities/UserReport.html":{}}}],["reports.reportedpost",{"_index":1960,"title":{},"body":{"injectables/ReportService.html":{}}}],["reports.reporteduser",{"_index":1977,"title":{},"body":{"injectables/ReportService.html":{}}}],["reports.status",{"_index":1959,"title":{},"body":{"injectables/ReportService.html":{}}}],["reports/:id",{"_index":1856,"title":{},"body":{"controllers/ReportController.html":{}}}],["reportsagainst",{"_index":327,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["reportsagainstid",{"_index":102,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{}}}],["reportservice",{"_index":1879,"title":{"injectables/ReportService.html":{}},"body":{"controllers/ReportController.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"coverage.html":{},"overview.html":{}}}],["reportstatus",{"_index":482,"title":{},"body":{"entities/Appeal.html":{},"injectables/AppealsService.html":{},"entities/PostReport.html":{},"injectables/ReportService.html":{},"entities/UserReport.html":{},"miscellaneous/enumerations.html":{}}}],["reportstatus.accepted",{"_index":604,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["reportstatus.pendingreview",{"_index":474,"title":{},"body":{"entities/Appeal.html":{},"injectables/AppealsService.html":{},"entities/PostReport.html":{},"injectables/ReportService.html":{},"entities/UserReport.html":{}}}],["reportstatus.rejected",{"_index":633,"title":{},"body":{"injectables/AppealsService.html":{}}}],["reportuser",{"_index":1844,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["reportuser(@body",{"_index":1887,"title":{},"body":{"controllers/ReportController.html":{}}}],["reportuser(body",{"_index":1870,"title":{},"body":{"controllers/ReportController.html":{}}}],["reportuser(req.user",{"_index":1888,"title":{},"body":{"controllers/ReportController.html":{}}}],["reportuser(user",{"_index":1936,"title":{},"body":{"injectables/ReportService.html":{}}}],["repository",{"_index":307,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["represents",{"_index":1401,"title":{},"body":{"classes/PageMetaDto.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["req",{"_index":256,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["req.params.id",{"_index":1781,"title":{},"body":{"controllers/PostController.html":{}}}],["req.params.postid",{"_index":1791,"title":{},"body":{"controllers/PostController.html":{}}}],["req.rawbody",{"_index":1501,"title":{},"body":{"controllers/PaymentController.html":{}}}],["req.user",{"_index":558,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/BlockController.html":{},"controllers/FollowController.html":{}}}],["request",{"_index":261,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"classes/SignUpUserDto.html":{}}}],["request.entity",{"_index":409,"title":{},"body":{"modules/AppModule.html":{},"modules/FollowModule.html":{},"injectables/FollowService.html":{},"entities/User.html":{}}}],["request.entity.ts",{"_index":1147,"title":{},"body":{"entities/FollowRequest.html":{},"coverage.html":{}}}],["request.entity.ts:12",{"_index":1157,"title":{},"body":{"entities/FollowRequest.html":{}}}],["request.entity.ts:18",{"_index":1152,"title":{},"body":{"entities/FollowRequest.html":{}}}],["request.entity.ts:24",{"_index":1154,"title":{},"body":{"entities/FollowRequest.html":{}}}],["request.entity.ts:9",{"_index":1150,"title":{},"body":{"entities/FollowRequest.html":{}}}],["requestedby",{"_index":1148,"title":{},"body":{"entities/FollowRequest.html":{},"injectables/FollowService.html":{}}}],["requestedbyid",{"_index":204,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["requesteduser",{"_index":1149,"title":{},"body":{"entities/FollowRequest.html":{},"injectables/FollowService.html":{}}}],["requesteduserid",{"_index":205,"title":{},"body":{"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["requestfollow",{"_index":1081,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["requestfollow(@request",{"_index":1117,"title":{},"body":{"controllers/FollowController.html":{}}}],["requestfollow(id",{"_index":1119,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["requestfollow(req",{"_index":1105,"title":{},"body":{"controllers/FollowController.html":{}}}],["requestid",{"_index":1084,"title":{},"body":{"controllers/FollowController.html":{}}}],["requests",{"_index":1096,"title":{},"body":{"controllers/FollowController.html":{},"entities/User.html":{}}}],["required",{"_index":1356,"title":{},"body":{"injectables/NotificationService.html":{}}}],["requiredroles",{"_index":2048,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":2053,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiring",{"_index":2114,"title":{},"body":{"injectables/TasksService.html":{}}}],["res",{"_index":251,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["res.status(err.status).json",{"_index":281,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["res.status(httpstatus.bad_request).json",{"_index":715,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(httpstatus.created).json",{"_index":728,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(httpstatus.ok).json",{"_index":838,"title":{},"body":{"controllers/BlockController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["res.status(httpstatus.ok).json(analytics",{"_index":279,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["res.status(httpstatus.ok).json(appeal",{"_index":546,"title":{},"body":{"controllers/AppealsController.html":{}}}],["res.status(httpstatus.ok).json(appeals",{"_index":565,"title":{},"body":{"controllers/AppealsController.html":{}}}],["res.status(httpstatus.ok).json(block",{"_index":833,"title":{},"body":{"controllers/BlockController.html":{}}}],["res.status(httpstatus.ok).json(comments",{"_index":1805,"title":{},"body":{"controllers/PostController.html":{}}}],["res.status(httpstatus.ok).json(post",{"_index":1770,"title":{},"body":{"controllers/PostController.html":{}}}],["res.status(httpstatus.ok).json(posts",{"_index":951,"title":{},"body":{"controllers/FeedController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["res.status(httpstatus.ok).json(report",{"_index":1886,"title":{},"body":{"controllers/ReportController.html":{}}}],["res.status(httpstatus.ok).json(reports",{"_index":1891,"title":{},"body":{"controllers/ReportController.html":{}}}],["res.status(httpstatus.ok).json(result",{"_index":1121,"title":{},"body":{"controllers/FollowController.html":{}}}],["reset",{"_index":291,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":252,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["response.appealcount",{"_index":359,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.commentcount",{"_index":354,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.createdat",{"_index":360,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.dto",{"_index":319,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.dto.ts",{"_index":1669,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{},"coverage.html":{}}}],["response.dto.ts:12",{"_index":1680,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:17",{"_index":1676,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:21",{"_index":1679,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:26",{"_index":1681,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:31",{"_index":1672,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:35",{"_index":1675,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:39",{"_index":1678,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:43",{"_index":1683,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.dto.ts:7",{"_index":1673,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{}}}],["response.interactioncount",{"_index":356,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.ispartofscrapbook",{"_index":361,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.istakendown",{"_index":357,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.likecount",{"_index":355,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.reportcount",{"_index":358,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["response.scrapbookid",{"_index":362,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["respponse",{"_index":694,"title":{},"body":{"controllers/AuthController.html":{}}}],["result",{"_index":790,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PaymentController.html":{}}}],["results",{"_index":47,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":278,"title":{},"body":{"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{}}}],["returns",{"_index":30,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{}}}],["review",{"_index":114,"title":{},"body":{"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1673770456243.html":{},"miscellaneous/enumerations.html":{}}}],["rimraf",{"_index":2359,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":53,"title":{},"body":{"classes/$npmConfigName1672082713679.html":{},"injectables/AnalyticsService.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/ReportController.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":331,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["role.celebrity",{"_index":1368,"title":{},"body":{"injectables/NotificationService.html":{}}}],["role.influencer",{"_index":1381,"title":{},"body":{"injectables/NotificationService.html":{}}}],["roles",{"_index":42,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/NotificationController.html":{},"controllers/ReportController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":549,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/NotificationController.html":{},"controllers/ReportController.html":{}}}],["roles_key",{"_index":2047,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":535,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/NotificationController.html":{},"controllers/ReportController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesguard)@get('post",{"_index":512,"title":{},"body":{"controllers/AppealsController.html":{}}}],["rolesguard)@get('reported",{"_index":1859,"title":{},"body":{"controllers/ReportController.html":{}}}],["rolesguard)@patch('accept",{"_index":504,"title":{},"body":{"controllers/AppealsController.html":{}}}],["rolesguard)@patch('reject",{"_index":523,"title":{},"body":{"controllers/AppealsController.html":{}}}],["rolesguard)@post('admin/signup')@roles(role.admin",{"_index":678,"title":{},"body":{"controllers/AuthController.html":{}}}],["rolesguard)@post('ban",{"_index":1848,"title":{},"body":{"controllers/ReportController.html":{}}}],["rolesguard)@post('send')@roles(role.admin",{"_index":1300,"title":{},"body":{"controllers/NotificationController.html":{}}}],["rolesguard)@post('unban",{"_index":1873,"title":{},"body":{"controllers/ReportController.html":{}}}],["route",{"_index":660,"title":{},"body":{"controllers/AuthController.html":{}}}],["run",{"_index":450,"title":{},"body":{"modules/AppModule.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["running",{"_index":2408,"title":{},"body":{"index.html":{}}}],["runs",{"_index":2128,"title":{},"body":{"injectables/TasksService.html":{}}}],["rxjs",{"_index":2361,"title":{},"body":{"dependencies.html":{}}}],["salt_factor",{"_index":933,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["saved",{"_index":1316,"title":{},"body":{"controllers/NotificationController.html":{}}}],["schedulemodule",{"_index":417,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":421,"title":{},"body":{"modules/AppModule.html":{}}}],["scrapbook",{"_index":88,"title":{"entities/Scrapbook.html":{}},"body":{"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1674493007150.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"classes/CreateScrapBookDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"coverage.html":{}}}],["scrapbook.entity",{"_index":1662,"title":{},"body":{"entities/Post.html":{}}}],["scrapbook.posts",{"_index":1654,"title":{},"body":{"entities/Post.html":{}}}],["scrapbook.user",{"_index":2219,"title":{},"body":{"entities/User.html":{}}}],["scrapbook\\`(\\`id",{"_index":93,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{}}}],["scrapbookid",{"_index":90,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{},"classes/PostAnalyticResposneDto.html":{}}}],["scrapbooks",{"_index":1747,"title":{},"body":{"controllers/PostController.html":{},"entities/User.html":{}}}],["secret",{"_index":1262,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":1264,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":1624,"title":{},"body":{"injectables/PaymentService.html":{}}}],["select",{"_index":2234,"title":{},"body":{"entities/User.html":{}}}],["select(['id",{"_index":784,"title":{},"body":{"injectables/AuthService.html":{}}}],["selectedgroup",{"_index":2385,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["send",{"_index":683,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignUpUserDto.html":{},"entities/User.html":{}}}],["sending",{"_index":1740,"title":{},"body":{"controllers/PostController.html":{}}}],["sendnotification",{"_index":1326,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotification(body",{"_index":1319,"title":{},"body":{"controllers/NotificationController.html":{}}}],["sendnotification(sendnotificationdto",{"_index":1331,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationdto",{"_index":1299,"title":{"classes/SendNotificationDto.html":{}},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/SendNotificationDto.html":{},"coverage.html":{}}}],["sendnotificationdto.body",{"_index":1359,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationdto.targetgroup",{"_index":1352,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationdto.targetuserid",{"_index":1354,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationdto.title",{"_index":1358,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationtoall",{"_index":1296,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["sendnotificationtoall(@request",{"_index":1318,"title":{},"body":{"controllers/NotificationController.html":{}}}],["sendnotificationtoall(req",{"_index":1298,"title":{},"body":{"controllers/NotificationController.html":{}}}],["sendnotificationtoall(title",{"_index":1333,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationtocelebrities",{"_index":1327,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationtocelebrities(title",{"_index":1336,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationtoinfluencers",{"_index":1328,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationtoinfluencers(title",{"_index":1338,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotificationtoone",{"_index":1329,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/PaymentService.html":{}}}],["sendnotificationtoone('payment",{"_index":1599,"title":{},"body":{"injectables/PaymentService.html":{}}}],["sendnotificationtoone(title",{"_index":1340,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sends",{"_index":2079,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["sent",{"_index":1100,"title":{},"body":{"controllers/FollowController.html":{},"controllers/NotificationController.html":{}}}],["server",{"_index":2074,"title":{},"body":{"classes/SignUpUserDto.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["service",{"_index":915,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["serviceaccount",{"_index":2294,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["servicec",{"_index":710,"title":{},"body":{"controllers/AuthController.html":{}}}],["session",{"_index":1554,"title":{},"body":{"injectables/PaymentService.html":{},"index.html":{}}}],["session.url",{"_index":1570,"title":{},"body":{"injectables/PaymentService.html":{}}}],["sessionid",{"_index":1471,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["set",{"_index":1451,"title":{},"body":{"classes/PageOptionsDto.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["setmetadata(roles_key",{"_index":2454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settings",{"_index":429,"title":{},"body":{"modules/AppModule.html":{}}}],["sign",{"_index":691,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignUpUserDto.html":{}}}],["signature",{"_index":1500,"title":{},"body":{"controllers/PaymentController.html":{}}}],["signed",{"_index":1026,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["signoptions",{"_index":2451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signup",{"_index":1297,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["signup(@request",{"_index":1311,"title":{},"body":{"controllers/NotificationController.html":{}}}],["signup(req",{"_index":1302,"title":{},"body":{"controllers/NotificationController.html":{}}}],["signup(req.user",{"_index":1314,"title":{},"body":{"controllers/NotificationController.html":{}}}],["signup(user",{"_index":1342,"title":{},"body":{"injectables/NotificationService.html":{}}}],["signup.dto",{"_index":705,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup.dto.ts",{"_index":2073,"title":{},"body":{"classes/SignUpUserDto.html":{},"coverage.html":{}}}],["signup.dto.ts:13",{"_index":2090,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:16",{"_index":2091,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:19",{"_index":2089,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:22",{"_index":2095,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:25",{"_index":2092,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:28",{"_index":2086,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:31",{"_index":2094,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:33",{"_index":2085,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signup.dto.ts:36",{"_index":2087,"title":{},"body":{"classes/SignUpUserDto.html":{}}}],["signupadmin",{"_index":655,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupadmin(@body",{"_index":730,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupadmin(body",{"_index":676,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupuser",{"_index":656,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupuser(body",{"_index":687,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupuserdto",{"_index":677,"title":{"classes/SignUpUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SignUpUserDto.html":{},"coverage.html":{}}}],["singleuser",{"_index":2387,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["skip",{"_index":1432,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["skip(pageoptionsdto.skip",{"_index":639,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["sorry",{"_index":1623,"title":{},"body":{"injectables/PaymentService.html":{}}}],["sort((a",{"_index":609,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"controllers/AnalyticsController.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{}}}],["spam",{"_index":2392,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["specified",{"_index":2129,"title":{},"body":{"injectables/TasksService.html":{}}}],["sql",{"_index":1632,"title":{},"body":{"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["src/.../ban",{"_index":2367,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../constants.ts",{"_index":2438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../firebase",{"_index":2437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../follow",{"_index":2369,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../gender.enum.ts",{"_index":2370,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":2405,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../notification",{"_index":2371,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../order.enum.ts",{"_index":2374,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../report",{"_index":2375,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role.enum.ts",{"_index":2377,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":2439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../subscription",{"_index":2378,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../visibility.enum.ts",{"_index":2380,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":381,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":456,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":458,"title":{},"body":{"injectables/AppService.html":{}}}],["src/common/dto/page",{"_index":532,"title":{},"body":{"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"controllers/FollowController.html":{},"injectables/FollowService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{},"coverage.html":{}}}],["src/common/dto/page.dto",{"_index":590,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/ReportService.html":{}}}],["src/common/dto/page.dto.ts",{"_index":1386,"title":{},"body":{"classes/PageDto.html":{},"coverage.html":{}}}],["src/common/dto/page.dto.ts:10",{"_index":1394,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dto/page.dto.ts:12",{"_index":1392,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/entities/base.entity.ts",{"_index":797,"title":{},"body":{"classes/BaseEntity.html":{},"coverage.html":{}}}],["src/common/entities/base.entity.ts:12",{"_index":802,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/entities/base.entity.ts:9",{"_index":800,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/services/encryption.service",{"_index":782,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/common/services/encryption.service.ts",{"_index":914,"title":{},"body":{"injectables/EncryptionService.html":{},"coverage.html":{}}}],["src/common/services/encryption.service.ts:14",{"_index":928,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/common/services/encryption.service.ts:25",{"_index":922,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/common/services/firebase",{"_index":985,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/TasksService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/services/stripe.service.ts",{"_index":2098,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/common/services/stripe.service.ts:12",{"_index":2101,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/common/services/stripe.service.ts:8",{"_index":2103,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/constants/ban",{"_index":2142,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/enumerations.html":{}}}],["src/constants/follow",{"_index":1179,"title":{},"body":{"injectables/FollowService.html":{},"miscellaneous/enumerations.html":{}}}],["src/constants/gender.enum.ts",{"_index":2381,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/constants/notification",{"_index":1347,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SendNotificationDto.html":{},"miscellaneous/enumerations.html":{}}}],["src/constants/order.enum",{"_index":1446,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["src/constants/order.enum.ts",{"_index":2390,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/constants/report",{"_index":591,"title":{},"body":{"injectables/AppealsService.html":{},"classes/ReportDto.html":{},"injectables/ReportService.html":{},"miscellaneous/enumerations.html":{}}}],["src/constants/role.enum",{"_index":315,"title":{},"body":{"injectables/AnalyticsService.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/ReportController.html":{},"guards/RolesGuard.html":{}}}],["src/constants/role.enum.ts",{"_index":2398,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/constants/subscription",{"_index":1533,"title":{},"body":{"injectables/PaymentService.html":{},"miscellaneous/enumerations.html":{}}}],["src/constants/visibility.enum",{"_index":903,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/FeedService.html":{},"controllers/PostController.html":{}}}],["src/constants/visibility.enum.ts",{"_index":2403,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/decorators/roles.decorator",{"_index":534,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/NotificationController.html":{},"controllers/ReportController.html":{},"guards/RolesGuard.html":{}}}],["src/decorators/roles.decorator.ts",{"_index":2298,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":2299,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/analytics/analytics.controller.ts",{"_index":246,"title":{},"body":{"controllers/AnalyticsController.html":{},"coverage.html":{}}}],["src/modules/analytics/analytics.controller.ts:12",{"_index":255,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["src/modules/analytics/analytics.module.ts",{"_index":293,"title":{},"body":{"modules/AnalyticsModule.html":{}}}],["src/modules/analytics/analytics.service.ts",{"_index":304,"title":{},"body":{"injectables/AnalyticsService.html":{},"coverage.html":{}}}],["src/modules/analytics/analytics.service.ts:10",{"_index":309,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["src/modules/analytics/analytics.service.ts:19",{"_index":312,"title":{},"body":{"injectables/AnalyticsService.html":{}}}],["src/modules/analytics/dto/post",{"_index":1668,"title":{},"body":{"classes/PostAnalyticResposneDto.html":{},"coverage.html":{}}}],["src/modules/appeals/appeals.controller.ts",{"_index":496,"title":{},"body":{"controllers/AppealsController.html":{},"coverage.html":{}}}],["src/modules/appeals/appeals.controller.ts:118",{"_index":521,"title":{},"body":{"controllers/AppealsController.html":{}}}],["src/modules/appeals/appeals.controller.ts:132",{"_index":514,"title":{},"body":{"controllers/AppealsController.html":{}}}],["src/modules/appeals/appeals.controller.ts:35",{"_index":528,"title":{},"body":{"controllers/AppealsController.html":{}}}],["src/modules/appeals/appeals.controller.ts:55",{"_index":506,"title":{},"body":{"controllers/AppealsController.html":{}}}],["src/modules/appeals/appeals.controller.ts:75",{"_index":524,"title":{},"body":{"controllers/AppealsController.html":{}}}],["src/modules/appeals/appeals.controller.ts:94",{"_index":518,"title":{},"body":{"controllers/AppealsController.html":{}}}],["src/modules/appeals/appeals.module.ts",{"_index":568,"title":{},"body":{"modules/AppealsModule.html":{}}}],["src/modules/appeals/appeals.service.ts",{"_index":573,"title":{},"body":{"injectables/AppealsService.html":{},"coverage.html":{}}}],["src/modules/appeals/appeals.service.ts:117",{"_index":579,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/appeals.service.ts:146",{"_index":586,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/appeals.service.ts:15",{"_index":577,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/appeals.service.ts:173",{"_index":582,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/appeals.service.ts:30",{"_index":581,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/appeals.service.ts:73",{"_index":583,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/appeals.service.ts:99",{"_index":585,"title":{},"body":{"injectables/AppealsService.html":{}}}],["src/modules/appeals/dto/appeal.dto.ts",{"_index":490,"title":{},"body":{"classes/AppealDto.html":{},"coverage.html":{}}}],["src/modules/appeals/dto/appeal.dto.ts:5",{"_index":492,"title":{},"body":{"classes/AppealDto.html":{}}}],["src/modules/appeals/dto/appeal.dto.ts:8",{"_index":493,"title":{},"body":{"classes/AppealDto.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts",{"_index":462,"title":{},"body":{"entities/Appeal.html":{},"coverage.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts:11",{"_index":472,"title":{},"body":{"entities/Appeal.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts:14",{"_index":476,"title":{},"body":{"entities/Appeal.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts:17",{"_index":473,"title":{},"body":{"entities/Appeal.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts:20",{"_index":477,"title":{},"body":{"entities/Appeal.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts:26",{"_index":470,"title":{},"body":{"entities/Appeal.html":{}}}],["src/modules/appeals/entities/appeal.entity.ts:32",{"_index":468,"title":{},"body":{"entities/Appeal.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":652,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:117",{"_index":659,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:40",{"_index":689,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:88",{"_index":679,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":744,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":759,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:10",{"_index":765,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:24",{"_index":775,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:49",{"_index":770,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:56",{"_index":768,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/constants.ts",{"_index":2309,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/dto/user",{"_index":2072,"title":{},"body":{"classes/SignUpUserDto.html":{},"coverage.html":{}}}],["src/modules/auth/guards/jwt",{"_index":1241,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/local",{"_index":1281,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/roles.guard.ts",{"_index":2037,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/roles.guard.ts:10",{"_index":2044,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/modules/auth/guards/roles.guard.ts:7",{"_index":2041,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts",{"_index":1245,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:20",{"_index":1248,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:7",{"_index":1246,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts",{"_index":1283,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:10",{"_index":1285,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:21",{"_index":1287,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/block/block.controller.ts",{"_index":815,"title":{},"body":{"controllers/BlockController.html":{},"coverage.html":{}}}],["src/modules/block/block.controller.ts:12",{"_index":821,"title":{},"body":{"controllers/BlockController.html":{}}}],["src/modules/block/block.controller.ts:25",{"_index":824,"title":{},"body":{"controllers/BlockController.html":{}}}],["src/modules/block/block.module.ts",{"_index":842,"title":{},"body":{"modules/BlockModule.html":{}}}],["src/modules/block/block.service.ts",{"_index":846,"title":{},"body":{"injectables/BlockService.html":{},"coverage.html":{}}}],["src/modules/block/block.service.ts:17",{"_index":850,"title":{},"body":{"injectables/BlockService.html":{}}}],["src/modules/block/block.service.ts:50",{"_index":851,"title":{},"body":{"injectables/BlockService.html":{}}}],["src/modules/block/block.service.ts:8",{"_index":848,"title":{},"body":{"injectables/BlockService.html":{}}}],["src/modules/block/entities/block.entity.ts",{"_index":804,"title":{},"body":{"entities/Block.html":{},"coverage.html":{}}}],["src/modules/block/entities/block.entity.ts:14",{"_index":810,"title":{},"body":{"entities/Block.html":{}}}],["src/modules/block/entities/block.entity.ts:20",{"_index":808,"title":{},"body":{"entities/Block.html":{}}}],["src/modules/block/entities/block.entity.ts:8",{"_index":811,"title":{},"body":{"entities/Block.html":{}}}],["src/modules/feed/feed.controller.ts",{"_index":938,"title":{},"body":{"controllers/FeedController.html":{},"coverage.html":{}}}],["src/modules/feed/feed.controller.ts:13",{"_index":943,"title":{},"body":{"controllers/FeedController.html":{}}}],["src/modules/feed/feed.module.ts",{"_index":954,"title":{},"body":{"modules/FeedModule.html":{}}}],["src/modules/feed/feed.service.ts",{"_index":956,"title":{},"body":{"injectables/FeedService.html":{},"coverage.html":{}}}],["src/modules/feed/feed.service.ts:12",{"_index":957,"title":{},"body":{"injectables/FeedService.html":{}}}],["src/modules/feed/feed.service.ts:21",{"_index":959,"title":{},"body":{"injectables/FeedService.html":{}}}],["src/modules/follow/entities/follow",{"_index":1146,"title":{},"body":{"entities/FollowRequest.html":{},"coverage.html":{}}}],["src/modules/follow/entities/follow.entity.ts",{"_index":1063,"title":{},"body":{"entities/Follow.html":{},"coverage.html":{}}}],["src/modules/follow/entities/follow.entity.ts:14",{"_index":1069,"title":{},"body":{"entities/Follow.html":{}}}],["src/modules/follow/entities/follow.entity.ts:20",{"_index":1067,"title":{},"body":{"entities/Follow.html":{}}}],["src/modules/follow/entities/follow.entity.ts:8",{"_index":1070,"title":{},"body":{"entities/Follow.html":{}}}],["src/modules/follow/follow.controller.ts",{"_index":1074,"title":{},"body":{"controllers/FollowController.html":{},"coverage.html":{}}}],["src/modules/follow/follow.controller.ts:106",{"_index":1098,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:124",{"_index":1101,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:14",{"_index":1108,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:28",{"_index":1087,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:42",{"_index":1104,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:56",{"_index":1111,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:70",{"_index":1090,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.controller.ts:88",{"_index":1093,"title":{},"body":{"controllers/FollowController.html":{}}}],["src/modules/follow/follow.module.ts",{"_index":1142,"title":{},"body":{"modules/FollowModule.html":{}}}],["src/modules/follow/follow.service.ts",{"_index":1159,"title":{},"body":{"injectables/FollowService.html":{},"coverage.html":{}}}],["src/modules/follow/follow.service.ts:123",{"_index":1176,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:13",{"_index":1163,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:154",{"_index":1168,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:176",{"_index":1170,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:198",{"_index":1172,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:219",{"_index":1174,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:240",{"_index":1178,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:25",{"_index":1177,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/follow/follow.service.ts:72",{"_index":1166,"title":{},"body":{"injectables/FollowService.html":{}}}],["src/modules/notification/dto/send",{"_index":2063,"title":{},"body":{"classes/SendNotificationDto.html":{},"coverage.html":{}}}],["src/modules/notification/notification.controller.ts",{"_index":1294,"title":{},"body":{"controllers/NotificationController.html":{},"coverage.html":{}}}],["src/modules/notification/notification.controller.ts:16",{"_index":1304,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/modules/notification/notification.controller.ts:30",{"_index":1301,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/modules/notification/notification.module.ts",{"_index":1323,"title":{},"body":{"modules/NotificationModule.html":{}}}],["src/modules/notification/notification.service.ts",{"_index":1325,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{}}}],["src/modules/notification/notification.service.ts:12",{"_index":1330,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:144",{"_index":1334,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:18",{"_index":1343,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:189",{"_index":1341,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:22",{"_index":1332,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:50",{"_index":1337,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/notification/notification.service.ts:97",{"_index":1339,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/modules/payment/payment.controller.ts",{"_index":1458,"title":{},"body":{"controllers/PaymentController.html":{},"coverage.html":{}}}],["src/modules/payment/payment.controller.ts:22",{"_index":1479,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/modules/payment/payment.controller.ts:35",{"_index":1482,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/modules/payment/payment.controller.ts:47",{"_index":1476,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/modules/payment/payment.controller.ts:63",{"_index":1473,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/modules/payment/payment.controller.ts:79",{"_index":1469,"title":{},"body":{"controllers/PaymentController.html":{}}}],["src/modules/payment/payment.module.ts",{"_index":1505,"title":{},"body":{"modules/PaymentModule.html":{}}}],["src/modules/payment/payment.service.ts",{"_index":1508,"title":{},"body":{"injectables/PaymentService.html":{},"coverage.html":{}}}],["src/modules/payment/payment.service.ts:110",{"_index":1516,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:122",{"_index":1514,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:13",{"_index":1529,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:17",{"_index":1523,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:19",{"_index":1512,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:27",{"_index":1519,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:74",{"_index":1521,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/payment/payment.service.ts:98",{"_index":1517,"title":{},"body":{"injectables/PaymentService.html":{}}}],["src/modules/post/dto/comment",{"_index":886,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/modules/post/dto/post",{"_index":893,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/modules/post/dto/scrapbook",{"_index":906,"title":{},"body":{"classes/CreateScrapBookDto.html":{},"coverage.html":{}}}],["src/modules/post/entities/comment.entity.ts",{"_index":875,"title":{},"body":{"entities/Comment.html":{},"coverage.html":{}}}],["src/modules/post/entities/comment.entity.ts:12",{"_index":882,"title":{},"body":{"entities/Comment.html":{}}}],["src/modules/post/entities/comment.entity.ts:18",{"_index":878,"title":{},"body":{"entities/Comment.html":{}}}],["src/modules/post/entities/comment.entity.ts:24",{"_index":881,"title":{},"body":{"entities/Comment.html":{}}}],["src/modules/post/entities/comment.entity.ts:9",{"_index":879,"title":{},"body":{"entities/Comment.html":{}}}],["src/modules/post/entities/post",{"_index":1271,"title":{},"body":{"entities/Like.html":{},"coverage.html":{}}}],["src/modules/post/entities/post.entity.ts",{"_index":1628,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/modules/post/entities/post.entity.ts:20",{"_index":1640,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:23",{"_index":1637,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:26",{"_index":1656,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:29",{"_index":1657,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:32",{"_index":1649,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:35",{"_index":1658,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:38",{"_index":1645,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:41",{"_index":1644,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:44",{"_index":1643,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:47",{"_index":1642,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:50",{"_index":1648,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:56",{"_index":1651,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:60",{"_index":1653,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:64",{"_index":1655,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:67",{"_index":1639,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:71",{"_index":1636,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/post.entity.ts:75",{"_index":1647,"title":{},"body":{"entities/Post.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts",{"_index":2055,"title":{},"body":{"entities/Scrapbook.html":{},"coverage.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts:15",{"_index":2057,"title":{},"body":{"entities/Scrapbook.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts:18",{"_index":2056,"title":{},"body":{"entities/Scrapbook.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts:21",{"_index":2058,"title":{},"body":{"entities/Scrapbook.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts:24",{"_index":2062,"title":{},"body":{"entities/Scrapbook.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts:30",{"_index":2061,"title":{},"body":{"entities/Scrapbook.html":{}}}],["src/modules/post/entities/scrapbook.entity.ts:34",{"_index":2059,"title":{},"body":{"entities/Scrapbook.html":{}}}],["src/modules/post/post.controller.ts",{"_index":1690,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/modules/post/post.controller.ts:112",{"_index":1721,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:130",{"_index":1714,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:149",{"_index":1754,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:167",{"_index":1748,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:186",{"_index":1743,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:200",{"_index":1708,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:218",{"_index":1735,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:235",{"_index":1737,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:252",{"_index":1726,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:265",{"_index":1751,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:278",{"_index":1758,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:35",{"_index":1718,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:66",{"_index":1739,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:79",{"_index":1732,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.controller.ts:92",{"_index":1729,"title":{},"body":{"controllers/PostController.html":{}}}],["src/modules/post/post.module.ts",{"_index":1819,"title":{},"body":{"modules/PostModule.html":{}}}],["src/modules/post/post.service.ts",{"_index":2322,"title":{},"body":{"coverage.html":{}}}],["src/modules/report/dto/report.dto.ts",{"_index":1909,"title":{},"body":{"classes/ReportDto.html":{},"coverage.html":{}}}],["src/modules/report/dto/report.dto.ts:13",{"_index":1913,"title":{},"body":{"classes/ReportDto.html":{}}}],["src/modules/report/dto/report.dto.ts:9",{"_index":1911,"title":{},"body":{"classes/ReportDto.html":{}}}],["src/modules/report/entities/post",{"_index":1824,"title":{},"body":{"entities/PostReport.html":{},"coverage.html":{}}}],["src/modules/report/entities/user",{"_index":2247,"title":{},"body":{"entities/UserBan.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["src/modules/report/report.controller.ts",{"_index":1837,"title":{},"body":{"controllers/ReportController.html":{},"coverage.html":{}}}],["src/modules/report/report.controller.ts:111",{"_index":1854,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:136",{"_index":1850,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:161",{"_index":1875,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:175",{"_index":1861,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:189",{"_index":1864,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:24",{"_index":1869,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:43",{"_index":1871,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:62",{"_index":1857,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.controller.ts:86",{"_index":1866,"title":{},"body":{"controllers/ReportController.html":{}}}],["src/modules/report/report.module.ts",{"_index":1917,"title":{},"body":{"modules/ReportModule.html":{}}}],["src/modules/report/report.service.ts",{"_index":1921,"title":{},"body":{"injectables/ReportService.html":{},"coverage.html":{}}}],["src/modules/report/report.service.ts:139",{"_index":1929,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:15",{"_index":1924,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:165",{"_index":1933,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:190",{"_index":1927,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:223",{"_index":1926,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:252",{"_index":1939,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:269",{"_index":1930,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:297",{"_index":1931,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:33",{"_index":1935,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/report/report.service.ts:90",{"_index":1937,"title":{},"body":{"injectables/ReportService.html":{}}}],["src/modules/tasks/tasks.module.ts",{"_index":2108,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/modules/tasks/tasks.service.ts",{"_index":2111,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/modules/tasks/tasks.service.ts:111",{"_index":2127,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:16",{"_index":2125,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:33",{"_index":2137,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:72",{"_index":2132,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/user/dto/bio",{"_index":2149,"title":{},"body":{"classes/UpdateUserBioDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/dateofbirth",{"_index":2157,"title":{},"body":{"classes/UpdateUserDateOfBirthDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/email",{"_index":2160,"title":{},"body":{"classes/UpdateUserEmailDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/password",{"_index":2163,"title":{},"body":{"classes/UpdateUserPasseordDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/phone",{"_index":2171,"title":{},"body":{"classes/UpdateUserPhoneNumberDto.html":{},"coverage.html":{}}}],["src/modules/user/entities/user.entity.ts",{"_index":2172,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/modules/user/entities/user.entity.ts:102",{"_index":2179,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:106",{"_index":2208,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:110",{"_index":2220,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:114",{"_index":2213,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:118",{"_index":2215,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:122",{"_index":2217,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:125",{"_index":2178,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:129",{"_index":2185,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:133",{"_index":2176,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:137",{"_index":2183,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:141",{"_index":2181,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:145",{"_index":2192,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:149",{"_index":2190,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:153",{"_index":2195,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:157",{"_index":2194,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:161",{"_index":2203,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:36",{"_index":2199,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:39",{"_index":2189,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:42",{"_index":2201,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:45",{"_index":2187,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:48",{"_index":2223,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:51",{"_index":2206,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:54",{"_index":2207,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:57",{"_index":2174,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:60",{"_index":2186,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:63",{"_index":2218,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:66",{"_index":2211,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:69",{"_index":2210,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:72",{"_index":2209,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:75",{"_index":2197,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:78",{"_index":2188,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:81",{"_index":2204,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:84",{"_index":2200,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:87",{"_index":2198,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:90",{"_index":2221,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:93",{"_index":2222,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:96",{"_index":2191,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/entities/user.entity.ts:99",{"_index":2193,"title":{},"body":{"entities/User.html":{}}}],["src/modules/user/user.controller.ts",{"_index":2332,"title":{},"body":{"coverage.html":{}}}],["src/modules/user/user.module.ts",{"_index":2263,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/user/user.service.ts",{"_index":2334,"title":{},"body":{"coverage.html":{}}}],["standard",{"_index":2399,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["start",{"_index":452,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["start:dev",{"_index":2423,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":127,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"entities/UserBan.html":{}}}],["started",{"_index":2407,"title":{"index.html":{}},"body":{}}],["statements",{"_index":2279,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":98,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673974513613.html":{},"entities/Appeal.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/PostReport.html":{},"injectables/ReportService.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["status(httpstatus.created",{"_index":725,"title":{},"body":{"controllers/AuthController.html":{}}}],["status.enum",{"_index":484,"title":{},"body":{"entities/Appeal.html":{},"injectables/AppealsService.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/PostReport.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["status.enum.ts",{"_index":2368,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["still",{"_index":1951,"title":{},"body":{"injectables/ReportService.html":{}}}],["storage",{"_index":988,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["storage.service",{"_index":1664,"title":{},"body":{"entities/Post.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["storage.service.ts",{"_index":986,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"coverage.html":{}}}],["storage.service.ts:110",{"_index":1004,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:139",{"_index":1002,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:16",{"_index":1025,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:25",{"_index":1016,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:50",{"_index":1007,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:68",{"_index":998,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:80",{"_index":1019,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storage.service.ts:98",{"_index":1000,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["storagebucket",{"_index":2443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategies/jwt.strategy",{"_index":755,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":756,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":671,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":20,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"injectables/AnalyticsService.html":{},"injectables/AppService.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/Like.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"entities/PostReport.html":{},"classes/ReportDto.html":{},"injectables/ReportService.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"miscellaneous/variables.html":{}}}],["stripe",{"_index":1510,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{},"dependencies.html":{},"index.html":{}}}],["stripe(process.env?.stripe_test_key",{"_index":1524,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/StripeService.html":{}}}],["stripe.customer",{"_index":1540,"title":{},"body":{"injectables/PaymentService.html":{}}}],["stripecustomerid",{"_index":235,"title":{},"body":{"classes/$npmConfigName1674544597118.html":{},"injectables/PaymentService.html":{},"entities/User.html":{}}}],["stripeservice",{"_index":2097,"title":{"injectables/StripeService.html":{}},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["stripesignature",{"_index":1515,"title":{},"body":{"injectables/PaymentService.html":{}}}],["sub",{"_index":793,"title":{},"body":{"injectables/AuthService.html":{}}}],["subscribe",{"_index":1463,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["subscribe(@request",{"_index":1487,"title":{},"body":{"controllers/PaymentController.html":{}}}],["subscribe(req",{"_index":1477,"title":{},"body":{"controllers/PaymentController.html":{}}}],["subscribe(req.user",{"_index":1489,"title":{},"body":{"controllers/PaymentController.html":{}}}],["subscribe(user",{"_index":1518,"title":{},"body":{"injectables/PaymentService.html":{}}}],["subscription",{"_index":1553,"title":{},"body":{"injectables/PaymentService.html":{}}}],["subscriptiondeletedevent",{"_index":1615,"title":{},"body":{"injectables/PaymentService.html":{}}}],["subscriptiondeletedevent.customer",{"_index":1617,"title":{},"body":{"injectables/PaymentService.html":{}}}],["subscriptionplan",{"_index":236,"title":{},"body":{"classes/$npmConfigName1674544597118.html":{},"injectables/PaymentService.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["subscriptionplan.basic",{"_index":1542,"title":{},"body":{"injectables/PaymentService.html":{},"entities/User.html":{}}}],["subscriptionplan.premium",{"_index":1552,"title":{},"body":{"injectables/PaymentService.html":{}}}],["subscriptions",{"_index":1573,"title":{},"body":{"injectables/PaymentService.html":{}}}],["success",{"_index":1490,"title":{},"body":{"controllers/PaymentController.html":{}}}],["success_url",{"_index":1566,"title":{},"body":{"injectables/PaymentService.html":{}}}],["successcustomer",{"_index":1593,"title":{},"body":{"injectables/PaymentService.html":{}}}],["successcustomer.id",{"_index":1597,"title":{},"body":{"injectables/PaymentService.html":{}}}],["successful",{"_index":1600,"title":{},"body":{"injectables/PaymentService.html":{}}}],["successfully",{"_index":1622,"title":{},"body":{"injectables/PaymentService.html":{},"controllers/PostController.html":{}}}],["successuser",{"_index":1596,"title":{},"body":{"injectables/PaymentService.html":{}}}],["successuser.id",{"_index":1602,"title":{},"body":{"injectables/PaymentService.html":{}}}],["super",{"_index":1253,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":2429,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":2430,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1587,"title":{},"body":{"injectables/PaymentService.html":{}}}],["synchronize",{"_index":441,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":1391,"title":{},"body":{"classes/PageDto.html":{}}}],["table",{"_index":39,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"modules/AppModule.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"entities/Scrapbook.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2338,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":68,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["take",{"_index":1407,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["take(pageoptionsdto.take",{"_index":640,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["taken",{"_index":606,"title":{},"body":{"injectables/AppealsService.html":{}}}],["target",{"_index":1348,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SendNotificationDto.html":{},"miscellaneous/enumerations.html":{}}}],["targetgroup",{"_index":2065,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["targetuserid",{"_index":2066,"title":{},"body":{"classes/SendNotificationDto.html":{}}}],["tasks",{"_index":2113,"title":{},"body":{"injectables/TasksService.html":{}}}],["tasks.service",{"_index":2109,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasksmodule",{"_index":377,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":2107,"title":{"injectables/TasksService.html":{}},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["template",{"_index":2425,"title":{},"body":{"index.html":{}}}],["temporary",{"_index":1061,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["test",{"_index":2418,"title":{},"body":{"index.html":{}}}],["text",{"_index":167,"title":{},"body":{"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{}}}],["thank",{"_index":1601,"title":{},"body":{"injectables/PaymentService.html":{}}}],["then((_",{"_index":837,"title":{},"body":{"controllers/BlockController.html":{},"controllers/FollowController.html":{}}}],["then((analytics",{"_index":277,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["then((appeal",{"_index":545,"title":{},"body":{"controllers/AppealsController.html":{}}}],["then((appeals",{"_index":564,"title":{},"body":{"controllers/AppealsController.html":{}}}],["then((appealsandcount",{"_index":644,"title":{},"body":{"injectables/AppealsService.html":{}}}],["then((block",{"_index":832,"title":{},"body":{"controllers/BlockController.html":{}}}],["then((comments",{"_index":1804,"title":{},"body":{"controllers/PostController.html":{}}}],["then((post",{"_index":1773,"title":{},"body":{"controllers/PostController.html":{}}}],["then((postreportsandcount",{"_index":1990,"title":{},"body":{"injectables/ReportService.html":{}}}],["then((posts",{"_index":950,"title":{},"body":{"controllers/FeedController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["then((postsandcount",{"_index":2026,"title":{},"body":{"injectables/ReportService.html":{}}}],["then((report",{"_index":1885,"title":{},"body":{"controllers/ReportController.html":{}}}],["then((reports",{"_index":1890,"title":{},"body":{"controllers/ReportController.html":{}}}],["then((result",{"_index":1120,"title":{},"body":{"controllers/FollowController.html":{},"controllers/PaymentController.html":{}}}],["then((user",{"_index":1957,"title":{},"body":{"injectables/ReportService.html":{}}}],["then((userreportsandcount",{"_index":2000,"title":{},"body":{"injectables/ReportService.html":{}}}],["then((usersandcount",{"_index":2033,"title":{},"body":{"injectables/ReportService.html":{}}}],["then(async",{"_index":1058,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"injectables/TasksService.html":{}}}],["this.analyticsservice",{"_index":275,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["this.appealrepository",{"_index":634,"title":{},"body":{"injectables/AppealsService.html":{}}}],["this.appealrepository.save(appeal",{"_index":632,"title":{},"body":{"injectables/AppealsService.html":{}}}],["this.appealrepository.save(newappeal",{"_index":619,"title":{},"body":{"injectables/AppealsService.html":{}}}],["this.appealsservice",{"_index":543,"title":{},"body":{"controllers/AppealsController.html":{}}}],["this.authservice.isuserbanned(req.user",{"_index":735,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(req.user",{"_index":736,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":1292,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.blockrepository.delete",{"_index":874,"title":{},"body":{"injectables/BlockService.html":{}}}],["this.blockrepository.save(newblock",{"_index":865,"title":{},"body":{"injectables/BlockService.html":{}}}],["this.blockservice",{"_index":830,"title":{},"body":{"controllers/BlockController.html":{}}}],["this.data",{"_index":1398,"title":{},"body":{"classes/PageDto.html":{}}}],["this.deleteavatar(previousimageid",{"_index":1048,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["this.email",{"_index":2242,"title":{},"body":{"entities/User.html":{}}}],["this.email.tolowercase",{"_index":2243,"title":{},"body":{"entities/User.html":{}}}],["this.endpointsecret",{"_index":1584,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.expirydate",{"_index":1046,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["this.feedservice",{"_index":948,"title":{},"body":{"controllers/FeedController.html":{}}}],["this.followrequestsrepository.findone",{"_index":1199,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.followrequestsrepository.save(followrequest",{"_index":1198,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.followrequestsrepository.update(followrequest.id",{"_index":1208,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.followservice",{"_index":1118,"title":{},"body":{"controllers/FollowController.html":{}}}],["this.followsrepository.delete(followid",{"_index":1240,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.followsrepository.save(follow",{"_index":1216,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.hasnextpage",{"_index":1424,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.haspreviouspage",{"_index":1423,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.itemcount",{"_index":1420,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.jwtservice.sign(payload",{"_index":795,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.meta",{"_index":1399,"title":{},"body":{"classes/PageDto.html":{}}}],["this.notificationservice",{"_index":1313,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/PaymentService.html":{}}}],["this.page",{"_index":1418,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.pagecount",{"_index":1421,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.password",{"_index":2245,"title":{},"body":{"entities/User.html":{}}}],["this.paymentservice",{"_index":1488,"title":{},"body":{"controllers/PaymentController.html":{}}}],["this.postreportsrepository",{"_index":1985,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.postreportsrepository.findone",{"_index":2017,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.postreportsrepository.save(newreport",{"_index":1969,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.postreportsrepository.save(report",{"_index":2018,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.postrepository",{"_index":2019,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.postrepository.find",{"_index":968,"title":{},"body":{"injectables/FeedService.html":{}}}],["this.postrepository.findone",{"_index":324,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/ReportService.html":{}}}],["this.postrepository.update(postid",{"_index":631,"title":{},"body":{"injectables/AppealsService.html":{}}}],["this.postservice",{"_index":1771,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.createpostwithimage(req.user",{"_index":1768,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.createscrapbook(req.user",{"_index":1786,"title":{},"body":{"controllers/PostController.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":2049,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reportservice",{"_index":1883,"title":{},"body":{"controllers/ReportController.html":{}}}],["this.sendnotificationtoall(sendnotificationdto.title",{"_index":1361,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.sendnotificationtocelebrities",{"_index":1363,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.sendnotificationtoinfluencers",{"_index":1365,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.sendnotificationtoone",{"_index":1357,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.stripe.checkout.sessions.create",{"_index":1555,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.stripe.checkout.sessions.retrieve(sessionid",{"_index":1575,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.stripe.customers.create",{"_index":1544,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.stripe.customers.del(customerid",{"_index":2104,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.retrieve",{"_index":1594,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.stripe.customers.retrieve(session.customer",{"_index":1576,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.stripe.subscriptions.list",{"_index":1574,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.stripe.webhooks.constructevent(body",{"_index":1583,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.take",{"_index":1419,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.userbanrepository.save(newban",{"_index":2016,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.userreportsrepository",{"_index":1995,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.userreportsrepository.findone",{"_index":2012,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.userreportsrepository.save(newreport",{"_index":1983,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.userreportsrepository.save(report",{"_index":2014,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.userrepository",{"_index":1577,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["this.userrepository.findone",{"_index":624,"title":{},"body":{"injectables/AppealsService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["this.userrepository.findoneby",{"_index":855,"title":{},"body":{"injectables/BlockService.html":{}}}],["this.userrepository.update(dbuser.id",{"_index":1550,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.userrepository.update(deleteduser.id",{"_index":1620,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.userrepository.update(failuser.id",{"_index":1611,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.userrepository.update(successuser.id",{"_index":1598,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.userrepository.update(userid",{"_index":2015,"title":{},"body":{"injectables/ReportService.html":{}}}],["this.userservice.create(body).then((user",{"_index":727,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.createadmin(body).then((user",{"_index":731,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.createuserwithimage(body",{"_index":720,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.findonebyemail(body.email).then((user",{"_index":718,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersrepository",{"_index":783,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.find",{"_index":1367,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.usersrepository.findone",{"_index":1185,"title":{},"body":{"injectables/FollowService.html":{},"injectables/NotificationService.html":{}}}],["this.usersrepository.findoneby",{"_index":1183,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.usersrepository.save(followed",{"_index":1215,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.usersrepository.save(followedby",{"_index":1213,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.usersrepository.save(userrequestingunfollow",{"_index":1239,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.usersrepository.save(usertobeunfollowed",{"_index":1238,"title":{},"body":{"injectables/FollowService.html":{}}}],["this.usersrepository.update(user.id",{"_index":1351,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.usersservice.isuserbanned(user.id).then((result",{"_index":796,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":334,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/FollowService.html":{},"injectables/LocalStrategy.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"controllers/PostController.html":{},"injectables/ReportService.html":{},"classes/SignUpUserDto.html":{}}}],["throws",{"_index":1289,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["time",{"_index":2121,"title":{},"body":{"injectables/TasksService.html":{}}}],["times",{"_index":2259,"title":{},"body":{"entities/UserBan.html":{}}}],["timestamp",{"_index":154,"title":{},"body":{"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["tinyint",{"_index":135,"title":{},"body":{"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674544597118.html":{}}}],["title",{"_index":1335,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SendNotificationDto.html":{}}}],["token",{"_index":675,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["tokens",{"_index":1379,"title":{},"body":{"injectables/NotificationService.html":{}}}],["tomorrow",{"_index":2136,"title":{},"body":{"injectables/TasksService.html":{}}}],["tomorrow.setdate(tomorrow.getdate",{"_index":2144,"title":{},"body":{"injectables/TasksService.html":{}}}],["transfer",{"_index":1396,"title":{},"body":{"classes/PageDto.html":{}}}],["transformer",{"_index":2346,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":349,"title":{},"body":{"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"injectables/BlockService.html":{},"injectables/EncryptionService.html":{},"injectables/FollowService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{}}}],["try",{"_index":1582,"title":{},"body":{"injectables/PaymentService.html":{}}}],["type",{"_index":18,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"controllers/AnalyticsController.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"entities/Appeal.html":{},"classes/AppealDto.html":{},"controllers/AppealsController.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/EncryptionService.html":{},"controllers/FeedController.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"controllers/FollowController.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"injectables/JwtStrategy.html":{},"entities/Like.html":{},"injectables/LocalStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"classes/PostAnalyticResposneDto.html":{},"controllers/PostController.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":35,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"injectables/AnalyticsService.html":{},"entities/Appeal.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Block.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"injectables/FeedService.html":{},"entities/Follow.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/Like.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"injectables/ReportService.html":{},"entities/Scrapbook.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"dependencies.html":{}}}],["typeorm.config.ts",{"_index":2337,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm:run",{"_index":2420,"title":{},"body":{"index.html":{}}}],["typeormmodule",{"_index":295,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([appeal",{"_index":572,"title":{},"body":{"modules/AppealsModule.html":{}}}],["typeormmodule.forfeature([block",{"_index":845,"title":{},"body":{"modules/BlockModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":301,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/FeedModule.html":{},"modules/PostModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":758,"title":{},"body":{"modules/AuthModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([userreport",{"_index":1920,"title":{},"body":{"modules/ReportModule.html":{}}}],["typeormmodule.forrootasync",{"_index":422,"title":{},"body":{"modules/AppModule.html":{}}}],["unauthorizedexception",{"_index":1290,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unbanned",{"_index":1877,"title":{},"body":{"controllers/ReportController.html":{}}}],["unbanpost",{"_index":1845,"title":{},"body":{"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["unbanpost(@request",{"_index":1902,"title":{},"body":{"controllers/ReportController.html":{}}}],["unbanpost(id",{"_index":1938,"title":{},"body":{"injectables/ReportService.html":{}}}],["unbanpost(params.id",{"_index":1903,"title":{},"body":{"controllers/ReportController.html":{}}}],["unbanpost(req",{"_index":1872,"title":{},"body":{"controllers/ReportController.html":{}}}],["unbans",{"_index":1876,"title":{},"body":{"controllers/ReportController.html":{}}}],["unblock",{"_index":868,"title":{},"body":{"injectables/BlockService.html":{}}}],["unblocked",{"_index":839,"title":{},"body":{"controllers/BlockController.html":{}}}],["unblockinguser",{"_index":869,"title":{},"body":{"injectables/BlockService.html":{}}}],["unblockinguser.blocks.map((block",{"_index":872,"title":{},"body":{"injectables/BlockService.html":{}}}],["unblockuser",{"_index":817,"title":{},"body":{"controllers/BlockController.html":{},"injectables/BlockService.html":{}}}],["unblockuser(@request",{"_index":835,"title":{},"body":{"controllers/BlockController.html":{}}}],["unblockuser(id",{"_index":836,"title":{},"body":{"controllers/BlockController.html":{},"injectables/BlockService.html":{}}}],["unblockuser(req",{"_index":822,"title":{},"body":{"controllers/BlockController.html":{}}}],["undefined",{"_index":141,"title":{},"body":{"classes/$npmConfigName1672678196724.html":{},"entities/Appeal.html":{},"entities/FollowRequest.html":{},"entities/PostReport.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"miscellaneous/enumerations.html":{}}}],["undefined)[0",{"_index":630,"title":{},"body":{"injectables/AppealsService.html":{}}}],["unfollow",{"_index":1082,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["unfollow(@request",{"_index":1129,"title":{},"body":{"controllers/FollowController.html":{}}}],["unfollow(id",{"_index":1130,"title":{},"body":{"controllers/FollowController.html":{},"injectables/FollowService.html":{}}}],["unfollow(req",{"_index":1109,"title":{},"body":{"controllers/FollowController.html":{}}}],["unfollowed",{"_index":1131,"title":{},"body":{"controllers/FollowController.html":{}}}],["unknown",{"_index":672,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FirebaseStorageService.html":{},"injectables/JwtStrategy.html":{},"injectables/PaymentService.html":{}}}],["unlicensed",{"_index":2436,"title":{},"body":{"properties.html":{}}}],["unlike",{"_index":1705,"title":{},"body":{"controllers/PostController.html":{}}}],["unlike(@request",{"_index":1813,"title":{},"body":{"controllers/PostController.html":{}}}],["unlike(req",{"_index":1756,"title":{},"body":{"controllers/PostController.html":{}}}],["unliked",{"_index":1815,"title":{},"body":{"controllers/PostController.html":{}}}],["unlikepost(req.user",{"_index":1814,"title":{},"body":{"controllers/PostController.html":{}}}],["unsubscribe",{"_index":1464,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["unsubscribe(@request",{"_index":1492,"title":{},"body":{"controllers/PaymentController.html":{}}}],["unsubscribe(req",{"_index":1480,"title":{},"body":{"controllers/PaymentController.html":{}}}],["unsubscribe(req.user",{"_index":1493,"title":{},"body":{"controllers/PaymentController.html":{}}}],["unsubscribe(user",{"_index":1520,"title":{},"body":{"injectables/PaymentService.html":{}}}],["unsubscribed",{"_index":1621,"title":{},"body":{"injectables/PaymentService.html":{}}}],["unsuccessful",{"_index":1612,"title":{},"body":{"injectables/PaymentService.html":{}}}],["up",{"_index":17,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"controllers/AuthController.html":{},"classes/SignUpUserDto.html":{}}}],["up(queryrunner",{"_index":32,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{}}}],["update",{"_index":63,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{},"injectables/FirebaseStorageService.html":{}}}],["update(post",{"_index":2020,"title":{},"body":{"injectables/ReportService.html":{}}}],["update(user",{"_index":1578,"title":{},"body":{"injectables/PaymentService.html":{}}}],["update.dto.ts",{"_index":2150,"title":{},"body":{"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"coverage.html":{}}}],["update.dto.ts:13",{"_index":2166,"title":{},"body":{"classes/UpdateUserPasseordDto.html":{}}}],["update.dto.ts:5",{"_index":2167,"title":{},"body":{"classes/UpdateUserPasseordDto.html":{}}}],["update.dto.ts:7",{"_index":2158,"title":{},"body":{"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["update.dto.ts:9",{"_index":2154,"title":{},"body":{"classes/UpdateUserBioDto.html":{},"classes/UpdateUserPasseordDto.html":{}}}],["updateavatar",{"_index":994,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["updateavatar(image",{"_index":1005,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["updatedat",{"_index":62,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/BaseEntity.html":{}}}],["updatedatecolumn",{"_index":801,"title":{},"body":{"classes/BaseEntity.html":{}}}],["updateresult",{"_index":1180,"title":{},"body":{"injectables/FollowService.html":{},"injectables/NotificationService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["updates",{"_index":2133,"title":{},"body":{"injectables/TasksService.html":{}}}],["updateuserbiodto",{"_index":2148,"title":{"classes/UpdateUserBioDto.html":{}},"body":{"classes/UpdateUserBioDto.html":{},"coverage.html":{}}}],["updateuserdateofbirthdto",{"_index":2156,"title":{"classes/UpdateUserDateOfBirthDto.html":{}},"body":{"classes/UpdateUserDateOfBirthDto.html":{},"coverage.html":{}}}],["updateuseremaildto",{"_index":2159,"title":{"classes/UpdateUserEmailDto.html":{}},"body":{"classes/UpdateUserEmailDto.html":{},"coverage.html":{}}}],["updateuserpasseorddto",{"_index":2162,"title":{"classes/UpdateUserPasseordDto.html":{}},"body":{"classes/UpdateUserPasseordDto.html":{},"coverage.html":{}}}],["updateuserphonenumberdto",{"_index":2170,"title":{"classes/UpdateUserPhoneNumberDto.html":{}},"body":{"classes/UpdateUserPhoneNumberDto.html":{},"coverage.html":{}}}],["updateuserposturls",{"_index":2123,"title":{},"body":{"injectables/TasksService.html":{}}}],["updateuserprofileurls",{"_index":2124,"title":{},"body":{"injectables/TasksService.html":{}}}],["updating",{"_index":2151,"title":{},"body":{"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["upload",{"_index":1017,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["uploadavatar",{"_index":995,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["uploadavatar(image",{"_index":1015,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["uploaded",{"_index":1010,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["uploadedfile",{"_index":697,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["uploadpostimage",{"_index":996,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["uploadpostimage(image",{"_index":1018,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["url",{"_index":1012,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/TasksService.html":{}}}],["urloptions",{"_index":1042,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["urls",{"_index":1027,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["use",{"_index":423,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["used",{"_index":663,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FirebaseStorageService.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"classes/SignUpUserDto.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["usefactory",{"_index":427,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":260,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["useguards(jwtauthguard",{"_index":271,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/AuthController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/FollowController.html":{},"controllers/NotificationController.html":{},"controllers/PaymentController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["useguards(jwtauthguard)@delete('/:id",{"_index":1728,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@delete('comment/:id",{"_index":1725,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@delete('unfollow/:id",{"_index":1110,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@delete('unlike/:id",{"_index":1757,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@get",{"_index":942,"title":{},"body":{"controllers/FeedController.html":{}}}],["useguards(jwtauthguard)@get('/:id",{"_index":1731,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@get('follow",{"_index":1095,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@get('followers",{"_index":1089,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@get('following",{"_index":1092,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@get('post",{"_index":516,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["useguards(jwtauthguard)@get('post/:id",{"_index":254,"title":{},"body":{"controllers/AnalyticsController.html":{}}}],["useguards(jwtauthguard)@get('scrapbook/:id",{"_index":1742,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@get('scrapbook/user",{"_index":1746,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@get('user",{"_index":520,"title":{},"body":{"controllers/AppealsController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["useguards(jwtauthguard)@patch('accept",{"_index":1085,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@patch('reject",{"_index":1103,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@patch('scrapbook/:id/remove",{"_index":1753,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@post('appeal",{"_index":527,"title":{},"body":{"controllers/AppealsController.html":{}}}],["useguards(jwtauthguard)@post('block",{"_index":819,"title":{},"body":{"controllers/BlockController.html":{}}}],["useguards(jwtauthguard)@post('comment/:id",{"_index":1707,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@post('create')@useinterceptors(undefined",{"_index":1717,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@post('like/:id",{"_index":1750,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@post('report",{"_index":1868,"title":{},"body":{"controllers/ReportController.html":{}}}],["useguards(jwtauthguard)@post('request",{"_index":1106,"title":{},"body":{"controllers/FollowController.html":{}}}],["useguards(jwtauthguard)@post('scrapbook/:id/add",{"_index":1712,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@post('scrapbook/create",{"_index":1720,"title":{},"body":{"controllers/PostController.html":{}}}],["useguards(jwtauthguard)@post('signup/:fcmtoken",{"_index":1303,"title":{},"body":{"controllers/NotificationController.html":{}}}],["useguards(jwtauthguard)@post('subscribe",{"_index":1478,"title":{},"body":{"controllers/PaymentController.html":{}}}],["useguards(jwtauthguard)@post('unblock",{"_index":823,"title":{},"body":{"controllers/BlockController.html":{}}}],["useguards(jwtauthguard)@post('unsubscribe",{"_index":1481,"title":{},"body":{"controllers/PaymentController.html":{}}}],["useguards(localauthguard",{"_index":732,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('login",{"_index":658,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":696,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["useinterceptors(fileinterceptor('avatar",{"_index":712,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors(fileinterceptor('image",{"_index":1767,"title":{},"body":{"controllers/PostController.html":{}}}],["user",{"_index":40,"title":{"entities/User.html":{}},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"modules/AppModule.html":{},"entities/Appeal.html":{},"controllers/AppealsController.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Block.html":{},"controllers/BlockController.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"injectables/FirebaseStorageService.html":{},"entities/Follow.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/Like.html":{},"injectables/LocalStrategy.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"controllers/ReportController.html":{},"classes/ReportDto.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"guards/RolesGuard.html":{},"entities/Scrapbook.html":{},"classes/SignUpUserDto.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"entities/UserBan.html":{},"modules/UserModule.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["user.appeals",{"_index":466,"title":{},"body":{"entities/Appeal.html":{}}}],["user.bans",{"_index":2250,"title":{},"body":{"entities/UserBan.html":{}}}],["user.blockedby",{"_index":807,"title":{},"body":{"entities/Block.html":{}}}],["user.blocks",{"_index":809,"title":{},"body":{"entities/Block.html":{}}}],["user.comments",{"_index":877,"title":{},"body":{"entities/Comment.html":{}}}],["user.controller",{"_index":2265,"title":{},"body":{"modules/UserModule.html":{}}}],["user.email",{"_index":792,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.fcmtoken",{"_index":1376,"title":{},"body":{"injectables/NotificationService.html":{}}}],["user.followed.posts)[0",{"_index":974,"title":{},"body":{"injectables/FeedService.html":{}}}],["user.followers",{"_index":1066,"title":{},"body":{"entities/Follow.html":{}}}],["user.following",{"_index":1068,"title":{},"body":{"entities/Follow.html":{}}}],["user.followrequestsreceived",{"_index":1153,"title":{},"body":{"entities/FollowRequest.html":{}}}],["user.followrequestssent",{"_index":1151,"title":{},"body":{"entities/FollowRequest.html":{}}}],["user.id",{"_index":333,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/AuthService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/FollowService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{}}}],["user.likes",{"_index":1276,"title":{},"body":{"entities/Like.html":{}}}],["user.password",{"_index":789,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.posts",{"_index":1650,"title":{},"body":{"entities/Post.html":{}}}],["user.reportedposts",{"_index":1830,"title":{},"body":{"entities/PostReport.html":{}}}],["user.reportedposts.map((reports",{"_index":1958,"title":{},"body":{"injectables/ReportService.html":{}}}],["user.reportedusers",{"_index":2271,"title":{},"body":{"entities/UserReport.html":{}}}],["user.reportedusers.map((reports",{"_index":1976,"title":{},"body":{"injectables/ReportService.html":{}}}],["user.reportsagainst",{"_index":2273,"title":{},"body":{"entities/UserReport.html":{}}}],["user.role",{"_index":330,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AuthService.html":{}}}],["user.role?.includes(role",{"_index":2054,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.scrapbooks",{"_index":2060,"title":{},"body":{"entities/Scrapbook.html":{}}}],["user.service",{"_index":2267,"title":{},"body":{"modules/UserModule.html":{}}}],["user/:id",{"_index":820,"title":{},"body":{"controllers/BlockController.html":{}}}],["user/:userid/:reportid",{"_index":1894,"title":{},"body":{"controllers/ReportController.html":{}}}],["user/:userid/:reportid')@roles(role.admin",{"_index":1853,"title":{},"body":{"controllers/ReportController.html":{}}}],["user/entities/user.entity",{"_index":298,"title":{},"body":{"modules/AnalyticsModule.html":{},"injectables/AnalyticsService.html":{},"entities/Appeal.html":{},"modules/AppealsModule.html":{},"injectables/AppealsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Block.html":{},"modules/BlockModule.html":{},"injectables/BlockService.html":{},"entities/Comment.html":{},"modules/FeedModule.html":{},"injectables/FeedService.html":{},"entities/Follow.html":{},"modules/FollowModule.html":{},"entities/FollowRequest.html":{},"injectables/FollowService.html":{},"entities/Like.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"entities/PostReport.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"entities/Scrapbook.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{}}}],["user/signup",{"_index":692,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/user.module",{"_index":751,"title":{},"body":{"modules/AuthModule.html":{}}}],["user/user.service",{"_index":701,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user\\`(\\`id",{"_index":79,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["user_ban",{"_index":125,"title":{},"body":{"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["user_report",{"_index":101,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1674493007150.html":{}}}],["user_report\\`(\\`id",{"_index":108,"title":{},"body":{"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672417201262.html":{}}}],["userban",{"_index":400,"title":{"entities/UserBan.html":{}},"body":{"modules/AppModule.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"entities/User.html":{},"entities/UserBan.html":{},"coverage.html":{}}}],["userban.banneduser",{"_index":2177,"title":{},"body":{"entities/User.html":{}}}],["userbanrepository",{"_index":1923,"title":{},"body":{"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["usercontroller",{"_index":2264,"title":{},"body":{"modules/UserModule.html":{},"coverage.html":{}}}],["userfound",{"_index":870,"title":{},"body":{"injectables/BlockService.html":{}}}],["userid",{"_index":89,"title":{},"body":{"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1674493007150.html":{},"injectables/FirebaseStorageService.html":{},"injectables/NotificationService.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{},"injectables/ReportService.html":{}}}],["usermodule",{"_index":378,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":435,"title":{},"body":{"modules/AppModule.html":{},"classes/SignUpUserDto.html":{},"entities/User.html":{},"index.html":{}}}],["usernamefield",{"_index":1291,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userreport",{"_index":397,"title":{"entities/UserReport.html":{}},"body":{"modules/AppModule.html":{},"modules/ReportModule.html":{},"injectables/ReportService.html":{},"entities/User.html":{},"entities/UserReport.html":{},"coverage.html":{}}}],["userreport.reportedby",{"_index":2214,"title":{},"body":{"entities/User.html":{}}}],["userreport.reporteduser",{"_index":2216,"title":{},"body":{"entities/User.html":{}}}],["userreportedposts",{"_index":1952,"title":{},"body":{"injectables/ReportService.html":{}}}],["userreportedposts.map((reportedpost",{"_index":1962,"title":{},"body":{"injectables/ReportService.html":{}}}],["userreportedusers",{"_index":1973,"title":{},"body":{"injectables/ReportService.html":{}}}],["userreportedusers.map((reporteduser",{"_index":1979,"title":{},"body":{"injectables/ReportService.html":{}}}],["userreportsandcount[0",{"_index":2001,"title":{},"body":{"injectables/ReportService.html":{}}}],["userreportsandcount[1",{"_index":2002,"title":{},"body":{"injectables/ReportService.html":{}}}],["userreportsrepository",{"_index":1925,"title":{},"body":{"injectables/ReportService.html":{}}}],["userrepository",{"_index":308,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{},"injectables/BlockService.html":{},"injectables/FeedService.html":{},"injectables/PaymentService.html":{},"injectables/ReportService.html":{},"injectables/TasksService.html":{}}}],["userrequestingfollow",{"_index":1184,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingfollow.following.map((follow",{"_index":1194,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingfollow.followrequestssent.map((followrequest",{"_index":1191,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingfollow.id",{"_index":1190,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingunfollow",{"_index":1229,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingunfollow.following.map((follow",{"_index":1234,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingunfollow.followingcount",{"_index":1237,"title":{},"body":{"injectables/FollowService.html":{}}}],["userrequestingunfollow.id",{"_index":1231,"title":{},"body":{"injectables/FollowService.html":{}}}],["users",{"_index":1218,"title":{},"body":{"injectables/FollowService.html":{},"injectables/NotificationService.html":{},"entities/Post.html":{},"controllers/ReportController.html":{},"injectables/TasksService.html":{},"entities/User.html":{}}}],["users')@roles(role.admin",{"_index":1863,"title":{},"body":{"controllers/ReportController.html":{}}}],["users.length",{"_index":1220,"title":{},"body":{"injectables/FollowService.html":{}}}],["users/${userid}/avatars/${imageid}.png",{"_index":1051,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["users/${userid}/posts/${postid}/${imageid}.png",{"_index":1056,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["usersalreadyreported",{"_index":1978,"title":{},"body":{"injectables/ReportService.html":{}}}],["usersalreadyreported.includes(true",{"_index":1981,"title":{},"body":{"injectables/ReportService.html":{}}}],["usersandcount[0",{"_index":2034,"title":{},"body":{"injectables/ReportService.html":{}}}],["usersandcount[0].length",{"_index":2035,"title":{},"body":{"injectables/ReportService.html":{}}}],["userservice",{"_index":700,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersrepository",{"_index":764,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FollowService.html":{},"injectables/NotificationService.html":{}}}],["usersservice",{"_index":766,"title":{},"body":{"injectables/AuthService.html":{}}}],["userstobenotified",{"_index":1366,"title":{},"body":{"injectables/NotificationService.html":{}}}],["userstobenotified.length",{"_index":1371,"title":{},"body":{"injectables/NotificationService.html":{}}}],["userstobenotified.map((user",{"_index":1375,"title":{},"body":{"injectables/NotificationService.html":{}}}],["usertobeblocked",{"_index":854,"title":{},"body":{"injectables/BlockService.html":{}}}],["usertobeblocked.id",{"_index":856,"title":{},"body":{"injectables/BlockService.html":{}}}],["usertobefollowed",{"_index":1165,"title":{},"body":{"injectables/FollowService.html":{}}}],["usertobefollowed.id",{"_index":1189,"title":{},"body":{"injectables/FollowService.html":{}}}],["usertobenotified",{"_index":1383,"title":{},"body":{"injectables/NotificationService.html":{}}}],["usertobenotified.fcmtoken",{"_index":1385,"title":{},"body":{"injectables/NotificationService.html":{}}}],["usertobereported",{"_index":1970,"title":{},"body":{"injectables/ReportService.html":{}}}],["usertobereported.id",{"_index":1972,"title":{},"body":{"injectables/ReportService.html":{}}}],["usertobeunblocked",{"_index":866,"title":{},"body":{"injectables/BlockService.html":{}}}],["usertobeunblocked.id",{"_index":867,"title":{},"body":{"injectables/BlockService.html":{}}}],["usertobeunfollowed",{"_index":1228,"title":{},"body":{"injectables/FollowService.html":{}}}],["usertobeunfollowed.followerscount",{"_index":1236,"title":{},"body":{"injectables/FollowService.html":{}}}],["usertobeunfollowed.id",{"_index":1230,"title":{},"body":{"injectables/FollowService.html":{}}}],["using",{"_index":669,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["uuid",{"_index":1032,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":1031,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["v4",{"_index":1030,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["valid",{"_index":1203,"title":{},"body":{"injectables/FollowService.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{}}}],["validate",{"_index":776,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/SignUpUserDto.html":{}}}],["validate(email",{"_index":1286,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1247,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validates",{"_index":1288,"title":{},"body":{"injectables/LocalStrategy.html":{},"classes/SignUpUserDto.html":{}}}],["validateuser",{"_index":761,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":773,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":494,"title":{},"body":{"classes/AppealDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PostAnalyticResposneDto.html":{},"classes/ReportDto.html":{},"classes/SendNotificationDto.html":{},"classes/SignUpUserDto.html":{},"classes/UpdateUserBioDto.html":{},"classes/UpdateUserDateOfBirthDto.html":{},"classes/UpdateUserEmailDto.html":{},"classes/UpdateUserPasseordDto.html":{},"classes/UpdateUserPhoneNumberDto.html":{},"dependencies.html":{}}}],["value",{"_index":22,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672585305519.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1672833410692.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673025398979.html":{},"classes/$npmConfigName1673027114310.html":{},"classes/$npmConfigName1673177373733.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674453163372.html":{},"classes/$npmConfigName1674486373359.html":{},"classes/$npmConfigName1674487677914.html":{},"classes/$npmConfigName1674493007150.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{},"modules/AppModule.html":{},"entities/Appeal.html":{},"injectables/FirebaseStorageService.html":{},"entities/FollowRequest.html":{},"classes/PageOptionsDto.html":{},"injectables/PaymentService.html":{},"entities/Post.html":{},"entities/PostReport.html":{},"injectables/StripeService.html":{},"entities/User.html":{},"entities/UserBan.html":{},"entities/UserReport.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1450,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["varchar(255",{"_index":43,"title":{},"body":{"classes/$npmConfigName1672082558971.html":{},"classes/$npmConfigName1672082713679.html":{},"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672166137042.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417384470.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1672600378154.html":{},"classes/$npmConfigName1672678196724.html":{},"classes/$npmConfigName1672744437528.html":{},"classes/$npmConfigName1672760070076.html":{},"classes/$npmConfigName1672832148243.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673337064308.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674121256550.html":{},"classes/$npmConfigName1674198387677.html":{},"classes/$npmConfigName1674544597118.html":{},"classes/$npmConfigName1675177507147.html":{}}}],["varchar(36",{"_index":65,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/$npmConfigName1672388811259.html":{},"classes/$npmConfigName1672399737695.html":{},"classes/$npmConfigName1672417201262.html":{},"classes/$npmConfigName1672576067204.html":{},"classes/$npmConfigName1673022319464.html":{},"classes/$npmConfigName1673770456243.html":{},"classes/$npmConfigName1673847605869.html":{},"classes/$npmConfigName1673974513613.html":{},"classes/$npmConfigName1674486373359.html":{}}}],["variable",{"_index":431,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{}}}],["variables",{"_index":426,"title":{"miscellaneous/variables.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["verified",{"_index":1267,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["verify",{"_index":1263,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["version",{"_index":1043,"title":{},"body":{"injectables/FirebaseStorageService.html":{},"properties.html":{}}}],["view",{"_index":338,"title":{},"body":{"injectables/AnalyticsService.html":{},"injectables/AppealsService.html":{}}}],["visibility",{"_index":70,"title":{},"body":{"classes/$npmConfigName1672133224744.html":{},"classes/$npmConfigName1672251740346.html":{},"classes/CreatePostDto.html":{},"classes/CreateScrapBookDto.html":{},"injectables/FeedService.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"entities/Scrapbook.html":{},"miscellaneous/enumerations.html":{}}}],["visibility.public",{"_index":969,"title":{},"body":{"injectables/FeedService.html":{}}}],["void",{"_index":257,"title":{},"body":{"controllers/AnalyticsController.html":{},"controllers/AppealsController.html":{},"controllers/BlockController.html":{},"controllers/FeedController.html":{},"controllers/NotificationController.html":{},"controllers/PostController.html":{},"controllers/ReportController.html":{}}}],["want",{"_index":1057,"title":{},"body":{"injectables/FirebaseStorageService.html":{}}}],["webhook",{"_index":1468,"title":{},"body":{"controllers/PaymentController.html":{},"index.html":{}}}],["week",{"_index":2011,"title":{},"body":{"injectables/ReportService.html":{}}}],["where('email",{"_index":785,"title":{},"body":{"injectables/AuthService.html":{}}}],["where('id",{"_index":2021,"title":{},"body":{"injectables/ReportService.html":{}}}],["where('postreport.reportedpost.id",{"_index":1988,"title":{},"body":{"injectables/ReportService.html":{}}}],["where('postreport.status",{"_index":2022,"title":{},"body":{"injectables/ReportService.html":{}}}],["where('stripecustomerid",{"_index":1579,"title":{},"body":{"injectables/PaymentService.html":{}}}],["where('userreport.reporteduser.id",{"_index":1998,"title":{},"body":{"injectables/ReportService.html":{}}}],["where('userreport.status",{"_index":2029,"title":{},"body":{"injectables/ReportService.html":{}}}],["whose",{"_index":2131,"title":{},"body":{"injectables/TasksService.html":{}}}],["world",{"_index":460,"title":{},"body":{"injectables/AppService.html":{}}}],["yourself",{"_index":857,"title":{},"body":{"injectables/BlockService.html":{},"injectables/FollowService.html":{},"injectables/ReportService.html":{}}}],["zoom",{"_index":290,"title":{},"body":{"modules/AnalyticsModule.html":{},"modules/AppModule.html":{},"modules/AppealsModule.html":{},"modules/AuthModule.html":{},"modules/BlockModule.html":{},"modules/FeedModule.html":{},"modules/FollowModule.html":{},"modules/NotificationModule.html":{},"modules/PaymentModule.html":{},"modules/PostModule.html":{},"modules/ReportModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/$npmConfigName1672082558971.html":{"url":"classes/$npmConfigName1672082558971.html","title":"class - $npmConfigName1672082558971","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672082558971\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672082558971-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672082558971'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672082558971-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672082558971-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672082558971-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672082558971 implements MigrationInterface {\n    name = '$npmConfigName1672082558971'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`roles\\` varchar(255) NOT NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`roles\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672082713679.html":{"url":"classes/$npmConfigName1672082713679.html","title":"class - $npmConfigName1672082713679","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672082713679\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672082713679-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672082713679'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672082713679-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672082713679-$npm_config_name.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672082713679-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672082713679 implements MigrationInterface {\n    name = '$npmConfigName1672082713679'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`roles\\` \\`role\\` varchar(255) NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`role\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`role\\` varchar(255) NOT NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`role\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`role\\` varchar(255) NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`role\\` \\`roles\\` varchar(255) NOT NULL`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672133224744.html":{"url":"classes/$npmConfigName1672133224744.html","title":"class - $npmConfigName1672133224744","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672133224744\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672133224744-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672133224744'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672133224744-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672133224744-$npm_config_name.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672133224744-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672133224744 implements MigrationInterface {\n    name = '$npmConfigName1672133224744'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`post\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`caption\\` varchar(255) NOT NULL, \\`imageUrl\\` varchar(255) NOT NULL, \\`tag\\` varchar(255) NOT NULL, \\`type\\` varchar(255) NOT NULL, \\`location\\` varchar(255) NOT NULL, \\`visibility\\` varchar(255) NOT NULL, \\`postedById\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_fb7ffd0860cbcc5cf22c96d3c05\\` FOREIGN KEY (\\`postedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_fb7ffd0860cbcc5cf22c96d3c05\\``);\n        await queryRunner.query(`DROP TABLE \\`post\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672166137042.html":{"url":"classes/$npmConfigName1672166137042.html","title":"class - $npmConfigName1672166137042","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672166137042\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672166137042-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672166137042'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672166137042-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672166137042-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672166137042-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672166137042 implements MigrationInterface {\n    name = '$npmConfigName1672166137042'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` CHANGE \\`imageUrl\\` \\`imageUrl\\` varchar(255) NOT NULL DEFAULT ''`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` CHANGE \\`imageUrl\\` \\`imageUrl\\` varchar(255) NOT NULL`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672251740346.html":{"url":"classes/$npmConfigName1672251740346.html","title":"class - $npmConfigName1672251740346","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672251740346\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672251740346-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672251740346'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672251740346-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672251740346-$npm_config_name.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672251740346-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672251740346 implements MigrationInterface {\n    name = '$npmConfigName1672251740346'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`scrapbook\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`caption\\` varchar(255) NOT NULL, \\`location\\` varchar(255) NOT NULL, \\`visibility\\` varchar(255) NOT NULL, \\`userId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`scrapbookId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`scrapbook\\` ADD CONSTRAINT \\`FK_b5db9533f87c9bc26bbb8ed3d06\\` FOREIGN KEY (\\`userId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_baa1c30b37f90c0df2e56257f16\\` FOREIGN KEY (\\`scrapbookId\\`) REFERENCES \\`scrapbook\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_baa1c30b37f90c0df2e56257f16\\``);\n        await queryRunner.query(`ALTER TABLE \\`scrapbook\\` DROP FOREIGN KEY \\`FK_b5db9533f87c9bc26bbb8ed3d06\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`scrapbookId\\``);\n        await queryRunner.query(`DROP TABLE \\`scrapbook\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672388811259.html":{"url":"classes/$npmConfigName1672388811259.html","title":"class - $npmConfigName1672388811259","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672388811259\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672388811259-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672388811259'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672388811259-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672388811259-$npm_config_name.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672388811259-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672388811259 implements MigrationInterface {\n    name = '$npmConfigName1672388811259'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`post_report\\` (\\`id\\` varchar(36) NOT NULL, \\`status\\` varchar(255) NOT NULL, \\`reason\\` varchar(255) NOT NULL, \\`reportedById\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`user_report\\` (\\`id\\` varchar(36) NOT NULL, \\`status\\` varchar(255) NOT NULL, \\`reason\\` varchar(255) NOT NULL, \\`reportedById\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`reportsAgainstId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`reportsAgainstId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD CONSTRAINT \\`FK_929dcdf74558612cc6166981480\\` FOREIGN KEY (\\`reportedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_aea779e51a733247bccf1f61d9a\\` FOREIGN KEY (\\`reportsAgainstId\\`) REFERENCES \\`post_report\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD CONSTRAINT \\`FK_2e595b9d3a37e4b72879dddb5ce\\` FOREIGN KEY (\\`reportedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD CONSTRAINT \\`FK_22b6df8103e450a49ea0f9ff939\\` FOREIGN KEY (\\`reportsAgainstId\\`) REFERENCES \\`user_report\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP FOREIGN KEY \\`FK_22b6df8103e450a49ea0f9ff939\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP FOREIGN KEY \\`FK_2e595b9d3a37e4b72879dddb5ce\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_aea779e51a733247bccf1f61d9a\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP FOREIGN KEY \\`FK_929dcdf74558612cc6166981480\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`reportsAgainstId\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`reportsAgainstId\\``);\n        await queryRunner.query(`DROP TABLE \\`user_report\\``);\n        await queryRunner.query(`DROP TABLE \\`post_report\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672399737695.html":{"url":"classes/$npmConfigName1672399737695.html","title":"class - $npmConfigName1672399737695","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672399737695\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672399737695-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672399737695'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672399737695-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672399737695-$npm_config_name.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672399737695-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672399737695 implements MigrationInterface {\n    name = '$npmConfigName1672399737695'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_aea779e51a733247bccf1f61d9a\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`reportsAgainstId\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD \\`reportedPostId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` CHANGE \\`status\\` \\`status\\` varchar(255) NOT NULL DEFAULT 'pending review'`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD CONSTRAINT \\`FK_a9aad25ed05e8f5a9dffbc17a4a\\` FOREIGN KEY (\\`reportedPostId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP FOREIGN KEY \\`FK_a9aad25ed05e8f5a9dffbc17a4a\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` CHANGE \\`status\\` \\`status\\` varchar(255) NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP COLUMN \\`reportedPostId\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`reportsAgainstId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_aea779e51a733247bccf1f61d9a\\` FOREIGN KEY (\\`reportsAgainstId\\`) REFERENCES \\`post_report\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672417201262.html":{"url":"classes/$npmConfigName1672417201262.html","title":"class - $npmConfigName1672417201262","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672417201262\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672417201262-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672417201262'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672417201262-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672417201262-$npm_config_name.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672417201262-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672417201262 implements MigrationInterface {\n    name = '$npmConfigName1672417201262'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP FOREIGN KEY \\`FK_22b6df8103e450a49ea0f9ff939\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`reportsAgainstId\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD \\`reportedUserId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD CONSTRAINT \\`FK_2d3711064572aa0203cba01242b\\` FOREIGN KEY (\\`reportedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP FOREIGN KEY \\`FK_2d3711064572aa0203cba01242b\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP COLUMN \\`reportedUserId\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`reportsAgainstId\\` varchar(36) NULL`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD CONSTRAINT \\`FK_22b6df8103e450a49ea0f9ff939\\` FOREIGN KEY (\\`reportsAgainstId\\`) REFERENCES \\`user_report\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672417384470.html":{"url":"classes/$npmConfigName1672417384470.html","title":"class - $npmConfigName1672417384470","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672417384470\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672417384470-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672417384470'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672417384470-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672417384470-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672417384470-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672417384470 implements MigrationInterface {\n    name = '$npmConfigName1672417384470'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` CHANGE \\`status\\` \\`status\\` varchar(255) NOT NULL DEFAULT 'pending review'`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` CHANGE \\`status\\` \\`status\\` varchar(255) NOT NULL`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672576067204.html":{"url":"classes/$npmConfigName1672576067204.html","title":"class - $npmConfigName1672576067204","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672576067204\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672576067204-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672576067204'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672576067204-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672576067204-$npm_config_name.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672576067204-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672576067204 implements MigrationInterface {\n    name = '$npmConfigName1672576067204'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`user_ban\\` (\\`id\\` varchar(36) NOT NULL, \\`status\\` varchar(255) NOT NULL DEFAULT 'active', \\`startDate\\` datetime NOT NULL, \\`endDate\\` datetime NOT NULL, \\`bannedUserId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` ADD CONSTRAINT \\`FK_43cb4b8de8f8cfa4fd2857369c2\\` FOREIGN KEY (\\`bannedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` DROP FOREIGN KEY \\`FK_43cb4b8de8f8cfa4fd2857369c2\\``);\n        await queryRunner.query(`DROP TABLE \\`user_ban\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672585305519.html":{"url":"classes/$npmConfigName1672585305519.html","title":"class - $npmConfigName1672585305519","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672585305519\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672585305519-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672585305519'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672585305519-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672585305519-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672585305519-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672585305519 implements MigrationInterface {\n    name = '$npmConfigName1672585305519'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`isTakenDown\\` tinyint NOT NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`isTakenDown\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672600378154.html":{"url":"classes/$npmConfigName1672600378154.html","title":"class - $npmConfigName1672600378154","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672600378154\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672600378154-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672600378154'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672600378154-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672600378154-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672600378154-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672600378154 implements MigrationInterface {\n    name = '$npmConfigName1672600378154'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`gender\\` varchar(255) NOT NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`gender\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672678196724.html":{"url":"classes/$npmConfigName1672678196724.html","title":"class - $npmConfigName1672678196724","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672678196724\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672678196724-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672678196724'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672678196724-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672678196724-$npm_config_name.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672678196724-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672678196724 implements MigrationInterface {\n    name = '$npmConfigName1672678196724'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`isTakenDown\\` tinyint NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`gender\\` \\`gender\\` varchar(255) NOT NULL DEFAULT 'undefined'`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`gender\\` \\`gender\\` varchar(255) NOT NULL`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`isTakenDown\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672744437528.html":{"url":"classes/$npmConfigName1672744437528.html","title":"class - $npmConfigName1672744437528","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672744437528\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672744437528-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672744437528'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672744437528-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672744437528-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672744437528-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672744437528 implements MigrationInterface {\n    name = '$npmConfigName1672744437528'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`profilePictureUrl\\` varchar(255) NOT NULL DEFAULT 'https://firebasestorage.googleapis.com/v0/b/atlas-6183a.appspot.com/o/Avatars%2FAvatars%2FdefaultImage.png?alt=media&token=4482a7ff-450d-4bf8-a4d7-8b4a1a6ebbd2'`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`profilePictureUrl\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672760070076.html":{"url":"classes/$npmConfigName1672760070076.html","title":"class - $npmConfigName1672760070076","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672760070076\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672760070076-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672760070076'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672760070076-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672760070076-$npm_config_name.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672760070076-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672760070076 implements MigrationInterface {\n    name = '$npmConfigName1672760070076'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`profilePictureExpiryDate\\` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`profilePictureUrl\\` \\`profilePictureUrl\\` varchar(255) NOT NULL DEFAULT ''`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`profilePictureUrl\\` \\`profilePictureUrl\\` varchar(255) NOT NULL DEFAULT 'https://firebasestorage.googleapis.com/v0/b/atlas-6183a.appspot.com/o/Avatars%2FAvatars%2FdefaultImage.png?alt=media&token=4482a7ff-450d-4bf8-a4d7-8b4a1a6ebbd2'`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`profilePictureExpiryDate\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672832148243.html":{"url":"classes/$npmConfigName1672832148243.html","title":"class - $npmConfigName1672832148243","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672832148243\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672832148243-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672832148243'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672832148243-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672832148243-$npm_config_name.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672832148243-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672832148243 implements MigrationInterface {\n    name = '$npmConfigName1672832148243'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`imageId\\` varchar(255) NOT NULL DEFAULT ''`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`imageExpiryDate\\` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`imageUrl\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`imageUrl\\` longtext NOT NULL`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`imageUrl\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`imageUrl\\` varchar(255) NOT NULL DEFAULT ''`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`imageExpiryDate\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`imageId\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1672833410692.html":{"url":"classes/$npmConfigName1672833410692.html","title":"class - $npmConfigName1672833410692","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1672833410692\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1672833410692-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1672833410692'\n                    \n                \n                    \n                        \n                                Defined in migrations/1672833410692-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672833410692-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1672833410692-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1672833410692 implements MigrationInterface {\n    name = '$npmConfigName1672833410692'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` CHANGE \\`isTakenDown\\` \\`isTakenDown\\` tinyint NOT NULL DEFAULT 0`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` CHANGE \\`isTakenDown\\` \\`isTakenDown\\` tinyint NOT NULL`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673022319464.html":{"url":"classes/$npmConfigName1673022319464.html","title":"class - $npmConfigName1673022319464","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673022319464\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673022319464-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673022319464'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673022319464-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673022319464-$npm_config_name.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673022319464-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673022319464 implements MigrationInterface {\n    name = '$npmConfigName1673022319464'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`comment\\` (\\`id\\` varchar(36) NOT NULL, \\`text\\` varchar(255) NOT NULL, \\`authorId\\` varchar(36) NULL, \\`postId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD CONSTRAINT \\`FK_276779da446413a0d79598d4fbd\\` FOREIGN KEY (\\`authorId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD CONSTRAINT \\`FK_94a85bb16d24033a2afdd5df060\\` FOREIGN KEY (\\`postId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP FOREIGN KEY \\`FK_94a85bb16d24033a2afdd5df060\\``);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP FOREIGN KEY \\`FK_276779da446413a0d79598d4fbd\\``);\n        await queryRunner.query(`DROP TABLE \\`comment\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673025398979.html":{"url":"classes/$npmConfigName1673025398979.html","title":"class - $npmConfigName1673025398979","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673025398979\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673025398979-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673025398979'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673025398979-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673025398979-$npm_config_name.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673025398979-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673025398979 implements MigrationInterface {\n    name = '$npmConfigName1673025398979'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)`);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP COLUMN \\`updatedAt\\``);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP COLUMN \\`createdAt\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673027114310.html":{"url":"classes/$npmConfigName1673027114310.html","title":"class - $npmConfigName1673027114310","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673027114310\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673027114310-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673027114310'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673027114310-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673027114310-$npm_config_name.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673027114310-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673027114310 implements MigrationInterface {\n    name = '$npmConfigName1673027114310'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP FOREIGN KEY \\`FK_94a85bb16d24033a2afdd5df060\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP FOREIGN KEY \\`FK_a9aad25ed05e8f5a9dffbc17a4a\\``);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD CONSTRAINT \\`FK_94a85bb16d24033a2afdd5df060\\` FOREIGN KEY (\\`postId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD CONSTRAINT \\`FK_a9aad25ed05e8f5a9dffbc17a4a\\` FOREIGN KEY (\\`reportedPostId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP FOREIGN KEY \\`FK_a9aad25ed05e8f5a9dffbc17a4a\\``);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP FOREIGN KEY \\`FK_94a85bb16d24033a2afdd5df060\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD CONSTRAINT \\`FK_a9aad25ed05e8f5a9dffbc17a4a\\` FOREIGN KEY (\\`reportedPostId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD CONSTRAINT \\`FK_94a85bb16d24033a2afdd5df060\\` FOREIGN KEY (\\`postId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673177373733.html":{"url":"classes/$npmConfigName1673177373733.html","title":"class - $npmConfigName1673177373733","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673177373733\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673177373733-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673177373733'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673177373733-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673177373733-$npm_config_name.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673177373733-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673177373733 implements MigrationInterface {\n    name = '$npmConfigName1673177373733'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)`);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` ADD \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)`);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` ADD \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` DROP COLUMN \\`updatedAt\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` DROP COLUMN \\`createdAt\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP COLUMN \\`updatedAt\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP COLUMN \\`createdAt\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP COLUMN \\`updatedAt\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP COLUMN \\`createdAt\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673337064308.html":{"url":"classes/$npmConfigName1673337064308.html","title":"class - $npmConfigName1673337064308","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673337064308\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673337064308-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673337064308'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673337064308-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673337064308-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673337064308-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673337064308 implements MigrationInterface {\n    name = '$npmConfigName1673337064308'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`address\\` \\`address\\` varchar(255) NOT NULL DEFAULT ''`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` CHANGE \\`address\\` \\`address\\` varchar(255) NOT NULL`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673770456243.html":{"url":"classes/$npmConfigName1673770456243.html","title":"class - $npmConfigName1673770456243","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673770456243\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673770456243-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673770456243'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673770456243-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673770456243-$npm_config_name.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673770456243-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673770456243 implements MigrationInterface {\n    name = '$npmConfigName1673770456243'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`appeal\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`status\\` varchar(255) NOT NULL DEFAULT 'pending review', \\`reportReason\\` varchar(255) NOT NULL, \\`text\\` varchar(255) NOT NULL, \\`appealedPostId\\` varchar(36) NULL, \\`appealedById\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` ADD CONSTRAINT \\`FK_7b9ec6db412ee31e791072faf29\\` FOREIGN KEY (\\`appealedPostId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` ADD CONSTRAINT \\`FK_f975f729d8f811976339e642f1b\\` FOREIGN KEY (\\`appealedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` DROP FOREIGN KEY \\`FK_f975f729d8f811976339e642f1b\\``);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` DROP FOREIGN KEY \\`FK_7b9ec6db412ee31e791072faf29\\``);\n        await queryRunner.query(`DROP TABLE \\`appeal\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673847605869.html":{"url":"classes/$npmConfigName1673847605869.html","title":"class - $npmConfigName1673847605869","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673847605869\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673847605869-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673847605869'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673847605869-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673847605869-$npm_config_name.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673847605869-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673847605869 implements MigrationInterface {\n    name = '$npmConfigName1673847605869'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`block\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`blockingUserId\\` varchar(36) NULL, \\`blockedUserId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`block\\` ADD CONSTRAINT \\`FK_cac6c15bcaa655e31e86e48f59a\\` FOREIGN KEY (\\`blockingUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`block\\` ADD CONSTRAINT \\`FK_c9a8df2f7cbbae1cda940694409\\` FOREIGN KEY (\\`blockedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`block\\` DROP FOREIGN KEY \\`FK_c9a8df2f7cbbae1cda940694409\\``);\n        await queryRunner.query(`ALTER TABLE \\`block\\` DROP FOREIGN KEY \\`FK_cac6c15bcaa655e31e86e48f59a\\``);\n        await queryRunner.query(`DROP TABLE \\`block\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1673974513613.html":{"url":"classes/$npmConfigName1673974513613.html","title":"class - $npmConfigName1673974513613","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1673974513613\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1673974513613-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1673974513613'\n                    \n                \n                    \n                        \n                                Defined in migrations/1673974513613-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673974513613-$npm_config_name.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1673974513613-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1673974513613 implements MigrationInterface {\n    name = '$npmConfigName1673974513613'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`follow\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`followedById\\` varchar(36) NULL, \\`followedId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`follow_request\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`status\\` varchar(255) NOT NULL DEFAULT 'pending', \\`requestedById\\` varchar(36) NULL, \\`requestedUserId\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` ADD CONSTRAINT \\`FK_c2159058051b11b2f9bb1b36983\\` FOREIGN KEY (\\`followedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` ADD CONSTRAINT \\`FK_f4a9d59861c87ba252ead40d84d\\` FOREIGN KEY (\\`followedId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` ADD CONSTRAINT \\`FK_7c5f8647272441265e4c2e61071\\` FOREIGN KEY (\\`requestedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` ADD CONSTRAINT \\`FK_37ecc4fc7d8451a768b704c43e0\\` FOREIGN KEY (\\`requestedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` DROP FOREIGN KEY \\`FK_37ecc4fc7d8451a768b704c43e0\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` DROP FOREIGN KEY \\`FK_7c5f8647272441265e4c2e61071\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` DROP FOREIGN KEY \\`FK_f4a9d59861c87ba252ead40d84d\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` DROP FOREIGN KEY \\`FK_c2159058051b11b2f9bb1b36983\\``);\n        await queryRunner.query(`DROP TABLE \\`follow_request\\``);\n        await queryRunner.query(`DROP TABLE \\`follow\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674121256550.html":{"url":"classes/$npmConfigName1674121256550.html","title":"class - $npmConfigName1674121256550","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674121256550\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674121256550-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674121256550'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674121256550-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674121256550-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674121256550-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674121256550 implements MigrationInterface {\n    name = '$npmConfigName1674121256550'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`fcmToken\\` varchar(255) NOT NULL DEFAULT ''`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`fcmToken\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674198387677.html":{"url":"classes/$npmConfigName1674198387677.html","title":"class - $npmConfigName1674198387677","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674198387677\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674198387677-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674198387677'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674198387677-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674198387677-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674198387677-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674198387677 implements MigrationInterface {\n    name = '$npmConfigName1674198387677'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`notificationPreference\\` varchar(255) NOT NULL DEFAULT 'all'`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`notificationPreference\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674453163372.html":{"url":"classes/$npmConfigName1674453163372.html","title":"class - $npmConfigName1674453163372","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674453163372\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674453163372-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674453163372'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674453163372-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674453163372-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674453163372-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674453163372 implements MigrationInterface {\n    name = '$npmConfigName1674453163372'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`isBanned\\` tinyint NOT NULL DEFAULT 0`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`isBanned\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674486373359.html":{"url":"classes/$npmConfigName1674486373359.html","title":"class - $npmConfigName1674486373359","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674486373359\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674486373359-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674486373359'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674486373359-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674486373359-$npm_config_name.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674486373359-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674486373359 implements MigrationInterface {\n    name = '$npmConfigName1674486373359'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`like\\` (\\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`id\\` varchar(36) NOT NULL, \\`likedPostId\\` varchar(36) NULL, \\`likedById\\` varchar(36) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`like\\` ADD CONSTRAINT \\`FK_288f29161615bed72435a2f90ee\\` FOREIGN KEY (\\`likedPostId\\`) REFERENCES \\`post\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`like\\` ADD CONSTRAINT \\`FK_48750d6b207c4bd82d30c5dd722\\` FOREIGN KEY (\\`likedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`like\\` DROP FOREIGN KEY \\`FK_48750d6b207c4bd82d30c5dd722\\``);\n        await queryRunner.query(`ALTER TABLE \\`like\\` DROP FOREIGN KEY \\`FK_288f29161615bed72435a2f90ee\\``);\n        await queryRunner.query(`DROP TABLE \\`like\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674487677914.html":{"url":"classes/$npmConfigName1674487677914.html","title":"class - $npmConfigName1674487677914","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674487677914\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674487677914-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674487677914'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674487677914-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674487677914-$npm_config_name.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674487677914-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674487677914 implements MigrationInterface {\n    name = '$npmConfigName1674487677914'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD \\`likesCount\\` int NOT NULL DEFAULT '0'`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP COLUMN \\`likesCount\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674493007150.html":{"url":"classes/$npmConfigName1674493007150.html","title":"class - $npmConfigName1674493007150","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674493007150\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674493007150-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674493007150'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674493007150-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674493007150-$npm_config_name.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674493007150-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674493007150 implements MigrationInterface {\n    name = '$npmConfigName1674493007150'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`scrapbook\\` DROP FOREIGN KEY \\`FK_b5db9533f87c9bc26bbb8ed3d06\\``);\n        await queryRunner.query(`ALTER TABLE \\`like\\` DROP FOREIGN KEY \\`FK_48750d6b207c4bd82d30c5dd722\\``);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP FOREIGN KEY \\`FK_276779da446413a0d79598d4fbd\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP FOREIGN KEY \\`FK_929dcdf74558612cc6166981480\\``);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` DROP FOREIGN KEY \\`FK_f975f729d8f811976339e642f1b\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_fb7ffd0860cbcc5cf22c96d3c05\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP FOREIGN KEY \\`FK_2d3711064572aa0203cba01242b\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP FOREIGN KEY \\`FK_2e595b9d3a37e4b72879dddb5ce\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` DROP FOREIGN KEY \\`FK_43cb4b8de8f8cfa4fd2857369c2\\``);\n        await queryRunner.query(`ALTER TABLE \\`block\\` DROP FOREIGN KEY \\`FK_c9a8df2f7cbbae1cda940694409\\``);\n        await queryRunner.query(`ALTER TABLE \\`block\\` DROP FOREIGN KEY \\`FK_cac6c15bcaa655e31e86e48f59a\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` DROP FOREIGN KEY \\`FK_c2159058051b11b2f9bb1b36983\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` DROP FOREIGN KEY \\`FK_f4a9d59861c87ba252ead40d84d\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` DROP FOREIGN KEY \\`FK_37ecc4fc7d8451a768b704c43e0\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` DROP FOREIGN KEY \\`FK_7c5f8647272441265e4c2e61071\\``);\n        await queryRunner.query(`ALTER TABLE \\`scrapbook\\` ADD CONSTRAINT \\`FK_b5db9533f87c9bc26bbb8ed3d06\\` FOREIGN KEY (\\`userId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`like\\` ADD CONSTRAINT \\`FK_48750d6b207c4bd82d30c5dd722\\` FOREIGN KEY (\\`likedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD CONSTRAINT \\`FK_276779da446413a0d79598d4fbd\\` FOREIGN KEY (\\`authorId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD CONSTRAINT \\`FK_929dcdf74558612cc6166981480\\` FOREIGN KEY (\\`reportedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` ADD CONSTRAINT \\`FK_f975f729d8f811976339e642f1b\\` FOREIGN KEY (\\`appealedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_fb7ffd0860cbcc5cf22c96d3c05\\` FOREIGN KEY (\\`postedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD CONSTRAINT \\`FK_2d3711064572aa0203cba01242b\\` FOREIGN KEY (\\`reportedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD CONSTRAINT \\`FK_2e595b9d3a37e4b72879dddb5ce\\` FOREIGN KEY (\\`reportedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` ADD CONSTRAINT \\`FK_43cb4b8de8f8cfa4fd2857369c2\\` FOREIGN KEY (\\`bannedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`block\\` ADD CONSTRAINT \\`FK_cac6c15bcaa655e31e86e48f59a\\` FOREIGN KEY (\\`blockingUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`block\\` ADD CONSTRAINT \\`FK_c9a8df2f7cbbae1cda940694409\\` FOREIGN KEY (\\`blockedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` ADD CONSTRAINT \\`FK_c2159058051b11b2f9bb1b36983\\` FOREIGN KEY (\\`followedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` ADD CONSTRAINT \\`FK_f4a9d59861c87ba252ead40d84d\\` FOREIGN KEY (\\`followedId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` ADD CONSTRAINT \\`FK_7c5f8647272441265e4c2e61071\\` FOREIGN KEY (\\`requestedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` ADD CONSTRAINT \\`FK_37ecc4fc7d8451a768b704c43e0\\` FOREIGN KEY (\\`requestedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` DROP FOREIGN KEY \\`FK_37ecc4fc7d8451a768b704c43e0\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` DROP FOREIGN KEY \\`FK_7c5f8647272441265e4c2e61071\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` DROP FOREIGN KEY \\`FK_f4a9d59861c87ba252ead40d84d\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` DROP FOREIGN KEY \\`FK_c2159058051b11b2f9bb1b36983\\``);\n        await queryRunner.query(`ALTER TABLE \\`block\\` DROP FOREIGN KEY \\`FK_c9a8df2f7cbbae1cda940694409\\``);\n        await queryRunner.query(`ALTER TABLE \\`block\\` DROP FOREIGN KEY \\`FK_cac6c15bcaa655e31e86e48f59a\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` DROP FOREIGN KEY \\`FK_43cb4b8de8f8cfa4fd2857369c2\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP FOREIGN KEY \\`FK_2e595b9d3a37e4b72879dddb5ce\\``);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` DROP FOREIGN KEY \\`FK_2d3711064572aa0203cba01242b\\``);\n        await queryRunner.query(`ALTER TABLE \\`post\\` DROP FOREIGN KEY \\`FK_fb7ffd0860cbcc5cf22c96d3c05\\``);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` DROP FOREIGN KEY \\`FK_f975f729d8f811976339e642f1b\\``);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` DROP FOREIGN KEY \\`FK_929dcdf74558612cc6166981480\\``);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` DROP FOREIGN KEY \\`FK_276779da446413a0d79598d4fbd\\``);\n        await queryRunner.query(`ALTER TABLE \\`like\\` DROP FOREIGN KEY \\`FK_48750d6b207c4bd82d30c5dd722\\``);\n        await queryRunner.query(`ALTER TABLE \\`scrapbook\\` DROP FOREIGN KEY \\`FK_b5db9533f87c9bc26bbb8ed3d06\\``);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` ADD CONSTRAINT \\`FK_7c5f8647272441265e4c2e61071\\` FOREIGN KEY (\\`requestedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow_request\\` ADD CONSTRAINT \\`FK_37ecc4fc7d8451a768b704c43e0\\` FOREIGN KEY (\\`requestedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` ADD CONSTRAINT \\`FK_f4a9d59861c87ba252ead40d84d\\` FOREIGN KEY (\\`followedId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`follow\\` ADD CONSTRAINT \\`FK_c2159058051b11b2f9bb1b36983\\` FOREIGN KEY (\\`followedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`block\\` ADD CONSTRAINT \\`FK_cac6c15bcaa655e31e86e48f59a\\` FOREIGN KEY (\\`blockingUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`block\\` ADD CONSTRAINT \\`FK_c9a8df2f7cbbae1cda940694409\\` FOREIGN KEY (\\`blockedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_ban\\` ADD CONSTRAINT \\`FK_43cb4b8de8f8cfa4fd2857369c2\\` FOREIGN KEY (\\`bannedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD CONSTRAINT \\`FK_2e595b9d3a37e4b72879dddb5ce\\` FOREIGN KEY (\\`reportedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`user_report\\` ADD CONSTRAINT \\`FK_2d3711064572aa0203cba01242b\\` FOREIGN KEY (\\`reportedUserId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post\\` ADD CONSTRAINT \\`FK_fb7ffd0860cbcc5cf22c96d3c05\\` FOREIGN KEY (\\`postedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`appeal\\` ADD CONSTRAINT \\`FK_f975f729d8f811976339e642f1b\\` FOREIGN KEY (\\`appealedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`post_report\\` ADD CONSTRAINT \\`FK_929dcdf74558612cc6166981480\\` FOREIGN KEY (\\`reportedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`comment\\` ADD CONSTRAINT \\`FK_276779da446413a0d79598d4fbd\\` FOREIGN KEY (\\`authorId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`like\\` ADD CONSTRAINT \\`FK_48750d6b207c4bd82d30c5dd722\\` FOREIGN KEY (\\`likedById\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`scrapbook\\` ADD CONSTRAINT \\`FK_b5db9533f87c9bc26bbb8ed3d06\\` FOREIGN KEY (\\`userId\\`) REFERENCES \\`user\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1674544597118.html":{"url":"classes/$npmConfigName1674544597118.html","title":"class - $npmConfigName1674544597118","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1674544597118\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1674544597118-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1674544597118'\n                    \n                \n                    \n                        \n                                Defined in migrations/1674544597118-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674544597118-$npm_config_name.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1674544597118-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1674544597118 implements MigrationInterface {\n    name = '$npmConfigName1674544597118'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`hasStripAccount\\` tinyint NOT NULL DEFAULT 0`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`stripeCustomerId\\` varchar(255) NOT NULL DEFAULT ''`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`subscriptionPlan\\` varchar(255) NOT NULL DEFAULT 'Basic'`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`subscriptionPlan\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`stripeCustomerId\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`hasStripAccount\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/$npmConfigName1675177507147.html":{"url":"classes/$npmConfigName1675177507147.html","title":"class - $npmConfigName1675177507147","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  $npmConfigName1675177507147\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1675177507147-$npm_config_name.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$npmConfigName1675177507147'\n                    \n                \n                    \n                        \n                                Defined in migrations/1675177507147-$npm_config_name.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1675177507147-$npm_config_name.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1675177507147-$npm_config_name.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class $npmConfigName1675177507147 implements MigrationInterface {\n    name = '$npmConfigName1675177507147'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`followersCount\\` int NOT NULL DEFAULT '0'`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`followingCount\\` int NOT NULL DEFAULT '0'`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`bio\\` varchar(255) NOT NULL DEFAULT ''`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`bio\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`followingCount\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`followersCount\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AnalyticsController.html":{"url":"controllers/AnalyticsController.html","title":"controller - AnalyticsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AnalyticsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/analytics/analytics.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                analytics\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPostAnalytics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getPostAnalytics\n                        \n                    \n                \n            \n            \n                \ngetPostAnalytics(req, postId, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('post/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/analytics/analytics.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpStatus, Param, Res, UseGuards, Request } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { AnalyticsService } from './analytics.service';\nimport { Response } from 'express';\n\n@Controller('analytics')\nexport class AnalyticsController {\n  constructor(private analyticsService: AnalyticsService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Get('post/:id')\n  getPostAnalytics(@Request() req, @Param('id') postId, @Res() res: Response) {\n    this.analyticsService\n      .getPostAnalytics(req.user, postId)\n      .then((analytics) => {\n        return res.status(HttpStatus.OK).json(analytics);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AnalyticsModule.html":{"url":"modules/AnalyticsModule.html","title":"module - AnalyticsModule","body":"\n                   \n\n\n\n\n    Modules\n    AnalyticsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AnalyticsModule\n\n\n\ncluster_AnalyticsModule_providers\n\n\n\n\nAnalyticsService\n\nAnalyticsService\n\n\n\nAnalyticsModule\n\nAnalyticsModule\n\nAnalyticsModule -->\n\nAnalyticsService->AnalyticsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/analytics/analytics.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AnalyticsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AnalyticsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { User } from '../user/entities/user.entity';\nimport { AnalyticsController } from './analytics.controller';\nimport { AnalyticsService } from './analytics.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Post, User])],\n  controllers: [AnalyticsController],\n  providers: [AnalyticsService]\n})\nexport class AnalyticsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AnalyticsService.html":{"url":"injectables/AnalyticsService.html","title":"injectable - AnalyticsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AnalyticsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/analytics/analytics.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getPostAnalytics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/analytics/analytics.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostAnalytics\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostAnalytics(user: any, postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/analytics/analytics.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Role } from 'src/constants/role.enum';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { User } from '../user/entities/user.entity';\nimport { PostAnalyticResposneDto } from './dto/post-analytic-response.dto';\n\n@Injectable()\nexport class AnalyticsService {\n  constructor(\n    @InjectRepository(Post)\n    private postRepository: Repository,\n\n    @InjectRepository(User)\n    private userRepository: Repository\n  ) {}\n\n  async getPostAnalytics(user: any, postId: string): Promise {\n    const post = await this.postRepository.findOne({\n      where: { id: postId },\n      relations: ['postedBy', 'reportsAgainst', 'scrapbook', 'comments', 'appeals']\n    });\n\n    if (user.role !== Role.Admin) {\n      if (post.postedBy.id !== user.id) {\n        throw new BadRequestException('You are not authorized to view the analytics of this post');\n      }\n    }\n\n    if (!post) {\n      throw new BadRequestException('Post does not exist');\n    }\n\n    const commentCount = post.comments.length;\n    const reportCount = post.reportsAgainst.length;\n    const appealCount = post.appeals.length;\n    const isPartOfScrapbook = post.scrapbook ? true : false;\n    const interactionCount = commentCount;\n    const isTakenDown = post.isTakenDown;\n    const createdAt = new Date(post.createdAt);\n\n    const response = new PostAnalyticResposneDto();\n    response.commentCount = commentCount;\n    response.likeCount = 0;\n    response.interactionCount = interactionCount;\n    response.isTakenDown = isTakenDown;\n    response.reportCount = reportCount;\n    response.appealCount = appealCount;\n    response.createdAt = createdAt;\n    response.isPartOfScrapbook = isPartOfScrapbook;\n\n    if (isPartOfScrapbook) {\n      response.scrapbookId = post.scrapbook.id;\n    }\n\n    return response;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAnalyticsModule\n\nAnalyticsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnalyticsModule->AppModule\n\n\n\n\n\nAppealsModule\n\nAppealsModule\n\nAppModule -->\n\nAppealsModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBlockModule\n\nBlockModule\n\nAppModule -->\n\nBlockModule->AppModule\n\n\n\n\n\nFeedModule\n\nFeedModule\n\nAppModule -->\n\nFeedModule->AppModule\n\n\n\n\n\nFollowModule\n\nFollowModule\n\nAppModule -->\n\nFollowModule->AppModule\n\n\n\n\n\nNotificationModule\n\nNotificationModule\n\nAppModule -->\n\nNotificationModule->AppModule\n\n\n\n\n\nPaymentModule\n\nPaymentModule\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nReportModule\n\nReportModule\n\nAppModule -->\n\nReportModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAppModule -->\n\nLocalStrategy->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AnalyticsModule\n                        \n                        \n                            AppealsModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            BlockModule\n                        \n                        \n                            FeedModule\n                        \n                        \n                            FollowModule\n                        \n                        \n                            NotificationModule\n                        \n                        \n                            PaymentModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            ReportModule\n                        \n                        \n                            TasksModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { UserModule } from './modules/user/user.module';\nimport { User } from './modules/user/entities/user.entity';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { LocalStrategy } from './modules/auth/strategies/local.strategy';\nimport { PostModule } from './modules/post/post.module';\nimport { Post } from './modules/post/entities/post.entity';\nimport { Scrapbook } from './modules/post/entities/scrapbook.entity';\nimport { Comment } from './modules/post/entities/comment.entity';\nimport { PostReport } from './modules/report/entities/post-report.entity';\nimport { UserReport } from './modules/report/entities/user-report.entity';\nimport { ReportModule } from './modules/report/report.module';\nimport { UserBan } from './modules/report/entities/user-ban.entity';\nimport { Appeal } from './modules/appeals/entities/appeal.entity';\nimport { AppealsModule } from './modules/appeals/appeals.module';\nimport { BlockModule } from './modules/block/block.module';\nimport { Block } from './modules/block/entities/block.entity';\nimport { Follow } from './modules/follow/entities/follow.entity';\nimport { FollowRequest } from './modules/follow/entities/follow-request.entity';\nimport { FollowModule } from './modules/follow/follow.module';\nimport { NotificationModule } from './modules/notification/notification.module';\nimport { AnalyticsModule } from './modules/analytics/analytics.module';\nimport { FeedModule } from './modules/feed/feed.module';\nimport { Like } from './modules/post/entities/post-like.entity';\nimport { PaymentModule } from './modules/payment/payment.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { TasksModule } from './modules/tasks/tasks.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    ScheduleModule.forRoot(),\n    TypeOrmModule.forRootAsync({\n      //We import the ConfigModule to use the ConfigService to acceess the environment variables\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        //*Database Settings\n        type: 'mysql',\n        //We get get the value of the environment variable DATABASE_HOST\n        host: configService.get('DATABASE_HOST'),\n        username: configService.get('DATABASE_USERNAME'),\n        password: configService.get('DATABASE_PASSWORD'),\n        database: configService.get('DATABASE_NAME'),\n        entities: [\n          User,\n          Post,\n          Scrapbook,\n          PostReport,\n          UserReport,\n          UserBan,\n          Comment,\n          Appeal,\n          Block,\n          Follow,\n          FollowRequest,\n          Like\n        ],\n        synchronize: false,\n        autoLoadEntities: true,\n        options: { encrypt: false },\n        //*Migrations Settings\n        //Migrations Table Name\n        migrationsTableName: 'migrations',\n        //Migrations Folder\n        migrations: ['../migrations/*{.ts,.js}'],\n        //Automatically run migrations on app start if needed\n        migrationsRun: true\n      }),\n      inject: [ConfigService]\n    }),\n    UserModule,\n    AuthModule,\n    PostModule,\n    ReportModule,\n    AppealsModule,\n    BlockModule,\n    FollowModule,\n    NotificationModule,\n    AnalyticsModule,\n    FeedModule,\n    PaymentModule,\n    TasksModule\n  ],\n  controllers: [],\n  providers: [AppService, LocalStrategy]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Appeal.html":{"url":"entities/Appeal.html","title":"entity - Appeal","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Appeal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appeals/entities/appeal.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                appealedBy\n                            \n                            \n                                appealedPost\n                            \n                            \n                                id\n                            \n                            \n                                reportReason\n                            \n                            \n                                status\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        appealedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.appeals, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/entities/appeal.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        appealedPost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.appeals, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/entities/appeal.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/entities/appeal.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportReason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReportReason\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/entities/appeal.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ReportStatus.PendingReview\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/entities/appeal.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/entities/appeal.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Post } from '../../post/entities/post.entity';\nimport { User } from '../../user/entities/user.entity';\nimport { ReportStatus } from '../../../constants/report-status.enum';\nimport { ReportReason } from '../../../constants/report-reason.enum';\n\n@Entity()\nexport class Appeal extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ default: ReportStatus.PendingReview })\n  status: string = ReportStatus.PendingReview;\n\n  @Column()\n  reportReason: ReportReason;\n\n  @Column()\n  text: string;\n\n  //An appeal can only appeal one post but a post can be in many appeals\n  @ManyToOne(() => Post, (post) => post.appeals, {\n    onDelete: 'CASCADE'\n  })\n  appealedPost: Post;\n\n  //A appeal can only be appeal by one user but a user can have many appeal\n  @ManyToOne(() => User, (user) => user.appeals, {\n    onDelete: 'CASCADE'\n  })\n  appealedBy: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppealDto.html":{"url":"classes/AppealDto.html","title":"class - AppealDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppealDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appeals/dto/appeal.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                postId\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/dto/appeal.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appeals/dto/appeal.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport class AppealDto {\n  @IsNotEmpty()\n  postId: string;\n\n  @IsNotEmpty()\n  text: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppealsController.html":{"url":"controllers/AppealsController.html","title":"controller - AppealsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppealsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appeals/appeals.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                appeals\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                acceptPostAppeal\n                            \n                            \n                                getPostAppeals\n                            \n                            \n                                getPostAppealsById\n                            \n                            \n                                getUserAppeals\n                            \n                            \n                                rejectPostAppeal\n                            \n                            \n                                reportPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        acceptPostAppeal\n                        \n                    \n                \n            \n            \n                \nacceptPostAppeal(req, postId, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Patch('accept-appeal/:postId')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/appeals/appeals.controller.ts:55\n                \n            \n\n\n            \n                \n                    Accept an appeal\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    postId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostAppeals\n                        \n                    \n                \n            \n            \n                \ngetPostAppeals(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Get('post-appeals')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/appeals/appeals.controller.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostAppealsById\n                        \n                    \n                \n            \n            \n                \ngetPostAppealsById(req, postId, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('post-appeals/:postId')\n                \n            \n\n            \n                \n                    Defined in src/modules/appeals/appeals.controller.ts:94\n                \n            \n\n\n            \n                \n                    Get the appeals of a post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    postId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserAppeals\n                        \n                    \n                \n            \n            \n                \ngetUserAppeals(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('user-appeals')\n                \n            \n\n            \n                \n                    Defined in src/modules/appeals/appeals.controller.ts:118\n                \n            \n\n\n            \n                \n                    Get the appeals of a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rejectPostAppeal\n                        \n                    \n                \n            \n            \n                \nrejectPostAppeal(req, postId, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Patch('reject-appeal/:postId')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/appeals/appeals.controller.ts:75\n                \n            \n\n\n            \n                \n                    Reject an appeal\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    postId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportPost\n                        \n                    \n                \n            \n            \n                \nreportPost(body: AppealDto, req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('appeal-post')\n                \n            \n\n            \n                \n                    Defined in src/modules/appeals/appeals.controller.ts:35\n                \n            \n\n\n            \n                \n                    Appeal a post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AppealDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the body of the request\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  UseGuards,\n  Res,\n  Request,\n  Post,\n  Body,\n  HttpStatus,\n  Get,\n  Param,\n  Patch,\n  Query\n} from '@nestjs/common';\nimport { Response } from 'express';\nimport { PageOptionsDto } from 'src/common/dto/page-options.dto';\nimport { Role } from 'src/constants/role.enum';\nimport { Roles } from 'src/decorators/roles.decorator';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { AppealsService } from './appeals.service';\nimport { AppealDto } from './dto/appeal.dto';\n\n@Controller('appeals')\nexport class AppealsController {\n  constructor(private appealsService: AppealsService) {}\n\n  /**\n   * Appeal a post\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('appeal-post')\n  reportPost(@Body() body: AppealDto, @Request() req, @Res() res: Response) {\n    this.appealsService\n      .appealPost(req.user, body)\n      .then((appeal) => {\n        return res.status(HttpStatus.OK).json(appeal);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Accept an appeal\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Patch('accept-appeal/:postId')\n  @Roles(Role.Admin)\n  acceptPostAppeal(@Request() req, @Param('postId') postId, @Res() res: Response) {\n    this.appealsService\n      .acceptPostAppeal(postId)\n      .then((appeal) => {\n        return res.status(HttpStatus.OK).json(appeal);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Reject an appeal\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Patch('reject-appeal/:postId')\n  @Roles(Role.Admin)\n  rejectPostAppeal(@Request() req, @Param('postId') postId, @Res() res: Response) {\n    this.appealsService\n      .rejectPostAppeal(postId)\n      .then((appeal) => {\n        return res.status(HttpStatus.OK).json(appeal);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Get the appeals of a post\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('post-appeals/:postId')\n  getPostAppealsById(\n    @Request() req,\n    @Param('postId') postId,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.appealsService\n      .getPostAppealsById(postId, req.user, pageOptionsDto)\n      .then((appeal) => {\n        return res.status(HttpStatus.OK).json(appeal);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Get the appeals of a user\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('user-appeals')\n  getUserAppeals(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.appealsService\n      .getUserAppeals(req.user, pageOptionsDto)\n      .then((appeal) => {\n        return res.status(HttpStatus.OK).json(appeal);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Get('post-appeals')\n  @Roles(Role.Admin)\n  getPostAppeals(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.appealsService\n      .getPostAppeals(pageOptionsDto)\n      .then((appeals) => {\n        return res.status(HttpStatus.OK).json(appeals);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppealsModule.html":{"url":"modules/AppealsModule.html","title":"module - AppealsModule","body":"\n                   \n\n\n\n\n    Modules\n    AppealsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppealsModule\n\n\n\ncluster_AppealsModule_providers\n\n\n\n\nAppealsService\n\nAppealsService\n\n\n\nAppealsModule\n\nAppealsModule\n\nAppealsModule -->\n\nAppealsService->AppealsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/appeals/appeals.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppealsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppealsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppealsService } from './appeals.service';\nimport { AppealsController } from './appeals.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { Appeal } from './entities/appeal.entity';\nimport { Post } from '../post/entities/post.entity';\nimport { PostReport } from '../report/entities/post-report.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Appeal, Post, User, PostReport])],\n  providers: [AppealsService],\n  controllers: [AppealsController]\n})\nexport class AppealsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppealsService.html":{"url":"injectables/AppealsService.html","title":"injectable - AppealsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppealsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appeals/appeals.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                acceptPostAppeal\n                            \n                            \n                                    Async\n                                appealPost\n                            \n                            \n                                    Async\n                                getPostAppeals\n                            \n                            \n                                    Async\n                                getPostAppealsById\n                            \n                            \n                                    Async\n                                getUserAppeals\n                            \n                            \n                                    Async\n                                rejectPostAppeal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appealRepository: Repository, postReportsRepository: Repository, postRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/appeals/appeals.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appealRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postReportsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        acceptPostAppeal\n                        \n                    \n                \n            \n            \n                \n                    \n                    acceptPostAppeal(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/appeals/appeals.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        appealPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    appealPost(user: any, body: AppealDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/appeals/appeals.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                AppealDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostAppeals\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostAppeals(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/appeals/appeals.service.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostAppealsById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostAppealsById(postId: string, user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/appeals/appeals.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserAppeals\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserAppeals(user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/appeals/appeals.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        rejectPostAppeal\n                        \n                    \n                \n            \n            \n                \n                    \n                    rejectPostAppeal(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/appeals/appeals.service.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PageMetaDto } from 'src/common/dto/page-meta.dto';\nimport { PageOptionsDto } from 'src/common/dto/page-options.dto';\nimport { PageDto } from 'src/common/dto/page.dto';\nimport { ReportStatus } from 'src/constants/report-status.enum';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { PostReport } from '../report/entities/post-report.entity';\nimport { User } from '../user/entities/user.entity';\nimport { AppealDto } from './dto/appeal.dto';\nimport { Appeal } from './entities/appeal.entity';\n\n@Injectable()\nexport class AppealsService {\n  constructor(\n    @InjectRepository(Appeal)\n    private appealRepository: Repository,\n\n    @InjectRepository(PostReport)\n    private postReportsRepository: Repository,\n\n    @InjectRepository(Post)\n    private postRepository: Repository,\n\n    @InjectRepository(User)\n    private userRepository: Repository\n  ) {}\n\n  async appealPost(user: any, body: AppealDto): Promise {\n    const newAppeal = new Appeal();\n\n    const post = await this.postRepository.findOne({\n      where: { id: body.postId },\n      relations: ['reportsAgainst', 'postedBy', 'appeals']\n    });\n\n    if (!post) {\n      throw new BadRequestException('Post not found');\n    }\n\n    if (post.appeals.some((appeal) => appeal.status === ReportStatus.PendingReview)) {\n      throw new BadRequestException('Post has already been appealed');\n    }\n\n    if (post.postedBy.id !== user.id) {\n      throw new BadRequestException('You can only appeal your posts');\n    }\n\n    if (\n      !(\n        post.reportsAgainst.some((report) => report.status === ReportStatus.Accepted) &&\n        post.isTakenDown\n      )\n    ) {\n      throw new BadRequestException('Post has not been reported or taken down');\n    }\n\n    const reportReason = post.reportsAgainst\n      .filter((report) => {\n        return report.status === ReportStatus.Accepted;\n      })\n      .sort((a, b) => Date.parse(b.createdAt) - Date.parse(a.createdAt))[0].reason;\n\n    newAppeal.appealedPost = post;\n    newAppeal.appealedBy = post.postedBy;\n    newAppeal.text = body.text;\n    newAppeal.reportReason = reportReason;\n\n    return this.appealRepository.save(newAppeal);\n  }\n\n  async getPostAppealsById(\n    postId: string,\n    user: any,\n    pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const post = await this.postRepository.findOne({\n      where: { id: postId },\n      relations: ['postedBy', 'appeals']\n    });\n\n    if (!post) {\n      throw new BadRequestException('Post not found');\n    }\n\n    if (post.postedBy.id !== user.id) {\n      throw new BadRequestException('You can only view your post appeals');\n    }\n\n    const itemCount: number = post.appeals.length;\n    const entities: Appeal[] = post.appeals;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async getUserAppeals(user: any, pageOptionsDto: PageOptionsDto): Promise> {\n    const dbUser = await this.userRepository.findOne({\n      where: { id: user.id },\n      relations: ['appeals']\n    });\n\n    if (!dbUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    const itemCount: number = dbUser.appeals.length;\n    const entities: Appeal[] = dbUser.appeals;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async acceptPostAppeal(postId: string): Promise {\n    const post = await this.postRepository.findOne({\n      where: { id: postId },\n      relations: ['appeals', 'postedBy']\n    });\n\n    if (!post) {\n      throw new BadRequestException('Post not found');\n    }\n\n    if (!post.appeals.some((appeal) => appeal.status === ReportStatus.PendingReview)) {\n      throw new BadRequestException('Post has not been appealed');\n    }\n\n    const appeal = post.appeals\n      .map((appeal) => {\n        if (appeal.status === ReportStatus.PendingReview) {\n          return appeal;\n        }\n      })\n      .filter((appeal) => appeal !== undefined)[0];\n\n    appeal.status = ReportStatus.Accepted;\n\n    await this.postRepository.update(postId, { isTakenDown: false });\n\n    return this.appealRepository.save(appeal);\n  }\n\n  async rejectPostAppeal(postId: string): Promise {\n    const post = await this.postRepository.findOne({\n      where: { id: postId },\n      relations: ['appeals', 'postedBy']\n    });\n\n    if (!post) {\n      throw new BadRequestException('Post not found');\n    }\n\n    if (!post.appeals.some((appeal) => appeal.status === ReportStatus.PendingReview)) {\n      throw new BadRequestException('Post has not been appealed');\n    }\n\n    const appeal = post.appeals\n      .map((appeal) => {\n        if (appeal.status === ReportStatus.PendingReview) {\n          return appeal;\n        }\n      })\n      .filter((appeal) => appeal !== undefined)[0];\n\n    appeal.status = ReportStatus.Rejected;\n\n    return this.appealRepository.save(appeal);\n  }\n\n  async getPostAppeals(pageOptionsDto: PageOptionsDto): Promise> {\n    const appeals = await this.appealRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('Appeal.appealedPost', 'Post')\n      .leftJoinAndSelect('Post.postedBy', 'PostedBy')\n      .leftJoinAndSelect('Appeal.appealedBy', 'User')\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take)\n      .orderBy('Appeal.createdAt', pageOptionsDto.order)\n      .getManyAndCount()\n      .then((appealsAndCount) => {\n        return {\n          items: appealsAndCount[0],\n          itemsCount: appealsAndCount[0].length\n        };\n      });\n\n    const itemCount: number = appeals.itemsCount;\n    const entities: Appeal[] = appeals.items;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                loginUser\n                            \n                            \n                                signUpAdmin\n                            \n                            \n                                signUpUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginUser(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:117\n                \n            \n\n\n            \n                \n                    Route for login\nThe guard is used to protect the route, if the user is not authenticated, the route will not be accessible\nThe LocalAuthGuard will check if the user is authenticated using the local strategy\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The request object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the JWT access token for the user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signUpAdmin\n                        \n                    \n                \n            \n            \n                \nsignUpAdmin(body: SignUpUserDto, req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Post('admin/signup')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:88\n                \n            \n\n\n            \n                \n                    creating post route, the route will be admin/signup\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SignUpUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request body\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object itself\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object we will send back to the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        confirmation message or error message\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signUpUser\n                        \n                    \n                \n            \n            \n                \nsignUpUser(body: SignUpUserDto, req, res: Response, file)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:40\n                \n            \n\n\n            \n                \n                    We create a post route for the sign up, the route will be /user/signup\nWe use the @Body() decorator to get the body of the request and the body is a SignUpUserDto\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SignUpUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request body\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object itself\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the respponse object we will send back to the user\n\n                                    \n                                \n                                \n                                    file\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        confirmation message or error message\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Request,\n  Post,\n  Body,\n  Res,\n  HttpStatus,\n  UseGuards,\n  ForbiddenException,\n  UseInterceptors,\n  UploadedFile\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { Response } from 'express';\nimport { Role } from 'src/constants/role.enum';\nimport { Roles } from 'src/decorators/roles.decorator';\nimport { User } from '../user/entities/user.entity';\nimport { UserService } from '../user/user.service';\nimport { AuthService } from './auth.service';\nimport { SignUpUserDto } from './dto/user-signup.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { RolesGuard } from './guards/roles.guard';\n\n@Controller('auth')\nexport class AuthController {\n  //We inject the user servicec in the constructor\n  constructor(private userService: UserService, private authService: AuthService) {}\n\n  /**\n   * We create a post route for the sign up, the route will be /user/signup\n   * We use the @Body() decorator to get the body of the request and the body is a SignUpUserDto\n   * @param body the request body\n   * @param req the request object itself\n   * @param res the respponse object we will send back to the user\n   * @returns confirmation message or error message\n   */\n  @Post('signup')\n  @UseInterceptors(FileInterceptor('avatar'))\n  signUpUser(\n    @Body() body: SignUpUserDto,\n    @Request() req,\n    @Res() res: Response,\n    @UploadedFile() file\n  ) {\n    if (body.password !== body.confirmPassword) {\n      return res.status(HttpStatus.BAD_REQUEST).json({\n        message: 'Passwords do not match'\n      });\n    }\n\n    this.userService.findOneByEmail(body.email).then((user: User) => {\n      if (user) {\n        return res.status(HttpStatus.BAD_REQUEST).json({\n          message: 'User already exists'\n        });\n      }\n\n      if (!user) {\n        if (file) {\n          this.userService.createUserWithImage(body, file).then((user: User) => {\n            const { id, firstName, lastName, email, profilePictureUrl } = user;\n            return res\n              .status(HttpStatus.CREATED)\n              .json({ id, firstName, lastName, email, profilePictureUrl });\n          });\n        }\n\n        if (!file) {\n          this.userService.create(body).then((user: User) => {\n            const { id, firstName, lastName, email } = user;\n            return res.status(HttpStatus.CREATED).json({ id, firstName, lastName, email });\n          });\n        }\n      }\n    });\n  }\n\n  /** creating post route, the route will be admin/signup\n   * @param body the request body\n   * @param req the request object itself\n   * @param res the response object we will send back to the user\n   * @returns confirmation message or error message\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Post('admin/signup')\n  @Roles(Role.Admin)\n  signUpAdmin(@Body() body: SignUpUserDto, @Request() req, @Res() res: Response) {\n    if (body.password !== body.confirmPassword) {\n      return res.status(HttpStatus.BAD_REQUEST).json({\n        message: 'Passwords do not match'\n      });\n    }\n\n    this.userService.findOneByEmail(body.email).then((user: User) => {\n      if (user) {\n        return res.status(HttpStatus.BAD_REQUEST).json({\n          message: 'User already exists'\n        });\n      }\n    });\n\n    this.userService.createAdmin(body).then((user: User) => {\n      const { id, firstName, lastName, email } = user;\n      return res.status(HttpStatus.CREATED).json({ id, firstName, lastName, email });\n    });\n  }\n  /**\n   * Route for login\n   * The guard is used to protect the route, if the user is not authenticated, the route will not be accessible\n   * The LocalAuthGuard will check if the user is authenticated using the local strategy\n   * @param req The request object\n   * @returns the JWT access token for the user\n   */\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  async loginUser(@Request() req) {\n    const isBanned = await this.authService.isUserBanned(req.user);\n\n    if (!isBanned) {\n      return this.authService.login(req.user);\n    }\n\n    throw new ForbiddenException('User banned');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm/dist/typeorm.module';\nimport { User } from '../user/entities/user.entity';\nimport { UserModule } from '../user/user.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport jwtConfig from './constants';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\n\n@Module({\n  imports: [\n    UserModule,\n    PassportModule,\n    JwtModule.register(jwtConfig),\n    TypeOrmModule.forFeature([User])\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                isUserBanned\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UserService, jwtService: JwtService, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        isUserBanned\n                        \n                    \n                \n            \n            \n                \n                    \n                    isUserBanned(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:49\n                \n            \n\n\n            \n                \n                    This method is called after the user is authenticated by the local strategy and returns the JWT token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the authenticated user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the JWT token\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:24\n                \n            \n\n\n            \n                \n                    Validate the user using password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        email of the user\n\n                                    \n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        password input by the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the user details (excluding password) or null if the user is not found or has an invalid password\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { EncryptionService } from 'src/common/services/encryption.service';\nimport { Repository } from 'typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { UserService } from '../user/user.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UserService,\n    private jwtService: JwtService,\n    @InjectRepository(User)\n    private usersRepository: Repository\n  ) {}\n\n  /**\n   * Validate the user using password\n   * @param email email of the user\n   * @param pass password input by the user\n   * @returns the user details (excluding password) or null if the user is not found or has an invalid password\n   */\n  async validateUser(email: string, pass: string): Promise {\n    const user = await this.usersRepository\n      .createQueryBuilder()\n      .select(['id', 'email', 'password', 'role'])\n      .where('email = :email', { email: email })\n      .getRawOne();\n\n    if (!user) {\n      throw new BadRequestException('User not found');\n    }\n\n    const passwordsMatch = await new EncryptionService().comparePasswords(pass, user.password);\n\n    if (user && passwordsMatch) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  /**\n   * This method is called after the user is authenticated by the local strategy and returns the JWT token\n   * @param user the authenticated user\n   * @returns the JWT token\n   */\n  async login(user: any) {\n    const payload = { email: user.email, sub: user.id, role: user.role };\n    return {\n      access_token: this.jwtService.sign(payload)\n    };\n  }\n\n  async isUserBanned(user: any) {\n    return this.usersService.isUserBanned(user.id).then((result) => {\n      return result;\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseEntity.html":{"url":"classes/BaseEntity.html","title":"class - BaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entities/base.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Base entity class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/base.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateDateColumn, UpdateDateColumn } from 'typeorm';\n\n/**\n * Base entity class\n * @description Base entity class for all entities\n */\nexport abstract class BaseEntity {\n  @CreateDateColumn()\n  createdAt: string;\n\n  @UpdateDateColumn()\n  updatedAt: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Block.html":{"url":"entities/Block.html","title":"entity - Block","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Block\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/block/entities/block.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                blockedUser\n                            \n                            \n                                blockingUser\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        blockedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.blockedBy, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/block/entities/block.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        blockingUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.blocks, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/block/entities/block.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/block/entities/block.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\n\n@Entity()\nexport class Block extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  //A block can only be done by one user but a user can have many blocks\n  @ManyToOne(() => User, (user) => user.blocks, {\n    onDelete: 'CASCADE'\n  })\n  blockingUser: User;\n\n  //A block can only be done by one user but a user can have many blocks\n  @ManyToOne(() => User, (user) => user.blockedBy, {\n    onDelete: 'CASCADE'\n  })\n  blockedUser: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BlockController.html":{"url":"controllers/BlockController.html","title":"controller - BlockController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BlockController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/block/block.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                block\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                blockUser\n                            \n                            \n                                unblockUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        blockUser\n                        \n                    \n                \n            \n            \n                \nblockUser(req, id: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('block-user/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/block/block.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unblockUser\n                        \n                    \n                \n            \n            \n                \nunblockUser(req, id: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('unblock-user/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/block/block.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UseGuards, Res, Request, Post, Param, HttpStatus } from '@nestjs/common';\nimport { Response } from 'express';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { BlockService } from './block.service';\n\n@Controller('block')\nexport class BlockController {\n  constructor(private blockService: BlockService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Post('block-user/:id')\n  blockUser(@Request() req, @Param('id') id: string, @Res() res: Response) {\n    this.blockService\n      .blockUser(id, req.user)\n      .then((block) => {\n        return res.status(HttpStatus.OK).json(block);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('unblock-user/:id')\n  unblockUser(@Request() req, @Param('id') id: string, @Res() res: Response) {\n    this.blockService\n      .unblockUser(id, req.user)\n      .then((_) => {\n        return res.status(HttpStatus.OK).json({ message: 'User unblocked' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BlockModule.html":{"url":"modules/BlockModule.html","title":"module - BlockModule","body":"\n                   \n\n\n\n\n    Modules\n    BlockModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BlockModule\n\n\n\ncluster_BlockModule_providers\n\n\n\n\nBlockService\n\nBlockService\n\n\n\nBlockModule\n\nBlockModule\n\nBlockModule -->\n\nBlockService->BlockModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/block/block.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BlockService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BlockController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { BlockService } from './block.service';\nimport { BlockController } from './block.controller';\nimport { Block } from './entities/block.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Block, User])],\n  providers: [BlockService],\n  controllers: [BlockController]\n})\nexport class BlockModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BlockService.html":{"url":"injectables/BlockService.html","title":"injectable - BlockService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BlockService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/block/block.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                blockUser\n                            \n                            \n                                    Async\n                                unblockUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(blockRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/block/block.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        blockRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        blockUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    blockUser(id: string, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/block/block.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unblockUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    unblockUser(id: string, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/block/block.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeleteResult, Repository } from 'typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { Block } from './entities/block.entity';\n\n@Injectable()\nexport class BlockService {\n  constructor(\n    @InjectRepository(Block)\n    private blockRepository: Repository,\n\n    @InjectRepository(User)\n    private userRepository: Repository\n  ) {}\n\n  async blockUser(id: string, user: any): Promise {\n    const userToBeBlocked = await this.userRepository.findOneBy({ id: id });\n\n    if (!userToBeBlocked) {\n      throw new BadRequestException('User not found');\n    }\n\n    if (userToBeBlocked.id === user.id) {\n      throw new BadRequestException('You cannot block yourself');\n    }\n\n    const blockingUser = await this.userRepository.findOne({\n      where: { id: user.id },\n      relations: ['blocks', 'blocks.blockedUser']\n    });\n\n    if (!blockingUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    blockingUser.blocks.map((block) => {\n      if (block.blockedUser.id === userToBeBlocked.id) {\n        throw new BadRequestException('User already blocked');\n      }\n    });\n\n    const newBlock = new Block();\n    newBlock.blockedUser = userToBeBlocked;\n    newBlock.blockingUser = blockingUser;\n\n    return await this.blockRepository.save(newBlock);\n  }\n\n  async unblockUser(id: string, user: any): Promise {\n    const userToBeUnblocked = await this.userRepository.findOneBy({ id: id });\n\n    if (!userToBeUnblocked) {\n      throw new BadRequestException('User not found');\n    }\n\n    if (userToBeUnblocked.id === user.id) {\n      throw new BadRequestException('You cannot unblock yourself');\n    }\n\n    const unblockingUser = await this.userRepository.findOne({\n      where: { id: user.id },\n      relations: ['blocks', 'blocks.blockedUser']\n    });\n\n    if (!unblockingUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    let userFound = false;\n    let blockId = '';\n\n    unblockingUser.blocks.map((block) => {\n      if (block.blockedUser.id === userToBeUnblocked.id) {\n        userFound = true;\n        blockId = block.id;\n      }\n    });\n\n    if (!userFound) {\n      throw new BadRequestException('User not blocked');\n    }\n\n    return await this.blockRepository.delete({ id: blockId });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Comment.html":{"url":"entities/Comment.html","title":"entity - Comment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/entities/comment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                id\n                            \n                            \n                                post\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.comments, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/comment.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/comment.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.comments, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/comment.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/comment.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from '../../user/entities/user.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Post } from './post.entity';\nimport { BaseEntity } from '../../../common/entities/base.entity';\n\n@Entity()\nexport class Comment extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  text: string;\n\n  //A comment can be made my one user but a user can have many comments\n  @ManyToOne(() => User, (user) => user.comments, {\n    onDelete: 'CASCADE'\n  })\n  author: User;\n\n  //A comment can be in one post but a post can have many comments\n  @ManyToOne(() => Post, (post) => post.comments, {\n    onDelete: 'CASCADE'\n  })\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/dto/comment-create.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MaxLength(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/comment-create.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, MaxLength } from 'class-validator';\n\nexport class CreateCommentDto {\n  @IsNotEmpty()\n  @MaxLength(100)\n  text: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/dto/post-create.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the DTO for creating a post\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                caption\n                            \n                            \n                                imageUrl\n                            \n                            \n                                location\n                            \n                            \n                                tag\n                            \n                            \n                                type\n                            \n                            \n                                visibility\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        caption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/post-create.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/post-create.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/post-create.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/post-create.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/post-create.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visibility\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Visibility\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Visibility)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/post-create.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty } from 'class-validator';\nimport { Visibility } from 'src/constants/visibility.enum';\n\n/**\n * This is the DTO for creating a post\n */\nexport class CreatePostDto {\n  @IsNotEmpty()\n  caption: string;\n\n  imageUrl: string;\n\n  @IsNotEmpty()\n  tag: string;\n\n  @IsNotEmpty()\n  type: string;\n\n  @IsNotEmpty()\n  location: string;\n\n  @IsEnum(Visibility)\n  @IsNotEmpty()\n  visibility: Visibility;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateScrapBookDto.html":{"url":"classes/CreateScrapBookDto.html","title":"class - CreateScrapBookDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateScrapBookDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/dto/scrapbook-create.dts.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the DTO for creating a scrapbook\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                caption\n                            \n                            \n                                location\n                            \n                            \n                                posts\n                            \n                            \n                                visibility\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        caption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/scrapbook-create.dts.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/scrapbook-create.dts.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/scrapbook-create.dts.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visibility\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Visibility\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Visibility)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/dto/scrapbook-create.dts.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty } from 'class-validator';\nimport { Visibility } from 'src/constants/visibility.enum';\nimport { Post } from '../entities/post.entity';\n\n/**\n * This is the DTO for creating a scrapbook\n */\nexport class CreateScrapBookDto {\n  @IsNotEmpty()\n  caption: string;\n\n  //Optional field\n  posts: Post[];\n\n  @IsNotEmpty()\n  location: string;\n\n  @IsEnum(Visibility)\n  @IsNotEmpty()\n  visibility: Visibility;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/encryption.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for encrypting and comparing passwords\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePasswords\n                            \n                            \n                                    Async\n                                encryptPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                    \n                    comparePasswords(password: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/encryption.service.ts:25\n                \n            \n\n\n            \n                \n                    Compares a password with a hashed password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the password to compare\n\n                                    \n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the hashed password to compare with\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        true if the passwords match, false otherwise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        encryptPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    encryptPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/encryption.service.ts:14\n                \n            \n\n\n            \n                \n                    Encrypts a password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the password to encrypt\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the encrypted password\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { hash, compare } from 'bcryptjs';\n\n/**\n * Service for encrypting and comparing passwords\n */\n@Injectable()\nexport class EncryptionService {\n  /**\n   * Encrypts a password\n   * @param password the password to encrypt\n   * @returns the encrypted password\n   */\n  async encryptPassword(password: string): Promise {\n    const SALT_FACTOR = 10;\n    return await hash(password, SALT_FACTOR);\n  }\n\n  /**\n   * Compares a password with a hashed password\n   * @param password the password to compare\n   * @param hashedPassword the hashed password to compare with\n   * @returns true if the passwords match, false otherwise\n   */\n  async comparePasswords(password: string, hashedPassword: string): Promise {\n    return await compare(password, hashedPassword);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FeedController.html":{"url":"controllers/FeedController.html","title":"controller - FeedController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FeedController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/feed/feed.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                feed\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getFeed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getFeed\n                        \n                    \n                \n            \n            \n                \ngetFeed(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/feed/feed.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpStatus, Res, UseGuards, Request, Query } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { Response } from 'express';\nimport { FeedService } from './feed.service';\nimport { PageOptionsDto } from 'src/common/dto/page-options.dto';\n\n@Controller('feed')\nexport class FeedController {\n  constructor(private feedService: FeedService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  getFeed(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.feedService\n      .getFeed(req.user, pageOptionsDto)\n      .then((posts) => {\n        return res.status(HttpStatus.OK).json(posts);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FeedModule.html":{"url":"modules/FeedModule.html","title":"module - FeedModule","body":"\n                   \n\n\n\n\n    Modules\n    FeedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FeedModule\n\n\n\ncluster_FeedModule_providers\n\n\n\n\nFeedService\n\nFeedService\n\n\n\nFeedModule\n\nFeedModule\n\nFeedModule -->\n\nFeedService->FeedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/feed/feed.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FeedService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FeedController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { User } from '../user/entities/user.entity';\nimport { FeedController } from './feed.controller';\nimport { FeedService } from './feed.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Post, User])],\n  controllers: [FeedController],\n  providers: [FeedService]\n})\nexport class FeedModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FeedService.html":{"url":"injectables/FeedService.html","title":"injectable - FeedService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FeedService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/feed/feed.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getFeed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/feed/feed.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFeed\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFeed(user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/feed/feed.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PageMetaDto } from 'src/common/dto/page-meta.dto';\nimport { PageOptionsDto } from 'src/common/dto/page-options.dto';\nimport { PageDto } from 'src/common/dto/page.dto';\nimport { Visibility } from 'src/constants/visibility.enum';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { User } from '../user/entities/user.entity';\n\n@Injectable()\nexport class FeedService {\n  constructor(\n    @InjectRepository(Post)\n    private postRepository: Repository,\n\n    @InjectRepository(User)\n    private userRepository: Repository\n  ) {}\n\n  async getFeed(user: any, pageOptionsDto: PageOptionsDto): Promise> {\n    const dbUser = await this.userRepository.findOne({\n      where: { id: user.id },\n      relations: [\n        'following',\n        'following.followed.posts',\n        'following.followed.posts.postedBy',\n        'following.followed.posts.likes',\n        'following.followed.posts.likes.likedBy',\n        'following.followed.posts.comments',\n        'following.followed.posts.comments.author'\n      ]\n    });\n\n    if (!dbUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    const publicPosts = await this.postRepository.find({\n      where: { visibility: Visibility.Public },\n      relations: ['postedBy', 'comments', 'likes', 'likes.likedBy', 'comments.author']\n    });\n\n    let posts = dbUser.following.map((user) => user.followed.posts)[0];\n\n    if (!posts) {\n      posts = [];\n    }\n\n    posts = posts\n      .concat(publicPosts)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n\n    const paginatedPosts = posts.slice(\n      (pageOptionsDto.page - 1) * pageOptionsDto.take,\n      pageOptionsDto.page * pageOptionsDto.take\n    );\n\n    const itemCount: number = posts.length;\n    const entities: Post[] = paginatedPosts;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseStorageService.html":{"url":"injectables/FirebaseStorageService.html","title":"injectable - FirebaseStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseStorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/firebase-storage.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Firebase Storage Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expiryDate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteAvatar\n                            \n                            \n                                    Async\n                                deletePostImage\n                            \n                            \n                                    Async\n                                getPostImageSignedURL\n                            \n                            \n                                    Async\n                                getSignedURL\n                            \n                            \n                                    Async\n                                updateAvatar\n                            \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadPostImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAvatar(imageId: any, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageId\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePostImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePostImage(imageId: any, userId: string, postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageId\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostImageSignedURL\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostImageSignedURL(imageId: any, userId: string, postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageId\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSignedURL\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSignedURL(userId: string, imageId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAvatar(image: any, previousImageId: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:50\n                \n            \n\n\n            \n                \n                    Update the user avatar\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the image to be uploaded\n\n                                    \n                                \n                                \n                                    previousImageId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the previous image\n\n                                    \n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the image id, url and expiry date of the new image\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(image: any, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:25\n                \n            \n\n\n            \n                \n                    Upload Avatar\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the image to be uploaded\n\n                                    \n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the id of the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        the image id, url and expiry date\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPostImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPostImage(image: any, userId: string, postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/firebase-storage.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expiryDate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Date.now() + 6 * 24 * 60 * 60 * 1000\n                    \n                \n                    \n                        \n                                Defined in src/common/services/firebase-storage.service.ts:16\n                        \n                    \n\n            \n                \n                    Expiry date for signed urls\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { bucket, storage } from './firebase-admin.service';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Injectable } from '@nestjs/common';\nimport { GetSignedUrlConfig } from '@google-cloud/storage';\n\n/**\n * Firebase Storage Service\n * @description This service is used to upload, delete and get signed urls for images\n */\n@Injectable()\nexport class FirebaseStorageService {\n  /**\n   * Expiry date for signed urls\n   * @description This is the expiry date for the signed urls, which is 6 days from now\n   */\n  expiryDate = Date.now() + 6 * 24 * 60 * 60 * 1000;\n\n  /**\n   * Upload Avatar\n   * @description This function is used to upload a new avatar image\n   * @param image the image to be uploaded\n   * @param userId the id of the user\n   * @returns the image id, url and expiry date\n   */\n  async uploadAvatar(image: any, userId: string) {\n    const imageId = uuidv4();\n\n    const file = bucket.file(`users/${userId}/avatars/${imageId}.png`);\n\n    await file.save(image);\n\n    const urlOptions: GetSignedUrlConfig = {\n      version: 'v4',\n      action: 'read',\n      expires: this.expiryDate\n    };\n\n    const [url] = await file.getSignedUrl(urlOptions);\n\n    return { imageId: imageId, url: url, expiryDate: this.expiryDate };\n  }\n\n  /**\n   * Update the user avatar\n   * @param image the image to be uploaded\n   * @param previousImageId the id of the previous image\n   * @param userId the id of the user\n   * @returns the image id, url and expiry date of the new image\n   */\n  async updateAvatar(image: any, previousImageId: string, userId: string) {\n    await this.deleteAvatar(previousImageId, userId);\n\n    const file = bucket.file(`users/${userId}/avatars/${previousImageId}.png`);\n\n    await file.save(image);\n\n    const urlOptions: GetSignedUrlConfig = {\n      version: 'v4',\n      action: 'read',\n      expires: this.expiryDate\n    };\n\n    const [url] = await file.getSignedUrl(urlOptions);\n\n    return { url: url, expiryDate: this.expiryDate };\n  }\n\n  async deleteAvatar(imageId: any, userId: string) {\n    const fileName = `users/${userId}/avatars/${imageId}.png`;\n\n    await storage\n      .bucket(process.env.FIREBASE_BUCKET_NAME)\n      .file(fileName)\n      .delete()\n      .catch((err) => {\n        throw err;\n      });\n  }\n\n  async uploadPostImage(image: any, userId: string, postId: string) {\n    const imageId = uuidv4();\n\n    const file = bucket.file(`users/${userId}/posts/${postId}/${imageId}.png`);\n\n    await file.save(image);\n\n    const urlOptions: GetSignedUrlConfig = {\n      version: 'v4',\n      action: 'read',\n      expires: this.expiryDate\n    };\n\n    const [url] = await file.getSignedUrl(urlOptions);\n\n    return { imageId: imageId, url: url, expiryDate: this.expiryDate };\n  }\n\n  async deletePostImage(imageId: any, userId: string, postId: string) {\n    const fileName = `users/${userId}/posts/${postId}/${imageId}.png`;\n\n    await storage\n      .bucket(process.env.FIREBASE_BUCKET_NAME)\n      .file(fileName)\n      .delete()\n      .catch((err) => {\n        throw err;\n      });\n  }\n\n  async getSignedURL(userId: string, imageId: string) {\n    // The name of the object for which you want a signed URL\n    const fileName = `users/${userId}/avatars/${imageId}.png`;\n    let imageUrl = '';\n\n    await storage\n      .bucket(process.env.FIREBASE_BUCKET_NAME)\n      .file(fileName)\n      .exists()\n      .then(async (exists) => {\n        if (exists[0]) {\n          const urlOptions: GetSignedUrlConfig = {\n            version: 'v4',\n            action: 'read',\n            expires: this.expiryDate\n          };\n\n          // Get a signed URL that allows temporary access to the object\n          const [url] = await storage\n            .bucket(process.env.FIREBASE_BUCKET_NAME)\n            .file(fileName)\n            .getSignedUrl(urlOptions);\n\n          imageUrl = url;\n        }\n      });\n    return { url: imageUrl, expiryDate: this.expiryDate };\n  }\n\n  async getPostImageSignedURL(imageId: any, userId: string, postId: string) {\n    const fileName = `users/${userId}/posts/${postId}/${imageId}.png`;\n\n    let imageUrl = '';\n    await storage\n      .bucket(process.env.FIREBASE_BUCKET_NAME)\n      .file(fileName)\n      .exists()\n      .then(async (exists) => {\n        if (exists[0]) {\n          const urlOptions: GetSignedUrlConfig = {\n            version: 'v4',\n            action: 'read',\n            expires: this.expiryDate\n          };\n\n          // Get a signed URL that allows temporary access to the object\n          const [url] = await storage\n            .bucket(process.env.FIREBASE_BUCKET_NAME)\n            .file(fileName)\n            .getSignedUrl(urlOptions);\n\n          imageUrl = url;\n        }\n      });\n    return { url: imageUrl, expiryDate: this.expiryDate };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Follow.html":{"url":"entities/Follow.html","title":"entity - Follow","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Follow\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/follow/entities/follow.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                followed\n                            \n                            \n                                followedBy\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        followed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.followers, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.following, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\n\n@Entity()\nexport class Follow extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  //the user doing the following\n  @ManyToOne(() => User, (user) => user.following, {\n    onDelete: 'CASCADE'\n  })\n  followedBy: User;\n\n  //the user being followed\n  @ManyToOne(() => User, (user) => user.followers, {\n    onDelete: 'CASCADE'\n  })\n  followed: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FollowController.html":{"url":"controllers/FollowController.html","title":"controller - FollowController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FollowController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/follow/follow.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                follow\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                acceptFollow\n                            \n                            \n                                    Async\n                                getFollowers\n                            \n                            \n                                    Async\n                                getFollowing\n                            \n                            \n                                    Async\n                                getFollowRequestsReceived\n                            \n                            \n                                    Async\n                                getFollowRequestsSent\n                            \n                            \n                                    Async\n                                rejectFollow\n                            \n                            \n                                    Async\n                                requestFollow\n                            \n                            \n                                    Async\n                                unfollow\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        acceptFollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    acceptFollow(req, res: Response, requestId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch('accept-follow/:requestId')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    requestId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowers(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('followers')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowing\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowing(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('following')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowRequestsReceived\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowRequestsReceived(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('follow-requests-received')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowRequestsSent\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowRequestsSent(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('follow-requests-sent')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        rejectFollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    rejectFollow(req, res: Response, requestId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch('reject-follow/:requestId')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    requestId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        requestFollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    requestFollow(req, res: Response, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('request-follow/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollow(req, res: Response, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete('unfollow/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/follow/follow.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UseGuards, Res, Request, Post, HttpStatus } from '@nestjs/common';\nimport { Delete, Get, Param, Patch, Query } from '@nestjs/common/decorators';\nimport { Response } from 'express';\nimport { PageOptionsDto } from 'src/common/dto/page-options.dto';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { FollowService } from './follow.service';\n\n@Controller('follow')\nexport class FollowController {\n  constructor(private followService: FollowService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Post('request-follow/:id')\n  async requestFollow(@Request() req, @Res() res: Response, @Param('id') id: string) {\n    this.followService\n      .requestFollow(id, req.user)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json(result);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  //Accept Follow\n  @UseGuards(JwtAuthGuard)\n  @Patch('accept-follow/:requestId')\n  async acceptFollow(@Request() req, @Res() res: Response, @Param('requestId') requestId: string) {\n    this.followService\n      .acceptFollow(requestId, req.user)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json(result);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  //Reject Follow\n  @UseGuards(JwtAuthGuard)\n  @Patch('reject-follow/:requestId')\n  async rejectFollow(@Request() req, @Res() res: Response, @Param('requestId') requestId: string) {\n    this.followService\n      .rejectFollow(requestId, req.user)\n      .then((_) => {\n        return res.status(HttpStatus.OK).json({ message: 'Follow request rejected' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  //Unfollow\n  @UseGuards(JwtAuthGuard)\n  @Delete('unfollow/:id')\n  async unfollow(@Request() req, @Res() res: Response, @Param('id') id: string) {\n    this.followService\n      .unfollow(id, req.user)\n      .then((_) => {\n        return res.status(HttpStatus.OK).json({ message: 'Unfollowed' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  //Get Followers\n  @UseGuards(JwtAuthGuard)\n  @Get('followers')\n  async getFollowers(\n    @Request() req,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.followService\n      .getFollowers(req.user, pageOptionsDto)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json(result);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  //Get Following\n  @UseGuards(JwtAuthGuard)\n  @Get('following')\n  async getFollowing(\n    @Request() req,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.followService\n      .getFollowing(req.user, pageOptionsDto)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json(result);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  //Get Follow Requests Received\n  @UseGuards(JwtAuthGuard)\n  @Get('follow-requests-received')\n  async getFollowRequestsReceived(\n    @Request() req,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.followService\n      .getFollowRequestsReceived(req.user, pageOptionsDto)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json(result);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  //Get Follow Requests Sent\n  @UseGuards(JwtAuthGuard)\n  @Get('follow-requests-sent')\n  async getFollowRequestsSent(\n    @Request() req,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.followService\n      .getFollowRequestsSent(req.user, pageOptionsDto)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json(result);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FollowModule.html":{"url":"modules/FollowModule.html","title":"module - FollowModule","body":"\n                   \n\n\n\n\n    Modules\n    FollowModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FollowModule\n\n\n\ncluster_FollowModule_providers\n\n\n\n\nFollowService\n\nFollowService\n\n\n\nFollowModule\n\nFollowModule\n\nFollowModule -->\n\nFollowService->FollowModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/follow/follow.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FollowService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FollowController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { FollowRequest } from './entities/follow-request.entity';\nimport { Follow } from './entities/follow.entity';\nimport { FollowController } from './follow.controller';\nimport { FollowService } from './follow.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Follow, FollowRequest])],\n  controllers: [FollowController],\n  providers: [FollowService]\n})\nexport class FollowModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/FollowRequest.html":{"url":"entities/FollowRequest.html","title":"entity - FollowRequest","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  FollowRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/follow/entities/follow-request.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                requestedBy\n                            \n                            \n                                requestedUser\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow-request.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        requestedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.followRequestsSent, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow-request.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        requestedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.followRequestsReceived, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow-request.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FollowStatus\n\n                    \n                \n                \n                    \n                        Default value : FollowStatus.Pending\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/follow/entities/follow-request.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { FollowStatus } from '../../../constants/follow-status.enum';\n\n@Entity()\nexport class FollowRequest extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ default: FollowStatus.Pending })\n  status: FollowStatus = FollowStatus.Pending;\n\n  //the user doing the following\n  @ManyToOne(() => User, (user) => user.followRequestsSent, {\n    onDelete: 'CASCADE'\n  })\n  requestedBy: User;\n\n  //the user being followed\n  @ManyToOne(() => User, (user) => user.followRequestsReceived, {\n    onDelete: 'CASCADE'\n  })\n  requestedUser: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FollowService.html":{"url":"injectables/FollowService.html","title":"injectable - FollowService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FollowService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/follow/follow.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                acceptFollow\n                            \n                            \n                                    Async\n                                getFollowers\n                            \n                            \n                                    Async\n                                getFollowing\n                            \n                            \n                                    Async\n                                getFollowRequestsReceived\n                            \n                            \n                                    Async\n                                getFollowRequestsSent\n                            \n                            \n                                    Async\n                                rejectFollow\n                            \n                            \n                                    Async\n                                requestFollow\n                            \n                            \n                                    Async\n                                unfollow\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, followRequestsRepository: Repository, followsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/follow/follow.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        followRequestsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        followsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        acceptFollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    acceptFollow(id: string, userToBeFollowed: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userToBeFollowed\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowers(user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowing\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowing(user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:176\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowRequestsReceived\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowRequestsReceived(user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:198\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowRequestsSent\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowRequestsSent(user: any, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:219\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        rejectFollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    rejectFollow(id: string, userToBeFollowed: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userToBeFollowed\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        requestFollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    requestFollow(id: string, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollow\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollow(id: string, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/follow/follow.service.ts:240\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, ForbiddenException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PageMetaDto } from 'src/common/dto/page-meta.dto';\nimport { PageOptionsDto } from 'src/common/dto/page-options.dto';\nimport { PageDto } from 'src/common/dto/page.dto';\nimport { FollowStatus } from 'src/constants/follow-status.enum';\nimport { DeleteResult, Repository, UpdateResult } from 'typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { FollowRequest } from './entities/follow-request.entity';\nimport { Follow } from './entities/follow.entity';\n\n@Injectable()\nexport class FollowService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n\n    @InjectRepository(FollowRequest)\n    private followRequestsRepository: Repository,\n\n    @InjectRepository(Follow)\n    private followsRepository: Repository\n  ) {}\n\n  async requestFollow(id: string, user: any): Promise {\n    const userToBeFollowed = await this.usersRepository.findOneBy({ id: id });\n\n    const userRequestingFollow = await this.usersRepository.findOne({\n      where: { id: user.id },\n      relations: [\n        'following',\n        'following.followed',\n        'followRequestsSent',\n        'followRequestsSent.requestedUser'\n      ]\n    });\n\n    if (!userToBeFollowed) {\n      throw new BadRequestException('User not found');\n    }\n\n    if (!userRequestingFollow) {\n      throw new BadRequestException('User not found');\n    }\n\n    if (userToBeFollowed.id === userRequestingFollow.id) {\n      throw new BadRequestException('You cannot follow yourself');\n    }\n\n    userRequestingFollow.followRequestsSent.map((followRequest) => {\n      if (\n        followRequest.requestedUser.id === userToBeFollowed.id &&\n        followRequest.status === FollowStatus.Pending\n      ) {\n        throw new BadRequestException('You already request to follow this user');\n      }\n    });\n\n    userRequestingFollow.following.map((follow) => {\n      if (follow.followed.id === userToBeFollowed.id) {\n        throw new BadRequestException('You are already following this user');\n      }\n    });\n\n    const followRequest = new FollowRequest();\n    followRequest.requestedBy = user;\n    followRequest.requestedUser = userToBeFollowed;\n\n    return await this.followRequestsRepository.save(followRequest);\n  }\n\n  async acceptFollow(id: string, userToBeFollowed: any): Promise {\n    const followRequest = await this.followRequestsRepository.findOne({\n      where: { id: id },\n      relations: ['requestedBy', 'requestedUser']\n    });\n\n    if (!followRequest) {\n      throw new BadRequestException('Follow request not found');\n    }\n\n    if (followRequest.requestedUser.id !== userToBeFollowed.id) {\n      throw new ForbiddenException('You cannot accept this follow request');\n    }\n\n    if (!followRequest.requestedBy) {\n      throw new BadRequestException('Follow request is no longer valid');\n    }\n\n    if (followRequest.status === FollowStatus.Accepted) {\n      throw new BadRequestException('This follow request has already been accepted');\n    }\n\n    if (followRequest.status === FollowStatus.Rejected) {\n      throw new BadRequestException('This follow request has been rejected');\n    }\n\n    await this.followRequestsRepository.update(followRequest.id, { status: FollowStatus.Accepted });\n\n    const follow = new Follow();\n    follow.followedBy = followRequest.requestedBy;\n    follow.followed = followRequest.requestedUser;\n\n    const followedBy = await this.usersRepository.findOne({\n      where: { id: follow.followedBy.id }\n    });\n\n    followedBy.followingCount = followedBy.followingCount + 1;\n\n    await this.usersRepository.save(followedBy);\n\n    const followed = await this.usersRepository.findOne({\n      where: { id: follow.followed.id }\n    });\n\n    followed.followersCount = followed.followersCount + 1;\n\n    await this.usersRepository.save(followed);\n\n    return await this.followsRepository.save(follow);\n  }\n\n  async rejectFollow(id: string, userToBeFollowed: any): Promise {\n    const followRequest = await this.followRequestsRepository.findOne({\n      where: { id: id },\n      relations: ['requestedBy', 'requestedUser']\n    });\n\n    if (!followRequest) {\n      throw new BadRequestException('Follow request not found');\n    }\n\n    if (followRequest.requestedUser.id !== userToBeFollowed.id) {\n      throw new ForbiddenException('You cannot reject this follow request');\n    }\n\n    if (!followRequest.requestedBy) {\n      throw new BadRequestException('Follow request is no longer valid');\n    }\n\n    if (followRequest.status === FollowStatus.Accepted) {\n      throw new BadRequestException('This follow request has been accepted');\n    }\n\n    if (followRequest.status === FollowStatus.Rejected) {\n      throw new BadRequestException('This follow request has already been rejected');\n    }\n\n    return this.followRequestsRepository.update(followRequest.id, {\n      status: FollowStatus.Rejected\n    });\n  }\n\n  async getFollowers(user: any, pageOptionsDto: PageOptionsDto): Promise> {\n    const dbUser = await this.usersRepository.findOne({\n      where: { id: user.id },\n      relations: ['followers', 'followers.followedBy']\n    });\n\n    if (!dbUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    const users = dbUser.followers.map((follow) => {\n      return follow.followedBy;\n    });\n\n    const itemCount: number = users.length;\n    const entities: User[] = users;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async getFollowing(user: any, pageOptionsDto: PageOptionsDto): Promise> {\n    const dbUser = await this.usersRepository.findOne({\n      where: { id: user.id },\n      relations: ['following', 'following.followed']\n    });\n\n    if (!dbUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    const users = dbUser.following.map((follow) => {\n      return follow.followed;\n    });\n\n    const itemCount: number = users.length;\n    const entities: User[] = users;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async getFollowRequestsReceived(\n    user: any,\n    pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const dbUser = await this.usersRepository.findOne({\n      where: { id: user.id },\n      relations: ['followRequestsReceived', 'followRequestsReceived.requestedBy']\n    });\n\n    if (!dbUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    const itemCount: number = dbUser.followRequestsReceived.length;\n    const entities: FollowRequest[] = dbUser.followRequestsReceived;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async getFollowRequestsSent(\n    user: any,\n    pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const dbUser = await this.usersRepository.findOne({\n      where: { id: user.id },\n      relations: ['followRequestsSent', 'followRequestsSent.requestedUser']\n    });\n\n    if (!dbUser) {\n      throw new BadRequestException('User not found');\n    }\n\n    const itemCount: number = dbUser.followRequestsSent.length;\n    const entities: FollowRequest[] = dbUser.followRequestsSent;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async unfollow(id: string, user: any): Promise {\n    const userToBeUnfollowed = await this.usersRepository.findOneBy({ id: id });\n    const userRequestingUnfollow = await this.usersRepository.findOne({\n      where: { id: user.id },\n      relations: ['following', 'following.followed']\n    });\n\n    if (!userToBeUnfollowed) {\n      throw new BadRequestException('User not found');\n    }\n\n    if (!userRequestingUnfollow) {\n      throw new BadRequestException('User not found');\n    }\n\n    if (userToBeUnfollowed.id === userRequestingUnfollow.id) {\n      throw new BadRequestException('You cannot unfollow yourself');\n    }\n\n    let isFollowing = false;\n    let followId = '';\n\n    userRequestingUnfollow.following.map((follow) => {\n      if (follow.followed.id === userToBeUnfollowed.id) {\n        isFollowing = true;\n        followId = follow.id;\n      }\n    });\n\n    if (!isFollowing) {\n      throw new BadRequestException('You are not following this user');\n    }\n\n    userToBeUnfollowed.followersCount = userToBeUnfollowed.followersCount - 1;\n    userRequestingUnfollow.followingCount = userRequestingUnfollow.followingCount - 1;\n\n    await this.usersRepository.save(userToBeUnfollowed);\n    await this.usersRepository.save(userRequestingUnfollow);\n\n    return this.followsRepository.delete(followId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategies/jwt.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport jwtConfig from '../constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      //Extract the token from the authorization header\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      //Ensure that the token has not expired\n      ignoreExpiration: false,\n      //Use the secret to verify the token\n      secretOrKey: jwtConfig.secret\n    });\n  }\n\n  //Invoked after Passport has verified the token\n  async validate(payload: any) {\n    return { id: payload.sub, email: payload.email, role: payload.role };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Like.html":{"url":"entities/Like.html","title":"entity - Like","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Like\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/entities/post-like.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                likedBy\n                            \n                            \n                                likedPost\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post-like.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.likes, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post-like.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likedPost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.likes, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post-like.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { User } from '../../user/entities/user.entity';\nimport { Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Post } from './post.entity';\n\n@Entity()\nexport class Like extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @ManyToOne(() => Post, (post) => post.likes, {\n    onDelete: 'CASCADE'\n  })\n  likedPost: Post;\n\n  //A like can only be liked by one user but a user can have many likes\n  @ManyToOne(() => User, (user) => user.likes, {\n    onDelete: 'CASCADE'\n  })\n  likedBy: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/local.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Local strategy for passport\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/local.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategies/local.strategy.ts:21\n                \n            \n\n\n            \n                \n                    Validates the user using password\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        email of the user\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        password input by the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the user details or throws an UnauthorizedException if the user is not found or has an invalid password\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\n\n/**\n * Local strategy for passport\n */\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  /**\n   * Validates the user using password\n   * @param email email of the user\n   * @param password password input by the user\n   * @returns the user details or throws an UnauthorizedException if the user is not found or has an invalid password\n   */\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationController.html":{"url":"controllers/NotificationController.html","title":"controller - NotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notification/notification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                notification\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendNotificationToAll\n                            \n                            \n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendNotificationToAll\n                        \n                    \n                \n            \n            \n                \nsendNotificationToAll(req, res: Response, body: SendNotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Post('send')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/notification/notification.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                SendNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signup\n                        \n                    \n                \n            \n            \n                \nsignup(req, res: Response, fcmToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('signup/:fcmToken')\n                \n            \n\n            \n                \n                    Defined in src/modules/notification/notification.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fcmToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UseGuards, Post, Res, Param, Request, HttpStatus, Body } from '@nestjs/common';\nimport { Response } from 'express';\nimport { Role } from 'src/constants/role.enum';\nimport { Roles } from 'src/decorators/roles.decorator';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { SendNotificationDto } from './dto/send-message.dto';\nimport { NotificationService } from './notification.service';\n\n@Controller('notification')\nexport class NotificationController {\n  constructor(private notificationService: NotificationService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Post('signup/:fcmToken')\n  signup(@Request() req, @Res() res: Response, @Param('fcmToken') fcmToken: string) {\n    this.notificationService\n      .signup(req.user, fcmToken)\n      .then(() => {\n        return res.status(HttpStatus.OK).json({ message: 'FCM token saved' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Post('send')\n  @Roles(Role.Admin)\n  sendNotificationToAll(@Request() req, @Res() res: Response, @Body() body: SendNotificationDto) {\n    this.notificationService\n      .sendNotification(body)\n      .then(() => {\n        return res.status(HttpStatus.OK).json({ message: 'Notification sent' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationModule.html":{"url":"modules/NotificationModule.html","title":"module - NotificationModule","body":"\n                   \n\n\n\n\n    Modules\n    NotificationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_NotificationModule\n\n\n\ncluster_NotificationModule_exports\n\n\n\ncluster_NotificationModule_providers\n\n\n\n\nNotificationService \n\nNotificationService \n\n\n\nNotificationModule\n\nNotificationModule\n\nNotificationService  -->\n\nNotificationModule->NotificationService \n\n\n\n\n\nNotificationService\n\nNotificationService\n\nNotificationModule -->\n\nNotificationService->NotificationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/notification/notification.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NotificationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NotificationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NotificationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { NotificationController } from './notification.controller';\nimport { NotificationService } from './notification.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [NotificationController],\n  providers: [NotificationService],\n  exports: [NotificationService]\n})\nexport class NotificationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notification/notification.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendNotification\n                            \n                            \n                                    Async\n                                sendNotificationToAll\n                            \n                            \n                                    Async\n                                sendNotificationToCelebrities\n                            \n                            \n                                    Async\n                                sendNotificationToInfluencers\n                            \n                            \n                                    Async\n                                sendNotificationToOne\n                            \n                            \n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/notification/notification.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendNotification(sendNotificationDto: SendNotificationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notification/notification.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sendNotificationDto\n                                    \n                                                SendNotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendNotificationToAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendNotificationToAll(title: string, body: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notification/notification.service.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendNotificationToCelebrities\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendNotificationToCelebrities(title: string, body: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notification/notification.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendNotificationToInfluencers\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendNotificationToInfluencers(title: string, body: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notification/notification.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendNotificationToOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendNotificationToOne(title: string, body: string, userId)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notification/notification.service.ts:189\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signup\n                        \n                    \n                \n            \n            \n                \nsignup(user: any, fcmToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/notification/notification.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fcmToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Not, Repository, UpdateResult } from 'typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { messaging } from '../../common/services/firebase-admin.service';\nimport { SendNotificationDto } from './dto/send-message.dto';\nimport { NotificationTargetGroup } from 'src/constants/notification-target-group.enum';\nimport { NotificationPreference } from 'src/constants/notification-preference.enum';\nimport { Role } from 'src/constants/role.enum';\n\n@Injectable()\nexport class NotificationService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository\n  ) {}\n\n  signup(user: any, fcmToken: string): Promise {\n    return this.usersRepository.update(user.id, { fcmToken: fcmToken });\n  }\n\n  async sendNotification(sendNotificationDto: SendNotificationDto): Promise {\n    if (sendNotificationDto.targetGroup === NotificationTargetGroup.SingleUser) {\n      if (!sendNotificationDto.targetUserId) {\n        throw new BadRequestException('Target User ID is required');\n      }\n      return await this.sendNotificationToOne(\n        sendNotificationDto.title,\n        sendNotificationDto.body,\n        sendNotificationDto.targetUserId\n      );\n    }\n    if (sendNotificationDto.targetGroup === NotificationTargetGroup.All) {\n      return await this.sendNotificationToAll(sendNotificationDto.title, sendNotificationDto.body);\n    }\n    if (sendNotificationDto.targetGroup === NotificationTargetGroup.Celebrity) {\n      return await this.sendNotificationToCelebrities(\n        sendNotificationDto.title,\n        sendNotificationDto.body\n      );\n    }\n    if (sendNotificationDto.targetGroup === NotificationTargetGroup.Influencers) {\n      return await this.sendNotificationToInfluencers(\n        sendNotificationDto.title,\n        sendNotificationDto.body\n      );\n    }\n  }\n\n  async sendNotificationToCelebrities(title: string, body: string): Promise {\n    const usersToBeNotified = await this.usersRepository.find({\n      where: [\n        {\n          fcmToken: Not(''),\n          role: Role.Celebrity,\n          notificationPreference: NotificationPreference.SelectedGroup\n        },\n        {\n          fcmToken: Not(''),\n          role: Role.Celebrity,\n          notificationPreference: NotificationPreference.All\n        }\n      ]\n    });\n\n    if (usersToBeNotified.length === 0) {\n      throw new BadRequestException('No users to be notified');\n    }\n\n    const fcmTokens = usersToBeNotified.map((user) => {\n      return user.fcmToken;\n    });\n\n    if (usersToBeNotified.length == 1) {\n      const payload = {\n        notification: {\n          title: title,\n          body: body\n        },\n        token: fcmTokens[0]\n      };\n\n      return messaging.send(payload);\n    }\n\n    const payload = {\n      notification: {\n        title: title,\n        body: body\n      },\n      tokens: fcmTokens\n    };\n\n    return messaging.sendMulticast(payload);\n  }\n\n  async sendNotificationToInfluencers(title: string, body: string): Promise {\n    const usersToBeNotified = await this.usersRepository.find({\n      where: [\n        {\n          fcmToken: Not(''),\n          role: Role.Influencer,\n          notificationPreference: NotificationPreference.SelectedGroup\n        },\n        {\n          fcmToken: Not(''),\n          role: Role.Influencer,\n          notificationPreference: NotificationPreference.All\n        }\n      ]\n    });\n\n    if (usersToBeNotified.length === 0) {\n      throw new BadRequestException('No users to be notified');\n    }\n\n    const fcmTokens = usersToBeNotified.map((user) => {\n      return user.fcmToken;\n    });\n\n    if (usersToBeNotified.length == 1) {\n      const payload = {\n        notification: {\n          title: title,\n          body: body\n        },\n        token: fcmTokens[0]\n      };\n\n      return messaging.send(payload);\n    }\n\n    const payload = {\n      notification: {\n        title: title,\n        body: body\n      },\n      tokens: fcmTokens\n    };\n\n    return messaging.sendMulticast(payload);\n  }\n\n  async sendNotificationToAll(title: string, body: string): Promise {\n    const usersToBeNotified = await this.usersRepository.find({\n      where: [\n        {\n          fcmToken: Not(''),\n          notificationPreference: NotificationPreference.Broadcast\n        },\n        {\n          fcmToken: Not(''),\n          notificationPreference: NotificationPreference.All\n        }\n      ]\n    });\n\n    if (usersToBeNotified.length === 0) {\n      throw new BadRequestException('No users to be notified');\n    }\n\n    const fcmTokens = usersToBeNotified.map((user) => {\n      return user.fcmToken;\n    });\n\n    if (usersToBeNotified.length == 1) {\n      const payload = {\n        notification: {\n          title: title,\n          body: body\n        },\n        token: fcmTokens[0]\n      };\n\n      return messaging.send(payload);\n    }\n\n    const payload = {\n      notification: {\n        title: title,\n        body: body\n      },\n      tokens: fcmTokens\n    };\n\n    return messaging.sendMulticast(payload);\n  }\n\n  async sendNotificationToOne(title: string, body: string, userId): Promise {\n    const userToBeNotified = await this.usersRepository.findOne({\n      where: {\n        id: userId,\n        fcmToken: Not(''),\n        notificationPreference: Not(NotificationPreference.None)\n      }\n    });\n\n    if (!userToBeNotified) {\n      throw new BadRequestException('No user to be notified');\n    }\n\n    const payload = {\n      notification: {\n        title: title,\n        body: body\n      },\n      token: userToBeNotified.fcmToken\n    };\n\n    return messaging.send(payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDto.html":{"url":"classes/PageDto.html","title":"class - PageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/page.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PageDto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/common/dto/page.dto.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray } from 'class-validator';\nimport { PageMetaDto } from './page-meta.dto';\n\n/**\n * PageDto\n * @description Data transfer object for paginated data\n */\nexport class PageDto {\n  @IsArray()\n  readonly data: T[];\n\n  readonly meta: PageMetaDto;\n\n  constructor(data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageMetaDto.html":{"url":"classes/PageMetaDto.html","title":"class - PageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/page-meta.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PageMetaDto is a class that represents the metadata of a paginated list.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                            \n                                    Readonly\n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaDtoParameters)\n                    \n                \n                        \n                            \n                                Defined in src/common/dto/page-meta.dto.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaDtoParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-meta.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-meta.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-meta.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-meta.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-meta.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-meta.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageMetaDtoParameters } from './page-meta-parameters.dto';\n\n/**\n * PageMetaDto is a class that represents the metadata of a paginated list.\n */\nexport class PageMetaDto {\n  readonly page: number;\n  readonly take: number;\n  readonly itemCount: number;\n  readonly pageCount: number;\n  readonly hasPreviousPage: boolean;\n  readonly hasNextPage: boolean;\n\n  constructor({ pageOptionsDto, itemCount }: PageMetaDtoParameters) {\n    this.page = pageOptionsDto.page;\n    this.take = pageOptionsDto.take;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.take);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageMetaDtoParameters.html":{"url":"interfaces/PageMetaDtoParameters.html","title":"interface - PageMetaDtoParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageMetaDtoParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/page-meta-parameters.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PageMetaDtoParameters\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PageOptionsDto } from './page-options.dto';\n\n/**\n * PageMetaDtoParameters\n * @description Page meta parameters, used to generate page meta\n */\nexport interface PageMetaDtoParameters {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageOptionsDto.html":{"url":"classes/PageOptionsDto.html","title":"class - PageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/page-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PageOptionsDto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                order\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order\n\n                    \n                \n                \n                    \n                        Default value : Order.ASC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Order)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-options.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-options.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)@Max(50)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/page-options.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dto/page-options.dto.ts:37\n                                \n                            \n                    \n                        \n\n                                \n                                \n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { IsEnum, IsInt, IsOptional, Max, Min } from 'class-validator';\nimport { Order } from 'src/constants/order.enum';\n\n/**\n * PageOptionsDto\n * @description Page options DTO, used for pagination and is passed by the frontend\n * @description The default values are set to 1, 10 and ASC\n */\nexport class PageOptionsDto {\n  /**\n   * @description The order of the results\n   */\n  @IsEnum(Order)\n  @IsOptional()\n  readonly order?: Order = Order.ASC;\n\n  /**\n   * @description The page number\n   */\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  /**\n   * @description The number of results per page\n   */\n  @IsInt()\n  @Min(1)\n  @Max(50)\n  @IsOptional()\n  readonly take?: number = 10;\n\n  /**\n   * @description The number of results to skip\n   */\n  get skip(): number {\n    return (this.page - 1) * this.take;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PaymentController.html":{"url":"controllers/PaymentController.html","title":"controller - PaymentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PaymentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/payment/payment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                payment\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                invoicingWebHook\n                            \n                            \n                                    Async\n                                paymentCancel\n                            \n                            \n                                    Async\n                                paymentSuccess\n                            \n                            \n                                    Async\n                                subscribe\n                            \n                            \n                                    Async\n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        invoicingWebHook\n                        \n                    \n                \n            \n            \n                \n                    \n                    invoicingWebHook(req: RawBodyRequest, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('invoicing-webhook')\n                \n            \n\n            \n                \n                    Defined in src/modules/payment/payment.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            RawBodyRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paymentCancel\n                        \n                    \n                \n            \n            \n                \n                    \n                    paymentCancel(req, res: Response, sessionId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('cancel')\n                \n            \n\n            \n                \n                    Defined in src/modules/payment/payment.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sessionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paymentSuccess\n                        \n                    \n                \n            \n            \n                \n                    \n                    paymentSuccess(req, res: Response, sessionId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('success')\n                \n            \n\n            \n                \n                    Defined in src/modules/payment/payment.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sessionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                    \n                    subscribe(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('subscribe')\n                \n            \n\n            \n                \n                    Defined in src/modules/payment/payment.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unsubscribe\n                        \n                    \n                \n            \n            \n                \n                    \n                    unsubscribe(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('unsubscribe')\n                \n            \n\n            \n                \n                    Defined in src/modules/payment/payment.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  UseGuards,\n  Res,\n  Request,\n  Post,\n  HttpStatus,\n  RawBodyRequest,\n  Req\n} from '@nestjs/common';\nimport { Get, Query } from '@nestjs/common/decorators';\nimport { Response } from 'express';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { PaymentService } from './payment.service';\n\n@Controller('payment')\nexport class PaymentController {\n  constructor(private readonly paymentService: PaymentService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Post('subscribe')\n  async subscribe(@Request() req, @Res() res: Response) {\n    this.paymentService\n      .subscribe(req.user)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json({ message: 'Payment success', url: result });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('unsubscribe')\n  async unsubscribe(@Request() req, @Res() res: Response) {\n    this.paymentService\n      .unsubscribe(req.user)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json({ message: 'Payment success', url: result });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @Get('success')\n  async paymentSuccess(\n    @Request() req,\n    @Res() res: Response,\n    @Query('session_id') sessionId: string\n  ) {\n    this.paymentService\n      .paymentSuccess(sessionId)\n      .then(() => {\n        return res.status(HttpStatus.OK).json({ message: 'Payment success' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @Get('cancel')\n  async paymentCancel(\n    @Request() req,\n    @Res() res: Response,\n    @Query('session_id') sessionId: string\n  ) {\n    this.paymentService\n      .paymentCancel(sessionId)\n      .then(() => {\n        return res.status(HttpStatus.OK).json({ message: 'Payment Failed' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @Post('invoicing-webhook')\n  async invoicingWebHook(@Req() req: RawBodyRequest, @Res() res: Response) {\n    this.paymentService\n      .invoicingWebHook(req.headers['stripe-signature'], req.rawBody)\n      .then((result) => {\n        return res.status(HttpStatus.OK).json({ message: result });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentModule.html":{"url":"modules/PaymentModule.html","title":"module - PaymentModule","body":"\n                   \n\n\n\n\n    Modules\n    PaymentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PaymentModule\n\n\n\ncluster_PaymentModule_imports\n\n\n\ncluster_PaymentModule_providers\n\n\n\n\nNotificationModule\n\nNotificationModule\n\n\n\nPaymentModule\n\nPaymentModule\n\nPaymentModule -->\n\nNotificationModule->PaymentModule\n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/payment/payment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaymentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PaymentController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            NotificationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { NotificationModule } from '../notification/notification.module';\nimport { User } from '../user/entities/user.entity';\nimport { PaymentController } from './payment.controller';\nimport { PaymentService } from './payment.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), NotificationModule],\n  controllers: [PaymentController],\n  providers: [PaymentService]\n})\nexport class PaymentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaymentService.html":{"url":"injectables/PaymentService.html","title":"injectable - PaymentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaymentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/payment/payment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                endpointSecret\n                            \n                            \n                                    Private\n                                stripe\n                            \n                            \n                                    Private\n                                url\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                invoicingWebHook\n                            \n                            \n                                    Async\n                                paymentCancel\n                            \n                            \n                                    Async\n                                paymentSuccess\n                            \n                            \n                                    Async\n                                subscribe\n                            \n                            \n                                    Async\n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, notificationService: NotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/payment/payment.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notificationService\n                                                  \n                                                        \n                                                                        NotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        invoicingWebHook\n                        \n                    \n                \n            \n            \n                \n                    \n                    invoicingWebHook(stripeSignature: any, body: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/payment/payment.service.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stripeSignature\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paymentCancel\n                        \n                    \n                \n            \n            \n                \n                    \n                    paymentCancel(sessionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/payment/payment.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sessionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paymentSuccess\n                        \n                    \n                \n            \n            \n                \n                    \n                    paymentSuccess(sessionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/payment/payment.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sessionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                    \n                    subscribe(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/payment/payment.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unsubscribe\n                        \n                    \n                \n            \n            \n                \n                    \n                    unsubscribe(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/payment/payment.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        endpointSecret\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env?.STRIPE_WEBHOOK_SECRET\n                    \n                \n                    \n                        \n                                Defined in src/modules/payment/payment.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stripe\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Stripe(process.env?.STRIPE_TEST_KEY, {\n    apiVersion: '2022-11-15'\n  })\n                    \n                \n                    \n                        \n                                Defined in src/modules/payment/payment.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '10.6.152.189'\n                    \n                \n                    \n                        \n                                Defined in src/modules/payment/payment.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, NotFoundException } from '@nestjs/common';\nimport Stripe from 'stripe';\nimport * as dotenv from 'dotenv';\nimport { User } from '../user/entities/user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, UpdateResult } from 'typeorm';\nimport { SubscriptionPlan } from 'src/constants/subscription-plan.enum';\nimport { NotificationService } from '../notification/notification.service';\ndotenv.config();\n\n@Injectable()\nexport class PaymentService {\n  private stripe = new Stripe(process.env?.STRIPE_TEST_KEY, {\n    apiVersion: '2022-11-15'\n  });\n\n  private endpointSecret = process.env?.STRIPE_WEBHOOK_SECRET;\n\n  private url = '10.6.152.189';\n\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository,\n    private readonly notificationService: NotificationService\n  ) {}\n\n  async subscribe(user: User): Promise {\n    const dbUser = await this.userRepository.findOne({ where: { id: user.id } });\n\n    if (!dbUser) {\n      throw new NotFoundException('User not found');\n    }\n\n    let newUser = false;\n    let customer: Stripe.Customer;\n\n    if (dbUser.subscriptionPlan === SubscriptionPlan.Basic && dbUser.hasStripAccount === false) {\n      customer = await this.stripe.customers.create({\n        email: dbUser.email,\n        name: `${dbUser.firstName} ${dbUser.lastName}`,\n        phone: dbUser.phoneNumber\n      });\n\n      newUser = true;\n\n      await this.userRepository.update(dbUser.id, {\n        stripeCustomerId: customer.id,\n        hasStripAccount: true\n      });\n    }\n\n    if (dbUser.subscriptionPlan === SubscriptionPlan.Premium && dbUser.hasStripAccount === true) {\n      throw new BadRequestException('User already has an active subscription');\n    }\n\n    const session = await this.stripe.checkout.sessions.create({\n      mode: 'subscription',\n      payment_method_types: ['card'],\n      customer: newUser ? customer.id : dbUser.stripeCustomerId,\n      currency: 'aed',\n      line_items: [\n        {\n          price: 'price_1MThM0B4qQTC27uczOVeMOlz',\n          quantity: 1\n        }\n      ],\n      success_url: `http://${this.url}:3000/payment/success?session_id={CHECKOUT_SESSION_ID}`,\n      cancel_url: `http://${this.url}:3000/payment/cancel?session_id={CHECKOUT_SESSION_ID}`\n    });\n\n    return session.url;\n  }\n\n  async unsubscribe(user: User): Promise {\n    const dbUser = await this.userRepository.findOne({ where: { id: user.id } });\n\n    if (!dbUser) {\n      throw new NotFoundException('User not found');\n    }\n\n    if (\n      !(dbUser.subscriptionPlan === SubscriptionPlan.Premium && dbUser.hasStripAccount === true)\n    ) {\n      throw new BadRequestException(\"User doesn't have an active subscription\");\n    }\n\n    const subscriptions = await this.stripe.subscriptions.list({\n      customer: dbUser.stripeCustomerId\n    });\n\n    for (let i = 0; i  {\n    const session = await this.stripe.checkout.sessions.retrieve(sessionId);\n    const customer = await this.stripe.customers.retrieve(session.customer as string);\n\n    return this.userRepository\n      .createQueryBuilder()\n      .update(User)\n      .set({ subscriptionPlan: SubscriptionPlan.Premium })\n      .where('stripeCustomerId = :stripeCustomerId', { stripeCustomerId: customer.id })\n      .execute();\n  }\n\n  async paymentCancel(sessionId: string): Promise {\n    const session = await this.stripe.checkout.sessions.retrieve(sessionId);\n    const customer = await this.stripe.customers.retrieve(session.customer as string);\n\n    return this.userRepository\n      .createQueryBuilder()\n      .update(User)\n      .set({ subscriptionPlan: SubscriptionPlan.Basic })\n      .where('stripeCustomerId = :stripeCustomerId', { stripeCustomerId: customer.id })\n      .execute();\n  }\n\n  async invoicingWebHook(stripeSignature: any, body: any) {\n    let event;\n    try {\n      event = this.stripe.webhooks.constructEvent(body, stripeSignature, this.endpointSecret);\n    } catch (err) {\n      return new BadRequestException(`Webhook Error: ${err.message}`);\n    }\n\n    switch (event.type) {\n      case 'invoice.payment_succeeded':\n        const paymentSuccessedEvent = event.data.object;\n\n        const successCustomer = await this.stripe.customers.retrieve(\n          paymentSuccessedEvent.customer as string\n        );\n\n        const successUser = await this.userRepository.findOne({\n          where: { stripeCustomerId: successCustomer.id }\n        });\n\n        if (!successUser) {\n          return;\n        }\n\n        this.userRepository.update(successUser.id, { subscriptionPlan: SubscriptionPlan.Premium });\n\n        this.notificationService\n          .sendNotificationToOne('Payment Successful', 'Thank you for your payment', successUser.id)\n          .catch((err) => {\n            console.log(err);\n          });\n        break;\n      case 'invoice.payment_failed':\n        const paymentFailedEvent = event.data.object;\n\n        const failCustomer = await this.stripe.customers.retrieve(\n          paymentFailedEvent.customer as string\n        );\n\n        const failUser = await this.userRepository.findOne({\n          where: { stripeCustomerId: failCustomer.id }\n        });\n\n        if (!failUser) {\n          return;\n        }\n\n        this.userRepository.update(failUser.id, { subscriptionPlan: SubscriptionPlan.Basic });\n\n        this.notificationService\n          .sendNotificationToOne(\n            'Payment Unsuccessful',\n            'There was an error in your payment',\n            failUser.id\n          )\n          .catch((err) => {\n            console.log(err);\n          });\n        break;\n      case 'customer.subscription.deleted':\n        const subscriptionDeletedEvent = event.data.object;\n\n        const deletedCustomer = await this.stripe.customers.retrieve(\n          subscriptionDeletedEvent.customer as string\n        );\n\n        const deletedUser = await this.userRepository.findOne({\n          where: { stripeCustomerId: deletedCustomer.id }\n        });\n\n        if (!deletedUser) {\n          return;\n        }\n\n        this.userRepository.update(deletedUser.id, { subscriptionPlan: SubscriptionPlan.Basic });\n\n        this.notificationService\n          .sendNotificationToOne(\n            'Unsubscribed Successfully',\n            'We are sorry to see you go',\n            deletedUser.id\n          )\n          .catch((err) => {\n            console.log(err);\n          });\n        break;\n      default:\n        console.log(`Unhandled event type ${event.type}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/entities/post.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class is the class that represents the User table in the database\nThis is how we interact with the database table in the application\nNo need for SQL quesries\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                appeals\n                            \n                            \n                                caption\n                            \n                            \n                                comments\n                            \n                            \n                                id\n                            \n                            \n                                imageExpiryDate\n                            \n                            \n                                imageId\n                            \n                            \n                                imageUrl\n                            \n                            \n                                isTakenDown\n                            \n                            \n                                likes\n                            \n                            \n                                likesCount\n                            \n                            \n                                location\n                            \n                            \n                                postedBy\n                            \n                            \n                                reportsAgainst\n                            \n                            \n                                scrapbook\n                            \n                            \n                                tag\n                            \n                            \n                                type\n                            \n                            \n                                visibility\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        appeals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Appeal[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, appeal => appeal.appealedPost)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        caption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.post)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageExpiryDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'longtext'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTakenDown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Like[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, like => like.likedPost)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likesCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportsAgainst\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PostReport[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, postReport => postReport.reportedPost)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scrapbook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Scrapbook\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, scrapbook => scrapbook.posts)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visibility\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Visibility\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/post.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne, OneToMany, AfterLoad } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { Visibility } from '../../../constants/visibility.enum';\nimport { Scrapbook } from './scrapbook.entity';\nimport { Like } from './post-like.entity';\nimport { Comment } from './comment.entity';\nimport { PostReport } from '../../report/entities/post-report.entity';\nimport { FirebaseStorageService } from '../../../common/services/firebase-storage.service';\nimport { Appeal } from '../../appeals/entities/appeal.entity';\n\n/**\n * User Entity Class is the class that represents the User table in the database\n * This is how we interact with the database table in the application\n * No need for SQL quesries\n */\n@Entity()\nexport class Post extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  caption: string;\n\n  @Column()\n  tag: string;\n\n  @Column()\n  type: string;\n\n  @Column()\n  location: string;\n\n  @Column()\n  visibility: Visibility;\n\n  @Column({ default: false })\n  isTakenDown: boolean = false;\n\n  @Column({ type: 'longtext' })\n  imageUrl: string = '';\n\n  @Column({ default: '' })\n  imageId: string = '';\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  imageExpiryDate: Date;\n\n  @Column({ default: 0 })\n  likesCount: number = 0;\n\n  //A post can only be posted by one user but a user can have many posts\n  @ManyToOne(() => User, (user) => user.posts, {\n    onDelete: 'CASCADE'\n  })\n  postedBy: User;\n\n  //A user can be reported by many users\n  @OneToMany(() => PostReport, (postReport) => postReport.reportedPost)\n  reportsAgainst: PostReport[];\n\n  //A post can only be part of one scrapbook but a scrapbook can have many posts\n  @ManyToOne(() => Scrapbook, (scrapbook) => scrapbook.posts)\n  scrapbook: Scrapbook;\n\n  @OneToMany(() => Comment, (comment) => comment.post)\n  comments: Comment[];\n\n  //A post can have many appeals\n  @OneToMany(() => Appeal, (appeal) => appeal.appealedPost)\n  appeals: Appeal[];\n\n  //A post can have many likes\n  @OneToMany(() => Like, (like) => like.likedPost)\n  likes: Like[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostAnalyticResposneDto.html":{"url":"classes/PostAnalyticResposneDto.html","title":"class - PostAnalyticResposneDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostAnalyticResposneDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/analytics/dto/post-analytic-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                appealCount\n                            \n                            \n                                commentCount\n                            \n                            \n                                createdAt\n                            \n                            \n                                interactionCount\n                            \n                            \n                                isPartOfScrapbook\n                            \n                            \n                                isTakenDown\n                            \n                            \n                                likeCount\n                            \n                            \n                                reportCount\n                            \n                            \n                                scrapbookId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        appealCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        commentCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interactionCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPartOfScrapbook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTakenDown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likeCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@Min(0)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scrapbookId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/analytics/dto/post-analytic-response.dto.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsDate, IsNotEmpty, IsNumber, IsOptional, IsUUID, Min } from 'class-validator';\n\nexport class PostAnalyticResposneDto {\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  commentCount: number;\n\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  likeCount: number;\n\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  interactionCount: number;\n\n  @IsBoolean()\n  @IsNotEmpty()\n  isTakenDown: boolean;\n\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  reportCount: number;\n\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  appealCount: number;\n\n  @IsDate()\n  @IsNotEmpty()\n  createdAt: Date;\n\n  @IsBoolean()\n  @IsNotEmpty()\n  isPartOfScrapbook: boolean;\n\n  @IsOptional()\n  @IsUUID()\n  scrapbookId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                post\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addComment\n                            \n                            \n                                addPostToScrapbook\n                            \n                            \n                                createPost\n                            \n                            \n                                createScrapbook\n                            \n                            \n                                deleteComment\n                            \n                            \n                                deletePostById\n                            \n                            \n                                getPostById\n                            \n                            \n                                getPostComments\n                            \n                            \n                                getUserComments\n                            \n                            \n                                getUserPosts\n                            \n                            \n                                getUserScrapbook\n                            \n                            \n                                getUserScrapbooks\n                            \n                            \n                                likePost\n                            \n                            \n                                removePostFromScrapbook\n                            \n                            \n                                unlike\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addComment\n                        \n                    \n                \n            \n            \n                \naddComment(body: CreateCommentDto, req, res: Response, postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('comment/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:200\n                \n            \n\n\n            \n                \n                    COMMENTS APIs\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addPostToScrapbook\n                        \n                    \n                \n            \n            \n                \naddPostToScrapbook(req, res: Response, params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('scrapbook/:id/add-post/:postId')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:130\n                \n            \n\n\n            \n                \n                    Adds a post to a scrapbook\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request params\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createPost\n                        \n                    \n                \n            \n            \n                \ncreatePost(body: CreatePostDto, req, res: Response, file)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('create')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createScrapbook\n                        \n                    \n                \n            \n            \n                \ncreateScrapbook(body: CreateScrapBookDto, req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('scrapbook/create')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:112\n                \n            \n\n\n            \n                \n                    Creates a new scrapbook\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateScrapBookDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteComment\n                        \n                    \n                \n            \n            \n                \ndeleteComment(req, res: Response, commentId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete('comment/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:252\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    commentId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletePostById\n                        \n                    \n                \n            \n            \n                \ndeletePostById(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostById\n                        \n                    \n                \n            \n            \n                \ngetPostById(id: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostComments\n                        \n                    \n                \n            \n            \n                \ngetPostComments(postId: string, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('post-comments/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:218\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserComments\n                        \n                    \n                \n            \n            \n                \ngetUserComments(userId: string, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('user-comments/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:235\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserPosts\n                        \n                    \n                \n            \n            \n                \ngetUserPosts(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('user-posts')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:66\n                \n            \n\n\n            \n                \n                    Returns the posts of the user sending the request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserScrapbook\n                        \n                    \n                \n            \n            \n                \ngetUserScrapbook(req, params, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('scrapbook/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:186\n                \n            \n\n\n            \n                \n                    Returns the scrapbook with the given id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request params\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserScrapbooks\n                        \n                    \n                \n            \n            \n                \ngetUserScrapbooks(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('scrapbook/user-scrapbooks')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:167\n                \n            \n\n\n            \n                \n                    Returns the scrapbooks of the user sending the request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likePost\n                        \n                    \n                \n            \n            \n                \nlikePost(req, res: Response, postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('like/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:265\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removePostFromScrapbook\n                        \n                    \n                \n            \n            \n                \nremovePostFromScrapbook(req, res: Response, params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch('scrapbook/:id/remove-post/:postId')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:149\n                \n            \n\n\n            \n                \n                    Removes a post from a scrapbook\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request params\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unlike\n                        \n                    \n                \n            \n            \n                \nunlike(req, res: Response, postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete('unlike/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/post/post.controller.ts:278\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  UseGuards,\n  Res,\n  Request,\n  Get,\n  HttpStatus,\n  Post,\n  Body,\n  BadRequestException,\n  Param,\n  Delete,\n  UseInterceptors,\n  UploadedFile,\n  Patch,\n  Query\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { Response } from 'express';\nimport { PageOptionsDto } from 'src/common/dto/page-options.dto';\nimport { Visibility } from 'src/constants/visibility.enum';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { CreateCommentDto } from './dto/comment-create.dto';\nimport { CreatePostDto } from './dto/post-create.dto';\nimport { CreateScrapBookDto } from './dto/scrapbook-create.dts';\nimport { PostService } from './post.service';\n\n@Controller('post')\nexport class PostController {\n  constructor(private postService: PostService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Post('create')\n  @UseInterceptors(FileInterceptor('image'))\n  createPost(\n    @Body() body: CreatePostDto,\n    @Request() req,\n    @Res() res: Response,\n    @UploadedFile() file\n  ) {\n    if (file) {\n      this.postService.createPostWithImage(req.user, body, file).then((post) => {\n        return res.status(HttpStatus.OK).json(post);\n      });\n    }\n\n    if (!file) {\n      this.postService\n        .createPost(req.user, body)\n        .then((post) => {\n          return res.status(HttpStatus.OK).json(post);\n        })\n        .catch((err) => {\n          return res.status(err.status).json({ message: err.message });\n        });\n    }\n  }\n\n  /**\n   * Returns the posts of the user sending the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('user-posts')\n  getUserPosts(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.postService\n      .getUserPosts(req.user, pageOptionsDto)\n      .then((posts) => {\n        return res.status(HttpStatus.OK).json(posts);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('/:id')\n  getPostById(@Param('id') id: string, @Res() res: Response) {\n    this.postService\n      .getPostById(id)\n      .then((post) => {\n        return res.status(HttpStatus.OK).json(post);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete('/:id')\n  deletePostById(@Request() req, @Res() res: Response) {\n    this.postService\n      .deletePostById(req.user, req.params.id)\n      .then((post) => {\n        return res.status(HttpStatus.OK).json(post);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /************************** SCRAPBOOK APIs **************************/\n  /**\n   * Creates a new scrapbook\n   * @param body the request body\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('scrapbook/create')\n  createScrapbook(@Body() body: CreateScrapBookDto, @Request() req, @Res() res: Response) {\n    if (!Object.values(Visibility).includes(body.visibility)) {\n      throw new BadRequestException('Invalid visibility');\n    }\n\n    this.postService.createScrapbook(req.user, body).then((post) => {\n      return res.status(HttpStatus.OK).json(post);\n    });\n  }\n\n  /**\n   * Adds a post to a scrapbook\n   * @param req the request object\n   * @param res the response object\n   * @param params the request params\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('scrapbook/:id/add-post/:postId')\n  addPostToScrapbook(@Request() req, @Res() res: Response, @Param() params) {\n    this.postService\n      .addPostToScrapbook(req.user, req.params.id, req.params.postId)\n      .then((post) => {\n        return res.status(HttpStatus.OK).json(post);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Removes a post from a scrapbook\n   * @param req the request object\n   * @param res the response object\n   * @param params the request params\n   */\n  @UseGuards(JwtAuthGuard)\n  @Patch('scrapbook/:id/remove-post/:postId')\n  removePostFromScrapbook(@Request() req, @Res() res: Response, @Param() params) {\n    this.postService\n      .removePostFromScrapbook(params.id, params.postId)\n      .then((post) => {\n        return res.status(HttpStatus.OK).json(post);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Returns the scrapbooks of the user sending the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('scrapbook/user-scrapbooks')\n  getUserScrapbooks(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.postService\n      .getUserScrapbooks(req.user, pageOptionsDto)\n      .then((posts) => {\n        return res.status(HttpStatus.OK).json(posts);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Returns the scrapbook with the given id\n   * @param req the request object\n   * @param params the request params\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('scrapbook/:id')\n  getUserScrapbook(@Request() req, @Param() params, @Res() res: Response) {\n    this.postService\n      .getScrapbookById(params.id)\n      .then((posts) => {\n        return res.status(HttpStatus.OK).json(posts);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /************************** COMMENTS APIs **************************/\n  @UseGuards(JwtAuthGuard)\n  @Post('comment/:id')\n  addComment(\n    @Body() body: CreateCommentDto,\n    @Request() req,\n    @Res() res: Response,\n    @Param('id') postId: string\n  ) {\n    this.postService\n      .addComment(req.user, postId, body)\n      .then((post) => {\n        return res.status(HttpStatus.OK).json(post);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('post-comments/:id')\n  getPostComments(\n    @Param('id') postId: string,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.postService\n      .getPostComments(postId, pageOptionsDto)\n      .then((comments) => {\n        return res.status(HttpStatus.OK).json(comments);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('user-comments/:id')\n  getUserComments(\n    @Param('id') userId: string,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.postService\n      .getUserComments(userId, pageOptionsDto)\n      .then((comments) => {\n        return res.status(HttpStatus.OK).json(comments);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete('comment/:id')\n  deleteComment(@Request() req, @Res() res: Response, @Param('id') commentId: string) {\n    this.postService\n      .deleteComment(req.user, commentId)\n      .then((post) => {\n        return res.status(HttpStatus.OK).json(post);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('like/:id')\n  likePost(@Request() req, @Res() res: Response, @Param('id') postId: string) {\n    this.postService\n      .likePost(req.user, postId)\n      .then((post) => {\n        return res.status(HttpStatus.OK).json(post);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete('unlike/:id')\n  unlike(@Request() req, @Res() res: Response, @Param('id') postId: string) {\n    this.postService\n      .unlikePost(req.user, postId)\n      .then(() => {\n        return res.status(HttpStatus.OK).json({ message: 'Post unliked successfully' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_PostModule_exports\n\n\n\n\nPostService \n\nPostService \n\n\n\nPostModule\n\nPostModule\n\nPostService  -->\n\nPostModule->PostService \n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PostController } from './post.controller';\nimport { Post } from './entities/post.entity';\nimport { PostService } from './post.service';\nimport { Scrapbook } from './entities/scrapbook.entity';\nimport { Comment } from './entities/comment.entity';\nimport { User } from '../user/entities/user.entity';\nimport { Like } from './entities/post-like.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Post, Scrapbook, User, Comment, Like])],\n  controllers: [PostController],\n  providers: [PostService],\n  exports: [PostService]\n})\nexport class PostModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PostReport.html":{"url":"entities/PostReport.html","title":"entity - PostReport","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PostReport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/report/entities/post-report.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class is the class that represents the User table in the database\nThis is how we interact with the database table in the application\nNo need for SQL quesries\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                reason\n                            \n                            \n                                reportedBy\n                            \n                            \n                                reportedPost\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/post-report.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReportReason\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/post-report.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.reportedPosts, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/post-report.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportedPost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.reportsAgainst, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/post-report.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ReportStatus.PendingReview\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/post-report.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from '../../post/entities/post.entity';\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { ReportStatus } from '../../../constants/report-status.enum';\nimport { BaseEntity } from '../../../common/entities/base.entity';\nimport { ReportReason } from '../../../constants/report-reason.enum';\n\n/**\n * User Entity Class is the class that represents the User table in the database\n * This is how we interact with the database table in the application\n * No need for SQL quesries\n */\n@Entity()\nexport class PostReport extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ default: ReportStatus.PendingReview })\n  status: string = ReportStatus.PendingReview;\n\n  @Column()\n  reason: ReportReason;\n\n  //A Report can only report one post but a post can be in many reports\n  @ManyToOne(() => Post, (post) => post.reportsAgainst, {\n    onDelete: 'CASCADE'\n  })\n  reportedPost: Post;\n\n  //A Report can only be posted by one user but a user can have many Reports\n  @ManyToOne(() => User, (user) => user.reportedPosts, {\n    onDelete: 'CASCADE'\n  })\n  reportedBy: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReportController.html":{"url":"controllers/ReportController.html","title":"controller - ReportController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReportController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/report/report.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                report\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                banPost\n                            \n                            \n                                banUser\n                            \n                            \n                                getPostReports\n                            \n                            \n                                getReportedPosts\n                            \n                            \n                                getReportedUsers\n                            \n                            \n                                getUserReports\n                            \n                            \n                                reportPost\n                            \n                            \n                                reportUser\n                            \n                            \n                                unbanPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        banPost\n                        \n                    \n                \n            \n            \n                \nbanPost(req, postId, reportId, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Post('ban-post/:postId/:reportId')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:136\n                \n            \n\n\n            \n                \n                    Bans a post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    postId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    reportId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        banUser\n                        \n                    \n                \n            \n            \n                \nbanUser(req, userId, reportId, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Post('ban-user/:userId/:reportId')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:111\n                \n            \n\n\n            \n                \n                    Bans a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    userId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    reportId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostReports\n                        \n                    \n                \n            \n            \n                \ngetPostReports(req, params, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('post-reports/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:62\n                \n            \n\n\n            \n                \n                    Get the reports of a post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the parameters (the id of the reported post)\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReportedPosts\n                        \n                    \n                \n            \n            \n                \ngetReportedPosts(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Get('reported-posts')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReportedUsers\n                        \n                    \n                \n            \n            \n                \ngetReportedUsers(req, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Get('reported-users')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:189\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserReports\n                        \n                    \n                \n            \n            \n                \ngetUserReports(req, params, res: Response, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('user-reports/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:86\n                \n            \n\n\n            \n                \n                    Get the reports of a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the parameters (the id of the reported user)\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportPost\n                        \n                    \n                \n            \n            \n                \nreportPost(body: ReportDto, req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('report-post')\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:24\n                \n            \n\n\n            \n                \n                    Report a post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                ReportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the body of the request\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportUser\n                        \n                    \n                \n            \n            \n                \nreportUser(body: ReportDto, req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('report-user')\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:43\n                \n            \n\n\n            \n                \n                    Report a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                ReportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the body of the request\n\n                                    \n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unbanPost\n                        \n                    \n                \n            \n            \n                \nunbanPost(req, params, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard, RolesGuard)@Post('unban-post/:id')@Roles(Role.Admin)\n                \n            \n\n            \n                \n                    Defined in src/modules/report/report.controller.ts:161\n                \n            \n\n\n            \n                \n                    Unbans a post\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the request object\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the parameters (the id of the user to be unbanned)\n\n                                    \n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the response object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UseGuards, Res, Request, Post, Body, HttpStatus } from '@nestjs/common';\nimport { Get, Param, Query } from '@nestjs/common/decorators';\nimport { Response } from 'express';\nimport { PageOptionsDto } from 'src/common/dto/page-options.dto';\nimport { Role } from 'src/constants/role.enum';\nimport { Roles } from 'src/decorators/roles.decorator';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { ReportDto } from './dto/report.dto';\nimport { ReportService } from './report.service';\n\n@Controller('report')\nexport class ReportController {\n  constructor(private reportService: ReportService) {}\n\n  /**\n   * Report a post\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('report-post')\n  reportPost(@Body() body: ReportDto, @Request() req, @Res() res: Response) {\n    this.reportService\n      .reportPost(req.user, body)\n      .then((report) => {\n        return res.status(HttpStatus.OK).json(report);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Report a user\n   * @param body the body of the request\n   * @param req the request object\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post('report-user')\n  reportUser(@Body() body: ReportDto, @Request() req, @Res() res: Response) {\n    this.reportService\n      .reportUser(req.user, body)\n      .then((report) => {\n        return res.status(HttpStatus.OK).json(report);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Get the reports of a post\n   * @param req the request object\n   * @param params the parameters (the id of the reported post)\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('post-reports/:id')\n  getPostReports(\n    @Request() req,\n    @Param() params,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.reportService\n      .getPostReports(params.id, pageOptionsDto)\n      .then((reports) => {\n        return res.status(HttpStatus.OK).json(reports);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Get the reports of a user\n   * @param req the request object\n   * @param params the parameters (the id of the reported user)\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('user-reports/:id')\n  getUserReports(\n    @Request() req,\n    @Param() params,\n    @Res() res: Response,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    this.reportService\n      .getUserReports(params.id, pageOptionsDto)\n      .then((reports) => {\n        return res.status(HttpStatus.OK).json(reports);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Bans a user\n   * @param req the request object\n   * @param params the parameters (the id of the user to be banned)\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Post('ban-user/:userId/:reportId')\n  @Roles(Role.Admin)\n  banUser(\n    @Request() req,\n    @Param('userId') userId,\n    @Param('reportId') reportId,\n    @Res() res: Response\n  ) {\n    this.reportService\n      .banUser(userId, reportId)\n      .then((reports) => {\n        return res.status(HttpStatus.OK).json(reports);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Bans a post\n   * @param req the request object\n   * @param params the parameters (the id of the post to be banned)\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Post('ban-post/:postId/:reportId')\n  @Roles(Role.Admin)\n  banPost(\n    @Request() req,\n    @Param('postId') postId,\n    @Param('reportId') reportId,\n    @Res() res: Response\n  ) {\n    this.reportService\n      .banPost(postId, reportId)\n      .then(() => {\n        return res.status(HttpStatus.OK).json({ 'message': 'Post banned' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  /**\n   * Unbans a post\n   * @param req the request object\n   * @param params the parameters (the id of the user to be unbanned)\n   * @param res the response object\n   */\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Post('unban-post/:id')\n  @Roles(Role.Admin)\n  unbanPost(@Request() req, @Param() params, @Res() res: Response) {\n    this.reportService\n      .unbanPost(params.id)\n      .then(() => {\n        return res.status(HttpStatus.OK).json({ 'message': 'Post unbanned' });\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Get('reported-posts')\n  @Roles(Role.Admin)\n  getReportedPosts(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.reportService\n      .getReportedPosts(pageOptionsDto)\n      .then((posts) => {\n        return res.status(HttpStatus.OK).json(posts);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Get('reported-users')\n  @Roles(Role.Admin)\n  getReportedUsers(@Request() req, @Res() res: Response, @Query() pageOptionsDto: PageOptionsDto) {\n    this.reportService\n      .getReportedUsers(pageOptionsDto)\n      .then((posts) => {\n        return res.status(HttpStatus.OK).json(posts);\n      })\n      .catch((err) => {\n        return res.status(err.status).json({ message: err.message });\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReportDto.html":{"url":"classes/ReportDto.html","title":"class - ReportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/report/dto/report.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the DTO for creating a reports for both user and post\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                reason\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/dto/report.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReportReason\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ReportReason)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/dto/report.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty } from 'class-validator';\nimport { ReportReason } from 'src/constants/report-reason.enum';\n\n/**\n * This is the DTO for creating a reports for both user and post\n */\nexport class ReportDto {\n  @IsNotEmpty()\n  id: string;\n\n  @IsEnum(ReportReason)\n  @IsNotEmpty()\n  reason: ReportReason;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReportModule.html":{"url":"modules/ReportModule.html","title":"module - ReportModule","body":"\n                   \n\n\n\n\n    Modules\n    ReportModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ReportModule\n\n\n\ncluster_ReportModule_providers\n\n\n\n\nReportService\n\nReportService\n\n\n\nReportModule\n\nReportModule\n\nReportModule -->\n\nReportService->ReportModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/report/report.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ReportService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReportController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { User } from '../user/entities/user.entity';\nimport { PostReport } from './entities/post-report.entity';\nimport { UserBan } from './entities/user-ban.entity';\nimport { UserReport } from './entities/user-report.entity';\nimport { ReportController } from './report.controller';\nimport { ReportService } from './report.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserReport, PostReport, Post, User, UserBan])],\n  controllers: [ReportController],\n  providers: [ReportService]\n})\nexport class ReportModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReportService.html":{"url":"injectables/ReportService.html","title":"injectable - ReportService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReportService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/report/report.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                banPost\n                            \n                            \n                                    Async\n                                banUser\n                            \n                            \n                                    Async\n                                getPostReports\n                            \n                            \n                                    Async\n                                getReportedPosts\n                            \n                            \n                                    Async\n                                getReportedUsers\n                            \n                            \n                                    Async\n                                getUserReports\n                            \n                            \n                                    Async\n                                reportPost\n                            \n                            \n                                    Async\n                                reportUser\n                            \n                            \n                                    Async\n                                unbanPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userReportsRepository: Repository, postReportsRepository: Repository, postRepository: Repository, userRepository: Repository, userBanRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/report/report.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userReportsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postReportsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userBanRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        banPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    banPost(postId: string, reportId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:223\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reportId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        banUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    banUser(userId: string, reportId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reportId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostReports\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostReports(id: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReportedPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReportedPosts(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:269\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReportedUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReportedUsers(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:297\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserReports\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserReports(id: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:165\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reportPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reportPost(user: any, body: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reportUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    reportUser(user: any, body: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unbanPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    unbanPost(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/report/report.service.ts:252\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PageMetaDto } from 'src/common/dto/page-meta.dto';\nimport { PageOptionsDto } from 'src/common/dto/page-options.dto';\nimport { PageDto } from 'src/common/dto/page.dto';\nimport { ReportStatus } from 'src/constants/report-status.enum';\nimport { Repository, UpdateResult } from 'typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { User } from '../user/entities/user.entity';\nimport { PostReport } from './entities/post-report.entity';\nimport { UserBan } from './entities/user-ban.entity';\nimport { UserReport } from './entities/user-report.entity';\n\n@Injectable()\nexport class ReportService {\n  constructor(\n    @InjectRepository(UserReport)\n    private userReportsRepository: Repository,\n\n    @InjectRepository(PostReport)\n    private postReportsRepository: Repository,\n\n    @InjectRepository(Post)\n    private postRepository: Repository,\n\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    @InjectRepository(UserBan)\n    private userBanRepository: Repository\n  ) {}\n\n  async reportPost(user: any, body: any): Promise {\n    const newReport = new PostReport();\n    newReport.reportedBy = user;\n\n    // Find the post to report\n    const post = await this.postRepository.findOne({\n      where: { id: body.id },\n      relations: ['postedBy']\n    });\n\n    // If the post doesn't exist, throw an error\n    if (!post) {\n      throw new HttpException('Post not found', HttpStatus.NO_CONTENT);\n    }\n\n    if (post.postedBy.id === user.id) {\n      throw new HttpException('You cannot report your own post', HttpStatus.BAD_REQUEST);\n    }\n\n    // If the post has already been reported and is still pending response, throw an error\n    const userReportedPosts = await this.userRepository\n      .findOne({\n        where: { id: user.id },\n        relations: [\n          'reportedPosts',\n          'reportedPosts.reportedPost',\n          'reportedPosts.reportedPost.postedBy'\n        ]\n      })\n      .then((user) => {\n        if (!user) {\n          throw new BadRequestException('User not found');\n        }\n        return user.reportedPosts.map((reports) => {\n          if ((reports.status = ReportStatus.PendingReview)) {\n            return reports.reportedPost;\n          }\n        });\n      });\n\n    const postAlreadyReported = userReportedPosts.map((reportedPost) => {\n      if (!reportedPost) {\n        return false;\n      }\n      return reportedPost.id === post.id;\n    });\n\n    if (postAlreadyReported.includes(true)) {\n      throw new HttpException('You have already reported this post', HttpStatus.BAD_REQUEST);\n    }\n\n    newReport.reportedPost = post;\n    newReport.reason = body.reason;\n\n    return this.postReportsRepository.save(newReport);\n  }\n\n  async reportUser(user: any, body: any): Promise {\n    const newReport = new UserReport();\n    newReport.reportedBy = user;\n\n    // Find the user to report\n    const userToBeReported = await this.userRepository.findOne({\n      where: { id: body.id }\n    });\n\n    // If the user doesn't exist, throw an error\n    if (!userToBeReported) {\n      throw new HttpException('User not found', HttpStatus.NO_CONTENT);\n    }\n\n    if (userToBeReported.id === user.id) {\n      throw new HttpException('You cannot report yourself', HttpStatus.BAD_REQUEST);\n    }\n\n    // If the user has already been reported and is still pending response, throw an error\n    const userReportedUsers = await this.userRepository\n      .findOne({\n        where: { id: user.id },\n        relations: ['reportedUsers', 'reportedUsers.reportedUser']\n      })\n      .then((user) => {\n        if (!user) {\n          throw new BadRequestException('User not found');\n        }\n        return user.reportedUsers.map((reports) => {\n          if ((reports.status = ReportStatus.PendingReview)) {\n            return reports.reportedUser;\n          }\n        });\n      });\n\n    const usersAlreadyReported = userReportedUsers.map((reportedUser) => {\n      return reportedUser.id === userToBeReported.id;\n    });\n\n    if (usersAlreadyReported.includes(true)) {\n      throw new HttpException('You have already reported this user', HttpStatus.BAD_REQUEST);\n    }\n\n    newReport.reportedUser = userToBeReported;\n    newReport.reason = body.reason;\n\n    return this.userReportsRepository.save(newReport);\n  }\n\n  async getPostReports(id: string, pageOptionsDto: PageOptionsDto): Promise> {\n    const queryResults = await this.postReportsRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('PostReport.reportedPost', 'Post')\n      .leftJoinAndSelect('PostReport.reportedBy', 'ReportedBy')\n      .leftJoinAndSelect('Post.postedBy', 'PostedBy')\n      .where('PostReport.reportedPost.id = :id', { id: id })\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take)\n      .orderBy('PostReport.createdAt', pageOptionsDto.order)\n      .getManyAndCount()\n      .then((postReportsAndCount) => {\n        return {\n          items: postReportsAndCount[0],\n          itemsCount: postReportsAndCount[1]\n        };\n      });\n\n    const itemCount: number = queryResults.itemsCount;\n    const entities: PostReport[] = queryResults.items;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async getUserReports(id: string, pageOptionsDto: PageOptionsDto): Promise> {\n    const queryResults = await this.userReportsRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('UserReport.reportedUser', 'User')\n      .leftJoinAndSelect('UserReport.reportedBy', 'ReportedBy')\n      .where('UserReport.reportedUser.id = :id', { id: id })\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take)\n      .orderBy('UserReport.createdAt', pageOptionsDto.order)\n      .getManyAndCount()\n      .then((userReportsAndCount) => {\n        return {\n          items: userReportsAndCount[0],\n          itemsCount: userReportsAndCount[1]\n        };\n      });\n\n    const itemCount: number = queryResults.itemsCount;\n    const entities: UserReport[] = queryResults.items;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async banUser(userId: string, reportId: string): Promise {\n    const newBan = new UserBan();\n\n    // Find the user to ban\n    const user = await this.userRepository.findOne({\n      where: { id: userId }\n    });\n\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NO_CONTENT);\n    }\n\n    const millisecondsInAWeek = 604800000;\n    newBan.bannedUser = user;\n    newBan.startDate = new Date(Date.now());\n    newBan.endDate = new Date(Date.now() + millisecondsInAWeek); //Ban for 1 week\n\n    const report = await this.userReportsRepository.findOne({\n      where: { id: reportId }\n    });\n\n    if (!report) {\n      throw new HttpException('Report not found', HttpStatus.NO_CONTENT);\n    }\n\n    report.status = ReportStatus.Accepted;\n    await this.userReportsRepository.save(report);\n\n    await this.userRepository.update(userId, { isBanned: true });\n\n    return this.userBanRepository.save(newBan);\n  }\n\n  async banPost(postId: string, reportId: string): Promise {\n    const post = await this.postRepository.findOne({\n      where: { id: postId },\n      relations: ['postedBy']\n    });\n\n    if (!post) {\n      throw new HttpException('Post not found', HttpStatus.NO_CONTENT);\n    }\n\n    const report = await this.postReportsRepository.findOne({\n      where: { id: reportId }\n    });\n\n    if (!report) {\n      throw new HttpException('Report not found', HttpStatus.NO_CONTENT);\n    }\n\n    report.status = ReportStatus.Accepted;\n    await this.postReportsRepository.save(report);\n\n    return this.postRepository\n      .createQueryBuilder()\n      .update(Post)\n      .set({ isTakenDown: true })\n      .where('id = :id', { id: post.id })\n      .execute();\n  }\n\n  async unbanPost(id: string): Promise {\n    const post = await this.postRepository.findOne({\n      where: { id: id }\n    });\n\n    if (!post) {\n      throw new HttpException('Post not found', HttpStatus.NO_CONTENT);\n    }\n\n    return this.postRepository\n      .createQueryBuilder()\n      .update(Post)\n      .set({ isTakenDown: false })\n      .where('id = :id', { id: post.id })\n      .execute();\n  }\n\n  async getReportedPosts(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryResults = await this.postReportsRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('PostReport.reportedPost', 'Post')\n      .leftJoinAndSelect('PostReport.reportedBy', 'ReportedBy')\n      .leftJoinAndSelect('Post.postedBy', 'postedBy')\n      .where('PostReport.status = :status', { status: ReportStatus.PendingReview })\n      .groupBy('Post.id')\n      .addGroupBy('PostReport.reason')\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take)\n      .orderBy('Post.createdAt', pageOptionsDto.order)\n      .getManyAndCount()\n      .then((postsAndCount) => {\n        return {\n          items: postsAndCount[0],\n          itemsCount: postsAndCount[0].length\n        };\n      });\n\n    const itemCount: number = queryResults.itemsCount;\n    const entities: PostReport[] = queryResults.items;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async getReportedUsers(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryResults = await this.userReportsRepository\n      .createQueryBuilder()\n      .leftJoinAndSelect('UserReport.reportedUser', 'User')\n      .leftJoinAndSelect('UserReport.reportedBy', 'ReportedBy')\n      .where('UserReport.status = :status', { status: ReportStatus.PendingReview })\n      .groupBy('User.id')\n      .addGroupBy('UserReport.reason')\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take)\n      .orderBy('User.createdAt', pageOptionsDto.order)\n      .getManyAndCount()\n      .then((usersAndCount) => {\n        return {\n          items: usersAndCount[0],\n          itemsCount: usersAndCount[0].length\n        };\n      });\n\n    const itemCount: number = queryResults.itemsCount;\n    const entities: UserReport[] = queryResults.items;\n\n    const pageMetaDto: PageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/roles.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guards/roles.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from 'src/constants/role.enum';\nimport { ROLES_KEY } from 'src/decorators/roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass()\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    const { user } = context.switchToHttp().getRequest();\n\n    return requiredRoles.some((role) => user.role?.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Scrapbook.html":{"url":"entities/Scrapbook.html","title":"entity - Scrapbook","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Scrapbook\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/post/entities/scrapbook.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class is the class that represents the User table in the database\nThis is how we interact with the database table in the application\nNo need for SQL quesries\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                caption\n                            \n                            \n                                id\n                            \n                            \n                                location\n                            \n                            \n                                posts\n                            \n                            \n                                user\n                            \n                            \n                                visibility\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        caption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/scrapbook.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/scrapbook.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/scrapbook.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.scrapbook)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/scrapbook.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.scrapbooks, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/scrapbook.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visibility\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Visibility\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/post/entities/scrapbook.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne, OneToMany } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { Visibility } from '../../../constants/visibility.enum';\nimport { Post } from './post.entity';\n\n/**\n * User Entity Class is the class that represents the User table in the database\n * This is how we interact with the database table in the application\n * No need for SQL quesries\n */\n@Entity()\nexport class Scrapbook extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  caption: string;\n\n  @Column()\n  location: string;\n\n  @Column()\n  visibility: Visibility;\n\n  //A scrapbook can only be posted by one user but a user can have many scrapbook\n  @ManyToOne(() => User, (user) => user.scrapbooks, {\n    onDelete: 'CASCADE'\n  })\n  user: User;\n\n  //A scrapbook can have many posts\n  @OneToMany(() => Post, (post) => post.scrapbook)\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendNotificationDto.html":{"url":"classes/SendNotificationDto.html","title":"class - SendNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notification/dto/send-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                            \n                                targetGroup\n                            \n                            \n                                targetUserId\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notification/dto/send-message.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationTargetGroup\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(NotificationTargetGroup)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notification/dto/send-message.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetUserId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notification/dto/send-message.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notification/dto/send-message.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty, IsOptional, IsUUID } from 'class-validator';\nimport { NotificationTargetGroup } from 'src/constants/notification-target-group.enum';\n\nexport class SendNotificationDto {\n  @IsNotEmpty()\n  title: string;\n\n  @IsNotEmpty()\n  body: string;\n\n  @IsEnum(NotificationTargetGroup)\n  targetGroup: NotificationTargetGroup;\n\n  @IsOptional()\n  @IsUUID()\n  targetUserId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpUserDto.html":{"url":"classes/SignUpUserDto.html","title":"class - SignUpUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/user-signup.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the DTO for the user sign up,\nthis is the data that the user will send to the server in the body of the request.\nThe annotation above each property is used to validate the data that the user sends.\nNest Validates it automatically and if the data is not valid it will throw an error.\nIsNotEmpty check that the string is not empty.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                confirmPassword\n                            \n                            \n                                dateOfBirth\n                            \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateOfBirth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPhoneNumber('AE')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/user-signup.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsPhoneNumber } from 'class-validator';\n\n/**\n * This is the DTO for the user sign up,\n * this is the data that the user will send to the server in the body of the request.\n * The annotation above each property is used to validate the data that the user sends.\n * Nest Validates it automatically and if the data is not valid it will throw an error.\n * IsNotEmpty check that the string is not empty.\n */\n\nexport class SignUpUserDto {\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsEmail()\n  email: string;\n\n  @IsNotEmpty()\n  username: string;\n\n  @IsNotEmpty()\n  password: string;\n\n  @IsNotEmpty()\n  confirmPassword: string;\n\n  @IsPhoneNumber('AE')\n  phoneNumber: string;\n\n  address: string;\n\n  @IsNotEmpty()\n  dateOfBirth: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteCustomer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCustomer(customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/stripe.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stripe\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Stripe(process.env?.STRIPE_TEST_KEY, {\n    apiVersion: '2022-11-15'\n  })\n                    \n                \n                    \n                        \n                                Defined in src/common/services/stripe.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import * as dotenv from 'dotenv';\ndotenv.config();\nimport Stripe from 'stripe';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class StripeService {\n  private stripe = new Stripe(process.env?.STRIPE_TEST_KEY, {\n    apiVersion: '2022-11-15'\n  });\n\n  async deleteCustomer(customerId: string): Promise {\n    await this.stripe.customers.del(customerId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nTasksService\n\nTasksService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/tasks/tasks.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { Post } from '../post/entities/post.entity';\nimport { TasksService } from './tasks.service';\nimport { UserBan } from '../report/entities/user-ban.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Post, UserBan])],\n  providers: [TasksService]\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tasks/tasks.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This service is used to run bulk tasks requiring a lot of processing power\nThis will run once everyday at 12:00:00 AM server time\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                removeExpiredBans\n                            \n                            \n                                    Async\n                                updateUserPostURLs\n                            \n                            \n                                    Async\n                                updateUserProfileURLs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, postRepository: Repository, userBanRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/tasks/tasks.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userBanRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeExpiredBans\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeExpiredBans()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)\n                \n            \n\n            \n                \n                    Defined in src/modules/tasks/tasks.service.ts:111\n                \n            \n\n\n            \n                \n                    Runs at the specified interval\nRemoves the bans on users whose ban has expired\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserPostURLs\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserPostURLs()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)\n                \n            \n\n            \n                \n                    Defined in src/modules/tasks/tasks.service.ts:72\n                \n            \n\n\n            \n                \n                    Runs at the specified interval\nUpdates the post picture URL for all posts whose picture will expire tomorrow\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserProfileURLs\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserProfileURLs()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)\n                \n            \n\n            \n                \n                    Defined in src/modules/tasks/tasks.service.ts:33\n                \n            \n\n\n            \n                \n                    Runs at the specified interval\nUpdates the profile picture URL for all users whose profile picture will expire tomorrow\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FirebaseStorageService } from 'src/common/services/firebase-storage.service';\nimport { BanStatus } from 'src/constants/ban-status.enum';\nimport { Repository, Not, LessThan } from 'typeorm';\nimport { Post } from '../post/entities/post.entity';\nimport { UserBan } from '../report/entities/user-ban.entity';\nimport { User } from '../user/entities/user.entity';\n\n/**\n * This service is used to run bulk tasks requiring a lot of processing power\n * This will run once everyday at 12:00:00 AM server time\n */\n@Injectable()\nexport class TasksService {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    @InjectRepository(Post)\n    private postRepository: Repository,\n\n    @InjectRepository(UserBan)\n    private userBanRepository: Repository\n  ) {}\n\n  /**\n   * Runs at the specified interval\n   * Updates the profile picture URL for all users whose profile picture will expire tomorrow\n   */\n  @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)\n  async updateUserProfileURLs() {\n    const tomorrow = new Date(Date.now());\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    await this.userRepository\n      .find({\n        where: {\n          profilePictureId: Not(''),\n          profilePictureExpiryDate: LessThan(tomorrow)\n        }\n      })\n      .then(async (users) => {\n        console.log(users.length);\n\n        for (let i = 0; i  {\n        for (let i = 0; i  {\n        for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserBioDto.html":{"url":"classes/UpdateUserBioDto.html","title":"class - UpdateUserBioDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserBioDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/bio-update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                to check for valid date while updating dates\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bio\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MaxLength(100)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/bio-update.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, MaxLength } from 'class-validator';\n/**\n * to check for valid date while updating dates\n */\nexport class UpdateUserBioDto {\n  @IsNotEmpty()\n  @MaxLength(100)\n  @IsString()\n  bio: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDateOfBirthDto.html":{"url":"classes/UpdateUserDateOfBirthDto.html","title":"class - UpdateUserDateOfBirthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDateOfBirthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/dateofbirth-update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                to check for valid date while updating dates\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dateOfBirth\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dateOfBirth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/dateofbirth-update.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n/**\n * to check for valid date while updating dates\n */\nexport class UpdateUserDateOfBirthDto {\n  @IsNotEmpty()\n  dateOfBirth: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserEmailDto.html":{"url":"classes/UpdateUserEmailDto.html","title":"class - UpdateUserEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/email-update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                to check for valid email while updating emails\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/email-update.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail } from 'class-validator';\n/**\n * to check for valid email while updating emails\n */\nexport class UpdateUserEmailDto {\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserPasseordDto.html":{"url":"classes/UpdateUserPasseordDto.html","title":"class - UpdateUserPasseordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserPasseordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/password-update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmPassword\n                            \n                            \n                                currentPassword\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(8)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/password-update.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/password-update.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(8)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/password-update.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, MinLength } from 'class-validator';\n\nexport class UpdateUserPasseordDto {\n  @IsNotEmpty()\n  currentPassword: string;\n\n  @MinLength(8)\n  @IsNotEmpty()\n  password: string;\n\n  @MinLength(8)\n  @IsNotEmpty()\n  confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserPhoneNumberDto.html":{"url":"classes/UpdateUserPhoneNumberDto.html","title":"class - UpdateUserPhoneNumberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserPhoneNumberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/phone-update.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                to check for valid date while updating dates\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPhoneNumber('AE')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dto/phone-update.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsPhoneNumber } from 'class-validator';\n/**\n * to check for valid date while updating dates\n */\nexport class UpdateUserPhoneNumberDto {\n  @IsPhoneNumber('AE')\n  phoneNumber: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class is the class that represents the User table in the database\nThis is how we interact with the database table in the application\nNo need for SQL quesries\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                appeals\n                            \n                            \n                                bans\n                            \n                            \n                                bio\n                            \n                            \n                                blockedBy\n                            \n                            \n                                blocks\n                            \n                            \n                                comments\n                            \n                            \n                                dateOfBirth\n                            \n                            \n                                email\n                            \n                            \n                                fcmToken\n                            \n                            \n                                firstName\n                            \n                            \n                                followers\n                            \n                            \n                                followersCount\n                            \n                            \n                                following\n                            \n                            \n                                followingCount\n                            \n                            \n                                followRequestsReceived\n                            \n                            \n                                followRequestsSent\n                            \n                            \n                                gender\n                            \n                            \n                                hasStripAccount\n                            \n                            \n                                id\n                            \n                            \n                                isBanned\n                            \n                            \n                                lastName\n                            \n                            \n                                likes\n                            \n                            \n                                notificationPreference\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                posts\n                            \n                            \n                                profilePictureExpiryDate\n                            \n                            \n                                profilePictureId\n                            \n                            \n                                profilePictureUrl\n                            \n                            \n                                reportedPosts\n                            \n                            \n                                reportedUsers\n                            \n                            \n                                reportsAgainst\n                            \n                            \n                                role\n                            \n                            \n                                scrapbooks\n                            \n                            \n                                stripeCustomerId\n                            \n                            \n                                subscriptionPlan\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        appeals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Appeal[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, appeal => appeal.appealedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bans\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserBan[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, userBan => userBan.bannedUser)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        blockedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Block[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, block => block.blockedUser)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        blocks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Block[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, block => block.blockingUser)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:137\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateOfBirth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fcmToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Follow[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, follow => follow.followed)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:149\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followersCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        following\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Follow[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, follow => follow.followedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:145\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followingCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followRequestsReceived\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FollowRequest[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, followRequest => followRequest.requestedUser)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:157\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followRequestsSent\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FollowRequest[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, followRequest => followRequest.requestedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:153\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Gender\n\n                    \n                \n                \n                    \n                        Default value : Gender.Undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasStripAccount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isBanned\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Like[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, like => like.likedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:161\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notificationPreference\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationPreference\n\n                    \n                \n                \n                    \n                        Default value : NotificationPreference.All\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.postedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profilePictureExpiryDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profilePictureId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profilePictureUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'longtext'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportedPosts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PostReport[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, postReport => postReport.reportedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:114\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportedUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserReport[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, userReport => userReport.reportedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportsAgainst\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserReport[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, userReport => userReport.reportedUser)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scrapbooks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Scrapbook[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, scrapbook => scrapbook.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stripeCustomerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subscriptionPlan\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SubscriptionPlan\n\n                    \n                \n                \n                    \n                        Default value : SubscriptionPlan.Basic\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/entities/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../../common/entities/base.entity';\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  BeforeInsert,\n  OneToMany,\n  AfterLoad\n} from 'typeorm';\nimport { EncryptionService } from '../../../common/services/encryption.service';\nimport { Role } from '../../../constants/role.enum';\nimport { Post } from '../../post/entities/post.entity';\nimport { Scrapbook } from '../../post/entities/scrapbook.entity';\nimport { Comment } from '../../post/entities/comment.entity';\nimport { PostReport } from '../../report/entities/post-report.entity';\nimport { UserReport } from '../../report/entities/user-report.entity';\nimport { Gender } from '../../../constants/gender.enum';\nimport { UserBan } from '../../report/entities/user-ban.entity';\nimport { FirebaseStorageService } from '../../../common/services/firebase-storage.service';\nimport { Appeal } from '../../appeals/entities/appeal.entity';\nimport { Block } from '../../block/entities/block.entity';\nimport { Follow } from '../../../modules/follow/entities/follow.entity';\nimport { FollowRequest } from '../../../modules/follow/entities/follow-request.entity';\nimport { NotificationPreference } from '../../../constants/notification-preference.enum';\nimport { Like } from '../../post/entities/post-like.entity';\nimport { SubscriptionPlan } from '../../../constants/subscription-plan.enum';\n\n/**\n * User Entity Class is the class that represents the User table in the database\n * This is how we interact with the database table in the application\n * No need for SQL quesries\n */\n@Entity()\nexport class User extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column()\n  email: string;\n\n  @Column()\n  username: string;\n\n  @Column({ select: false })\n  password: string;\n\n  @Column()\n  phoneNumber: string;\n\n  @Column({ default: '' })\n  address: string = '';\n\n  @Column()\n  dateOfBirth: Date;\n\n  @Column()\n  role: Role;\n\n  @Column({ type: 'longtext' })\n  profilePictureUrl: string = '';\n\n  @Column({ default: '' })\n  profilePictureId: string = '';\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  profilePictureExpiryDate: Date;\n\n  @Column({ default: Gender.Undefined })\n  gender: Gender = Gender.Undefined;\n\n  @Column({ default: '' })\n  fcmToken: string = '';\n\n  @Column({ default: NotificationPreference.All })\n  notificationPreference: NotificationPreference = NotificationPreference.All;\n\n  @Column({ default: false })\n  isBanned: boolean = false;\n\n  @Column({ default: false })\n  hasStripAccount: boolean = false;\n\n  @Column({ default: '' })\n  stripeCustomerId: string = '';\n\n  @Column({ default: SubscriptionPlan.Basic })\n  subscriptionPlan: SubscriptionPlan = SubscriptionPlan.Basic;\n\n  @Column({ default: 0 })\n  followersCount: number = 0;\n\n  @Column({ default: 0 })\n  followingCount: number = 0;\n\n  @Column({ default: '' })\n  bio: string = '';\n\n  //A user can have many posts\n  @OneToMany(() => Post, (post) => post.postedBy)\n  posts: Post[];\n\n  //A user can have many posts\n  @OneToMany(() => Scrapbook, (scrapbook) => scrapbook.user)\n  scrapbooks: Scrapbook[];\n\n  //A user can report many posts\n  @OneToMany(() => PostReport, (postReport) => postReport.reportedBy)\n  reportedPosts: PostReport[];\n\n  //A user can report many users\n  @OneToMany(() => UserReport, (userReport) => userReport.reportedBy)\n  reportedUsers: UserReport[];\n\n  //A user can be reported by many users\n  @OneToMany(() => UserReport, (userReport) => userReport.reportedUser)\n  reportsAgainst: UserReport[];\n\n  @OneToMany(() => UserBan, (userBan) => userBan.bannedUser)\n  bans: UserBan[];\n\n  //A user can make many comments\n  @OneToMany(() => Comment, (comment) => comment.author)\n  comments: Comment[];\n\n  //A user can make many appeals\n  @OneToMany(() => Appeal, (appeal) => appeal.appealedBy)\n  appeals: Appeal[];\n\n  //A user can block many users\n  @OneToMany(() => Block, (block) => block.blockingUser)\n  blocks: Block[];\n\n  //A user can be blocked by many users\n  @OneToMany(() => Block, (block) => block.blockedUser)\n  blockedBy: Block[];\n\n  //A user can follow many users\n  @OneToMany(() => Follow, (follow) => follow.followedBy)\n  following: Follow[];\n\n  //A user can be followed by many users\n  @OneToMany(() => Follow, (follow) => follow.followed)\n  followers: Follow[];\n\n  //A user can send many follow requests\n  @OneToMany(() => FollowRequest, (followRequest) => followRequest.requestedBy)\n  followRequestsSent: FollowRequest[];\n\n  //A user can receive many follow requests\n  @OneToMany(() => FollowRequest, (followRequest) => followRequest.requestedUser)\n  followRequestsReceived: FollowRequest[];\n\n  //A user can have many likes\n  @OneToMany(() => Like, (like) => like.likedBy)\n  likes: Like[];\n\n  //This is a hook that will be executed before the user is inserted in the database\n  @BeforeInsert()\n  emailToLowerCase() {\n    this.email = this.email.toLowerCase();\n  }\n\n  @BeforeInsert()\n  async hashPassword() {\n    this.password = await new EncryptionService().encryptPassword(this.password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserBan.html":{"url":"entities/UserBan.html","title":"entity - UserBan","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserBan\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/report/entities/user-ban.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class is the class that represents the User table in the database\nThis is how we interact with the database table in the application\nNo need for SQL quesries\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bannedUser\n                            \n                            \n                                endDate\n                            \n                            \n                                id\n                            \n                            \n                                startDate\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bannedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.bans, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-ban.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-ban.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-ban.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-ban.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : BanStatus.Active\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-ban.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { BanStatus } from '../../../constants/ban-status.enum';\nimport { BaseEntity } from '../../../common/entities/base.entity';\n\n/**\n * User Entity Class is the class that represents the User table in the database\n * This is how we interact with the database table in the application\n * No need for SQL quesries\n */\n@Entity()\nexport class UserBan extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ default: BanStatus.Active })\n  status: string = BanStatus.Active;\n\n  @Column()\n  startDate: Date;\n\n  @Column()\n  endDate: Date;\n\n  //A user can be banned multiple times\n  @ManyToOne(() => User, (user) => user.bans, {\n    onDelete: 'CASCADE'\n  })\n  bannedUser: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserController } from './user.controller';\nimport { User } from './entities/user.entity';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService]\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserReport.html":{"url":"entities/UserReport.html","title":"entity - UserReport","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserReport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/report/entities/user-report.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                User Entity Class is the class that represents the User table in the database\nThis is how we interact with the database table in the application\nNo need for SQL quesries\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                reason\n                            \n                            \n                                reportedBy\n                            \n                            \n                                reportedUser\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-report.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReportReason\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-report.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.reportedUsers, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-report.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reportedUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.reportsAgainst, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-report.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ReportStatus.PendingReview\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/report/entities/user-report.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ReportStatus } from '../../../constants/report-status.enum';\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport { BaseEntity } from '../../../common/entities/base.entity';\nimport { ReportReason } from '../../../constants/report-reason.enum';\n\n/**\n * User Entity Class is the class that represents the User table in the database\n * This is how we interact with the database table in the application\n * No need for SQL quesries\n */\n@Entity()\nexport class UserReport extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ default: ReportStatus.PendingReview })\n  status: string = ReportStatus.PendingReview;\n\n  @Column()\n  reason: ReportReason;\n\n  //A Report can only report one user but a user can be in many reports\n  @ManyToOne(() => User, (user) => user.reportsAgainst, {\n    onDelete: 'CASCADE'\n  })\n  reportedUser: User;\n\n  //A Report can only be posted by one user but a user can have many Reports\n  @ManyToOne(() => User, (user) => user.reportedUsers, {\n    onDelete: 'CASCADE'\n  })\n  reportedBy: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                migrations/1672082558971-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672082558971\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672082713679-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672082713679\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672133224744-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672133224744\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672166137042-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672166137042\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672251740346-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672251740346\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672388811259-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672388811259\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672399737695-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672399737695\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672417201262-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672417201262\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672417384470-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672417384470\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672576067204-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672576067204\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672585305519-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672585305519\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672600378154-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672600378154\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672678196724-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672678196724\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672744437528-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672744437528\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672760070076-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672760070076\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672832148243-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672832148243\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1672833410692-$npm_config_name.ts\n            \n            class\n            $npmConfigName1672833410692\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673022319464-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673022319464\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673025398979-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673025398979\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673027114310-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673027114310\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673177373733-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673177373733\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673337064308-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673337064308\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673770456243-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673770456243\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673847605869-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673847605869\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1673974513613-$npm_config_name.ts\n            \n            class\n            $npmConfigName1673974513613\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674121256550-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674121256550\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674198387677-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674198387677\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674453163372-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674453163372\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674486373359-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674486373359\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674487677914-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674487677914\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674493007150-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674493007150\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1674544597118-$npm_config_name.ts\n            \n            class\n            $npmConfigName1674544597118\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1675177507147-$npm_config_name.ts\n            \n            class\n            $npmConfigName1675177507147\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/dto/page-meta-parameters.dto.ts\n            \n            interface\n            PageMetaDtoParameters\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/common/dto/page-meta.dto.ts\n            \n            class\n            PageMetaDto\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/common/dto/page-options.dto.ts\n            \n            class\n            PageOptionsDto\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/common/dto/page.dto.ts\n            \n            class\n            PageDto\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/common/entities/base.entity.ts\n            \n            class\n            BaseEntity\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/common/services/encryption.service.ts\n            \n            injectable\n            EncryptionService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/services/firebase-admin.service.ts\n            \n            variable\n            bucket\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/services/firebase-admin.service.ts\n            \n            variable\n            firebaseConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/services/firebase-admin.service.ts\n            \n            variable\n            messaging\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/services/firebase-admin.service.ts\n            \n            variable\n            serviceAccount\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/services/firebase-admin.service.ts\n            \n            variable\n            storage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/services/firebase-storage.service.ts\n            \n            injectable\n            FirebaseStorageService\n            \n                44 %\n                (4/9)\n            \n        \n        \n            \n                \n                src/common/services/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/analytics/analytics.controller.ts\n            \n            controller\n            AnalyticsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/analytics/analytics.service.ts\n            \n            injectable\n            AnalyticsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/analytics/dto/post-analytic-response.dto.ts\n            \n            class\n            PostAnalyticResposneDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/appeals/appeals.controller.ts\n            \n            controller\n            AppealsController\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/modules/appeals/appeals.service.ts\n            \n            injectable\n            AppealsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/appeals/dto/appeal.dto.ts\n            \n            class\n            AppealDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/appeals/entities/appeal.entity.ts\n            \n            entity\n            Appeal\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/modules/auth/constants.ts\n            \n            variable\n            jwtConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/user-signup.dto.ts\n            \n            class\n            SignUpUserDto\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/modules/block/block.controller.ts\n            \n            controller\n            BlockController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/block/block.service.ts\n            \n            injectable\n            BlockService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/block/entities/block.entity.ts\n            \n            entity\n            Block\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/feed/feed.controller.ts\n            \n            controller\n            FeedController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/feed/feed.service.ts\n            \n            injectable\n            FeedService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/follow/entities/follow-request.entity.ts\n            \n            entity\n            FollowRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/follow/entities/follow.entity.ts\n            \n            entity\n            Follow\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/follow/follow.controller.ts\n            \n            controller\n            FollowController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/follow/follow.service.ts\n            \n            injectable\n            FollowService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/notification/dto/send-message.dto.ts\n            \n            class\n            SendNotificationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/notification/notification.controller.ts\n            \n            controller\n            NotificationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/notification/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/payment/payment.controller.ts\n            \n            controller\n            PaymentController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/payment/payment.service.ts\n            \n            injectable\n            PaymentService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/post/dto/comment-create.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/post/dto/post-create.dto.ts\n            \n            class\n            CreatePostDto\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/modules/post/dto/scrapbook-create.dts.ts\n            \n            class\n            CreateScrapBookDto\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/modules/post/entities/comment.entity.ts\n            \n            entity\n            Comment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/post/entities/post-like.entity.ts\n            \n            entity\n            Like\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/post/entities/post.entity.ts\n            \n            entity\n            Post\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/post/entities/scrapbook.entity.ts\n            \n            entity\n            Scrapbook\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                43 %\n                (7/16)\n            \n        \n        \n            \n                \n                src/modules/post/post.service.ts\n            \n            injectable\n            PostService\n            \n                27 %\n                (5/18)\n            \n        \n        \n            \n                \n                src/modules/report/dto/report.dto.ts\n            \n            class\n            ReportDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/modules/report/entities/post-report.entity.ts\n            \n            entity\n            PostReport\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/report/entities/user-ban.entity.ts\n            \n            entity\n            UserBan\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/report/entities/user-report.entity.ts\n            \n            entity\n            UserReport\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/report/report.controller.ts\n            \n            controller\n            ReportController\n            \n                70 %\n                (7/10)\n            \n        \n        \n            \n                \n                src/modules/report/report.service.ts\n            \n            injectable\n            ReportService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/modules/user/dto/bio-update.dto.ts\n            \n            class\n            UpdateUserBioDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/user/dto/dateofbirth-update.dto.ts\n            \n            class\n            UpdateUserDateOfBirthDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/user/dto/email-update.dto.ts\n            \n            class\n            UpdateUserEmailDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/user/dto/password-update.dto.ts\n            \n            class\n            UpdateUserPasseordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/user/dto/phone-update.dto.ts\n            \n            class\n            UpdateUserPhoneNumberDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/modules/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                71 %\n                (15/21)\n            \n        \n        \n            \n                \n                src/modules/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                72 %\n                (21/29)\n            \n        \n        \n            \n                \n                typeOrm.config.ts\n            \n            variable\n            configService\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.1\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/schedule : ^2.1.0\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            firebase : ^9.15.0\n        \n            firebase-admin : ^11.4.1\n        \n            mysql2 : ^2.3.3\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            stripe : ^11.7.0\n        \n            typeorm : ^0.3.11\n        \n            uuid : ^9.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BanStatus   (src/.../ban-status.enum.ts)\n                        \n                        \n                            FollowStatus   (src/.../follow-status.enum.ts)\n                        \n                        \n                            Gender   (src/.../gender.enum.ts)\n                        \n                        \n                            NotificationPreference   (src/.../notification-preference.enum.ts)\n                        \n                        \n                            NotificationTargetGroup   (src/.../notification-target-group.enum.ts)\n                        \n                        \n                            Order   (src/.../order.enum.ts)\n                        \n                        \n                            ReportReason   (src/.../report-reason.enum.ts)\n                        \n                        \n                            ReportStatus   (src/.../report-status.enum.ts)\n                        \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                        \n                            SubscriptionPlan   (src/.../subscription-plan.enum.ts)\n                        \n                        \n                            Visibility   (src/.../visibility.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants/ban-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        BanStatus\n                    \n                \n                        \n                            \n                                 Active\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 Expired\n                            \n                        \n                        \n                            \n                                Value : expired\n                            \n                        \n            \n        \n\n    src/constants/follow-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        FollowStatus\n                    \n                \n                        \n                            \n                                 Pending\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 Accepted\n                            \n                        \n                        \n                            \n                                Value : accepted\n                            \n                        \n                        \n                            \n                                 Rejected\n                            \n                        \n                        \n                            \n                                Value : rejected\n                            \n                        \n            \n        \n\n    src/constants/gender.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Gender\n                    \n                \n                        \n                            \n                                 Male\n                            \n                        \n                        \n                            \n                                Value : male\n                            \n                        \n                        \n                            \n                                 Female\n                            \n                        \n                        \n                            \n                                Value : female\n                            \n                        \n                        \n                            \n                                 Other\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n                        \n                            \n                                 Undefined\n                            \n                        \n                        \n                            \n                                Value : undefined\n                            \n                        \n            \n        \n\n    src/constants/notification-preference.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NotificationPreference\n                    \n                \n                        \n                            \n                                 All\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n                        \n                            \n                                 SelectedGroup\n                            \n                        \n                        \n                            \n                                Value : selectedGroup\n                            \n                        \n                        \n                            \n                                 Broadcast\n                            \n                        \n                        \n                            \n                                Value : broadcast\n                            \n                        \n            \n        \n\n    src/constants/notification-target-group.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NotificationTargetGroup\n                    \n                \n                        \n                            \n                                 All\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n                        \n                            \n                                 SingleUser\n                            \n                        \n                        \n                            \n                                Value : singleUser\n                            \n                        \n                        \n                            \n                                 Influencers\n                            \n                        \n                        \n                            \n                                Value : influencers\n                            \n                        \n                        \n                            \n                                 Celebrity\n                            \n                        \n                        \n                            \n                                Value : celebrity\n                            \n                        \n            \n        \n\n    src/constants/order.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Order\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/constants/report-reason.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ReportReason\n                    \n                \n                        \n                            \n                                 Spam\n                            \n                        \n                        \n                            \n                                Value : spam\n                            \n                        \n                        \n                            \n                                 Inappropriate\n                            \n                        \n                        \n                            \n                                Value : inappropriate\n                            \n                        \n                        \n                            \n                                 BullyingOrHarrassement\n                            \n                        \n                        \n                            \n                                Value : bullying or harrassement\n                            \n                        \n            \n        \n\n    src/constants/report-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ReportStatus\n                    \n                \n                        \n                            \n                                 Accepted\n                            \n                        \n                        \n                            \n                                Value : accepted\n                            \n                        \n                        \n                            \n                                 Rejected\n                            \n                        \n                        \n                            \n                                Value : rejected\n                            \n                        \n                        \n                            \n                                 PendingReview\n                            \n                        \n                        \n                            \n                                Value : pending review\n                            \n                        \n            \n        \n\n    src/constants/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 Standard\n                            \n                        \n                        \n                            \n                                Value : standard\n                            \n                        \n                        \n                            \n                                 Celebrity\n                            \n                        \n                        \n                            \n                                Value : celebrity\n                            \n                        \n                        \n                            \n                                 Influencer\n                            \n                        \n                        \n                            \n                                Value : influencer\n                            \n                        \n                        \n                            \n                                 Professional\n                            \n                        \n                        \n                            \n                                Value : professional\n                            \n                        \n            \n        \n\n    src/constants/subscription-plan.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        SubscriptionPlan\n                    \n                \n                        \n                            \n                                 Basic\n                            \n                        \n                        \n                            \n                                Value : Basic\n                            \n                        \n                        \n                            \n                                 Premium\n                            \n                        \n                        \n                            \n                                Value : Premium\n                            \n                        \n            \n        \n\n    src/constants/visibility.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Visibility\n                    \n                \n                        \n                            \n                                 Public\n                            \n                        \n                        \n                            \n                                Value : public\n                            \n                        \n                        \n                            \n                                 Private\n                            \n                        \n                        \n                            \n                                Value : private\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nRunning The Server\nPrerequisites\n\nMySQL Server with a database named Atlas\nDefine the env variables\nRunning the migrations to create the database\n\nEnv Variables\nThe list of Envs:\n\nDatabase Host\nDatabase Name\nDatabse Username\nDatabse Password\nSecret\nSession Driver\nFirebase Type\nFirebase Project ID\nFirebase Bucket ID\nFirebase Private Key\nStripe Test Key\nStripe Webhook Secret\n\nMigrations Run\nnpm run typeorm:run-migrations\nNormal Mode\nnpm run start\nDeveloper Mode\nnpm run start:dev\nUsed Repo Template\nhttps://github.com/NarHakobyan/awesome-nest-boilerplate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AnalyticsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppealsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BlockModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FeedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FollowModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReportModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AnalyticsModule\n\n\n\ncluster_AnalyticsModule_providers\n\n\n\ncluster_AppealsModule\n\n\n\ncluster_AppealsModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BlockModule\n\n\n\ncluster_BlockModule_providers\n\n\n\ncluster_FeedModule\n\n\n\ncluster_FeedModule_providers\n\n\n\ncluster_FollowModule\n\n\n\ncluster_FollowModule_providers\n\n\n\ncluster_NotificationModule\n\n\n\ncluster_NotificationModule_exports\n\n\n\ncluster_NotificationModule_providers\n\n\n\ncluster_PaymentModule\n\n\n\ncluster_PaymentModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_exports\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_ReportModule\n\n\n\ncluster_ReportModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAnalyticsService\n\nAnalyticsService\n\n\n\nAnalyticsModule\n\nAnalyticsModule\n\nAnalyticsModule -->\n\nAnalyticsService->AnalyticsModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnalyticsModule->AppModule\n\n\n\n\n\nAppealsService\n\nAppealsService\n\n\n\nAppealsModule\n\nAppealsModule\n\nAppealsModule -->\n\nAppealsService->AppealsModule\n\n\n\nAppModule -->\n\nAppealsModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nBlockModule\n\nBlockModule\n\nAppModule -->\n\nBlockModule->AppModule\n\n\n\n\n\nFeedModule\n\nFeedModule\n\nAppModule -->\n\nFeedModule->AppModule\n\n\n\n\n\nFollowModule\n\nFollowModule\n\nAppModule -->\n\nFollowModule->AppModule\n\n\n\n\n\nNotificationModule\n\nNotificationModule\n\n\n\nPaymentModule\n\nPaymentModule\n\nPaymentModule -->\n\nNotificationModule->PaymentModule\n\n\n\nAppModule -->\n\nNotificationModule->AppModule\n\n\n\n\n\nNotificationService \n\nNotificationService \n\nNotificationService  -->\n\nNotificationModule->NotificationService \n\n\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nPostService \n\nPostService \n\nPostService  -->\n\nPostModule->PostService \n\n\n\n\n\nReportModule\n\nReportModule\n\nAppModule -->\n\nReportModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\nAppModule -->\n\nLocalStrategy->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nBlockService\n\nBlockService\n\nBlockModule -->\n\nBlockService->BlockModule\n\n\n\n\n\nFeedService\n\nFeedService\n\nFeedModule -->\n\nFeedService->FeedModule\n\n\n\n\n\nFollowService\n\nFollowService\n\nFollowModule -->\n\nFollowService->FollowModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nNotificationModule -->\n\nNotificationService->NotificationModule\n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nReportService\n\nReportService\n\nReportModule -->\n\nReportService->ReportModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        13 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    20 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    50 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bucket   (src/.../firebase-admin.service.ts)\n                        \n                        \n                            configService   (typeOrm.config.ts)\n                        \n                        \n                            firebaseConfig   (src/.../firebase-admin.service.ts)\n                        \n                        \n                            jwtConfig   (src/.../constants.ts)\n                        \n                        \n                            messaging   (src/.../firebase-admin.service.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            serviceAccount   (src/.../firebase-admin.service.ts)\n                        \n                        \n                            storage   (src/.../firebase-admin.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/services/firebase-admin.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bucket\n                        \n                    \n                \n            \n                \n                    \n                        Default value : getStorage().bucket()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firebaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  credential: credential.cert(serviceAccount),\n  storageBucket: 'atlas-6183a.appspot.com'\n}\n                    \n                \n\n            \n                \n                    This is the firebase config for the firebase project\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messaging\n                        \n                    \n                \n            \n                \n                    \n                        Default value : getMessaging()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serviceAccount\n                        \n                    \n                \n            \n                \n                    \n                        Default value : JSON.parse(process.env?.FIREBASE_PRIVATE_KEY)\n                    \n                \n\n            \n                \n                    This is the service account key for the firebase project\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : getStorage()\n                    \n                \n\n            \n                \n                    Export the firebase admin storage and messaging\n\n                \n            \n\n        \n    \n\n    typeOrm.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ConfigService()\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env?.SECRET,\n  signOptions: { expiresIn: '2h' }\n}\n                    \n                \n\n\n        \n    \n\n    src/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
